import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toCommandProperties = exports.toCommandValue = undefined;
  function toCommandValue(input) {
    if (input === null || input === undefined) {
      return "";
    } else if (typeof input === "string" || input instanceof String) {
      return input;
    }
    return JSON.stringify(input);
  }
  exports.toCommandValue = toCommandValue;
  function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
      return {};
    }
    return {
      title: annotationProperties.title,
      file: annotationProperties.file,
      line: annotationProperties.startLine,
      endLine: annotationProperties.endLine,
      col: annotationProperties.startColumn,
      endColumn: annotationProperties.endColumn
    };
  }
  exports.toCommandProperties = toCommandProperties;
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.issue = exports.issueCommand = undefined;
  var os = __importStar(__require("os"));
  var utils_1 = require_utils();
  function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
  }
  exports.issueCommand = issueCommand;
  function issue(name, message = "") {
    issueCommand(name, {}, message);
  }
  exports.issue = issue;
  var CMD_STRING = "::";

  class Command {
    constructor(command, properties, message) {
      if (!command) {
        command = "missing.command";
      }
      this.command = command;
      this.properties = properties;
      this.message = message;
    }
    toString() {
      let cmdStr = CMD_STRING + this.command;
      if (this.properties && Object.keys(this.properties).length > 0) {
        cmdStr += " ";
        let first = true;
        for (const key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            const val = this.properties[key];
            if (val) {
              if (first) {
                first = false;
              } else {
                cmdStr += ",";
              }
              cmdStr += `${key}=${escapeProperty(val)}`;
            }
          }
        }
      }
      cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
      return cmdStr;
    }
  }
  function escapeData(s) {
    return (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
  }
  function escapeProperty(s) {
    return (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.prepareKeyValueMessage = exports.issueFileCommand = undefined;
  var crypto2 = __importStar(__require("crypto"));
  var fs = __importStar(__require("fs"));
  var os = __importStar(__require("os"));
  var utils_1 = require_utils();
  function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
      throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
      throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
      encoding: "utf8"
    });
  }
  exports.issueFileCommand = issueFileCommand;
  function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${crypto2.randomUUID()}`;
    const convertedValue = (0, utils_1.toCommandValue)(value);
    if (key.includes(delimiter)) {
      throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
      throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
  }
  exports.prepareKeyValueMessage = prepareKeyValueMessage;
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkBypass = exports.getProxyUrl = undefined;
  function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === "https:";
    if (checkBypass(reqUrl)) {
      return;
    }
    const proxyVar = (() => {
      if (usingSsl) {
        return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
      } else {
        return process.env["http_proxy"] || process.env["HTTP_PROXY"];
      }
    })();
    if (proxyVar) {
      try {
        return new DecodedURL(proxyVar);
      } catch (_a) {
        if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
          return new DecodedURL(`http://${proxyVar}`);
      }
    } else {
      return;
    }
  }
  exports.getProxyUrl = getProxyUrl;
  function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
      return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
      return true;
    }
    const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
    if (!noProxy) {
      return false;
    }
    let reqPort;
    if (reqUrl.port) {
      reqPort = Number(reqUrl.port);
    } else if (reqUrl.protocol === "http:") {
      reqPort = 80;
    } else if (reqUrl.protocol === "https:") {
      reqPort = 443;
    }
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === "number") {
      upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
      if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
        return true;
      }
    }
    return false;
  }
  exports.checkBypass = checkBypass;
  function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
  }

  class DecodedURL extends URL {
    constructor(url, base) {
      super(url, base);
      this._decodedUsername = decodeURIComponent(super.username);
      this._decodedPassword = decodeURIComponent(super.password);
    }
    get username() {
      return this._decodedUsername;
    }
    get password() {
      return this._decodedPassword;
    }
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS((exports) => {
  var net = __require("net");
  var tls = __require("tls");
  var http = __require("http");
  var https = __require("https");
  var events = __require("events");
  var assert = __require("assert");
  var util = __require("util");
  exports.httpOverHttp = httpOverHttp;
  exports.httpsOverHttp = httpsOverHttp;
  exports.httpOverHttps = httpOverHttps;
  exports.httpsOverHttps = httpsOverHttps;
  function httpOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    return agent;
  }
  function httpsOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function httpOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    return agent;
  }
  function httpsOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function TunnelingAgent(options) {
    var self2 = this;
    self2.options = options || {};
    self2.proxyOptions = self2.options.proxy || {};
    self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
    self2.requests = [];
    self2.sockets = [];
    self2.on("free", function onFree(socket, host, port, localAddress) {
      var options2 = toOptions(host, port, localAddress);
      for (var i = 0, len = self2.requests.length;i < len; ++i) {
        var pending = self2.requests[i];
        if (pending.host === options2.host && pending.port === options2.port) {
          self2.requests.splice(i, 1);
          pending.request.onSocket(socket);
          return;
        }
      }
      socket.destroy();
      self2.removeSocket(socket);
    });
  }
  util.inherits(TunnelingAgent, events.EventEmitter);
  TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
    var self2 = this;
    var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
    if (self2.sockets.length >= this.maxSockets) {
      self2.requests.push(options);
      return;
    }
    self2.createSocket(options, function(socket) {
      socket.on("free", onFree);
      socket.on("close", onCloseOrRemove);
      socket.on("agentRemove", onCloseOrRemove);
      req.onSocket(socket);
      function onFree() {
        self2.emit("free", socket, options);
      }
      function onCloseOrRemove(err) {
        self2.removeSocket(socket);
        socket.removeListener("free", onFree);
        socket.removeListener("close", onCloseOrRemove);
        socket.removeListener("agentRemove", onCloseOrRemove);
      }
    });
  };
  TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self2 = this;
    var placeholder = {};
    self2.sockets.push(placeholder);
    var connectOptions = mergeOptions({}, self2.proxyOptions, {
      method: "CONNECT",
      path: options.host + ":" + options.port,
      agent: false,
      headers: {
        host: options.host + ":" + options.port
      }
    });
    if (options.localAddress) {
      connectOptions.localAddress = options.localAddress;
    }
    if (connectOptions.proxyAuth) {
      connectOptions.headers = connectOptions.headers || {};
      connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
    }
    debug("making CONNECT request");
    var connectReq = self2.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false;
    connectReq.once("response", onResponse);
    connectReq.once("upgrade", onUpgrade);
    connectReq.once("connect", onConnect);
    connectReq.once("error", onError);
    connectReq.end();
    function onResponse(res) {
      res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
      process.nextTick(function() {
        onConnect(res, socket, head);
      });
    }
    function onConnect(res, socket, head) {
      connectReq.removeAllListeners();
      socket.removeAllListeners();
      if (res.statusCode !== 200) {
        debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
        socket.destroy();
        var error = new Error("tunneling socket could not be established, " + "statusCode=" + res.statusCode);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
        return;
      }
      if (head.length > 0) {
        debug("got illegal response body from proxy");
        socket.destroy();
        var error = new Error("got illegal response body from proxy");
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
        return;
      }
      debug("tunneling connection has established");
      self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
      return cb(socket);
    }
    function onError(cause) {
      connectReq.removeAllListeners();
      debug(`tunneling socket could not be established, cause=%s
`, cause.message, cause.stack);
      var error = new Error("tunneling socket could not be established, " + "cause=" + cause.message);
      error.code = "ECONNRESET";
      options.request.emit("error", error);
      self2.removeSocket(placeholder);
    }
  };
  TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) {
      return;
    }
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) {
      this.createSocket(pending, function(socket2) {
        pending.request.onSocket(socket2);
      });
    }
  };
  function createSecureSocket(options, cb) {
    var self2 = this;
    TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
      var hostHeader = options.request.getHeader("host");
      var tlsOptions = mergeOptions({}, self2.options, {
        socket,
        servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
      });
      var secureSocket = tls.connect(0, tlsOptions);
      self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
      cb(secureSocket);
    });
  }
  function toOptions(host, port, localAddress) {
    if (typeof host === "string") {
      return {
        host,
        port,
        localAddress
      };
    }
    return host;
  }
  function mergeOptions(target) {
    for (var i = 1, len = arguments.length;i < len; ++i) {
      var overrides = arguments[i];
      if (typeof overrides === "object") {
        var keys = Object.keys(overrides);
        for (var j = 0, keyLen = keys.length;j < keyLen; ++j) {
          var k = keys[j];
          if (overrides[k] !== undefined) {
            target[k] = overrides[k];
          }
        }
      }
    }
    return target;
  }
  var debug;
  if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
    debug = function() {
      var args = Array.prototype.slice.call(arguments);
      if (typeof args[0] === "string") {
        args[0] = "TUNNEL: " + args[0];
      } else {
        args.unshift("TUNNEL:");
      }
      console.error.apply(console, args);
    };
  } else {
    debug = function() {};
  }
  exports.debug = debug;
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS((exports, module) => {
  module.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kHeadersList: Symbol("headers list"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kInterceptors: Symbol("dispatch interceptors"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kHTTP2BuildRequest: Symbol("http2 build request"),
    kHTTP1BuildRequest: Symbol("http1 build request"),
    kHTTP2CopyHeaders: Symbol("http2 copy headers"),
    kHTTPConnVersion: Symbol("http connection version"),
    kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
    kConstruct: Symbol("constructable")
  };
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS((exports, module) => {
  class UndiciError extends Error {
    constructor(message) {
      super(message);
      this.name = "UndiciError";
      this.code = "UND_ERR";
    }
  }

  class ConnectTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ConnectTimeoutError);
      this.name = "ConnectTimeoutError";
      this.message = message || "Connect Timeout Error";
      this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
  }

  class HeadersTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersTimeoutError);
      this.name = "HeadersTimeoutError";
      this.message = message || "Headers Timeout Error";
      this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
  }

  class HeadersOverflowError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersOverflowError);
      this.name = "HeadersOverflowError";
      this.message = message || "Headers Overflow Error";
      this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
  }

  class BodyTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, BodyTimeoutError);
      this.name = "BodyTimeoutError";
      this.message = message || "Body Timeout Error";
      this.code = "UND_ERR_BODY_TIMEOUT";
    }
  }

  class ResponseStatusCodeError extends UndiciError {
    constructor(message, statusCode, headers, body) {
      super(message);
      Error.captureStackTrace(this, ResponseStatusCodeError);
      this.name = "ResponseStatusCodeError";
      this.message = message || "Response Status Code Error";
      this.code = "UND_ERR_RESPONSE_STATUS_CODE";
      this.body = body;
      this.status = statusCode;
      this.statusCode = statusCode;
      this.headers = headers;
    }
  }

  class InvalidArgumentError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidArgumentError);
      this.name = "InvalidArgumentError";
      this.message = message || "Invalid Argument Error";
      this.code = "UND_ERR_INVALID_ARG";
    }
  }

  class InvalidReturnValueError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidReturnValueError);
      this.name = "InvalidReturnValueError";
      this.message = message || "Invalid Return Value Error";
      this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
  }

  class RequestAbortedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestAbortedError);
      this.name = "AbortError";
      this.message = message || "Request aborted";
      this.code = "UND_ERR_ABORTED";
    }
  }

  class InformationalError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InformationalError);
      this.name = "InformationalError";
      this.message = message || "Request information";
      this.code = "UND_ERR_INFO";
    }
  }

  class RequestContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestContentLengthMismatchError);
      this.name = "RequestContentLengthMismatchError";
      this.message = message || "Request body length does not match content-length header";
      this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ResponseContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ResponseContentLengthMismatchError);
      this.name = "ResponseContentLengthMismatchError";
      this.message = message || "Response body length does not match content-length header";
      this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ClientDestroyedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientDestroyedError);
      this.name = "ClientDestroyedError";
      this.message = message || "The client is destroyed";
      this.code = "UND_ERR_DESTROYED";
    }
  }

  class ClientClosedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientClosedError);
      this.name = "ClientClosedError";
      this.message = message || "The client is closed";
      this.code = "UND_ERR_CLOSED";
    }
  }

  class SocketError extends UndiciError {
    constructor(message, socket) {
      super(message);
      Error.captureStackTrace(this, SocketError);
      this.name = "SocketError";
      this.message = message || "Socket error";
      this.code = "UND_ERR_SOCKET";
      this.socket = socket;
    }
  }

  class NotSupportedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "NotSupportedError";
      this.message = message || "Not supported error";
      this.code = "UND_ERR_NOT_SUPPORTED";
    }
  }

  class BalancedPoolMissingUpstreamError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "MissingUpstreamError";
      this.message = message || "No upstream has been added to the BalancedPool";
      this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
    }
  }

  class HTTPParserError extends Error {
    constructor(message, code, data) {
      super(message);
      Error.captureStackTrace(this, HTTPParserError);
      this.name = "HTTPParserError";
      this.code = code ? `HPE_${code}` : undefined;
      this.data = data ? data.toString() : undefined;
    }
  }

  class ResponseExceededMaxSizeError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ResponseExceededMaxSizeError);
      this.name = "ResponseExceededMaxSizeError";
      this.message = message || "Response content exceeded max size";
      this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
  }

  class RequestRetryError extends UndiciError {
    constructor(message, code, { headers, data }) {
      super(message);
      Error.captureStackTrace(this, RequestRetryError);
      this.name = "RequestRetryError";
      this.message = message || "Request retry error";
      this.code = "UND_ERR_REQ_RETRY";
      this.statusCode = code;
      this.data = data;
      this.headers = headers;
    }
  }
  module.exports = {
    HTTPParserError,
    UndiciError,
    HeadersTimeoutError,
    HeadersOverflowError,
    BodyTimeoutError,
    RequestContentLengthMismatchError,
    ConnectTimeoutError,
    ResponseStatusCodeError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError,
    ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError,
    RequestRetryError
  };
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS((exports, module) => {
  var headerNameLowerCasedRecord = {};
  var wellknownHeaderNames = [
    "Accept",
    "Accept-Encoding",
    "Accept-Language",
    "Accept-Ranges",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Age",
    "Allow",
    "Alt-Svc",
    "Alt-Used",
    "Authorization",
    "Cache-Control",
    "Clear-Site-Data",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Location",
    "Content-Range",
    "Content-Security-Policy",
    "Content-Security-Policy-Report-Only",
    "Content-Type",
    "Cookie",
    "Cross-Origin-Embedder-Policy",
    "Cross-Origin-Opener-Policy",
    "Cross-Origin-Resource-Policy",
    "Date",
    "Device-Memory",
    "Downlink",
    "ECT",
    "ETag",
    "Expect",
    "Expect-CT",
    "Expires",
    "Forwarded",
    "From",
    "Host",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Range",
    "If-Unmodified-Since",
    "Keep-Alive",
    "Last-Modified",
    "Link",
    "Location",
    "Max-Forwards",
    "Origin",
    "Permissions-Policy",
    "Pragma",
    "Proxy-Authenticate",
    "Proxy-Authorization",
    "RTT",
    "Range",
    "Referer",
    "Referrer-Policy",
    "Refresh",
    "Retry-After",
    "Sec-WebSocket-Accept",
    "Sec-WebSocket-Extensions",
    "Sec-WebSocket-Key",
    "Sec-WebSocket-Protocol",
    "Sec-WebSocket-Version",
    "Server",
    "Server-Timing",
    "Service-Worker-Allowed",
    "Service-Worker-Navigation-Preload",
    "Set-Cookie",
    "SourceMap",
    "Strict-Transport-Security",
    "Supports-Loading-Mode",
    "TE",
    "Timing-Allow-Origin",
    "Trailer",
    "Transfer-Encoding",
    "Upgrade",
    "Upgrade-Insecure-Requests",
    "User-Agent",
    "Vary",
    "Via",
    "WWW-Authenticate",
    "X-Content-Type-Options",
    "X-DNS-Prefetch-Control",
    "X-Frame-Options",
    "X-Permitted-Cross-Domain-Policies",
    "X-Powered-By",
    "X-Requested-With",
    "X-XSS-Protection"
  ];
  for (let i = 0;i < wellknownHeaderNames.length; ++i) {
    const key = wellknownHeaderNames[i];
    const lowerCasedKey = key.toLowerCase();
    headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
  }
  Object.setPrototypeOf(headerNameLowerCasedRecord, null);
  module.exports = {
    wellknownHeaderNames,
    headerNameLowerCasedRecord
  };
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS((exports, module) => {
  var assert = __require("assert");
  var { kDestroyed, kBodyUsed } = require_symbols();
  var { IncomingMessage } = __require("http");
  var stream = __require("stream");
  var net = __require("net");
  var { InvalidArgumentError } = require_errors();
  var { Blob: Blob2 } = __require("buffer");
  var nodeUtil = __require("util");
  var { stringify } = __require("querystring");
  var { headerNameLowerCasedRecord } = require_constants();
  var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
  function nop() {}
  function isStream(obj) {
    return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
  }
  function isBlobLike(object) {
    return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
  }
  function buildURL(url, queryParams) {
    if (url.includes("?") || url.includes("#")) {
      throw new Error('Query params cannot be passed when url already contains "?" or "#".');
    }
    const stringified = stringify(queryParams);
    if (stringified) {
      url += "?" + stringified;
    }
    return url;
  }
  function parseURL(url) {
    if (typeof url === "string") {
      url = new URL(url);
      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      return url;
    }
    if (!url || typeof url !== "object") {
      throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    }
    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    }
    if (!(url instanceof URL)) {
      if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
        throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
      }
      if (url.path != null && typeof url.path !== "string") {
        throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
      }
      if (url.pathname != null && typeof url.pathname !== "string") {
        throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
      }
      if (url.hostname != null && typeof url.hostname !== "string") {
        throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
      }
      if (url.origin != null && typeof url.origin !== "string") {
        throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
      }
      const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
      let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
      let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
      if (origin.endsWith("/")) {
        origin = origin.substring(0, origin.length - 1);
      }
      if (path && !path.startsWith("/")) {
        path = `/${path}`;
      }
      url = new URL(origin + path);
    }
    return url;
  }
  function parseOrigin(url) {
    url = parseURL(url);
    if (url.pathname !== "/" || url.search || url.hash) {
      throw new InvalidArgumentError("invalid url");
    }
    return url;
  }
  function getHostname(host) {
    if (host[0] === "[") {
      const idx2 = host.indexOf("]");
      assert(idx2 !== -1);
      return host.substring(1, idx2);
    }
    const idx = host.indexOf(":");
    if (idx === -1)
      return host;
    return host.substring(0, idx);
  }
  function getServerName(host) {
    if (!host) {
      return null;
    }
    assert.strictEqual(typeof host, "string");
    const servername = getHostname(host);
    if (net.isIP(servername)) {
      return "";
    }
    return servername;
  }
  function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  function isAsyncIterable(obj) {
    return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
  }
  function isIterable(obj) {
    return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
  }
  function bodyLength(body) {
    if (body == null) {
      return 0;
    } else if (isStream(body)) {
      const state = body._readableState;
      return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    } else if (isBlobLike(body)) {
      return body.size != null ? body.size : null;
    } else if (isBuffer(body)) {
      return body.byteLength;
    }
    return null;
  }
  function isDestroyed(stream2) {
    return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
  }
  function isReadableAborted(stream2) {
    const state = stream2 && stream2._readableState;
    return isDestroyed(stream2) && state && !state.endEmitted;
  }
  function destroy(stream2, err) {
    if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
      return;
    }
    if (typeof stream2.destroy === "function") {
      if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
        stream2.socket = null;
      }
      stream2.destroy(err);
    } else if (err) {
      process.nextTick((stream3, err2) => {
        stream3.emit("error", err2);
      }, stream2, err);
    }
    if (stream2.destroyed !== true) {
      stream2[kDestroyed] = true;
    }
  }
  var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
  function parseKeepAliveTimeout(val) {
    const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1], 10) * 1000 : null;
  }
  function headerNameToString(value) {
    return headerNameLowerCasedRecord[value] || value.toLowerCase();
  }
  function parseHeaders(headers, obj = {}) {
    if (!Array.isArray(headers))
      return headers;
    for (let i = 0;i < headers.length; i += 2) {
      const key = headers[i].toString().toLowerCase();
      let val = obj[key];
      if (!val) {
        if (Array.isArray(headers[i + 1])) {
          obj[key] = headers[i + 1].map((x) => x.toString("utf8"));
        } else {
          obj[key] = headers[i + 1].toString("utf8");
        }
      } else {
        if (!Array.isArray(val)) {
          val = [val];
          obj[key] = val;
        }
        val.push(headers[i + 1].toString("utf8"));
      }
    }
    if ("content-length" in obj && "content-disposition" in obj) {
      obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
    }
    return obj;
  }
  function parseRawHeaders(headers) {
    const ret = [];
    let hasContentLength = false;
    let contentDispositionIdx = -1;
    for (let n = 0;n < headers.length; n += 2) {
      const key = headers[n + 0].toString();
      const val = headers[n + 1].toString("utf8");
      if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
        ret.push(key, val);
        hasContentLength = true;
      } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
        contentDispositionIdx = ret.push(key, val) - 1;
      } else {
        ret.push(key, val);
      }
    }
    if (hasContentLength && contentDispositionIdx !== -1) {
      ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
    }
    return ret;
  }
  function isBuffer(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
  }
  function validateHandler(handler, method, upgrade) {
    if (!handler || typeof handler !== "object") {
      throw new InvalidArgumentError("handler must be an object");
    }
    if (typeof handler.onConnect !== "function") {
      throw new InvalidArgumentError("invalid onConnect method");
    }
    if (typeof handler.onError !== "function") {
      throw new InvalidArgumentError("invalid onError method");
    }
    if (typeof handler.onBodySent !== "function" && handler.onBodySent !== undefined) {
      throw new InvalidArgumentError("invalid onBodySent method");
    }
    if (upgrade || method === "CONNECT") {
      if (typeof handler.onUpgrade !== "function") {
        throw new InvalidArgumentError("invalid onUpgrade method");
      }
    } else {
      if (typeof handler.onHeaders !== "function") {
        throw new InvalidArgumentError("invalid onHeaders method");
      }
      if (typeof handler.onData !== "function") {
        throw new InvalidArgumentError("invalid onData method");
      }
      if (typeof handler.onComplete !== "function") {
        throw new InvalidArgumentError("invalid onComplete method");
      }
    }
  }
  function isDisturbed(body) {
    return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
  }
  function isErrored(body) {
    return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
  }
  function isReadable(body) {
    return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
  }
  function getSocketInfo(socket) {
    return {
      localAddress: socket.localAddress,
      localPort: socket.localPort,
      remoteAddress: socket.remoteAddress,
      remotePort: socket.remotePort,
      remoteFamily: socket.remoteFamily,
      timeout: socket.timeout,
      bytesWritten: socket.bytesWritten,
      bytesRead: socket.bytesRead
    };
  }
  async function* convertIterableToBuffer(iterable) {
    for await (const chunk of iterable) {
      yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
    }
  }
  var ReadableStream;
  function ReadableStreamFrom(iterable) {
    if (!ReadableStream) {
      ReadableStream = __require("stream/web").ReadableStream;
    }
    if (ReadableStream.from) {
      return ReadableStream.from(convertIterableToBuffer(iterable));
    }
    let iterator;
    return new ReadableStream({
      async start() {
        iterator = iterable[Symbol.asyncIterator]();
      },
      async pull(controller) {
        const { done, value } = await iterator.next();
        if (done) {
          queueMicrotask(() => {
            controller.close();
          });
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
          controller.enqueue(new Uint8Array(buf));
        }
        return controller.desiredSize > 0;
      },
      async cancel(reason) {
        await iterator.return();
      }
    }, 0);
  }
  function isFormDataLike(object) {
    return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
  }
  function throwIfAborted(signal) {
    if (!signal) {
      return;
    }
    if (typeof signal.throwIfAborted === "function") {
      signal.throwIfAborted();
    } else {
      if (signal.aborted) {
        const err = new Error("The operation was aborted");
        err.name = "AbortError";
        throw err;
      }
    }
  }
  function addAbortListener(signal, listener) {
    if ("addEventListener" in signal) {
      signal.addEventListener("abort", listener, { once: true });
      return () => signal.removeEventListener("abort", listener);
    }
    signal.addListener("abort", listener);
    return () => signal.removeListener("abort", listener);
  }
  var hasToWellFormed = !!String.prototype.toWellFormed;
  function toUSVString(val) {
    if (hasToWellFormed) {
      return `${val}`.toWellFormed();
    } else if (nodeUtil.toUSVString) {
      return nodeUtil.toUSVString(val);
    }
    return `${val}`;
  }
  function parseRangeHeader(range) {
    if (range == null || range === "")
      return { start: 0, end: null, size: null };
    const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
    return m ? {
      start: parseInt(m[1]),
      end: m[2] ? parseInt(m[2]) : null,
      size: m[3] ? parseInt(m[3]) : null
    } : null;
  }
  var kEnumerableProperty = Object.create(null);
  kEnumerableProperty.enumerable = true;
  module.exports = {
    kEnumerableProperty,
    nop,
    isDisturbed,
    isErrored,
    isReadable,
    toUSVString,
    isReadableAborted,
    isBlobLike,
    parseOrigin,
    parseURL,
    getServerName,
    isStream,
    isIterable,
    isAsyncIterable,
    isDestroyed,
    headerNameToString,
    parseRawHeaders,
    parseHeaders,
    parseKeepAliveTimeout,
    destroy,
    bodyLength,
    deepClone,
    ReadableStreamFrom,
    isBuffer,
    validateHandler,
    getSocketInfo,
    isFormDataLike,
    buildURL,
    throwIfAborted,
    addAbortListener,
    parseRangeHeader,
    nodeMajor,
    nodeMinor,
    nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
    safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
  };
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS((exports, module) => {
  var fastNow = Date.now();
  var fastNowTimeout;
  var fastTimers = [];
  function onTimeout() {
    fastNow = Date.now();
    let len = fastTimers.length;
    let idx = 0;
    while (idx < len) {
      const timer = fastTimers[idx];
      if (timer.state === 0) {
        timer.state = fastNow + timer.delay;
      } else if (timer.state > 0 && fastNow >= timer.state) {
        timer.state = -1;
        timer.callback(timer.opaque);
      }
      if (timer.state === -1) {
        timer.state = -2;
        if (idx !== len - 1) {
          fastTimers[idx] = fastTimers.pop();
        } else {
          fastTimers.pop();
        }
        len -= 1;
      } else {
        idx += 1;
      }
    }
    if (fastTimers.length > 0) {
      refreshTimeout();
    }
  }
  function refreshTimeout() {
    if (fastNowTimeout && fastNowTimeout.refresh) {
      fastNowTimeout.refresh();
    } else {
      clearTimeout(fastNowTimeout);
      fastNowTimeout = setTimeout(onTimeout, 1000);
      if (fastNowTimeout.unref) {
        fastNowTimeout.unref();
      }
    }
  }

  class Timeout {
    constructor(callback, delay, opaque) {
      this.callback = callback;
      this.delay = delay;
      this.opaque = opaque;
      this.state = -2;
      this.refresh();
    }
    refresh() {
      if (this.state === -2) {
        fastTimers.push(this);
        if (!fastNowTimeout || fastTimers.length === 1) {
          refreshTimeout();
        }
      }
      this.state = 0;
    }
    clear() {
      this.state = -1;
    }
  }
  module.exports = {
    setTimeout(callback, delay, opaque) {
      return delay < 1000 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
    },
    clearTimeout(timeout) {
      if (timeout instanceof Timeout) {
        timeout.clear();
      } else {
        clearTimeout(timeout);
      }
    }
  };
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS((exports, module) => {
  var EventEmitter = __require("node:events").EventEmitter;
  var inherits = __require("node:util").inherits;
  function SBMH(needle) {
    if (typeof needle === "string") {
      needle = Buffer.from(needle);
    }
    if (!Buffer.isBuffer(needle)) {
      throw new TypeError("The needle has to be a String or a Buffer.");
    }
    const needleLength = needle.length;
    if (needleLength === 0) {
      throw new Error("The needle cannot be an empty String/Buffer.");
    }
    if (needleLength > 256) {
      throw new Error("The needle cannot have a length bigger than 256.");
    }
    this.maxMatches = Infinity;
    this.matches = 0;
    this._occ = new Array(256).fill(needleLength);
    this._lookbehind_size = 0;
    this._needle = needle;
    this._bufpos = 0;
    this._lookbehind = Buffer.alloc(needleLength);
    for (var i = 0;i < needleLength - 1; ++i) {
      this._occ[needle[i]] = needleLength - 1 - i;
    }
  }
  inherits(SBMH, EventEmitter);
  SBMH.prototype.reset = function() {
    this._lookbehind_size = 0;
    this.matches = 0;
    this._bufpos = 0;
  };
  SBMH.prototype.push = function(chunk, pos) {
    if (!Buffer.isBuffer(chunk)) {
      chunk = Buffer.from(chunk, "binary");
    }
    const chlen = chunk.length;
    this._bufpos = pos || 0;
    let r;
    while (r !== chlen && this.matches < this.maxMatches) {
      r = this._sbmh_feed(chunk);
    }
    return r;
  };
  SBMH.prototype._sbmh_feed = function(data) {
    const len = data.length;
    const needle = this._needle;
    const needleLength = needle.length;
    const lastNeedleChar = needle[needleLength - 1];
    let pos = -this._lookbehind_size;
    let ch;
    if (pos < 0) {
      while (pos < 0 && pos <= len - needleLength) {
        ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
        if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
          this._lookbehind_size = 0;
          ++this.matches;
          this.emit("info", true);
          return this._bufpos = pos + needleLength;
        }
        pos += this._occ[ch];
      }
      if (pos < 0) {
        while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
          ++pos;
        }
      }
      if (pos >= 0) {
        this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
        this._lookbehind_size = 0;
      } else {
        const bytesToCutOff = this._lookbehind_size + pos;
        if (bytesToCutOff > 0) {
          this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
        }
        this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
        this._lookbehind_size -= bytesToCutOff;
        data.copy(this._lookbehind, this._lookbehind_size);
        this._lookbehind_size += len;
        this._bufpos = len;
        return len;
      }
    }
    pos += (pos >= 0) * this._bufpos;
    if (data.indexOf(needle, pos) !== -1) {
      pos = data.indexOf(needle, pos);
      ++this.matches;
      if (pos > 0) {
        this.emit("info", true, data, this._bufpos, pos);
      } else {
        this.emit("info", true);
      }
      return this._bufpos = pos + needleLength;
    } else {
      pos = len - needleLength;
    }
    while (pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) {
      ++pos;
    }
    if (pos < len) {
      data.copy(this._lookbehind, 0, pos, pos + (len - pos));
      this._lookbehind_size = len - pos;
    }
    if (pos > 0) {
      this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
    }
    this._bufpos = len;
    return len;
  };
  SBMH.prototype._sbmh_lookup_char = function(data, pos) {
    return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
  };
  SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
    for (var i = 0;i < len; ++i) {
      if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
        return false;
      }
    }
    return true;
  };
  module.exports = SBMH;
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS((exports, module) => {
  var inherits = __require("node:util").inherits;
  var ReadableStream = __require("node:stream").Readable;
  function PartStream(opts) {
    ReadableStream.call(this, opts);
  }
  inherits(PartStream, ReadableStream);
  PartStream.prototype._read = function(n) {};
  module.exports = PartStream;
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS((exports, module) => {
  module.exports = function getLimit(limits, name, defaultLimit) {
    if (!limits || limits[name] === undefined || limits[name] === null) {
      return defaultLimit;
    }
    if (typeof limits[name] !== "number" || isNaN(limits[name])) {
      throw new TypeError("Limit " + name + " is not a valid number");
    }
    return limits[name];
  };
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS((exports, module) => {
  var EventEmitter = __require("node:events").EventEmitter;
  var inherits = __require("node:util").inherits;
  var getLimit = require_getLimit();
  var StreamSearch = require_sbmh();
  var B_DCRLF = Buffer.from(`\r
\r
`);
  var RE_CRLF = /\r\n/g;
  var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
  function HeaderParser(cfg) {
    EventEmitter.call(this);
    cfg = cfg || {};
    const self2 = this;
    this.nread = 0;
    this.maxed = false;
    this.npairs = 0;
    this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2000);
    this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
    this.buffer = "";
    this.header = {};
    this.finished = false;
    this.ss = new StreamSearch(B_DCRLF);
    this.ss.on("info", function(isMatch, data, start, end) {
      if (data && !self2.maxed) {
        if (self2.nread + end - start >= self2.maxHeaderSize) {
          end = self2.maxHeaderSize - self2.nread + start;
          self2.nread = self2.maxHeaderSize;
          self2.maxed = true;
        } else {
          self2.nread += end - start;
        }
        self2.buffer += data.toString("binary", start, end);
      }
      if (isMatch) {
        self2._finish();
      }
    });
  }
  inherits(HeaderParser, EventEmitter);
  HeaderParser.prototype.push = function(data) {
    const r = this.ss.push(data);
    if (this.finished) {
      return r;
    }
  };
  HeaderParser.prototype.reset = function() {
    this.finished = false;
    this.buffer = "";
    this.header = {};
    this.ss.reset();
  };
  HeaderParser.prototype._finish = function() {
    if (this.buffer) {
      this._parseHeader();
    }
    this.ss.matches = this.ss.maxMatches;
    const header = this.header;
    this.header = {};
    this.buffer = "";
    this.finished = true;
    this.nread = this.npairs = 0;
    this.maxed = false;
    this.emit("header", header);
  };
  HeaderParser.prototype._parseHeader = function() {
    if (this.npairs === this.maxHeaderPairs) {
      return;
    }
    const lines = this.buffer.split(RE_CRLF);
    const len = lines.length;
    let m, h;
    for (var i = 0;i < len; ++i) {
      if (lines[i].length === 0) {
        continue;
      }
      if (lines[i][0] === "\t" || lines[i][0] === " ") {
        if (h) {
          this.header[h][this.header[h].length - 1] += lines[i];
          continue;
        }
      }
      const posColon = lines[i].indexOf(":");
      if (posColon === -1 || posColon === 0) {
        return;
      }
      m = RE_HDR.exec(lines[i]);
      h = m[1].toLowerCase();
      this.header[h] = this.header[h] || [];
      this.header[h].push(m[2] || "");
      if (++this.npairs === this.maxHeaderPairs) {
        break;
      }
    }
  };
  module.exports = HeaderParser;
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS((exports, module) => {
  var WritableStream = __require("node:stream").Writable;
  var inherits = __require("node:util").inherits;
  var StreamSearch = require_sbmh();
  var PartStream = require_PartStream();
  var HeaderParser = require_HeaderParser();
  var DASH = 45;
  var B_ONEDASH = Buffer.from("-");
  var B_CRLF = Buffer.from(`\r
`);
  var EMPTY_FN = function() {};
  function Dicer(cfg) {
    if (!(this instanceof Dicer)) {
      return new Dicer(cfg);
    }
    WritableStream.call(this, cfg);
    if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
      throw new TypeError("Boundary required");
    }
    if (typeof cfg.boundary === "string") {
      this.setBoundary(cfg.boundary);
    } else {
      this._bparser = undefined;
    }
    this._headerFirst = cfg.headerFirst;
    this._dashes = 0;
    this._parts = 0;
    this._finished = false;
    this._realFinish = false;
    this._isPreamble = true;
    this._justMatched = false;
    this._firstWrite = true;
    this._inHeader = true;
    this._part = undefined;
    this._cb = undefined;
    this._ignoreData = false;
    this._partOpts = { highWaterMark: cfg.partHwm };
    this._pause = false;
    const self2 = this;
    this._hparser = new HeaderParser(cfg);
    this._hparser.on("header", function(header) {
      self2._inHeader = false;
      self2._part.emit("header", header);
    });
  }
  inherits(Dicer, WritableStream);
  Dicer.prototype.emit = function(ev) {
    if (ev === "finish" && !this._realFinish) {
      if (!this._finished) {
        const self2 = this;
        process.nextTick(function() {
          self2.emit("error", new Error("Unexpected end of multipart data"));
          if (self2._part && !self2._ignoreData) {
            const type = self2._isPreamble ? "Preamble" : "Part";
            self2._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
            self2._part.push(null);
            process.nextTick(function() {
              self2._realFinish = true;
              self2.emit("finish");
              self2._realFinish = false;
            });
            return;
          }
          self2._realFinish = true;
          self2.emit("finish");
          self2._realFinish = false;
        });
      }
    } else {
      WritableStream.prototype.emit.apply(this, arguments);
    }
  };
  Dicer.prototype._write = function(data, encoding, cb) {
    if (!this._hparser && !this._bparser) {
      return cb();
    }
    if (this._headerFirst && this._isPreamble) {
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        if (this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else {
          this._ignore();
        }
      }
      const r = this._hparser.push(data);
      if (!this._inHeader && r !== undefined && r < data.length) {
        data = data.slice(r);
      } else {
        return cb();
      }
    }
    if (this._firstWrite) {
      this._bparser.push(B_CRLF);
      this._firstWrite = false;
    }
    this._bparser.push(data);
    if (this._pause) {
      this._cb = cb;
    } else {
      cb();
    }
  };
  Dicer.prototype.reset = function() {
    this._part = undefined;
    this._bparser = undefined;
    this._hparser = undefined;
  };
  Dicer.prototype.setBoundary = function(boundary) {
    const self2 = this;
    this._bparser = new StreamSearch(`\r
--` + boundary);
    this._bparser.on("info", function(isMatch, data, start, end) {
      self2._oninfo(isMatch, data, start, end);
    });
  };
  Dicer.prototype._ignore = function() {
    if (this._part && !this._ignoreData) {
      this._ignoreData = true;
      this._part.on("error", EMPTY_FN);
      this._part.resume();
    }
  };
  Dicer.prototype._oninfo = function(isMatch, data, start, end) {
    let buf;
    const self2 = this;
    let i = 0;
    let r;
    let shouldWriteMore = true;
    if (!this._part && this._justMatched && data) {
      while (this._dashes < 2 && start + i < end) {
        if (data[start + i] === DASH) {
          ++i;
          ++this._dashes;
        } else {
          if (this._dashes) {
            buf = B_ONEDASH;
          }
          this._dashes = 0;
          break;
        }
      }
      if (this._dashes === 2) {
        if (start + i < end && this.listenerCount("trailer") !== 0) {
          this.emit("trailer", data.slice(start + i, end));
        }
        this.reset();
        this._finished = true;
        if (self2._parts === 0) {
          self2._realFinish = true;
          self2.emit("finish");
          self2._realFinish = false;
        }
      }
      if (this._dashes) {
        return;
      }
    }
    if (this._justMatched) {
      this._justMatched = false;
    }
    if (!this._part) {
      this._part = new PartStream(this._partOpts);
      this._part._read = function(n) {
        self2._unpause();
      };
      if (this._isPreamble && this.listenerCount("preamble") !== 0) {
        this.emit("preamble", this._part);
      } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
        this.emit("part", this._part);
      } else {
        this._ignore();
      }
      if (!this._isPreamble) {
        this._inHeader = true;
      }
    }
    if (data && start < end && !this._ignoreData) {
      if (this._isPreamble || !this._inHeader) {
        if (buf) {
          shouldWriteMore = this._part.push(buf);
        }
        shouldWriteMore = this._part.push(data.slice(start, end));
        if (!shouldWriteMore) {
          this._pause = true;
        }
      } else if (!this._isPreamble && this._inHeader) {
        if (buf) {
          this._hparser.push(buf);
        }
        r = this._hparser.push(data.slice(start, end));
        if (!this._inHeader && r !== undefined && r < end) {
          this._oninfo(false, data, start + r, end);
        }
      }
    }
    if (isMatch) {
      this._hparser.reset();
      if (this._isPreamble) {
        this._isPreamble = false;
      } else {
        if (start !== end) {
          ++this._parts;
          this._part.on("end", function() {
            if (--self2._parts === 0) {
              if (self2._finished) {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              } else {
                self2._unpause();
              }
            }
          });
        }
      }
      this._part.push(null);
      this._part = undefined;
      this._ignoreData = false;
      this._justMatched = true;
      this._dashes = 0;
    }
  };
  Dicer.prototype._unpause = function() {
    if (!this._pause) {
      return;
    }
    this._pause = false;
    if (this._cb) {
      const cb = this._cb;
      this._cb = undefined;
      cb();
    }
  };
  module.exports = Dicer;
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS((exports, module) => {
  var utf8Decoder = new TextDecoder("utf-8");
  var textDecoders = new Map([
    ["utf-8", utf8Decoder],
    ["utf8", utf8Decoder]
  ]);
  function getDecoder(charset) {
    let lc;
    while (true) {
      switch (charset) {
        case "utf-8":
        case "utf8":
          return decoders.utf8;
        case "latin1":
        case "ascii":
        case "us-ascii":
        case "iso-8859-1":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "windows-1252":
        case "iso_8859-1:1987":
        case "cp1252":
        case "x-cp1252":
          return decoders.latin1;
        case "utf16le":
        case "utf-16le":
        case "ucs2":
        case "ucs-2":
          return decoders.utf16le;
        case "base64":
          return decoders.base64;
        default:
          if (lc === undefined) {
            lc = true;
            charset = charset.toLowerCase();
            continue;
          }
          return decoders.other.bind(charset);
      }
    }
  }
  var decoders = {
    utf8: (data, sourceEncoding) => {
      if (data.length === 0) {
        return "";
      }
      if (typeof data === "string") {
        data = Buffer.from(data, sourceEncoding);
      }
      return data.utf8Slice(0, data.length);
    },
    latin1: (data, sourceEncoding) => {
      if (data.length === 0) {
        return "";
      }
      if (typeof data === "string") {
        return data;
      }
      return data.latin1Slice(0, data.length);
    },
    utf16le: (data, sourceEncoding) => {
      if (data.length === 0) {
        return "";
      }
      if (typeof data === "string") {
        data = Buffer.from(data, sourceEncoding);
      }
      return data.ucs2Slice(0, data.length);
    },
    base64: (data, sourceEncoding) => {
      if (data.length === 0) {
        return "";
      }
      if (typeof data === "string") {
        data = Buffer.from(data, sourceEncoding);
      }
      return data.base64Slice(0, data.length);
    },
    other: (data, sourceEncoding) => {
      if (data.length === 0) {
        return "";
      }
      if (typeof data === "string") {
        data = Buffer.from(data, sourceEncoding);
      }
      if (textDecoders.has(exports.toString())) {
        try {
          return textDecoders.get(exports).decode(data);
        } catch {}
      }
      return typeof data === "string" ? data : data.toString();
    }
  };
  function decodeText(text, sourceEncoding, destEncoding) {
    if (text) {
      return getDecoder(destEncoding)(text, sourceEncoding);
    }
    return text;
  }
  module.exports = decodeText;
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS((exports, module) => {
  var decodeText = require_decodeText();
  var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
  var EncodedLookup = {
    "%00": "\x00",
    "%01": "\x01",
    "%02": "\x02",
    "%03": "\x03",
    "%04": "\x04",
    "%05": "\x05",
    "%06": "\x06",
    "%07": "\x07",
    "%08": "\b",
    "%09": "\t",
    "%0a": `
`,
    "%0A": `
`,
    "%0b": "\v",
    "%0B": "\v",
    "%0c": "\f",
    "%0C": "\f",
    "%0d": "\r",
    "%0D": "\r",
    "%0e": "\x0E",
    "%0E": "\x0E",
    "%0f": "\x0F",
    "%0F": "\x0F",
    "%10": "\x10",
    "%11": "\x11",
    "%12": "\x12",
    "%13": "\x13",
    "%14": "\x14",
    "%15": "\x15",
    "%16": "\x16",
    "%17": "\x17",
    "%18": "\x18",
    "%19": "\x19",
    "%1a": "\x1A",
    "%1A": "\x1A",
    "%1b": "\x1B",
    "%1B": "\x1B",
    "%1c": "\x1C",
    "%1C": "\x1C",
    "%1d": "\x1D",
    "%1D": "\x1D",
    "%1e": "\x1E",
    "%1E": "\x1E",
    "%1f": "\x1F",
    "%1F": "\x1F",
    "%20": " ",
    "%21": "!",
    "%22": '"',
    "%23": "#",
    "%24": "$",
    "%25": "%",
    "%26": "&",
    "%27": "'",
    "%28": "(",
    "%29": ")",
    "%2a": "*",
    "%2A": "*",
    "%2b": "+",
    "%2B": "+",
    "%2c": ",",
    "%2C": ",",
    "%2d": "-",
    "%2D": "-",
    "%2e": ".",
    "%2E": ".",
    "%2f": "/",
    "%2F": "/",
    "%30": "0",
    "%31": "1",
    "%32": "2",
    "%33": "3",
    "%34": "4",
    "%35": "5",
    "%36": "6",
    "%37": "7",
    "%38": "8",
    "%39": "9",
    "%3a": ":",
    "%3A": ":",
    "%3b": ";",
    "%3B": ";",
    "%3c": "<",
    "%3C": "<",
    "%3d": "=",
    "%3D": "=",
    "%3e": ">",
    "%3E": ">",
    "%3f": "?",
    "%3F": "?",
    "%40": "@",
    "%41": "A",
    "%42": "B",
    "%43": "C",
    "%44": "D",
    "%45": "E",
    "%46": "F",
    "%47": "G",
    "%48": "H",
    "%49": "I",
    "%4a": "J",
    "%4A": "J",
    "%4b": "K",
    "%4B": "K",
    "%4c": "L",
    "%4C": "L",
    "%4d": "M",
    "%4D": "M",
    "%4e": "N",
    "%4E": "N",
    "%4f": "O",
    "%4F": "O",
    "%50": "P",
    "%51": "Q",
    "%52": "R",
    "%53": "S",
    "%54": "T",
    "%55": "U",
    "%56": "V",
    "%57": "W",
    "%58": "X",
    "%59": "Y",
    "%5a": "Z",
    "%5A": "Z",
    "%5b": "[",
    "%5B": "[",
    "%5c": "\\",
    "%5C": "\\",
    "%5d": "]",
    "%5D": "]",
    "%5e": "^",
    "%5E": "^",
    "%5f": "_",
    "%5F": "_",
    "%60": "`",
    "%61": "a",
    "%62": "b",
    "%63": "c",
    "%64": "d",
    "%65": "e",
    "%66": "f",
    "%67": "g",
    "%68": "h",
    "%69": "i",
    "%6a": "j",
    "%6A": "j",
    "%6b": "k",
    "%6B": "k",
    "%6c": "l",
    "%6C": "l",
    "%6d": "m",
    "%6D": "m",
    "%6e": "n",
    "%6E": "n",
    "%6f": "o",
    "%6F": "o",
    "%70": "p",
    "%71": "q",
    "%72": "r",
    "%73": "s",
    "%74": "t",
    "%75": "u",
    "%76": "v",
    "%77": "w",
    "%78": "x",
    "%79": "y",
    "%7a": "z",
    "%7A": "z",
    "%7b": "{",
    "%7B": "{",
    "%7c": "|",
    "%7C": "|",
    "%7d": "}",
    "%7D": "}",
    "%7e": "~",
    "%7E": "~",
    "%7f": "",
    "%7F": "",
    "%80": "",
    "%81": "",
    "%82": "",
    "%83": "",
    "%84": "",
    "%85": "",
    "%86": "",
    "%87": "",
    "%88": "",
    "%89": "",
    "%8a": "",
    "%8A": "",
    "%8b": "",
    "%8B": "",
    "%8c": "",
    "%8C": "",
    "%8d": "",
    "%8D": "",
    "%8e": "",
    "%8E": "",
    "%8f": "",
    "%8F": "",
    "%90": "",
    "%91": "",
    "%92": "",
    "%93": "",
    "%94": "",
    "%95": "",
    "%96": "",
    "%97": "",
    "%98": "",
    "%99": "",
    "%9a": "",
    "%9A": "",
    "%9b": "",
    "%9B": "",
    "%9c": "",
    "%9C": "",
    "%9d": "",
    "%9D": "",
    "%9e": "",
    "%9E": "",
    "%9f": "",
    "%9F": "",
    "%a0": " ",
    "%A0": " ",
    "%a1": "¡",
    "%A1": "¡",
    "%a2": "¢",
    "%A2": "¢",
    "%a3": "£",
    "%A3": "£",
    "%a4": "¤",
    "%A4": "¤",
    "%a5": "¥",
    "%A5": "¥",
    "%a6": "¦",
    "%A6": "¦",
    "%a7": "§",
    "%A7": "§",
    "%a8": "¨",
    "%A8": "¨",
    "%a9": "©",
    "%A9": "©",
    "%aa": "ª",
    "%Aa": "ª",
    "%aA": "ª",
    "%AA": "ª",
    "%ab": "«",
    "%Ab": "«",
    "%aB": "«",
    "%AB": "«",
    "%ac": "¬",
    "%Ac": "¬",
    "%aC": "¬",
    "%AC": "¬",
    "%ad": "­",
    "%Ad": "­",
    "%aD": "­",
    "%AD": "­",
    "%ae": "®",
    "%Ae": "®",
    "%aE": "®",
    "%AE": "®",
    "%af": "¯",
    "%Af": "¯",
    "%aF": "¯",
    "%AF": "¯",
    "%b0": "°",
    "%B0": "°",
    "%b1": "±",
    "%B1": "±",
    "%b2": "²",
    "%B2": "²",
    "%b3": "³",
    "%B3": "³",
    "%b4": "´",
    "%B4": "´",
    "%b5": "µ",
    "%B5": "µ",
    "%b6": "¶",
    "%B6": "¶",
    "%b7": "·",
    "%B7": "·",
    "%b8": "¸",
    "%B8": "¸",
    "%b9": "¹",
    "%B9": "¹",
    "%ba": "º",
    "%Ba": "º",
    "%bA": "º",
    "%BA": "º",
    "%bb": "»",
    "%Bb": "»",
    "%bB": "»",
    "%BB": "»",
    "%bc": "¼",
    "%Bc": "¼",
    "%bC": "¼",
    "%BC": "¼",
    "%bd": "½",
    "%Bd": "½",
    "%bD": "½",
    "%BD": "½",
    "%be": "¾",
    "%Be": "¾",
    "%bE": "¾",
    "%BE": "¾",
    "%bf": "¿",
    "%Bf": "¿",
    "%bF": "¿",
    "%BF": "¿",
    "%c0": "À",
    "%C0": "À",
    "%c1": "Á",
    "%C1": "Á",
    "%c2": "Â",
    "%C2": "Â",
    "%c3": "Ã",
    "%C3": "Ã",
    "%c4": "Ä",
    "%C4": "Ä",
    "%c5": "Å",
    "%C5": "Å",
    "%c6": "Æ",
    "%C6": "Æ",
    "%c7": "Ç",
    "%C7": "Ç",
    "%c8": "È",
    "%C8": "È",
    "%c9": "É",
    "%C9": "É",
    "%ca": "Ê",
    "%Ca": "Ê",
    "%cA": "Ê",
    "%CA": "Ê",
    "%cb": "Ë",
    "%Cb": "Ë",
    "%cB": "Ë",
    "%CB": "Ë",
    "%cc": "Ì",
    "%Cc": "Ì",
    "%cC": "Ì",
    "%CC": "Ì",
    "%cd": "Í",
    "%Cd": "Í",
    "%cD": "Í",
    "%CD": "Í",
    "%ce": "Î",
    "%Ce": "Î",
    "%cE": "Î",
    "%CE": "Î",
    "%cf": "Ï",
    "%Cf": "Ï",
    "%cF": "Ï",
    "%CF": "Ï",
    "%d0": "Ð",
    "%D0": "Ð",
    "%d1": "Ñ",
    "%D1": "Ñ",
    "%d2": "Ò",
    "%D2": "Ò",
    "%d3": "Ó",
    "%D3": "Ó",
    "%d4": "Ô",
    "%D4": "Ô",
    "%d5": "Õ",
    "%D5": "Õ",
    "%d6": "Ö",
    "%D6": "Ö",
    "%d7": "×",
    "%D7": "×",
    "%d8": "Ø",
    "%D8": "Ø",
    "%d9": "Ù",
    "%D9": "Ù",
    "%da": "Ú",
    "%Da": "Ú",
    "%dA": "Ú",
    "%DA": "Ú",
    "%db": "Û",
    "%Db": "Û",
    "%dB": "Û",
    "%DB": "Û",
    "%dc": "Ü",
    "%Dc": "Ü",
    "%dC": "Ü",
    "%DC": "Ü",
    "%dd": "Ý",
    "%Dd": "Ý",
    "%dD": "Ý",
    "%DD": "Ý",
    "%de": "Þ",
    "%De": "Þ",
    "%dE": "Þ",
    "%DE": "Þ",
    "%df": "ß",
    "%Df": "ß",
    "%dF": "ß",
    "%DF": "ß",
    "%e0": "à",
    "%E0": "à",
    "%e1": "á",
    "%E1": "á",
    "%e2": "â",
    "%E2": "â",
    "%e3": "ã",
    "%E3": "ã",
    "%e4": "ä",
    "%E4": "ä",
    "%e5": "å",
    "%E5": "å",
    "%e6": "æ",
    "%E6": "æ",
    "%e7": "ç",
    "%E7": "ç",
    "%e8": "è",
    "%E8": "è",
    "%e9": "é",
    "%E9": "é",
    "%ea": "ê",
    "%Ea": "ê",
    "%eA": "ê",
    "%EA": "ê",
    "%eb": "ë",
    "%Eb": "ë",
    "%eB": "ë",
    "%EB": "ë",
    "%ec": "ì",
    "%Ec": "ì",
    "%eC": "ì",
    "%EC": "ì",
    "%ed": "í",
    "%Ed": "í",
    "%eD": "í",
    "%ED": "í",
    "%ee": "î",
    "%Ee": "î",
    "%eE": "î",
    "%EE": "î",
    "%ef": "ï",
    "%Ef": "ï",
    "%eF": "ï",
    "%EF": "ï",
    "%f0": "ð",
    "%F0": "ð",
    "%f1": "ñ",
    "%F1": "ñ",
    "%f2": "ò",
    "%F2": "ò",
    "%f3": "ó",
    "%F3": "ó",
    "%f4": "ô",
    "%F4": "ô",
    "%f5": "õ",
    "%F5": "õ",
    "%f6": "ö",
    "%F6": "ö",
    "%f7": "÷",
    "%F7": "÷",
    "%f8": "ø",
    "%F8": "ø",
    "%f9": "ù",
    "%F9": "ù",
    "%fa": "ú",
    "%Fa": "ú",
    "%fA": "ú",
    "%FA": "ú",
    "%fb": "û",
    "%Fb": "û",
    "%fB": "û",
    "%FB": "û",
    "%fc": "ü",
    "%Fc": "ü",
    "%fC": "ü",
    "%FC": "ü",
    "%fd": "ý",
    "%Fd": "ý",
    "%fD": "ý",
    "%FD": "ý",
    "%fe": "þ",
    "%Fe": "þ",
    "%fE": "þ",
    "%FE": "þ",
    "%ff": "ÿ",
    "%Ff": "ÿ",
    "%fF": "ÿ",
    "%FF": "ÿ"
  };
  function encodedReplacer(match) {
    return EncodedLookup[match];
  }
  var STATE_KEY = 0;
  var STATE_VALUE = 1;
  var STATE_CHARSET = 2;
  var STATE_LANG = 3;
  function parseParams(str) {
    const res = [];
    let state = STATE_KEY;
    let charset = "";
    let inquote = false;
    let escaping = false;
    let p = 0;
    let tmp = "";
    const len = str.length;
    for (var i = 0;i < len; ++i) {
      const char = str[i];
      if (char === "\\" && inquote) {
        if (escaping) {
          escaping = false;
        } else {
          escaping = true;
          continue;
        }
      } else if (char === '"') {
        if (!escaping) {
          if (inquote) {
            inquote = false;
            state = STATE_KEY;
          } else {
            inquote = true;
          }
          continue;
        } else {
          escaping = false;
        }
      } else {
        if (escaping && inquote) {
          tmp += "\\";
        }
        escaping = false;
        if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
          if (state === STATE_CHARSET) {
            state = STATE_LANG;
            charset = tmp.substring(1);
          } else {
            state = STATE_VALUE;
          }
          tmp = "";
          continue;
        } else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
          state = char === "*" ? STATE_CHARSET : STATE_VALUE;
          res[p] = [tmp, undefined];
          tmp = "";
          continue;
        } else if (!inquote && char === ";") {
          state = STATE_KEY;
          if (charset) {
            if (tmp.length) {
              tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
            }
            charset = "";
          } else if (tmp.length) {
            tmp = decodeText(tmp, "binary", "utf8");
          }
          if (res[p] === undefined) {
            res[p] = tmp;
          } else {
            res[p][1] = tmp;
          }
          tmp = "";
          ++p;
          continue;
        } else if (!inquote && (char === " " || char === "\t")) {
          continue;
        }
      }
      tmp += char;
    }
    if (charset && tmp.length) {
      tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
    } else if (tmp) {
      tmp = decodeText(tmp, "binary", "utf8");
    }
    if (res[p] === undefined) {
      if (tmp) {
        res[p] = tmp;
      }
    } else {
      res[p][1] = tmp;
    }
    return res;
  }
  module.exports = parseParams;
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS((exports, module) => {
  module.exports = function basename(path) {
    if (typeof path !== "string") {
      return "";
    }
    for (var i = path.length - 1;i >= 0; --i) {
      switch (path.charCodeAt(i)) {
        case 47:
        case 92:
          path = path.slice(i + 1);
          return path === ".." || path === "." ? "" : path;
      }
    }
    return path === ".." || path === "." ? "" : path;
  };
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS((exports, module) => {
  var { Readable } = __require("node:stream");
  var { inherits } = __require("node:util");
  var Dicer = require_Dicer();
  var parseParams = require_parseParams();
  var decodeText = require_decodeText();
  var basename = require_basename();
  var getLimit = require_getLimit();
  var RE_BOUNDARY = /^boundary$/i;
  var RE_FIELD = /^form-data$/i;
  var RE_CHARSET = /^charset$/i;
  var RE_FILENAME = /^filename$/i;
  var RE_NAME = /^name$/i;
  Multipart.detect = /^multipart\/form-data/i;
  function Multipart(boy, cfg) {
    let i;
    let len;
    const self2 = this;
    let boundary;
    const limits = cfg.limits;
    const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== undefined);
    const parsedConType = cfg.parsedConType || [];
    const defCharset = cfg.defCharset || "utf8";
    const preservePath = cfg.preservePath;
    const fileOpts = { highWaterMark: cfg.fileHwm };
    for (i = 0, len = parsedConType.length;i < len; ++i) {
      if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
        boundary = parsedConType[i][1];
        break;
      }
    }
    function checkFinished() {
      if (nends === 0 && finished && !boy._done) {
        finished = false;
        self2.end();
      }
    }
    if (typeof boundary !== "string") {
      throw new Error("Multipart: Boundary not found");
    }
    const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
    const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
    const filesLimit = getLimit(limits, "files", Infinity);
    const fieldsLimit = getLimit(limits, "fields", Infinity);
    const partsLimit = getLimit(limits, "parts", Infinity);
    const headerPairsLimit = getLimit(limits, "headerPairs", 2000);
    const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
    let nfiles = 0;
    let nfields = 0;
    let nends = 0;
    let curFile;
    let curField;
    let finished = false;
    this._needDrain = false;
    this._pause = false;
    this._cb = undefined;
    this._nparts = 0;
    this._boy = boy;
    const parserCfg = {
      boundary,
      maxHeaderPairs: headerPairsLimit,
      maxHeaderSize: headerSizeLimit,
      partHwm: fileOpts.highWaterMark,
      highWaterMark: cfg.highWaterMark
    };
    this.parser = new Dicer(parserCfg);
    this.parser.on("drain", function() {
      self2._needDrain = false;
      if (self2._cb && !self2._pause) {
        const cb = self2._cb;
        self2._cb = undefined;
        cb();
      }
    }).on("part", function onPart(part) {
      if (++self2._nparts > partsLimit) {
        self2.parser.removeListener("part", onPart);
        self2.parser.on("part", skipPart);
        boy.hitPartsLimit = true;
        boy.emit("partsLimit");
        return skipPart(part);
      }
      if (curField) {
        const field = curField;
        field.emit("end");
        field.removeAllListeners("end");
      }
      part.on("header", function(header) {
        let contype;
        let fieldname;
        let parsed;
        let charset;
        let encoding;
        let filename;
        let nsize = 0;
        if (header["content-type"]) {
          parsed = parseParams(header["content-type"][0]);
          if (parsed[0]) {
            contype = parsed[0].toLowerCase();
            for (i = 0, len = parsed.length;i < len; ++i) {
              if (RE_CHARSET.test(parsed[i][0])) {
                charset = parsed[i][1].toLowerCase();
                break;
              }
            }
          }
        }
        if (contype === undefined) {
          contype = "text/plain";
        }
        if (charset === undefined) {
          charset = defCharset;
        }
        if (header["content-disposition"]) {
          parsed = parseParams(header["content-disposition"][0]);
          if (!RE_FIELD.test(parsed[0])) {
            return skipPart(part);
          }
          for (i = 0, len = parsed.length;i < len; ++i) {
            if (RE_NAME.test(parsed[i][0])) {
              fieldname = parsed[i][1];
            } else if (RE_FILENAME.test(parsed[i][0])) {
              filename = parsed[i][1];
              if (!preservePath) {
                filename = basename(filename);
              }
            }
          }
        } else {
          return skipPart(part);
        }
        if (header["content-transfer-encoding"]) {
          encoding = header["content-transfer-encoding"][0].toLowerCase();
        } else {
          encoding = "7bit";
        }
        let onData, onEnd;
        if (isPartAFile(fieldname, contype, filename)) {
          if (nfiles === filesLimit) {
            if (!boy.hitFilesLimit) {
              boy.hitFilesLimit = true;
              boy.emit("filesLimit");
            }
            return skipPart(part);
          }
          ++nfiles;
          if (boy.listenerCount("file") === 0) {
            self2.parser._ignore();
            return;
          }
          ++nends;
          const file = new FileStream(fileOpts);
          curFile = file;
          file.on("end", function() {
            --nends;
            self2._pause = false;
            checkFinished();
            if (self2._cb && !self2._needDrain) {
              const cb = self2._cb;
              self2._cb = undefined;
              cb();
            }
          });
          file._read = function(n) {
            if (!self2._pause) {
              return;
            }
            self2._pause = false;
            if (self2._cb && !self2._needDrain) {
              const cb = self2._cb;
              self2._cb = undefined;
              cb();
            }
          };
          boy.emit("file", fieldname, file, filename, encoding, contype);
          onData = function(data) {
            if ((nsize += data.length) > fileSizeLimit) {
              const extralen = fileSizeLimit - nsize + data.length;
              if (extralen > 0) {
                file.push(data.slice(0, extralen));
              }
              file.truncated = true;
              file.bytesRead = fileSizeLimit;
              part.removeAllListeners("data");
              file.emit("limit");
              return;
            } else if (!file.push(data)) {
              self2._pause = true;
            }
            file.bytesRead = nsize;
          };
          onEnd = function() {
            curFile = undefined;
            file.push(null);
          };
        } else {
          if (nfields === fieldsLimit) {
            if (!boy.hitFieldsLimit) {
              boy.hitFieldsLimit = true;
              boy.emit("fieldsLimit");
            }
            return skipPart(part);
          }
          ++nfields;
          ++nends;
          let buffer = "";
          let truncated = false;
          curField = part;
          onData = function(data) {
            if ((nsize += data.length) > fieldSizeLimit) {
              const extralen = fieldSizeLimit - (nsize - data.length);
              buffer += data.toString("binary", 0, extralen);
              truncated = true;
              part.removeAllListeners("data");
            } else {
              buffer += data.toString("binary");
            }
          };
          onEnd = function() {
            curField = undefined;
            if (buffer.length) {
              buffer = decodeText(buffer, "binary", charset);
            }
            boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
            --nends;
            checkFinished();
          };
        }
        part._readableState.sync = false;
        part.on("data", onData);
        part.on("end", onEnd);
      }).on("error", function(err) {
        if (curFile) {
          curFile.emit("error", err);
        }
      });
    }).on("error", function(err) {
      boy.emit("error", err);
    }).on("finish", function() {
      finished = true;
      checkFinished();
    });
  }
  Multipart.prototype.write = function(chunk, cb) {
    const r = this.parser.write(chunk);
    if (r && !this._pause) {
      cb();
    } else {
      this._needDrain = !r;
      this._cb = cb;
    }
  };
  Multipart.prototype.end = function() {
    const self2 = this;
    if (self2.parser.writable) {
      self2.parser.end();
    } else if (!self2._boy._done) {
      process.nextTick(function() {
        self2._boy._done = true;
        self2._boy.emit("finish");
      });
    }
  };
  function skipPart(part) {
    part.resume();
  }
  function FileStream(opts) {
    Readable.call(this, opts);
    this.bytesRead = 0;
    this.truncated = false;
  }
  inherits(FileStream, Readable);
  FileStream.prototype._read = function(n) {};
  module.exports = Multipart;
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS((exports, module) => {
  var RE_PLUS = /\+/g;
  var HEX = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  function Decoder() {
    this.buffer = undefined;
  }
  Decoder.prototype.write = function(str) {
    str = str.replace(RE_PLUS, " ");
    let res = "";
    let i = 0;
    let p = 0;
    const len = str.length;
    for (;i < len; ++i) {
      if (this.buffer !== undefined) {
        if (!HEX[str.charCodeAt(i)]) {
          res += "%" + this.buffer;
          this.buffer = undefined;
          --i;
        } else {
          this.buffer += str[i];
          ++p;
          if (this.buffer.length === 2) {
            res += String.fromCharCode(parseInt(this.buffer, 16));
            this.buffer = undefined;
          }
        }
      } else if (str[i] === "%") {
        if (i > p) {
          res += str.substring(p, i);
          p = i;
        }
        this.buffer = "";
        ++p;
      }
    }
    if (p < len && this.buffer === undefined) {
      res += str.substring(p);
    }
    return res;
  };
  Decoder.prototype.reset = function() {
    this.buffer = undefined;
  };
  module.exports = Decoder;
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS((exports, module) => {
  var Decoder = require_Decoder();
  var decodeText = require_decodeText();
  var getLimit = require_getLimit();
  var RE_CHARSET = /^charset$/i;
  UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
  function UrlEncoded(boy, cfg) {
    const limits = cfg.limits;
    const parsedConType = cfg.parsedConType;
    this.boy = boy;
    this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
    this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
    this.fieldsLimit = getLimit(limits, "fields", Infinity);
    let charset;
    for (var i = 0, len = parsedConType.length;i < len; ++i) {
      if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
        charset = parsedConType[i][1].toLowerCase();
        break;
      }
    }
    if (charset === undefined) {
      charset = cfg.defCharset || "utf8";
    }
    this.decoder = new Decoder;
    this.charset = charset;
    this._fields = 0;
    this._state = "key";
    this._checkingBytes = true;
    this._bytesKey = 0;
    this._bytesVal = 0;
    this._key = "";
    this._val = "";
    this._keyTrunc = false;
    this._valTrunc = false;
    this._hitLimit = false;
  }
  UrlEncoded.prototype.write = function(data, cb) {
    if (this._fields === this.fieldsLimit) {
      if (!this.boy.hitFieldsLimit) {
        this.boy.hitFieldsLimit = true;
        this.boy.emit("fieldsLimit");
      }
      return cb();
    }
    let idxeq;
    let idxamp;
    let i;
    let p = 0;
    const len = data.length;
    while (p < len) {
      if (this._state === "key") {
        idxeq = idxamp = undefined;
        for (i = p;i < len; ++i) {
          if (!this._checkingBytes) {
            ++p;
          }
          if (data[i] === 61) {
            idxeq = i;
            break;
          } else if (data[i] === 38) {
            idxamp = i;
            break;
          }
          if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
            this._hitLimit = true;
            break;
          } else if (this._checkingBytes) {
            ++this._bytesKey;
          }
        }
        if (idxeq !== undefined) {
          if (idxeq > p) {
            this._key += this.decoder.write(data.toString("binary", p, idxeq));
          }
          this._state = "val";
          this._hitLimit = false;
          this._checkingBytes = true;
          this._val = "";
          this._bytesVal = 0;
          this._valTrunc = false;
          this.decoder.reset();
          p = idxeq + 1;
        } else if (idxamp !== undefined) {
          ++this._fields;
          let key;
          const keyTrunc = this._keyTrunc;
          if (idxamp > p) {
            key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
          } else {
            key = this._key;
          }
          this._hitLimit = false;
          this._checkingBytes = true;
          this._key = "";
          this._bytesKey = 0;
          this._keyTrunc = false;
          this.decoder.reset();
          if (key.length) {
            this.boy.emit("field", decodeText(key, "binary", this.charset), "", keyTrunc, false);
          }
          p = idxamp + 1;
          if (this._fields === this.fieldsLimit) {
            return cb();
          }
        } else if (this._hitLimit) {
          if (i > p) {
            this._key += this.decoder.write(data.toString("binary", p, i));
          }
          p = i;
          if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
            this._checkingBytes = false;
            this._keyTrunc = true;
          }
        } else {
          if (p < len) {
            this._key += this.decoder.write(data.toString("binary", p));
          }
          p = len;
        }
      } else {
        idxamp = undefined;
        for (i = p;i < len; ++i) {
          if (!this._checkingBytes) {
            ++p;
          }
          if (data[i] === 38) {
            idxamp = i;
            break;
          }
          if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
            this._hitLimit = true;
            break;
          } else if (this._checkingBytes) {
            ++this._bytesVal;
          }
        }
        if (idxamp !== undefined) {
          ++this._fields;
          if (idxamp > p) {
            this._val += this.decoder.write(data.toString("binary", p, idxamp));
          }
          this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
          this._state = "key";
          this._hitLimit = false;
          this._checkingBytes = true;
          this._key = "";
          this._bytesKey = 0;
          this._keyTrunc = false;
          this.decoder.reset();
          p = idxamp + 1;
          if (this._fields === this.fieldsLimit) {
            return cb();
          }
        } else if (this._hitLimit) {
          if (i > p) {
            this._val += this.decoder.write(data.toString("binary", p, i));
          }
          p = i;
          if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
            this._checkingBytes = false;
            this._valTrunc = true;
          }
        } else {
          if (p < len) {
            this._val += this.decoder.write(data.toString("binary", p));
          }
          p = len;
        }
      }
    }
    cb();
  };
  UrlEncoded.prototype.end = function() {
    if (this.boy._done) {
      return;
    }
    if (this._state === "key" && this._key.length > 0) {
      this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, false);
    } else if (this._state === "val") {
      this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
    }
    this.boy._done = true;
    this.boy.emit("finish");
  };
  module.exports = UrlEncoded;
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS((exports, module) => {
  var WritableStream = __require("node:stream").Writable;
  var { inherits } = __require("node:util");
  var Dicer = require_Dicer();
  var MultipartParser = require_multipart();
  var UrlencodedParser = require_urlencoded();
  var parseParams = require_parseParams();
  function Busboy(opts) {
    if (!(this instanceof Busboy)) {
      return new Busboy(opts);
    }
    if (typeof opts !== "object") {
      throw new TypeError("Busboy expected an options-Object.");
    }
    if (typeof opts.headers !== "object") {
      throw new TypeError("Busboy expected an options-Object with headers-attribute.");
    }
    if (typeof opts.headers["content-type"] !== "string") {
      throw new TypeError("Missing Content-Type-header.");
    }
    const {
      headers,
      ...streamOptions
    } = opts;
    this.opts = {
      autoDestroy: false,
      ...streamOptions
    };
    WritableStream.call(this, this.opts);
    this._done = false;
    this._parser = this.getParserByHeaders(headers);
    this._finished = false;
  }
  inherits(Busboy, WritableStream);
  Busboy.prototype.emit = function(ev) {
    if (ev === "finish") {
      if (!this._done) {
        this._parser?.end();
        return;
      } else if (this._finished) {
        return;
      }
      this._finished = true;
    }
    WritableStream.prototype.emit.apply(this, arguments);
  };
  Busboy.prototype.getParserByHeaders = function(headers) {
    const parsed = parseParams(headers["content-type"]);
    const cfg = {
      defCharset: this.opts.defCharset,
      fileHwm: this.opts.fileHwm,
      headers,
      highWaterMark: this.opts.highWaterMark,
      isPartAFile: this.opts.isPartAFile,
      limits: this.opts.limits,
      parsedConType: parsed,
      preservePath: this.opts.preservePath
    };
    if (MultipartParser.detect.test(parsed[0])) {
      return new MultipartParser(this, cfg);
    }
    if (UrlencodedParser.detect.test(parsed[0])) {
      return new UrlencodedParser(this, cfg);
    }
    throw new Error("Unsupported Content-Type.");
  };
  Busboy.prototype._write = function(chunk, encoding, cb) {
    this._parser.write(chunk, cb);
  };
  module.exports = Busboy;
  module.exports.default = Busboy;
  module.exports.Busboy = Busboy;
  module.exports.Dicer = Dicer;
});

// node_modules/undici/lib/fetch/constants.js
var require_constants2 = __commonJS((exports, module) => {
  var { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
  var corsSafeListedMethods = ["GET", "HEAD", "POST"];
  var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
  var nullBodyStatus = [101, 204, 205, 304];
  var redirectStatus = [301, 302, 303, 307, 308];
  var redirectStatusSet = new Set(redirectStatus);
  var badPorts = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6697",
    "10080"
  ];
  var badPortsSet = new Set(badPorts);
  var referrerPolicy = [
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ];
  var referrerPolicySet = new Set(referrerPolicy);
  var requestRedirect = ["follow", "manual", "error"];
  var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
  var safeMethodsSet = new Set(safeMethods);
  var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
  var requestCredentials = ["omit", "same-origin", "include"];
  var requestCache = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
  ];
  var requestBodyHeader = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    "content-length"
  ];
  var requestDuplex = [
    "half"
  ];
  var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
  var forbiddenMethodsSet = new Set(forbiddenMethods);
  var subresource = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
  ];
  var subresourceSet = new Set(subresource);
  var DOMException2 = globalThis.DOMException ?? (() => {
    try {
      atob("~");
    } catch (err) {
      return Object.getPrototypeOf(err).constructor;
    }
  })();
  var channel;
  var structuredClone = globalThis.structuredClone ?? function structuredClone(value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError("missing argument");
    }
    if (!channel) {
      channel = new MessageChannel;
    }
    channel.port1.unref();
    channel.port2.unref();
    channel.port1.postMessage(value, options?.transfer);
    return receiveMessageOnPort(channel.port2).message;
  };
  module.exports = {
    DOMException: DOMException2,
    structuredClone,
    subresource,
    forbiddenMethods,
    requestBodyHeader,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    redirectStatus,
    corsSafeListedMethods,
    nullBodyStatus,
    safeMethods,
    badPorts,
    requestDuplex,
    subresourceSet,
    badPortsSet,
    redirectStatusSet,
    corsSafeListedMethodsSet,
    safeMethodsSet,
    forbiddenMethodsSet,
    referrerPolicySet
  };
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS((exports, module) => {
  var globalOrigin = Symbol.for("undici.globalOrigin.1");
  function getGlobalOrigin() {
    return globalThis[globalOrigin];
  }
  function setGlobalOrigin(newOrigin) {
    if (newOrigin === undefined) {
      Object.defineProperty(globalThis, globalOrigin, {
        value: undefined,
        writable: true,
        enumerable: false,
        configurable: false
      });
      return;
    }
    const parsedURL = new URL(newOrigin);
    if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
      throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
    }
    Object.defineProperty(globalThis, globalOrigin, {
      value: parsedURL,
      writable: true,
      enumerable: false,
      configurable: false
    });
  }
  module.exports = {
    getGlobalOrigin,
    setGlobalOrigin
  };
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS((exports, module) => {
  var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants2();
  var { getGlobalOrigin } = require_global();
  var { performance: performance2 } = __require("perf_hooks");
  var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
  var assert = __require("assert");
  var { isUint8Array } = __require("util/types");
  var supportedHashes = [];
  var crypto2;
  try {
    crypto2 = __require("crypto");
    const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
    supportedHashes = crypto2.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
  } catch {}
  function responseURL(response) {
    const urlList = response.urlList;
    const length = urlList.length;
    return length === 0 ? null : urlList[length - 1].toString();
  }
  function responseLocationURL(response, requestFragment) {
    if (!redirectStatusSet.has(response.status)) {
      return null;
    }
    let location = response.headersList.get("location");
    if (location !== null && isValidHeaderValue(location)) {
      location = new URL(location, responseURL(response));
    }
    if (location && !location.hash) {
      location.hash = requestFragment;
    }
    return location;
  }
  function requestCurrentURL(request) {
    return request.urlList[request.urlList.length - 1];
  }
  function requestBadPort(request) {
    const url = requestCurrentURL(request);
    if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
      return "blocked";
    }
    return "allowed";
  }
  function isErrorLike(object) {
    return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
  }
  function isValidReasonPhrase(statusText) {
    for (let i = 0;i < statusText.length; ++i) {
      const c = statusText.charCodeAt(i);
      if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) {
        return false;
      }
    }
    return true;
  }
  function isTokenCharCode(c) {
    switch (c) {
      case 34:
      case 40:
      case 41:
      case 44:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 123:
      case 125:
        return false;
      default:
        return c >= 33 && c <= 126;
    }
  }
  function isValidHTTPToken(characters) {
    if (characters.length === 0) {
      return false;
    }
    for (let i = 0;i < characters.length; ++i) {
      if (!isTokenCharCode(characters.charCodeAt(i))) {
        return false;
      }
    }
    return true;
  }
  function isValidHeaderName(potentialValue) {
    return isValidHTTPToken(potentialValue);
  }
  function isValidHeaderValue(potentialValue) {
    if (potentialValue.startsWith("\t") || potentialValue.startsWith(" ") || potentialValue.endsWith("\t") || potentialValue.endsWith(" ")) {
      return false;
    }
    if (potentialValue.includes("\x00") || potentialValue.includes("\r") || potentialValue.includes(`
`)) {
      return false;
    }
    return true;
  }
  function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
    const { headersList } = actualResponse;
    const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
    let policy = "";
    if (policyHeader.length > 0) {
      for (let i = policyHeader.length;i !== 0; i--) {
        const token = policyHeader[i - 1].trim();
        if (referrerPolicyTokens.has(token)) {
          policy = token;
          break;
        }
      }
    }
    if (policy !== "") {
      request.referrerPolicy = policy;
    }
  }
  function crossOriginResourcePolicyCheck() {
    return "allowed";
  }
  function corsCheck() {
    return "success";
  }
  function TAOCheck() {
    return "success";
  }
  function appendFetchMetadata(httpRequest) {
    let header = null;
    header = httpRequest.mode;
    httpRequest.headersList.set("sec-fetch-mode", header);
  }
  function appendRequestOriginHeader(request) {
    let serializedOrigin = request.origin;
    if (request.responseTainting === "cors" || request.mode === "websocket") {
      if (serializedOrigin) {
        request.headersList.append("origin", serializedOrigin);
      }
    } else if (request.method !== "GET" && request.method !== "HEAD") {
      switch (request.referrerPolicy) {
        case "no-referrer":
          serializedOrigin = null;
          break;
        case "no-referrer-when-downgrade":
        case "strict-origin":
        case "strict-origin-when-cross-origin":
          if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        case "same-origin":
          if (!sameOrigin(request, requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        default:
      }
      if (serializedOrigin) {
        request.headersList.append("origin", serializedOrigin);
      }
    }
  }
  function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
    return performance2.now();
  }
  function createOpaqueTimingInfo(timingInfo) {
    return {
      startTime: timingInfo.startTime ?? 0,
      redirectStartTime: 0,
      redirectEndTime: 0,
      postRedirectStartTime: timingInfo.startTime ?? 0,
      finalServiceWorkerStartTime: 0,
      finalNetworkResponseStartTime: 0,
      finalNetworkRequestStartTime: 0,
      endTime: 0,
      encodedBodySize: 0,
      decodedBodySize: 0,
      finalConnectionTimingInfo: null
    };
  }
  function makePolicyContainer() {
    return {
      referrerPolicy: "strict-origin-when-cross-origin"
    };
  }
  function clonePolicyContainer(policyContainer) {
    return {
      referrerPolicy: policyContainer.referrerPolicy
    };
  }
  function determineRequestsReferrer(request) {
    const policy = request.referrerPolicy;
    assert(policy);
    let referrerSource = null;
    if (request.referrer === "client") {
      const globalOrigin = getGlobalOrigin();
      if (!globalOrigin || globalOrigin.origin === "null") {
        return "no-referrer";
      }
      referrerSource = new URL(globalOrigin);
    } else if (request.referrer instanceof URL) {
      referrerSource = request.referrer;
    }
    let referrerURL = stripURLForReferrer(referrerSource);
    const referrerOrigin = stripURLForReferrer(referrerSource, true);
    if (referrerURL.toString().length > 4096) {
      referrerURL = referrerOrigin;
    }
    const areSameOrigin = sameOrigin(request, referrerURL);
    const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
    switch (policy) {
      case "origin":
        return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
      case "unsafe-url":
        return referrerURL;
      case "same-origin":
        return areSameOrigin ? referrerOrigin : "no-referrer";
      case "origin-when-cross-origin":
        return areSameOrigin ? referrerURL : referrerOrigin;
      case "strict-origin-when-cross-origin": {
        const currentURL = requestCurrentURL(request);
        if (sameOrigin(referrerURL, currentURL)) {
          return referrerURL;
        }
        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      }
      case "strict-origin":
      case "no-referrer-when-downgrade":
      default:
        return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
    }
  }
  function stripURLForReferrer(url, originOnly) {
    assert(url instanceof URL);
    if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {
      return "no-referrer";
    }
    url.username = "";
    url.password = "";
    url.hash = "";
    if (originOnly) {
      url.pathname = "";
      url.search = "";
    }
    return url;
  }
  function isURLPotentiallyTrustworthy(url) {
    if (!(url instanceof URL)) {
      return false;
    }
    if (url.href === "about:blank" || url.href === "about:srcdoc") {
      return true;
    }
    if (url.protocol === "data:")
      return true;
    if (url.protocol === "file:")
      return true;
    return isOriginPotentiallyTrustworthy(url.origin);
    function isOriginPotentiallyTrustworthy(origin) {
      if (origin == null || origin === "null")
        return false;
      const originAsURL = new URL(origin);
      if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
        return true;
      }
      if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
        return true;
      }
      return false;
    }
  }
  function bytesMatch(bytes, metadataList) {
    if (crypto2 === undefined) {
      return true;
    }
    const parsedMetadata = parseMetadata(metadataList);
    if (parsedMetadata === "no metadata") {
      return true;
    }
    if (parsedMetadata.length === 0) {
      return true;
    }
    const strongest = getStrongestMetadata(parsedMetadata);
    const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
    for (const item of metadata) {
      const algorithm = item.algo;
      const expectedValue = item.hash;
      let actualValue = crypto2.createHash(algorithm).update(bytes).digest("base64");
      if (actualValue[actualValue.length - 1] === "=") {
        if (actualValue[actualValue.length - 2] === "=") {
          actualValue = actualValue.slice(0, -2);
        } else {
          actualValue = actualValue.slice(0, -1);
        }
      }
      if (compareBase64Mixed(actualValue, expectedValue)) {
        return true;
      }
    }
    return false;
  }
  var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
  function parseMetadata(metadata) {
    const result = [];
    let empty = true;
    for (const token of metadata.split(" ")) {
      empty = false;
      const parsedToken = parseHashWithOptions.exec(token);
      if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) {
        continue;
      }
      const algorithm = parsedToken.groups.algo.toLowerCase();
      if (supportedHashes.includes(algorithm)) {
        result.push(parsedToken.groups);
      }
    }
    if (empty === true) {
      return "no metadata";
    }
    return result;
  }
  function getStrongestMetadata(metadataList) {
    let algorithm = metadataList[0].algo;
    if (algorithm[3] === "5") {
      return algorithm;
    }
    for (let i = 1;i < metadataList.length; ++i) {
      const metadata = metadataList[i];
      if (metadata.algo[3] === "5") {
        algorithm = "sha512";
        break;
      } else if (algorithm[3] === "3") {
        continue;
      } else if (metadata.algo[3] === "3") {
        algorithm = "sha384";
      }
    }
    return algorithm;
  }
  function filterMetadataListByAlgorithm(metadataList, algorithm) {
    if (metadataList.length === 1) {
      return metadataList;
    }
    let pos = 0;
    for (let i = 0;i < metadataList.length; ++i) {
      if (metadataList[i].algo === algorithm) {
        metadataList[pos++] = metadataList[i];
      }
    }
    metadataList.length = pos;
    return metadataList;
  }
  function compareBase64Mixed(actualValue, expectedValue) {
    if (actualValue.length !== expectedValue.length) {
      return false;
    }
    for (let i = 0;i < actualValue.length; ++i) {
      if (actualValue[i] !== expectedValue[i]) {
        if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") {
          continue;
        }
        return false;
      }
    }
    return true;
  }
  function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {}
  function sameOrigin(A, B) {
    if (A.origin === B.origin && A.origin === "null") {
      return true;
    }
    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
      return true;
    }
    return false;
  }
  function createDeferredPromise() {
    let res;
    let rej;
    const promise = new Promise((resolve, reject) => {
      res = resolve;
      rej = reject;
    });
    return { promise, resolve: res, reject: rej };
  }
  function isAborted(fetchParams) {
    return fetchParams.controller.state === "aborted";
  }
  function isCancelled(fetchParams) {
    return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
  }
  var normalizeMethodRecord = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
  };
  Object.setPrototypeOf(normalizeMethodRecord, null);
  function normalizeMethod(method) {
    return normalizeMethodRecord[method.toLowerCase()] ?? method;
  }
  function serializeJavascriptValueToJSONString(value) {
    const result = JSON.stringify(value);
    if (result === undefined) {
      throw new TypeError("Value is not JSON serializable");
    }
    assert(typeof result === "string");
    return result;
  }
  var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  function makeIterator(iterator, name, kind) {
    const object = {
      index: 0,
      kind,
      target: iterator
    };
    const i = {
      next() {
        if (Object.getPrototypeOf(this) !== i) {
          throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
        }
        const { index, kind: kind2, target } = object;
        const values = target();
        const len = values.length;
        if (index >= len) {
          return { value: undefined, done: true };
        }
        const pair = values[index];
        object.index = index + 1;
        return iteratorResult(pair, kind2);
      },
      [Symbol.toStringTag]: `${name} Iterator`
    };
    Object.setPrototypeOf(i, esIteratorPrototype);
    return Object.setPrototypeOf({}, i);
  }
  function iteratorResult(pair, kind) {
    let result;
    switch (kind) {
      case "key": {
        result = pair[0];
        break;
      }
      case "value": {
        result = pair[1];
        break;
      }
      case "key+value": {
        result = pair;
        break;
      }
    }
    return { value: result, done: false };
  }
  async function fullyReadBody(body, processBody, processBodyError) {
    const successSteps = processBody;
    const errorSteps = processBodyError;
    let reader;
    try {
      reader = body.stream.getReader();
    } catch (e) {
      errorSteps(e);
      return;
    }
    try {
      const result = await readAllBytes(reader);
      successSteps(result);
    } catch (e) {
      errorSteps(e);
    }
  }
  var ReadableStream = globalThis.ReadableStream;
  function isReadableStreamLike(stream) {
    if (!ReadableStream) {
      ReadableStream = __require("stream/web").ReadableStream;
    }
    return stream instanceof ReadableStream || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
  }
  var MAXIMUM_ARGUMENT_LENGTH = 65535;
  function isomorphicDecode(input) {
    if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
      return String.fromCharCode(...input);
    }
    return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
  }
  function readableStreamClose(controller) {
    try {
      controller.close();
    } catch (err) {
      if (!err.message.includes("Controller is already closed")) {
        throw err;
      }
    }
  }
  function isomorphicEncode(input) {
    for (let i = 0;i < input.length; i++) {
      assert(input.charCodeAt(i) <= 255);
    }
    return input;
  }
  async function readAllBytes(reader) {
    const bytes = [];
    let byteLength = 0;
    while (true) {
      const { done, value: chunk } = await reader.read();
      if (done) {
        return Buffer.concat(bytes, byteLength);
      }
      if (!isUint8Array(chunk)) {
        throw new TypeError("Received non-Uint8Array chunk");
      }
      bytes.push(chunk);
      byteLength += chunk.length;
    }
  }
  function urlIsLocal(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "about:" || protocol === "blob:" || protocol === "data:";
  }
  function urlHasHttpsScheme(url) {
    if (typeof url === "string") {
      return url.startsWith("https:");
    }
    return url.protocol === "https:";
  }
  function urlIsHttpHttpsScheme(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "http:" || protocol === "https:";
  }
  var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
  module.exports = {
    isAborted,
    isCancelled,
    createDeferredPromise,
    ReadableStreamFrom,
    toUSVString,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    coarsenedSharedCurrentTime,
    determineRequestsReferrer,
    makePolicyContainer,
    clonePolicyContainer,
    appendFetchMetadata,
    appendRequestOriginHeader,
    TAOCheck,
    corsCheck,
    crossOriginResourcePolicyCheck,
    createOpaqueTimingInfo,
    setRequestReferrerPolicyOnRedirect,
    isValidHTTPToken,
    requestBadPort,
    requestCurrentURL,
    responseURL,
    responseLocationURL,
    isBlobLike,
    isURLPotentiallyTrustworthy,
    isValidReasonPhrase,
    sameOrigin,
    normalizeMethod,
    serializeJavascriptValueToJSONString,
    makeIterator,
    isValidHeaderName,
    isValidHeaderValue,
    hasOwn,
    isErrorLike,
    fullyReadBody,
    bytesMatch,
    isReadableStreamLike,
    readableStreamClose,
    isomorphicEncode,
    isomorphicDecode,
    urlIsLocal,
    urlHasHttpsScheme,
    urlIsHttpHttpsScheme,
    readAllBytes,
    normalizeMethodRecord,
    parseMetadata
  };
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS((exports, module) => {
  module.exports = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
  };
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS((exports, module) => {
  var { types } = __require("util");
  var { hasOwn, toUSVString } = require_util2();
  var webidl = {};
  webidl.converters = {};
  webidl.util = {};
  webidl.errors = {};
  webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
  };
  webidl.errors.conversionFailed = function(context) {
    const plural = context.types.length === 1 ? "" : " one of";
    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(", ")}.`;
    return webidl.errors.exception({
      header: context.prefix,
      message
    });
  };
  webidl.errors.invalidArgument = function(context) {
    return webidl.errors.exception({
      header: context.prefix,
      message: `"${context.value}" is an invalid ${context.type}.`
    });
  };
  webidl.brandCheck = function(V, I, opts = undefined) {
    if (opts?.strict !== false && !(V instanceof I)) {
      throw new TypeError("Illegal invocation");
    } else {
      return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
    }
  };
  webidl.argumentLengthCheck = function({ length }, min, ctx) {
    if (length < min) {
      throw webidl.errors.exception({
        message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
        ...ctx
      });
    }
  };
  webidl.illegalConstructor = function() {
    throw webidl.errors.exception({
      header: "TypeError",
      message: "Illegal constructor"
    });
  };
  webidl.util.Type = function(V) {
    switch (typeof V) {
      case "undefined":
        return "Undefined";
      case "boolean":
        return "Boolean";
      case "string":
        return "String";
      case "symbol":
        return "Symbol";
      case "number":
        return "Number";
      case "bigint":
        return "BigInt";
      case "function":
      case "object": {
        if (V === null) {
          return "Null";
        }
        return "Object";
      }
    }
  };
  webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
    let upperBound;
    let lowerBound;
    if (bitLength === 64) {
      upperBound = Math.pow(2, 53) - 1;
      if (signedness === "unsigned") {
        lowerBound = 0;
      } else {
        lowerBound = Math.pow(-2, 53) + 1;
      }
    } else if (signedness === "unsigned") {
      lowerBound = 0;
      upperBound = Math.pow(2, bitLength) - 1;
    } else {
      lowerBound = Math.pow(-2, bitLength) - 1;
      upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    let x = Number(V);
    if (x === 0) {
      x = 0;
    }
    if (opts.enforceRange === true) {
      if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Could not convert ${V} to an integer.`
        });
      }
      x = webidl.util.IntegerPart(x);
      if (x < lowerBound || x > upperBound) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
        });
      }
      return x;
    }
    if (!Number.isNaN(x) && opts.clamp === true) {
      x = Math.min(Math.max(x, lowerBound), upperBound);
      if (Math.floor(x) % 2 === 0) {
        x = Math.floor(x);
      } else {
        x = Math.ceil(x);
      }
      return x;
    }
    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
      return 0;
    }
    x = webidl.util.IntegerPart(x);
    x = x % Math.pow(2, bitLength);
    if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
      return x - Math.pow(2, bitLength);
    }
    return x;
  };
  webidl.util.IntegerPart = function(n) {
    const r = Math.floor(Math.abs(n));
    if (n < 0) {
      return -1 * r;
    }
    return r;
  };
  webidl.sequenceConverter = function(converter) {
    return (V) => {
      if (webidl.util.Type(V) !== "Object") {
        throw webidl.errors.exception({
          header: "Sequence",
          message: `Value of type ${webidl.util.Type(V)} is not an Object.`
        });
      }
      const method = V?.[Symbol.iterator]?.();
      const seq = [];
      if (method === undefined || typeof method.next !== "function") {
        throw webidl.errors.exception({
          header: "Sequence",
          message: "Object is not an iterator."
        });
      }
      while (true) {
        const { done, value } = method.next();
        if (done) {
          break;
        }
        seq.push(converter(value));
      }
      return seq;
    };
  };
  webidl.recordConverter = function(keyConverter, valueConverter) {
    return (O) => {
      if (webidl.util.Type(O) !== "Object") {
        throw webidl.errors.exception({
          header: "Record",
          message: `Value of type ${webidl.util.Type(O)} is not an Object.`
        });
      }
      const result = {};
      if (!types.isProxy(O)) {
        const keys2 = Object.keys(O);
        for (const key of keys2) {
          const typedKey = keyConverter(key);
          const typedValue = valueConverter(O[key]);
          result[typedKey] = typedValue;
        }
        return result;
      }
      const keys = Reflect.ownKeys(O);
      for (const key of keys) {
        const desc = Reflect.getOwnPropertyDescriptor(O, key);
        if (desc?.enumerable) {
          const typedKey = keyConverter(key);
          const typedValue = valueConverter(O[key]);
          result[typedKey] = typedValue;
        }
      }
      return result;
    };
  };
  webidl.interfaceConverter = function(i) {
    return (V, opts = {}) => {
      if (opts.strict !== false && !(V instanceof i)) {
        throw webidl.errors.exception({
          header: i.name,
          message: `Expected ${V} to be an instance of ${i.name}.`
        });
      }
      return V;
    };
  };
  webidl.dictionaryConverter = function(converters) {
    return (dictionary) => {
      const type = webidl.util.Type(dictionary);
      const dict = {};
      if (type === "Null" || type === "Undefined") {
        return dict;
      } else if (type !== "Object") {
        throw webidl.errors.exception({
          header: "Dictionary",
          message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
        });
      }
      for (const options of converters) {
        const { key, defaultValue, required, converter } = options;
        if (required === true) {
          if (!hasOwn(dictionary, key)) {
            throw webidl.errors.exception({
              header: "Dictionary",
              message: `Missing required key "${key}".`
            });
          }
        }
        let value = dictionary[key];
        const hasDefault = hasOwn(options, "defaultValue");
        if (hasDefault && value !== null) {
          value = value ?? defaultValue;
        }
        if (required || hasDefault || value !== undefined) {
          value = converter(value);
          if (options.allowedValues && !options.allowedValues.includes(value)) {
            throw webidl.errors.exception({
              header: "Dictionary",
              message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
            });
          }
          dict[key] = value;
        }
      }
      return dict;
    };
  };
  webidl.nullableConverter = function(converter) {
    return (V) => {
      if (V === null) {
        return V;
      }
      return converter(V);
    };
  };
  webidl.converters.DOMString = function(V, opts = {}) {
    if (V === null && opts.legacyNullToEmptyString) {
      return "";
    }
    if (typeof V === "symbol") {
      throw new TypeError("Could not convert argument of type symbol to string.");
    }
    return String(V);
  };
  webidl.converters.ByteString = function(V) {
    const x = webidl.converters.DOMString(V);
    for (let index = 0;index < x.length; index++) {
      if (x.charCodeAt(index) > 255) {
        throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
      }
    }
    return x;
  };
  webidl.converters.USVString = toUSVString;
  webidl.converters.boolean = function(V) {
    const x = Boolean(V);
    return x;
  };
  webidl.converters.any = function(V) {
    return V;
  };
  webidl.converters["long long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 64, "signed");
    return x;
  };
  webidl.converters["unsigned long long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 64, "unsigned");
    return x;
  };
  webidl.converters["unsigned long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 32, "unsigned");
    return x;
  };
  webidl.converters["unsigned short"] = function(V, opts) {
    const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
    return x;
  };
  webidl.converters.ArrayBuffer = function(V, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
      throw webidl.errors.conversionFailed({
        prefix: `${V}`,
        argument: `${V}`,
        types: ["ArrayBuffer"]
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.TypedArray = function(V, T, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
      throw webidl.errors.conversionFailed({
        prefix: `${T.name}`,
        argument: `${V}`,
        types: [T.name]
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.DataView = function(V, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
      throw webidl.errors.exception({
        header: "DataView",
        message: "Object is not a DataView."
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.BufferSource = function(V, opts = {}) {
    if (types.isAnyArrayBuffer(V)) {
      return webidl.converters.ArrayBuffer(V, opts);
    }
    if (types.isTypedArray(V)) {
      return webidl.converters.TypedArray(V, V.constructor);
    }
    if (types.isDataView(V)) {
      return webidl.converters.DataView(V, opts);
    }
    throw new TypeError(`Could not convert ${V} to a BufferSource.`);
  };
  webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(webidl.converters.ByteString);
  webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]);
  webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);
  module.exports = {
    webidl
  };
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS((exports, module) => {
  var assert = __require("assert");
  var { atob: atob2 } = __require("buffer");
  var { isomorphicDecode } = require_util2();
  var encoder = new TextEncoder;
  var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
  var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
  var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
  function dataURLProcessor(dataURL) {
    assert(dataURL.protocol === "data:");
    let input = URLSerializer(dataURL, true);
    input = input.slice(5);
    const position = { position: 0 };
    let mimeType = collectASequenceOfCodePointsFast(",", input, position);
    const mimeTypeLength = mimeType.length;
    mimeType = removeASCIIWhitespace(mimeType, true, true);
    if (position.position >= input.length) {
      return "failure";
    }
    position.position++;
    const encodedBody = input.slice(mimeTypeLength + 1);
    let body = stringPercentDecode(encodedBody);
    if (/;(\u0020){0,}base64$/i.test(mimeType)) {
      const stringBody = isomorphicDecode(body);
      body = forgivingBase64(stringBody);
      if (body === "failure") {
        return "failure";
      }
      mimeType = mimeType.slice(0, -6);
      mimeType = mimeType.replace(/(\u0020)+$/, "");
      mimeType = mimeType.slice(0, -1);
    }
    if (mimeType.startsWith(";")) {
      mimeType = "text/plain" + mimeType;
    }
    let mimeTypeRecord = parseMIMEType(mimeType);
    if (mimeTypeRecord === "failure") {
      mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
    }
    return { mimeType: mimeTypeRecord, body };
  }
  function URLSerializer(url, excludeFragment = false) {
    if (!excludeFragment) {
      return url.href;
    }
    const href = url.href;
    const hashLength = url.hash.length;
    return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
  }
  function collectASequenceOfCodePoints(condition, input, position) {
    let result = "";
    while (position.position < input.length && condition(input[position.position])) {
      result += input[position.position];
      position.position++;
    }
    return result;
  }
  function collectASequenceOfCodePointsFast(char, input, position) {
    const idx = input.indexOf(char, position.position);
    const start = position.position;
    if (idx === -1) {
      position.position = input.length;
      return input.slice(start);
    }
    position.position = idx;
    return input.slice(start, position.position);
  }
  function stringPercentDecode(input) {
    const bytes = encoder.encode(input);
    return percentDecode(bytes);
  }
  function percentDecode(input) {
    const output = [];
    for (let i = 0;i < input.length; i++) {
      const byte = input[i];
      if (byte !== 37) {
        output.push(byte);
      } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
        output.push(37);
      } else {
        const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
        const bytePoint = Number.parseInt(nextTwoBytes, 16);
        output.push(bytePoint);
        i += 2;
      }
    }
    return Uint8Array.from(output);
  }
  function parseMIMEType(input) {
    input = removeHTTPWhitespace(input, true, true);
    const position = { position: 0 };
    const type = collectASequenceOfCodePointsFast("/", input, position);
    if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
      return "failure";
    }
    if (position.position > input.length) {
      return "failure";
    }
    position.position++;
    let subtype = collectASequenceOfCodePointsFast(";", input, position);
    subtype = removeHTTPWhitespace(subtype, false, true);
    if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
      return "failure";
    }
    const typeLowercase = type.toLowerCase();
    const subtypeLowercase = subtype.toLowerCase();
    const mimeType = {
      type: typeLowercase,
      subtype: subtypeLowercase,
      parameters: new Map,
      essence: `${typeLowercase}/${subtypeLowercase}`
    };
    while (position.position < input.length) {
      position.position++;
      collectASequenceOfCodePoints((char) => HTTP_WHITESPACE_REGEX.test(char), input, position);
      let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
      parameterName = parameterName.toLowerCase();
      if (position.position < input.length) {
        if (input[position.position] === ";") {
          continue;
        }
        position.position++;
      }
      if (position.position > input.length) {
        break;
      }
      let parameterValue = null;
      if (input[position.position] === '"') {
        parameterValue = collectAnHTTPQuotedString(input, position, true);
        collectASequenceOfCodePointsFast(";", input, position);
      } else {
        parameterValue = collectASequenceOfCodePointsFast(";", input, position);
        parameterValue = removeHTTPWhitespace(parameterValue, false, true);
        if (parameterValue.length === 0) {
          continue;
        }
      }
      if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
        mimeType.parameters.set(parameterName, parameterValue);
      }
    }
    return mimeType;
  }
  function forgivingBase64(data) {
    data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
    if (data.length % 4 === 0) {
      data = data.replace(/=?=$/, "");
    }
    if (data.length % 4 === 1) {
      return "failure";
    }
    if (/[^+/0-9A-Za-z]/.test(data)) {
      return "failure";
    }
    const binary = atob2(data);
    const bytes = new Uint8Array(binary.length);
    for (let byte = 0;byte < binary.length; byte++) {
      bytes[byte] = binary.charCodeAt(byte);
    }
    return bytes;
  }
  function collectAnHTTPQuotedString(input, position, extractValue) {
    const positionStart = position.position;
    let value = "";
    assert(input[position.position] === '"');
    position.position++;
    while (true) {
      value += collectASequenceOfCodePoints((char) => char !== '"' && char !== "\\", input, position);
      if (position.position >= input.length) {
        break;
      }
      const quoteOrBackslash = input[position.position];
      position.position++;
      if (quoteOrBackslash === "\\") {
        if (position.position >= input.length) {
          value += "\\";
          break;
        }
        value += input[position.position];
        position.position++;
      } else {
        assert(quoteOrBackslash === '"');
        break;
      }
    }
    if (extractValue) {
      return value;
    }
    return input.slice(positionStart, position.position);
  }
  function serializeAMimeType(mimeType) {
    assert(mimeType !== "failure");
    const { parameters, essence } = mimeType;
    let serialization = essence;
    for (let [name, value] of parameters.entries()) {
      serialization += ";";
      serialization += name;
      serialization += "=";
      if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
        value = value.replace(/(\\|")/g, "\\$1");
        value = '"' + value;
        value += '"';
      }
      serialization += value;
    }
    return serialization;
  }
  function isHTTPWhiteSpace(char) {
    return char === "\r" || char === `
` || char === "\t" || char === " ";
  }
  function removeHTTPWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
      for (;lead < str.length && isHTTPWhiteSpace(str[lead]); lead++)
        ;
    }
    if (trailing) {
      for (;trail > 0 && isHTTPWhiteSpace(str[trail]); trail--)
        ;
    }
    return str.slice(lead, trail + 1);
  }
  function isASCIIWhitespace(char) {
    return char === "\r" || char === `
` || char === "\t" || char === "\f" || char === " ";
  }
  function removeASCIIWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
      for (;lead < str.length && isASCIIWhitespace(str[lead]); lead++)
        ;
    }
    if (trailing) {
      for (;trail > 0 && isASCIIWhitespace(str[trail]); trail--)
        ;
    }
    return str.slice(lead, trail + 1);
  }
  module.exports = {
    dataURLProcessor,
    URLSerializer,
    collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast,
    stringPercentDecode,
    parseMIMEType,
    collectAnHTTPQuotedString,
    serializeAMimeType
  };
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS((exports, module) => {
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var { types } = __require("util");
  var { kState } = require_symbols2();
  var { isBlobLike } = require_util2();
  var { webidl } = require_webidl();
  var { parseMIMEType, serializeAMimeType } = require_dataURL();
  var { kEnumerableProperty } = require_util();
  var encoder = new TextEncoder;

  class File extends Blob2 {
    constructor(fileBits, fileName, options = {}) {
      webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
      fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
      fileName = webidl.converters.USVString(fileName);
      options = webidl.converters.FilePropertyBag(options);
      const n = fileName;
      let t = options.type;
      let d;
      substep: {
        if (t) {
          t = parseMIMEType(t);
          if (t === "failure") {
            t = "";
            break substep;
          }
          t = serializeAMimeType(t).toLowerCase();
        }
        d = options.lastModified;
      }
      super(processBlobParts(fileBits, options), { type: t });
      this[kState] = {
        name: n,
        lastModified: d,
        type: t
      };
    }
    get name() {
      webidl.brandCheck(this, File);
      return this[kState].name;
    }
    get lastModified() {
      webidl.brandCheck(this, File);
      return this[kState].lastModified;
    }
    get type() {
      webidl.brandCheck(this, File);
      return this[kState].type;
    }
  }

  class FileLike {
    constructor(blobLike, fileName, options = {}) {
      const n = fileName;
      const t = options.type;
      const d = options.lastModified ?? Date.now();
      this[kState] = {
        blobLike,
        name: n,
        type: t,
        lastModified: d
      };
    }
    stream(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.stream(...args);
    }
    arrayBuffer(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.arrayBuffer(...args);
    }
    slice(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.slice(...args);
    }
    text(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.text(...args);
    }
    get size() {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.size;
    }
    get type() {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.type;
    }
    get name() {
      webidl.brandCheck(this, FileLike);
      return this[kState].name;
    }
    get lastModified() {
      webidl.brandCheck(this, FileLike);
      return this[kState].lastModified;
    }
    get [Symbol.toStringTag]() {
      return "File";
    }
  }
  Object.defineProperties(File.prototype, {
    [Symbol.toStringTag]: {
      value: "File",
      configurable: true
    },
    name: kEnumerableProperty,
    lastModified: kEnumerableProperty
  });
  webidl.converters.Blob = webidl.interfaceConverter(Blob2);
  webidl.converters.BlobPart = function(V, opts) {
    if (webidl.util.Type(V) === "Object") {
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
        return webidl.converters.BufferSource(V, opts);
      }
    }
    return webidl.converters.USVString(V, opts);
  };
  webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(webidl.converters.BlobPart);
  webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
    {
      key: "lastModified",
      converter: webidl.converters["long long"],
      get defaultValue() {
        return Date.now();
      }
    },
    {
      key: "type",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "endings",
      converter: (value) => {
        value = webidl.converters.DOMString(value);
        value = value.toLowerCase();
        if (value !== "native") {
          value = "transparent";
        }
        return value;
      },
      defaultValue: "transparent"
    }
  ]);
  function processBlobParts(parts, options) {
    const bytes = [];
    for (const element of parts) {
      if (typeof element === "string") {
        let s = element;
        if (options.endings === "native") {
          s = convertLineEndingsNative(s);
        }
        bytes.push(encoder.encode(s));
      } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
        if (!element.buffer) {
          bytes.push(new Uint8Array(element));
        } else {
          bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
        }
      } else if (isBlobLike(element)) {
        bytes.push(element);
      }
    }
    return bytes;
  }
  function convertLineEndingsNative(s) {
    let nativeLineEnding = `
`;
    if (process.platform === "win32") {
      nativeLineEnding = `\r
`;
    }
    return s.replace(/\r?\n/g, nativeLineEnding);
  }
  function isFileLike(object) {
    return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
  }
  module.exports = { File, FileLike, isFileLike };
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS((exports, module) => {
  var { isBlobLike, toUSVString, makeIterator } = require_util2();
  var { kState } = require_symbols2();
  var { File: UndiciFile, FileLike, isFileLike } = require_file();
  var { webidl } = require_webidl();
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var File = NativeFile ?? UndiciFile;

  class FormData {
    constructor(form) {
      if (form !== undefined) {
        throw webidl.errors.conversionFailed({
          prefix: "FormData constructor",
          argument: "Argument 1",
          types: ["undefined"]
        });
      }
      this[kState] = [];
    }
    append(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
      if (arguments.length === 3 && !isBlobLike(value)) {
        throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
      }
      name = webidl.converters.USVString(name);
      value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
      filename = arguments.length === 3 ? webidl.converters.USVString(filename) : undefined;
      const entry = makeEntry(name, value, filename);
      this[kState].push(entry);
    }
    delete(name) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
      name = webidl.converters.USVString(name);
      this[kState] = this[kState].filter((entry) => entry.name !== name);
    }
    get(name) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
      name = webidl.converters.USVString(name);
      const idx = this[kState].findIndex((entry) => entry.name === name);
      if (idx === -1) {
        return null;
      }
      return this[kState][idx].value;
    }
    getAll(name) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
      name = webidl.converters.USVString(name);
      return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
    }
    has(name) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
      name = webidl.converters.USVString(name);
      return this[kState].findIndex((entry) => entry.name === name) !== -1;
    }
    set(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
      if (arguments.length === 3 && !isBlobLike(value)) {
        throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
      }
      name = webidl.converters.USVString(name);
      value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
      filename = arguments.length === 3 ? toUSVString(filename) : undefined;
      const entry = makeEntry(name, value, filename);
      const idx = this[kState].findIndex((entry2) => entry2.name === name);
      if (idx !== -1) {
        this[kState] = [
          ...this[kState].slice(0, idx),
          entry,
          ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
        ];
      } else {
        this[kState].push(entry);
      }
    }
    entries() {
      webidl.brandCheck(this, FormData);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
    }
    keys() {
      webidl.brandCheck(this, FormData);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "key");
    }
    values() {
      webidl.brandCheck(this, FormData);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "value");
    }
    forEach(callbackFn, thisArg = globalThis) {
      webidl.brandCheck(this, FormData);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
      if (typeof callbackFn !== "function") {
        throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
      }
      for (const [key, value] of this) {
        callbackFn.apply(thisArg, [value, key, this]);
      }
    }
  }
  FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
  Object.defineProperties(FormData.prototype, {
    [Symbol.toStringTag]: {
      value: "FormData",
      configurable: true
    }
  });
  function makeEntry(name, value, filename) {
    name = Buffer.from(name).toString("utf8");
    if (typeof value === "string") {
      value = Buffer.from(value).toString("utf8");
    } else {
      if (!isFileLike(value)) {
        value = value instanceof Blob2 ? new File([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
      }
      if (filename !== undefined) {
        const options = {
          type: value.type,
          lastModified: value.lastModified
        };
        value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([value], filename, options) : new FileLike(value, filename, options);
      }
    }
    return { name, value };
  }
  module.exports = { FormData };
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS((exports, module) => {
  var Busboy = require_main();
  var util = require_util();
  var {
    ReadableStreamFrom,
    isBlobLike,
    isReadableStreamLike,
    readableStreamClose,
    createDeferredPromise,
    fullyReadBody
  } = require_util2();
  var { FormData } = require_formdata();
  var { kState } = require_symbols2();
  var { webidl } = require_webidl();
  var { DOMException: DOMException2, structuredClone } = require_constants2();
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var { kBodyUsed } = require_symbols();
  var assert = __require("assert");
  var { isErrored } = require_util();
  var { isUint8Array, isArrayBuffer } = __require("util/types");
  var { File: UndiciFile } = require_file();
  var { parseMIMEType, serializeAMimeType } = require_dataURL();
  var random;
  try {
    const crypto2 = __require("node:crypto");
    random = (max) => crypto2.randomInt(0, max);
  } catch {
    random = (max) => Math.floor(Math.random(max));
  }
  var ReadableStream = globalThis.ReadableStream;
  var File = NativeFile ?? UndiciFile;
  var textEncoder = new TextEncoder;
  var textDecoder = new TextDecoder;
  function extractBody(object, keepalive = false) {
    if (!ReadableStream) {
      ReadableStream = __require("stream/web").ReadableStream;
    }
    let stream = null;
    if (object instanceof ReadableStream) {
      stream = object;
    } else if (isBlobLike(object)) {
      stream = object.stream();
    } else {
      stream = new ReadableStream({
        async pull(controller) {
          controller.enqueue(typeof source === "string" ? textEncoder.encode(source) : source);
          queueMicrotask(() => readableStreamClose(controller));
        },
        start() {},
        type: undefined
      });
    }
    assert(isReadableStreamLike(stream));
    let action = null;
    let source = null;
    let length = null;
    let type = null;
    if (typeof object === "string") {
      source = object;
      type = "text/plain;charset=UTF-8";
    } else if (object instanceof URLSearchParams) {
      source = object.toString();
      type = "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isArrayBuffer(object)) {
      source = new Uint8Array(object.slice());
    } else if (ArrayBuffer.isView(object)) {
      source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
    } else if (util.isFormDataLike(object)) {
      const boundary = `----formdata-undici-0${`${random(100000000000)}`.padStart(11, "0")}`;
      const prefix = `--${boundary}\r
Content-Disposition: form-data`;
      /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
      const escape = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
      const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, `\r
`);
      const blobParts = [];
      const rn = new Uint8Array([13, 10]);
      length = 0;
      let hasUnknownSizeValue = false;
      for (const [name, value] of object) {
        if (typeof value === "string") {
          const chunk2 = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r
\r
${normalizeLinefeeds(value)}\r
`);
          blobParts.push(chunk2);
          length += chunk2.byteLength;
        } else {
          const chunk2 = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
` + `Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
          blobParts.push(chunk2, value, rn);
          if (typeof value.size === "number") {
            length += chunk2.byteLength + value.size + rn.byteLength;
          } else {
            hasUnknownSizeValue = true;
          }
        }
      }
      const chunk = textEncoder.encode(`--${boundary}--`);
      blobParts.push(chunk);
      length += chunk.byteLength;
      if (hasUnknownSizeValue) {
        length = null;
      }
      source = object;
      action = async function* () {
        for (const part of blobParts) {
          if (part.stream) {
            yield* part.stream();
          } else {
            yield part;
          }
        }
      };
      type = "multipart/form-data; boundary=" + boundary;
    } else if (isBlobLike(object)) {
      source = object;
      length = object.size;
      if (object.type) {
        type = object.type;
      }
    } else if (typeof object[Symbol.asyncIterator] === "function") {
      if (keepalive) {
        throw new TypeError("keepalive");
      }
      if (util.isDisturbed(object) || object.locked) {
        throw new TypeError("Response body object should not be disturbed or locked");
      }
      stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);
    }
    if (typeof source === "string" || util.isBuffer(source)) {
      length = Buffer.byteLength(source);
    }
    if (action != null) {
      let iterator;
      stream = new ReadableStream({
        async start() {
          iterator = action(object)[Symbol.asyncIterator]();
        },
        async pull(controller) {
          const { value, done } = await iterator.next();
          if (done) {
            queueMicrotask(() => {
              controller.close();
            });
          } else {
            if (!isErrored(stream)) {
              controller.enqueue(new Uint8Array(value));
            }
          }
          return controller.desiredSize > 0;
        },
        async cancel(reason) {
          await iterator.return();
        },
        type: undefined
      });
    }
    const body = { stream, source, length };
    return [body, type];
  }
  function safelyExtractBody(object, keepalive = false) {
    if (!ReadableStream) {
      ReadableStream = __require("stream/web").ReadableStream;
    }
    if (object instanceof ReadableStream) {
      assert(!util.isDisturbed(object), "The body has already been consumed.");
      assert(!object.locked, "The stream is locked.");
    }
    return extractBody(object, keepalive);
  }
  function cloneBody(body) {
    const [out1, out2] = body.stream.tee();
    const out2Clone = structuredClone(out2, { transfer: [out2] });
    const [, finalClone] = out2Clone.tee();
    body.stream = out1;
    return {
      stream: finalClone,
      length: body.length,
      source: body.source
    };
  }
  async function* consumeBody(body) {
    if (body) {
      if (isUint8Array(body)) {
        yield body;
      } else {
        const stream = body.stream;
        if (util.isDisturbed(stream)) {
          throw new TypeError("The body has already been consumed.");
        }
        if (stream.locked) {
          throw new TypeError("The stream is locked.");
        }
        stream[kBodyUsed] = true;
        yield* stream;
      }
    }
  }
  function throwIfAborted(state) {
    if (state.aborted) {
      throw new DOMException2("The operation was aborted.", "AbortError");
    }
  }
  function bodyMixinMethods(instance) {
    const methods = {
      blob() {
        return specConsumeBody(this, (bytes) => {
          let mimeType = bodyMimeType(this);
          if (mimeType === "failure") {
            mimeType = "";
          } else if (mimeType) {
            mimeType = serializeAMimeType(mimeType);
          }
          return new Blob2([bytes], { type: mimeType });
        }, instance);
      },
      arrayBuffer() {
        return specConsumeBody(this, (bytes) => {
          return new Uint8Array(bytes).buffer;
        }, instance);
      },
      text() {
        return specConsumeBody(this, utf8DecodeBytes, instance);
      },
      json() {
        return specConsumeBody(this, parseJSONFromBytes, instance);
      },
      async formData() {
        webidl.brandCheck(this, instance);
        throwIfAborted(this[kState]);
        const contentType = this.headers.get("Content-Type");
        if (/multipart\/form-data/.test(contentType)) {
          const headers = {};
          for (const [key, value] of this.headers)
            headers[key.toLowerCase()] = value;
          const responseFormData = new FormData;
          let busboy;
          try {
            busboy = new Busboy({
              headers,
              preservePath: true
            });
          } catch (err) {
            throw new DOMException2(`${err}`, "AbortError");
          }
          busboy.on("field", (name, value) => {
            responseFormData.append(name, value);
          });
          busboy.on("file", (name, value, filename, encoding, mimeType) => {
            const chunks = [];
            if (encoding === "base64" || encoding.toLowerCase() === "base64") {
              let base64chunk = "";
              value.on("data", (chunk) => {
                base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                const end = base64chunk.length - base64chunk.length % 4;
                chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                base64chunk = base64chunk.slice(end);
              });
              value.on("end", () => {
                chunks.push(Buffer.from(base64chunk, "base64"));
                responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
              });
            } else {
              value.on("data", (chunk) => {
                chunks.push(chunk);
              });
              value.on("end", () => {
                responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
              });
            }
          });
          const busboyResolve = new Promise((resolve, reject) => {
            busboy.on("finish", resolve);
            busboy.on("error", (err) => reject(new TypeError(err)));
          });
          if (this.body !== null)
            for await (const chunk of consumeBody(this[kState].body))
              busboy.write(chunk);
          busboy.end();
          await busboyResolve;
          return responseFormData;
        } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
          let entries;
          try {
            let text = "";
            const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
            for await (const chunk of consumeBody(this[kState].body)) {
              if (!isUint8Array(chunk)) {
                throw new TypeError("Expected Uint8Array chunk");
              }
              text += streamingDecoder.decode(chunk, { stream: true });
            }
            text += streamingDecoder.decode();
            entries = new URLSearchParams(text);
          } catch (err) {
            throw Object.assign(new TypeError, { cause: err });
          }
          const formData = new FormData;
          for (const [name, value] of entries) {
            formData.append(name, value);
          }
          return formData;
        } else {
          await Promise.resolve();
          throwIfAborted(this[kState]);
          throw webidl.errors.exception({
            header: `${instance.name}.formData`,
            message: "Could not parse content as FormData."
          });
        }
      }
    };
    return methods;
  }
  function mixinBody(prototype) {
    Object.assign(prototype.prototype, bodyMixinMethods(prototype));
  }
  async function specConsumeBody(object, convertBytesToJSValue, instance) {
    webidl.brandCheck(object, instance);
    throwIfAborted(object[kState]);
    if (bodyUnusable(object[kState].body)) {
      throw new TypeError("Body is unusable");
    }
    const promise = createDeferredPromise();
    const errorSteps = (error) => promise.reject(error);
    const successSteps = (data) => {
      try {
        promise.resolve(convertBytesToJSValue(data));
      } catch (e) {
        errorSteps(e);
      }
    };
    if (object[kState].body == null) {
      successSteps(new Uint8Array);
      return promise.promise;
    }
    await fullyReadBody(object[kState].body, successSteps, errorSteps);
    return promise.promise;
  }
  function bodyUnusable(body) {
    return body != null && (body.stream.locked || util.isDisturbed(body.stream));
  }
  function utf8DecodeBytes(buffer) {
    if (buffer.length === 0) {
      return "";
    }
    if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
      buffer = buffer.subarray(3);
    }
    const output = textDecoder.decode(buffer);
    return output;
  }
  function parseJSONFromBytes(bytes) {
    return JSON.parse(utf8DecodeBytes(bytes));
  }
  function bodyMimeType(object) {
    const { headersList } = object[kState];
    const contentType = headersList.get("content-type");
    if (contentType === null) {
      return "failure";
    }
    return parseMIMEType(contentType);
  }
  module.exports = {
    extractBody,
    safelyExtractBody,
    cloneBody,
    mixinBody
  };
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS((exports, module) => {
  var {
    InvalidArgumentError,
    NotSupportedError
  } = require_errors();
  var assert = __require("assert");
  var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
  var util = require_util();
  var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
  var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  var invalidPathRegex = /[^\u0021-\u00ff]/;
  var kHandler = Symbol("handler");
  var channels = {};
  var extractBody;
  try {
    const diagnosticsChannel = __require("diagnostics_channel");
    channels.create = diagnosticsChannel.channel("undici:request:create");
    channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
    channels.headers = diagnosticsChannel.channel("undici:request:headers");
    channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
    channels.error = diagnosticsChannel.channel("undici:request:error");
  } catch {
    channels.create = { hasSubscribers: false };
    channels.bodySent = { hasSubscribers: false };
    channels.headers = { hasSubscribers: false };
    channels.trailers = { hasSubscribers: false };
    channels.error = { hasSubscribers: false };
  }

  class Request {
    constructor(origin, {
      path,
      method,
      body,
      headers,
      query,
      idempotent,
      blocking,
      upgrade,
      headersTimeout,
      bodyTimeout,
      reset,
      throwOnError,
      expectContinue
    }, handler) {
      if (typeof path !== "string") {
        throw new InvalidArgumentError("path must be a string");
      } else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") {
        throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
      } else if (invalidPathRegex.exec(path) !== null) {
        throw new InvalidArgumentError("invalid request path");
      }
      if (typeof method !== "string") {
        throw new InvalidArgumentError("method must be a string");
      } else if (tokenRegExp.exec(method) === null) {
        throw new InvalidArgumentError("invalid request method");
      }
      if (upgrade && typeof upgrade !== "string") {
        throw new InvalidArgumentError("upgrade must be a string");
      }
      if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("invalid headersTimeout");
      }
      if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("invalid bodyTimeout");
      }
      if (reset != null && typeof reset !== "boolean") {
        throw new InvalidArgumentError("invalid reset");
      }
      if (expectContinue != null && typeof expectContinue !== "boolean") {
        throw new InvalidArgumentError("invalid expectContinue");
      }
      this.headersTimeout = headersTimeout;
      this.bodyTimeout = bodyTimeout;
      this.throwOnError = throwOnError === true;
      this.method = method;
      this.abort = null;
      if (body == null) {
        this.body = null;
      } else if (util.isStream(body)) {
        this.body = body;
        const rState = this.body._readableState;
        if (!rState || !rState.autoDestroy) {
          this.endHandler = function autoDestroy() {
            util.destroy(this);
          };
          this.body.on("end", this.endHandler);
        }
        this.errorHandler = (err) => {
          if (this.abort) {
            this.abort(err);
          } else {
            this.error = err;
          }
        };
        this.body.on("error", this.errorHandler);
      } else if (util.isBuffer(body)) {
        this.body = body.byteLength ? body : null;
      } else if (ArrayBuffer.isView(body)) {
        this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
      } else if (body instanceof ArrayBuffer) {
        this.body = body.byteLength ? Buffer.from(body) : null;
      } else if (typeof body === "string") {
        this.body = body.length ? Buffer.from(body) : null;
      } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
        this.body = body;
      } else {
        throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
      }
      this.completed = false;
      this.aborted = false;
      this.upgrade = upgrade || null;
      this.path = query ? util.buildURL(path, query) : path;
      this.origin = origin;
      this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
      this.blocking = blocking == null ? false : blocking;
      this.reset = reset == null ? null : reset;
      this.host = null;
      this.contentLength = null;
      this.contentType = null;
      this.headers = "";
      this.expectContinue = expectContinue != null ? expectContinue : false;
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0;i < headers.length; i += 2) {
          processHeader(this, headers[i], headers[i + 1]);
        }
      } else if (headers && typeof headers === "object") {
        const keys = Object.keys(headers);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          processHeader(this, key, headers[key]);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      if (util.isFormDataLike(this.body)) {
        if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
          throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
        }
        if (!extractBody) {
          extractBody = require_body().extractBody;
        }
        const [bodyStream, contentType] = extractBody(body);
        if (this.contentType == null) {
          this.contentType = contentType;
          this.headers += `content-type: ${contentType}\r
`;
        }
        this.body = bodyStream.stream;
        this.contentLength = bodyStream.length;
      } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
        this.contentType = body.type;
        this.headers += `content-type: ${body.type}\r
`;
      }
      util.validateHandler(handler, method, upgrade);
      this.servername = util.getServerName(this.host);
      this[kHandler] = handler;
      if (channels.create.hasSubscribers) {
        channels.create.publish({ request: this });
      }
    }
    onBodySent(chunk) {
      if (this[kHandler].onBodySent) {
        try {
          return this[kHandler].onBodySent(chunk);
        } catch (err) {
          this.abort(err);
        }
      }
    }
    onRequestSent() {
      if (channels.bodySent.hasSubscribers) {
        channels.bodySent.publish({ request: this });
      }
      if (this[kHandler].onRequestSent) {
        try {
          return this[kHandler].onRequestSent();
        } catch (err) {
          this.abort(err);
        }
      }
    }
    onConnect(abort) {
      assert(!this.aborted);
      assert(!this.completed);
      if (this.error) {
        abort(this.error);
      } else {
        this.abort = abort;
        return this[kHandler].onConnect(abort);
      }
    }
    onHeaders(statusCode, headers, resume, statusText) {
      assert(!this.aborted);
      assert(!this.completed);
      if (channels.headers.hasSubscribers) {
        channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
      }
      try {
        return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
      } catch (err) {
        this.abort(err);
      }
    }
    onData(chunk) {
      assert(!this.aborted);
      assert(!this.completed);
      try {
        return this[kHandler].onData(chunk);
      } catch (err) {
        this.abort(err);
        return false;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      assert(!this.aborted);
      assert(!this.completed);
      return this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
      this.onFinally();
      assert(!this.aborted);
      this.completed = true;
      if (channels.trailers.hasSubscribers) {
        channels.trailers.publish({ request: this, trailers });
      }
      try {
        return this[kHandler].onComplete(trailers);
      } catch (err) {
        this.onError(err);
      }
    }
    onError(error) {
      this.onFinally();
      if (channels.error.hasSubscribers) {
        channels.error.publish({ request: this, error });
      }
      if (this.aborted) {
        return;
      }
      this.aborted = true;
      return this[kHandler].onError(error);
    }
    onFinally() {
      if (this.errorHandler) {
        this.body.off("error", this.errorHandler);
        this.errorHandler = null;
      }
      if (this.endHandler) {
        this.body.off("end", this.endHandler);
        this.endHandler = null;
      }
    }
    addHeader(key, value) {
      processHeader(this, key, value);
      return this;
    }
    static [kHTTP1BuildRequest](origin, opts, handler) {
      return new Request(origin, opts, handler);
    }
    static [kHTTP2BuildRequest](origin, opts, handler) {
      const headers = opts.headers;
      opts = { ...opts, headers: null };
      const request = new Request(origin, opts, handler);
      request.headers = {};
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0;i < headers.length; i += 2) {
          processHeader(request, headers[i], headers[i + 1], true);
        }
      } else if (headers && typeof headers === "object") {
        const keys = Object.keys(headers);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          processHeader(request, key, headers[key], true);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      return request;
    }
    static [kHTTP2CopyHeaders](raw) {
      const rawHeaders = raw.split(`\r
`);
      const headers = {};
      for (const header of rawHeaders) {
        const [key, value] = header.split(": ");
        if (value == null || value.length === 0)
          continue;
        if (headers[key])
          headers[key] += `,${value}`;
        else
          headers[key] = value;
      }
      return headers;
    }
  }
  function processHeaderValue(key, val, skipAppend) {
    if (val && typeof val === "object") {
      throw new InvalidArgumentError(`invalid ${key} header`);
    }
    val = val != null ? `${val}` : "";
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`);
    }
    return skipAppend ? val : `${key}: ${val}\r
`;
  }
  function processHeader(request, key, val, skipAppend = false) {
    if (val && (typeof val === "object" && !Array.isArray(val))) {
      throw new InvalidArgumentError(`invalid ${key} header`);
    } else if (val === undefined) {
      return;
    }
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      request.host = val;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
      request.contentLength = parseInt(val, 10);
      if (!Number.isFinite(request.contentLength)) {
        throw new InvalidArgumentError("invalid content-length header");
      }
    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
      request.contentType = val;
      if (skipAppend)
        request.headers[key] = processHeaderValue(key, val, skipAppend);
      else
        request.headers += processHeaderValue(key, val);
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
      throw new InvalidArgumentError("invalid transfer-encoding header");
    } else if (key.length === 10 && key.toLowerCase() === "connection") {
      const value = typeof val === "string" ? val.toLowerCase() : null;
      if (value !== "close" && value !== "keep-alive") {
        throw new InvalidArgumentError("invalid connection header");
      } else if (value === "close") {
        request.reset = true;
      }
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
      throw new InvalidArgumentError("invalid keep-alive header");
    } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
      throw new InvalidArgumentError("invalid upgrade header");
    } else if (key.length === 6 && key.toLowerCase() === "expect") {
      throw new NotSupportedError("expect header not supported");
    } else if (tokenRegExp.exec(key) === null) {
      throw new InvalidArgumentError("invalid header key");
    } else {
      if (Array.isArray(val)) {
        for (let i = 0;i < val.length; i++) {
          if (skipAppend) {
            if (request.headers[key])
              request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
            else
              request.headers[key] = processHeaderValue(key, val[i], skipAppend);
          } else {
            request.headers += processHeaderValue(key, val[i]);
          }
        }
      } else {
        if (skipAppend)
          request.headers[key] = processHeaderValue(key, val, skipAppend);
        else
          request.headers += processHeaderValue(key, val);
      }
    }
  }
  module.exports = Request;
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS((exports, module) => {
  var EventEmitter = __require("events");

  class Dispatcher extends EventEmitter {
    dispatch() {
      throw new Error("not implemented");
    }
    close() {
      throw new Error("not implemented");
    }
    destroy() {
      throw new Error("not implemented");
    }
  }
  module.exports = Dispatcher;
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS((exports, module) => {
  var Dispatcher = require_dispatcher();
  var {
    ClientDestroyedError,
    ClientClosedError,
    InvalidArgumentError
  } = require_errors();
  var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
  var kDestroyed = Symbol("destroyed");
  var kClosed = Symbol("closed");
  var kOnDestroyed = Symbol("onDestroyed");
  var kOnClosed = Symbol("onClosed");
  var kInterceptedDispatch = Symbol("Intercepted Dispatch");

  class DispatcherBase extends Dispatcher {
    constructor() {
      super();
      this[kDestroyed] = false;
      this[kOnDestroyed] = null;
      this[kClosed] = false;
      this[kOnClosed] = [];
    }
    get destroyed() {
      return this[kDestroyed];
    }
    get closed() {
      return this[kClosed];
    }
    get interceptors() {
      return this[kInterceptors];
    }
    set interceptors(newInterceptors) {
      if (newInterceptors) {
        for (let i = newInterceptors.length - 1;i >= 0; i--) {
          const interceptor = this[kInterceptors][i];
          if (typeof interceptor !== "function") {
            throw new InvalidArgumentError("interceptor must be an function");
          }
        }
      }
      this[kInterceptors] = newInterceptors;
    }
    close(callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.close((err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        queueMicrotask(() => callback(new ClientDestroyedError, null));
        return;
      }
      if (this[kClosed]) {
        if (this[kOnClosed]) {
          this[kOnClosed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      this[kClosed] = true;
      this[kOnClosed].push(callback);
      const onClosed = () => {
        const callbacks = this[kOnClosed];
        this[kOnClosed] = null;
        for (let i = 0;i < callbacks.length; i++) {
          callbacks[i](null, null);
        }
      };
      this[kClose]().then(() => this.destroy()).then(() => {
        queueMicrotask(onClosed);
      });
    }
    destroy(err, callback) {
      if (typeof err === "function") {
        callback = err;
        err = null;
      }
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.destroy(err, (err2, data) => {
            return err2 ? reject(err2) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        if (this[kOnDestroyed]) {
          this[kOnDestroyed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      if (!err) {
        err = new ClientDestroyedError;
      }
      this[kDestroyed] = true;
      this[kOnDestroyed] = this[kOnDestroyed] || [];
      this[kOnDestroyed].push(callback);
      const onDestroyed = () => {
        const callbacks = this[kOnDestroyed];
        this[kOnDestroyed] = null;
        for (let i = 0;i < callbacks.length; i++) {
          callbacks[i](null, null);
        }
      };
      this[kDestroy](err).then(() => {
        queueMicrotask(onDestroyed);
      });
    }
    [kInterceptedDispatch](opts, handler) {
      if (!this[kInterceptors] || this[kInterceptors].length === 0) {
        this[kInterceptedDispatch] = this[kDispatch];
        return this[kDispatch](opts, handler);
      }
      let dispatch = this[kDispatch].bind(this);
      for (let i = this[kInterceptors].length - 1;i >= 0; i--) {
        dispatch = this[kInterceptors][i](dispatch);
      }
      this[kInterceptedDispatch] = dispatch;
      return dispatch(opts, handler);
    }
    dispatch(opts, handler) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      try {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object.");
        }
        if (this[kDestroyed] || this[kOnDestroyed]) {
          throw new ClientDestroyedError;
        }
        if (this[kClosed]) {
          throw new ClientClosedError;
        }
        return this[kInterceptedDispatch](opts, handler);
      } catch (err) {
        if (typeof handler.onError !== "function") {
          throw new InvalidArgumentError("invalid onError method");
        }
        handler.onError(err);
        return false;
      }
    }
  }
  module.exports = DispatcherBase;
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS((exports, module) => {
  var net = __require("net");
  var assert = __require("assert");
  var util = require_util();
  var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
  var tls;
  var SessionCache;
  if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
    SessionCache = class WeakSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
        this._sessionRegistry = new global.FinalizationRegistry((key) => {
          if (this._sessionCache.size < this._maxCachedSessions) {
            return;
          }
          const ref = this._sessionCache.get(key);
          if (ref !== undefined && ref.deref() === undefined) {
            this._sessionCache.delete(key);
          }
        });
      }
      get(sessionKey) {
        const ref = this._sessionCache.get(sessionKey);
        return ref ? ref.deref() : null;
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        this._sessionCache.set(sessionKey, new WeakRef(session));
        this._sessionRegistry.register(session, sessionKey);
      }
    };
  } else {
    SessionCache = class SimpleSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
      }
      get(sessionKey) {
        return this._sessionCache.get(sessionKey);
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        if (this._sessionCache.size >= this._maxCachedSessions) {
          const { value: oldestKey } = this._sessionCache.keys().next();
          this._sessionCache.delete(oldestKey);
        }
        this._sessionCache.set(sessionKey, session);
      }
    };
  }
  function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
      throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    }
    const options = { path: socketPath, ...opts };
    const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
    timeout = timeout == null ? 1e4 : timeout;
    allowH2 = allowH2 != null ? allowH2 : false;
    return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
      let socket;
      if (protocol === "https:") {
        if (!tls) {
          tls = __require("tls");
        }
        servername = servername || options.servername || util.getServerName(host) || null;
        const sessionKey = servername || hostname;
        const session = sessionCache.get(sessionKey) || null;
        assert(sessionKey);
        socket = tls.connect({
          highWaterMark: 16384,
          ...options,
          servername,
          session,
          localAddress,
          ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
          socket: httpSocket,
          port: port || 443,
          host: hostname
        });
        socket.on("session", function(session2) {
          sessionCache.set(sessionKey, session2);
        });
      } else {
        assert(!httpSocket, "httpSocket can only be sent on TLS update");
        socket = net.connect({
          highWaterMark: 64 * 1024,
          ...options,
          localAddress,
          port: port || 80,
          host: hostname
        });
      }
      if (options.keepAlive == null || options.keepAlive) {
        const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60000 : options.keepAliveInitialDelay;
        socket.setKeepAlive(true, keepAliveInitialDelay);
      }
      const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
      socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
        cancelTimeout();
        if (callback) {
          const cb = callback;
          callback = null;
          cb(null, this);
        }
      }).on("error", function(err) {
        cancelTimeout();
        if (callback) {
          const cb = callback;
          callback = null;
          cb(err);
        }
      });
      return socket;
    };
  }
  function setupTimeout(onConnectTimeout2, timeout) {
    if (!timeout) {
      return () => {};
    }
    let s1 = null;
    let s2 = null;
    const timeoutId = setTimeout(() => {
      s1 = setImmediate(() => {
        if (process.platform === "win32") {
          s2 = setImmediate(() => onConnectTimeout2());
        } else {
          onConnectTimeout2();
        }
      });
    }, timeout);
    return () => {
      clearTimeout(timeoutId);
      clearImmediate(s1);
      clearImmediate(s2);
    };
  }
  function onConnectTimeout(socket) {
    util.destroy(socket, new ConnectTimeoutError);
  }
  module.exports = buildConnector;
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.enumToMap = undefined;
  function enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
      const value = obj[key];
      if (typeof value === "number") {
        res[key] = value;
      }
    });
    return res;
  }
  exports.enumToMap = enumToMap;
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = undefined;
  var utils_1 = require_utils2();
  var ERROR;
  (function(ERROR2) {
    ERROR2[ERROR2["OK"] = 0] = "OK";
    ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
    ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
    ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
    ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR2[ERROR2["USER"] = 24] = "USER";
  })(ERROR = exports.ERROR || (exports.ERROR = {}));
  var TYPE;
  (function(TYPE2) {
    TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
    TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
    TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
  })(TYPE = exports.TYPE || (exports.TYPE = {}));
  var FLAGS;
  (function(FLAGS2) {
    FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
    FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
    FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
    FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
  })(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
  var LENIENT_FLAGS;
  (function(LENIENT_FLAGS2) {
    LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
  })(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
  var METHODS;
  (function(METHODS2) {
    METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
    METHODS2[METHODS2["GET"] = 1] = "GET";
    METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
    METHODS2[METHODS2["POST"] = 3] = "POST";
    METHODS2[METHODS2["PUT"] = 4] = "PUT";
    METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
    METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
    METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
    METHODS2[METHODS2["COPY"] = 8] = "COPY";
    METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
    METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
    METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
    METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
    METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
    METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
    METHODS2[METHODS2["BIND"] = 16] = "BIND";
    METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
    METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
    METHODS2[METHODS2["ACL"] = 19] = "ACL";
    METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
    METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
    METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
    METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
    METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
    METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
    METHODS2[METHODS2["LINK"] = 31] = "LINK";
    METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
    METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
    METHODS2[METHODS2["PRI"] = 34] = "PRI";
    METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
    METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
    METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
    METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
    METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
    METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
  })(METHODS = exports.METHODS || (exports.METHODS = {}));
  exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS["M-SEARCH"],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    METHODS.SOURCE
  ];
  exports.METHODS_ICE = [
    METHODS.SOURCE
  ];
  exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    METHODS.GET,
    METHODS.POST
  ];
  exports.METHOD_MAP = utils_1.enumToMap(METHODS);
  exports.H_METHOD_MAP = {};
  Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
      exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
  });
  var FINISH;
  (function(FINISH2) {
    FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
    FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
  })(FINISH = exports.FINISH || (exports.FINISH = {}));
  exports.ALPHA = [];
  for (let i = 65;i <= 90; i++) {
    exports.ALPHA.push(String.fromCharCode(i));
    exports.ALPHA.push(String.fromCharCode(i + 32));
  }
  exports.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
  };
  exports.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
  };
  exports.NUM = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
  ];
  exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
  exports.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
  exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
  exports.STRICT_URL_CHAR = [
    "!",
    '"',
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~"
  ].concat(exports.ALPHANUM);
  exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["\t", "\f"]);
  for (let i = 128;i <= 255; i++) {
    exports.URL_CHAR.push(i);
  }
  exports.HEX = exports.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
  exports.STRICT_TOKEN = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "'",
    "*",
    "+",
    "-",
    ".",
    "^",
    "_",
    "`",
    "|",
    "~"
  ].concat(exports.ALPHANUM);
  exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
  exports.HEADER_CHARS = ["\t"];
  for (let i = 32;i <= 255; i++) {
    if (i !== 127) {
      exports.HEADER_CHARS.push(i);
    }
  }
  exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
  exports.MAJOR = exports.NUM_MAP;
  exports.MINOR = exports.MAJOR;
  var HEADER_STATE;
  (function(HEADER_STATE2) {
    HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
  })(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
  exports.SPECIAL_HEADERS = {
    connection: HEADER_STATE.CONNECTION,
    "content-length": HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": HEADER_STATE.CONNECTION,
    "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
    upgrade: HEADER_STATE.UPGRADE
  };
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS((exports, module) => {
  var util = require_util();
  var { kBodyUsed } = require_symbols();
  var assert = __require("assert");
  var { InvalidArgumentError } = require_errors();
  var EE = __require("events");
  var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
  var kBody = Symbol("body");

  class BodyAsyncIterable {
    constructor(body) {
      this[kBody] = body;
      this[kBodyUsed] = false;
    }
    async* [Symbol.asyncIterator]() {
      assert(!this[kBodyUsed], "disturbed");
      this[kBodyUsed] = true;
      yield* this[kBody];
    }
  }

  class RedirectHandler {
    constructor(dispatch, maxRedirections, opts, handler) {
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      util.validateHandler(handler, opts.method, opts.upgrade);
      this.dispatch = dispatch;
      this.location = null;
      this.abort = null;
      this.opts = { ...opts, maxRedirections: 0 };
      this.maxRedirections = maxRedirections;
      this.handler = handler;
      this.history = [];
      if (util.isStream(this.opts.body)) {
        if (util.bodyLength(this.opts.body) === 0) {
          this.opts.body.on("data", function() {
            assert(false);
          });
        }
        if (typeof this.opts.body.readableDidRead !== "boolean") {
          this.opts.body[kBodyUsed] = false;
          EE.prototype.on.call(this.opts.body, "data", function() {
            this[kBodyUsed] = true;
          });
        }
      } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      }
    }
    onConnect(abort) {
      this.abort = abort;
      this.handler.onConnect(abort, { history: this.history });
    }
    onUpgrade(statusCode, headers, socket) {
      this.handler.onUpgrade(statusCode, headers, socket);
    }
    onError(error) {
      this.handler.onError(error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
      this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
      if (this.opts.origin) {
        this.history.push(new URL(this.opts.path, this.opts.origin));
      }
      if (!this.location) {
        return this.handler.onHeaders(statusCode, headers, resume, statusText);
      }
      const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
      const path = search ? `${pathname}${search}` : pathname;
      this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
      this.opts.path = path;
      this.opts.origin = origin;
      this.opts.maxRedirections = 0;
      this.opts.query = null;
      if (statusCode === 303 && this.opts.method !== "HEAD") {
        this.opts.method = "GET";
        this.opts.body = null;
      }
    }
    onData(chunk) {
      if (this.location) {} else {
        return this.handler.onData(chunk);
      }
    }
    onComplete(trailers) {
      if (this.location) {
        this.location = null;
        this.abort = null;
        this.dispatch(this.opts, this);
      } else {
        this.handler.onComplete(trailers);
      }
    }
    onBodySent(chunk) {
      if (this.handler.onBodySent) {
        this.handler.onBodySent(chunk);
      }
    }
  }
  function parseLocation(statusCode, headers) {
    if (redirectableStatusCodes.indexOf(statusCode) === -1) {
      return null;
    }
    for (let i = 0;i < headers.length; i += 2) {
      if (headers[i].toString().toLowerCase() === "location") {
        return headers[i + 1];
      }
    }
  }
  function shouldRemoveHeader(header, removeContent, unknownOrigin) {
    if (header.length === 4) {
      return util.headerNameToString(header) === "host";
    }
    if (removeContent && util.headerNameToString(header).startsWith("content-")) {
      return true;
    }
    if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
      const name = util.headerNameToString(header);
      return name === "authorization" || name === "cookie" || name === "proxy-authorization";
    }
    return false;
  }
  function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
    const ret = [];
    if (Array.isArray(headers)) {
      for (let i = 0;i < headers.length; i += 2) {
        if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
          ret.push(headers[i], headers[i + 1]);
        }
      }
    } else if (headers && typeof headers === "object") {
      for (const key of Object.keys(headers)) {
        if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
          ret.push(key, headers[key]);
        }
      }
    } else {
      assert(headers == null, "headers must be an object or an array");
    }
    return ret;
  }
  module.exports = RedirectHandler;
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS((exports, module) => {
  var RedirectHandler = require_RedirectHandler();
  function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
    return (dispatch) => {
      return function Intercept(opts, handler) {
        const { maxRedirections = defaultMaxRedirections } = opts;
        if (!maxRedirections) {
          return dispatch(opts, handler);
        }
        const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
        opts = { ...opts, maxRedirections: 0 };
        return dispatch(opts, redirectHandler);
      };
    };
  }
  module.exports = createRedirectInterceptor;
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS((exports, module) => {
  module.exports = "";
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS((exports, module) => {
  module.exports = "";
});

// node_modules/undici/lib/client.js
var require_client = __commonJS((exports, module) => {
  var assert = __require("assert");
  var net = __require("net");
  var http = __require("http");
  var { pipeline } = __require("stream");
  var util = require_util();
  var timers = require_timers();
  var Request = require_request();
  var DispatcherBase = require_dispatcher_base();
  var {
    RequestContentLengthMismatchError,
    ResponseContentLengthMismatchError,
    InvalidArgumentError,
    RequestAbortedError,
    HeadersTimeoutError,
    HeadersOverflowError,
    SocketError,
    InformationalError,
    BodyTimeoutError,
    HTTPParserError,
    ResponseExceededMaxSizeError,
    ClientDestroyedError
  } = require_errors();
  var buildConnector = require_connect();
  var {
    kUrl,
    kReset,
    kServerName,
    kClient,
    kBusy,
    kParser,
    kConnect,
    kBlocking,
    kResuming,
    kRunning,
    kPending,
    kSize,
    kWriting,
    kQueue,
    kConnected,
    kConnecting,
    kNeedDrain,
    kNoRef,
    kKeepAliveDefaultTimeout,
    kHostHeader,
    kPendingIdx,
    kRunningIdx,
    kError,
    kPipelining,
    kSocket,
    kKeepAliveTimeoutValue,
    kMaxHeadersSize,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kHeadersTimeout,
    kBodyTimeout,
    kStrictContentLength,
    kConnector,
    kMaxRedirections,
    kMaxRequests,
    kCounter,
    kClose,
    kDestroy,
    kDispatch,
    kInterceptors,
    kLocalAddress,
    kMaxResponseSize,
    kHTTPConnVersion,
    kHost,
    kHTTP2Session,
    kHTTP2SessionState,
    kHTTP2BuildRequest,
    kHTTP2CopyHeaders,
    kHTTP1BuildRequest
  } = require_symbols();
  var http2;
  try {
    http2 = __require("http2");
  } catch {
    http2 = { constants: {} };
  }
  var {
    constants: {
      HTTP2_HEADER_AUTHORITY,
      HTTP2_HEADER_METHOD,
      HTTP2_HEADER_PATH,
      HTTP2_HEADER_SCHEME,
      HTTP2_HEADER_CONTENT_LENGTH,
      HTTP2_HEADER_EXPECT,
      HTTP2_HEADER_STATUS
    }
  } = http2;
  var h2ExperimentalWarned = false;
  var FastBuffer = Buffer[Symbol.species];
  var kClosedResolve = Symbol("kClosedResolve");
  var channels = {};
  try {
    const diagnosticsChannel = __require("diagnostics_channel");
    channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
    channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
    channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
    channels.connected = diagnosticsChannel.channel("undici:client:connected");
  } catch {
    channels.sendHeaders = { hasSubscribers: false };
    channels.beforeConnect = { hasSubscribers: false };
    channels.connectError = { hasSubscribers: false };
    channels.connected = { hasSubscribers: false };
  }

  class Client extends DispatcherBase {
    constructor(url, {
      interceptors,
      maxHeaderSize,
      headersTimeout,
      socketTimeout,
      requestTimeout,
      connectTimeout,
      bodyTimeout,
      idleTimeout,
      keepAlive,
      keepAliveTimeout,
      maxKeepAliveTimeout,
      keepAliveMaxTimeout,
      keepAliveTimeoutThreshold,
      socketPath,
      pipelining,
      tls,
      strictContentLength,
      maxCachedSessions,
      maxRedirections,
      connect: connect2,
      maxRequestsPerClient,
      localAddress,
      maxResponseSize,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      allowH2,
      maxConcurrentStreams
    } = {}) {
      super();
      if (keepAlive !== undefined) {
        throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
      }
      if (socketTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (requestTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (idleTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
      }
      if (maxKeepAliveTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
      }
      if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
        throw new InvalidArgumentError("invalid maxHeaderSize");
      }
      if (socketPath != null && typeof socketPath !== "string") {
        throw new InvalidArgumentError("invalid socketPath");
      }
      if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
        throw new InvalidArgumentError("invalid connectTimeout");
      }
      if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveTimeout");
      }
      if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
      }
      if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
        throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
      }
      if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
      }
      if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
      }
      if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
        throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
      }
      if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
        throw new InvalidArgumentError("localAddress must be valid string IP address");
      }
      if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
        throw new InvalidArgumentError("maxResponseSize must be a positive number");
      }
      if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
        throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
      }
      if (allowH2 != null && typeof allowH2 !== "boolean") {
        throw new InvalidArgumentError("allowH2 must be a valid boolean value");
      }
      if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
        throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
      }
      if (typeof connect2 !== "function") {
        connect2 = buildConnector({
          ...tls,
          maxCachedSessions,
          allowH2,
          socketPath,
          timeout: connectTimeout,
          ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect2
        });
      }
      this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
      this[kUrl] = util.parseOrigin(url);
      this[kConnector] = connect2;
      this[kSocket] = null;
      this[kPipelining] = pipelining != null ? pipelining : 1;
      this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
      this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4000 : keepAliveTimeout;
      this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600000 : keepAliveMaxTimeout;
      this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1000 : keepAliveTimeoutThreshold;
      this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
      this[kServerName] = null;
      this[kLocalAddress] = localAddress != null ? localAddress : null;
      this[kResuming] = 0;
      this[kNeedDrain] = 0;
      this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
      this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300000;
      this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300000;
      this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
      this[kMaxRedirections] = maxRedirections;
      this[kMaxRequests] = maxRequestsPerClient;
      this[kClosedResolve] = null;
      this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
      this[kHTTPConnVersion] = "h1";
      this[kHTTP2Session] = null;
      this[kHTTP2SessionState] = !allowH2 ? null : {
        openStreams: 0,
        maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
      };
      this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
      this[kQueue] = [];
      this[kRunningIdx] = 0;
      this[kPendingIdx] = 0;
    }
    get pipelining() {
      return this[kPipelining];
    }
    set pipelining(value) {
      this[kPipelining] = value;
      resume(this, true);
    }
    get [kPending]() {
      return this[kQueue].length - this[kPendingIdx];
    }
    get [kRunning]() {
      return this[kPendingIdx] - this[kRunningIdx];
    }
    get [kSize]() {
      return this[kQueue].length - this[kRunningIdx];
    }
    get [kConnected]() {
      return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
    }
    get [kBusy]() {
      const socket = this[kSocket];
      return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
    }
    [kConnect](cb) {
      connect(this);
      this.once("connect", cb);
    }
    [kDispatch](opts, handler) {
      const origin = opts.origin || this[kUrl].origin;
      const request = this[kHTTPConnVersion] === "h2" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
      this[kQueue].push(request);
      if (this[kResuming]) {} else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
        this[kResuming] = 1;
        process.nextTick(resume, this);
      } else {
        resume(this, true);
      }
      if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
        this[kNeedDrain] = 2;
      }
      return this[kNeedDrain] < 2;
    }
    async[kClose]() {
      return new Promise((resolve) => {
        if (!this[kSize]) {
          resolve(null);
        } else {
          this[kClosedResolve] = resolve;
        }
      });
    }
    async[kDestroy](err) {
      return new Promise((resolve) => {
        const requests = this[kQueue].splice(this[kPendingIdx]);
        for (let i = 0;i < requests.length; i++) {
          const request = requests[i];
          errorRequest(this, request, err);
        }
        const callback = () => {
          if (this[kClosedResolve]) {
            this[kClosedResolve]();
            this[kClosedResolve] = null;
          }
          resolve();
        };
        if (this[kHTTP2Session] != null) {
          util.destroy(this[kHTTP2Session], err);
          this[kHTTP2Session] = null;
          this[kHTTP2SessionState] = null;
        }
        if (!this[kSocket]) {
          queueMicrotask(callback);
        } else {
          util.destroy(this[kSocket].on("close", callback), err);
        }
        resume(this);
      });
    }
  }
  function onHttp2SessionError(err) {
    assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[kSocket][kError] = err;
    onError(this[kClient], err);
  }
  function onHttp2FrameError(type, code, id) {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
    if (id === 0) {
      this[kSocket][kError] = err;
      onError(this[kClient], err);
    }
  }
  function onHttp2SessionEnd() {
    util.destroy(this, new SocketError("other side closed"));
    util.destroy(this[kSocket], new SocketError("other side closed"));
  }
  function onHTTP2GoAway(code) {
    const client = this[kClient];
    const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
    client[kSocket] = null;
    client[kHTTP2Session] = null;
    if (client.destroyed) {
      assert(this[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(this, request, err);
      }
    } else if (client[kRunning] > 0) {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err);
    resume(client);
  }
  var constants = require_constants3();
  var createRedirectInterceptor = require_redirectInterceptor();
  var EMPTY_BUF = Buffer.alloc(0);
  async function lazyllhttp() {
    const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : undefined;
    let mod;
    try {
      mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
    } catch (e) {
      mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
    }
    return await WebAssembly.instantiate(mod, {
      env: {
        wasm_on_url: (p, at, len) => {
          return 0;
        },
        wasm_on_status: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_message_begin: (p) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onMessageBegin() || 0;
        },
        wasm_on_header_field: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_header_value: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
        },
        wasm_on_body: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_message_complete: (p) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onMessageComplete() || 0;
        }
      }
    });
  }
  var llhttpInstance = null;
  var llhttpPromise = lazyllhttp();
  llhttpPromise.catch();
  var currentParser = null;
  var currentBufferRef = null;
  var currentBufferSize = 0;
  var currentBufferPtr = null;
  var TIMEOUT_HEADERS = 1;
  var TIMEOUT_BODY = 2;
  var TIMEOUT_IDLE = 3;

  class Parser {
    constructor(client, socket, { exports: exports2 }) {
      assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
      this.llhttp = exports2;
      this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
      this.client = client;
      this.socket = socket;
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.statusCode = null;
      this.statusText = "";
      this.upgrade = false;
      this.headers = [];
      this.headersSize = 0;
      this.headersMaxSize = client[kMaxHeadersSize];
      this.shouldKeepAlive = false;
      this.paused = false;
      this.resume = this.resume.bind(this);
      this.bytesRead = 0;
      this.keepAlive = "";
      this.contentLength = "";
      this.connection = "";
      this.maxResponseSize = client[kMaxResponseSize];
    }
    setTimeout(value, type) {
      this.timeoutType = type;
      if (value !== this.timeoutValue) {
        timers.clearTimeout(this.timeout);
        if (value) {
          this.timeout = timers.setTimeout(onParserTimeout, value, this);
          if (this.timeout.unref) {
            this.timeout.unref();
          }
        } else {
          this.timeout = null;
        }
        this.timeoutValue = value;
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
    }
    resume() {
      if (this.socket.destroyed || !this.paused) {
        return;
      }
      assert(this.ptr != null);
      assert(currentParser == null);
      this.llhttp.llhttp_resume(this.ptr);
      assert(this.timeoutType === TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      this.paused = false;
      this.execute(this.socket.read() || EMPTY_BUF);
      this.readMore();
    }
    readMore() {
      while (!this.paused && this.ptr) {
        const chunk = this.socket.read();
        if (chunk === null) {
          break;
        }
        this.execute(chunk);
      }
    }
    execute(data) {
      assert(this.ptr != null);
      assert(currentParser == null);
      assert(!this.paused);
      const { socket, llhttp } = this;
      if (data.length > currentBufferSize) {
        if (currentBufferPtr) {
          llhttp.free(currentBufferPtr);
        }
        currentBufferSize = Math.ceil(data.length / 4096) * 4096;
        currentBufferPtr = llhttp.malloc(currentBufferSize);
      }
      new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
      try {
        let ret;
        try {
          currentBufferRef = data;
          currentParser = this;
          ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
        } catch (err) {
          throw err;
        } finally {
          currentParser = null;
          currentBufferRef = null;
        }
        const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
        if (ret === constants.ERROR.PAUSED_UPGRADE) {
          this.onUpgrade(data.slice(offset));
        } else if (ret === constants.ERROR.PAUSED) {
          this.paused = true;
          socket.unshift(data.slice(offset));
        } else if (ret !== constants.ERROR.OK) {
          const ptr = llhttp.llhttp_get_error_reason(this.ptr);
          let message = "";
          if (ptr) {
            const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
            message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
          }
          throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
        }
      } catch (err) {
        util.destroy(socket, err);
      }
    }
    destroy() {
      assert(this.ptr != null);
      assert(currentParser == null);
      this.llhttp.llhttp_free(this.ptr);
      this.ptr = null;
      timers.clearTimeout(this.timeout);
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.paused = false;
    }
    onStatus(buf) {
      this.statusText = buf.toString();
    }
    onMessageBegin() {
      const { socket, client } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
    }
    onHeaderField(buf) {
      const len = this.headers.length;
      if ((len & 1) === 0) {
        this.headers.push(buf);
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      this.trackHeader(buf.length);
    }
    onHeaderValue(buf) {
      let len = this.headers.length;
      if ((len & 1) === 1) {
        this.headers.push(buf);
        len += 1;
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      const key = this.headers[len - 2];
      if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
        this.keepAlive += buf.toString();
      } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
        this.connection += buf.toString();
      } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
        this.contentLength += buf.toString();
      }
      this.trackHeader(buf.length);
    }
    trackHeader(len) {
      this.headersSize += len;
      if (this.headersSize >= this.headersMaxSize) {
        util.destroy(this.socket, new HeadersOverflowError);
      }
    }
    onUpgrade(head) {
      const { upgrade, client, socket, headers, statusCode } = this;
      assert(upgrade);
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(!socket.destroyed);
      assert(socket === client[kSocket]);
      assert(!this.paused);
      assert(request.upgrade || request.method === "CONNECT");
      this.statusCode = null;
      this.statusText = "";
      this.shouldKeepAlive = null;
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      socket.unshift(head);
      socket[kParser].destroy();
      socket[kParser] = null;
      socket[kClient] = null;
      socket[kError] = null;
      socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
      client[kSocket] = null;
      client[kQueue][client[kRunningIdx]++] = null;
      client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
      try {
        request.onUpgrade(statusCode, headers, socket);
      } catch (err) {
        util.destroy(socket, err);
      }
      resume(client);
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
      const { client, socket, headers, statusText } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
      assert(!this.upgrade);
      assert(this.statusCode < 200);
      if (statusCode === 100) {
        util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
        return -1;
      }
      if (upgrade && !request.upgrade) {
        util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
        return -1;
      }
      assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
      this.statusCode = statusCode;
      this.shouldKeepAlive = shouldKeepAlive || request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
      if (this.statusCode >= 200) {
        const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
        this.setTimeout(bodyTimeout, TIMEOUT_BODY);
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      if (request.method === "CONNECT") {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      if (upgrade) {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      if (this.shouldKeepAlive && client[kPipelining]) {
        const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
        if (keepAliveTimeout != null) {
          const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
          if (timeout <= 0) {
            socket[kReset] = true;
          } else {
            client[kKeepAliveTimeoutValue] = timeout;
          }
        } else {
          client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
        }
      } else {
        socket[kReset] = true;
      }
      const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
      if (request.aborted) {
        return -1;
      }
      if (request.method === "HEAD") {
        return 1;
      }
      if (statusCode < 200) {
        return 1;
      }
      if (socket[kBlocking]) {
        socket[kBlocking] = false;
        resume(client);
      }
      return pause ? constants.ERROR.PAUSED : 0;
    }
    onBody(buf) {
      const { client, socket, statusCode, maxResponseSize } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      assert(statusCode >= 200);
      if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
        util.destroy(socket, new ResponseExceededMaxSizeError);
        return -1;
      }
      this.bytesRead += buf.length;
      if (request.onData(buf) === false) {
        return constants.ERROR.PAUSED;
      }
    }
    onMessageComplete() {
      const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
      if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
        return -1;
      }
      if (upgrade) {
        return;
      }
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(statusCode >= 100);
      this.statusCode = null;
      this.statusText = "";
      this.bytesRead = 0;
      this.contentLength = "";
      this.keepAlive = "";
      this.connection = "";
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      if (statusCode < 200) {
        return;
      }
      if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
        util.destroy(socket, new ResponseContentLengthMismatchError);
        return -1;
      }
      request.onComplete(headers);
      client[kQueue][client[kRunningIdx]++] = null;
      if (socket[kWriting]) {
        assert.strictEqual(client[kRunning], 0);
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (!shouldKeepAlive) {
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (socket[kReset] && client[kRunning] === 0) {
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (client[kPipelining] === 1) {
        setImmediate(resume, client);
      } else {
        resume(client);
      }
    }
  }
  function onParserTimeout(parser) {
    const { socket, timeoutType, client } = parser;
    if (timeoutType === TIMEOUT_HEADERS) {
      if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
        assert(!parser.paused, "cannot be paused while waiting for headers");
        util.destroy(socket, new HeadersTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_BODY) {
      if (!parser.paused) {
        util.destroy(socket, new BodyTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_IDLE) {
      assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
      util.destroy(socket, new InformationalError("socket idle timeout"));
    }
  }
  function onSocketReadable() {
    const { [kParser]: parser } = this;
    if (parser) {
      parser.readMore();
    }
  }
  function onSocketError(err) {
    const { [kClient]: client, [kParser]: parser } = this;
    assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    if (client[kHTTPConnVersion] !== "h2") {
      if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
        return;
      }
    }
    this[kError] = err;
    onError(this[kClient], err);
  }
  function onError(client, err) {
    if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
      assert(client[kPendingIdx] === client[kRunningIdx]);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(client, request, err);
      }
      assert(client[kSize] === 0);
    }
  }
  function onSocketEnd() {
    const { [kParser]: parser, [kClient]: client } = this;
    if (client[kHTTPConnVersion] !== "h2") {
      if (parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
        return;
      }
    }
    util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
  }
  function onSocketClose() {
    const { [kClient]: client, [kParser]: parser } = this;
    if (client[kHTTPConnVersion] === "h1" && parser) {
      if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
      }
      this[kParser].destroy();
      this[kParser] = null;
    }
    const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
    client[kSocket] = null;
    if (client.destroyed) {
      assert(client[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(client, request, err);
      }
    } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err);
    resume(client);
  }
  async function connect(client) {
    assert(!client[kConnecting]);
    assert(!client[kSocket]);
    let { host, hostname, protocol, port } = client[kUrl];
    if (hostname[0] === "[") {
      const idx = hostname.indexOf("]");
      assert(idx !== -1);
      const ip = hostname.substring(1, idx);
      assert(net.isIP(ip));
      hostname = ip;
    }
    client[kConnecting] = true;
    if (channels.beforeConnect.hasSubscribers) {
      channels.beforeConnect.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector]
      });
    }
    try {
      const socket = await new Promise((resolve, reject) => {
        client[kConnector]({
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        }, (err, socket2) => {
          if (err) {
            reject(err);
          } else {
            resolve(socket2);
          }
        });
      });
      if (client.destroyed) {
        util.destroy(socket.on("error", () => {}), new ClientDestroyedError);
        return;
      }
      client[kConnecting] = false;
      assert(socket);
      const isH2 = socket.alpnProtocol === "h2";
      if (isH2) {
        if (!h2ExperimentalWarned) {
          h2ExperimentalWarned = true;
          process.emitWarning("H2 support is experimental, expect them to change at any time.", {
            code: "UNDICI-H2"
          });
        }
        const session = http2.connect(client[kUrl], {
          createConnection: () => socket,
          peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
        });
        client[kHTTPConnVersion] = "h2";
        session[kClient] = client;
        session[kSocket] = socket;
        session.on("error", onHttp2SessionError);
        session.on("frameError", onHttp2FrameError);
        session.on("end", onHttp2SessionEnd);
        session.on("goaway", onHTTP2GoAway);
        session.on("close", onSocketClose);
        session.unref();
        client[kHTTP2Session] = session;
        socket[kHTTP2Session] = session;
      } else {
        if (!llhttpInstance) {
          llhttpInstance = await llhttpPromise;
          llhttpPromise = null;
        }
        socket[kNoRef] = false;
        socket[kWriting] = false;
        socket[kReset] = false;
        socket[kBlocking] = false;
        socket[kParser] = new Parser(client, socket, llhttpInstance);
      }
      socket[kCounter] = 0;
      socket[kMaxRequests] = client[kMaxRequests];
      socket[kClient] = client;
      socket[kError] = null;
      socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
      client[kSocket] = socket;
      if (channels.connected.hasSubscribers) {
        channels.connected.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          socket
        });
      }
      client.emit("connect", client[kUrl], [client]);
    } catch (err) {
      if (client.destroyed) {
        return;
      }
      client[kConnecting] = false;
      if (channels.connectError.hasSubscribers) {
        channels.connectError.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          error: err
        });
      }
      if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
        assert(client[kRunning] === 0);
        while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
          const request = client[kQueue][client[kPendingIdx]++];
          errorRequest(client, request, err);
        }
      } else {
        onError(client, err);
      }
      client.emit("connectionError", client[kUrl], [client], err);
    }
    resume(client);
  }
  function emitDrain(client) {
    client[kNeedDrain] = 0;
    client.emit("drain", client[kUrl], [client]);
  }
  function resume(client, sync) {
    if (client[kResuming] === 2) {
      return;
    }
    client[kResuming] = 2;
    _resume(client, sync);
    client[kResuming] = 0;
    if (client[kRunningIdx] > 256) {
      client[kQueue].splice(0, client[kRunningIdx]);
      client[kPendingIdx] -= client[kRunningIdx];
      client[kRunningIdx] = 0;
    }
  }
  function _resume(client, sync) {
    while (true) {
      if (client.destroyed) {
        assert(client[kPending] === 0);
        return;
      }
      if (client[kClosedResolve] && !client[kSize]) {
        client[kClosedResolve]();
        client[kClosedResolve] = null;
        return;
      }
      const socket = client[kSocket];
      if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
        if (client[kSize] === 0) {
          if (!socket[kNoRef] && socket.unref) {
            socket.unref();
            socket[kNoRef] = true;
          }
        } else if (socket[kNoRef] && socket.ref) {
          socket.ref();
          socket[kNoRef] = false;
        }
        if (client[kSize] === 0) {
          if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
            socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
          }
        } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
          if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
            const request2 = client[kQueue][client[kRunningIdx]];
            const headersTimeout = request2.headersTimeout != null ? request2.headersTimeout : client[kHeadersTimeout];
            socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
          }
        }
      }
      if (client[kBusy]) {
        client[kNeedDrain] = 2;
      } else if (client[kNeedDrain] === 2) {
        if (sync) {
          client[kNeedDrain] = 1;
          process.nextTick(emitDrain, client);
        } else {
          emitDrain(client);
        }
        continue;
      }
      if (client[kPending] === 0) {
        return;
      }
      if (client[kRunning] >= (client[kPipelining] || 1)) {
        return;
      }
      const request = client[kQueue][client[kPendingIdx]];
      if (client[kUrl].protocol === "https:" && client[kServerName] !== request.servername) {
        if (client[kRunning] > 0) {
          return;
        }
        client[kServerName] = request.servername;
        if (socket && socket.servername !== request.servername) {
          util.destroy(socket, new InformationalError("servername changed"));
          return;
        }
      }
      if (client[kConnecting]) {
        return;
      }
      if (!socket && !client[kHTTP2Session]) {
        connect(client);
        return;
      }
      if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
        return;
      }
      if (client[kRunning] > 0 && !request.idempotent) {
        return;
      }
      if (client[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
        return;
      }
      if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
        return;
      }
      if (!request.aborted && write(client, request)) {
        client[kPendingIdx]++;
      } else {
        client[kQueue].splice(client[kPendingIdx], 1);
      }
    }
  }
  function shouldSendContentLength(method) {
    return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
  }
  function write(client, request) {
    if (client[kHTTPConnVersion] === "h2") {
      writeH2(client, client[kHTTP2Session], request);
      return;
    }
    const { body, method, path, host, upgrade, headers, blocking, reset } = request;
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    const bodyLength = util.bodyLength(body);
    let contentLength = bodyLength;
    if (contentLength === null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 && !expectsPayload) {
      contentLength = null;
    }
    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    const socket = client[kSocket];
    try {
      request.onConnect((err) => {
        if (request.aborted || request.completed) {
          return;
        }
        errorRequest(client, request, err || new RequestAbortedError);
        util.destroy(socket, new InformationalError("aborted"));
      });
    } catch (err) {
      errorRequest(client, request, err);
    }
    if (request.aborted) {
      return false;
    }
    if (method === "HEAD") {
      socket[kReset] = true;
    }
    if (upgrade || method === "CONNECT") {
      socket[kReset] = true;
    }
    if (reset != null) {
      socket[kReset] = reset;
    }
    if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
      socket[kReset] = true;
    }
    if (blocking) {
      socket[kBlocking] = true;
    }
    let header = `${method} ${path} HTTP/1.1\r
`;
    if (typeof host === "string") {
      header += `host: ${host}\r
`;
    } else {
      header += client[kHostHeader];
    }
    if (upgrade) {
      header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
    } else if (client[kPipelining] && !socket[kReset]) {
      header += `connection: keep-alive\r
`;
    } else {
      header += `connection: close\r
`;
    }
    if (headers) {
      header += headers;
    }
    if (channels.sendHeaders.hasSubscribers) {
      channels.sendHeaders.publish({ request, headers: header, socket });
    }
    if (!body || bodyLength === 0) {
      if (contentLength === 0) {
        socket.write(`${header}content-length: 0\r
\r
`, "latin1");
      } else {
        assert(contentLength === null, "no body must not have content length");
        socket.write(`${header}\r
`, "latin1");
      }
      request.onRequestSent();
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, "buffer body must have content length");
      socket.cork();
      socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
      socket.write(body);
      socket.uncork();
      request.onBodySent(body);
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === "function") {
        writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload });
      } else {
        writeBlob({ body, client, request, socket, contentLength, header, expectsPayload });
      }
    } else if (util.isStream(body)) {
      writeStream({ body, client, request, socket, contentLength, header, expectsPayload });
    } else if (util.isIterable(body)) {
      writeIterable({ body, client, request, socket, contentLength, header, expectsPayload });
    } else {
      assert(false);
    }
    return true;
  }
  function writeH2(client, session, request) {
    const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
    let headers;
    if (typeof reqHeaders === "string")
      headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
    else
      headers = reqHeaders;
    if (upgrade) {
      errorRequest(client, request, new Error("Upgrade not supported for H2"));
      return false;
    }
    try {
      request.onConnect((err) => {
        if (request.aborted || request.completed) {
          return;
        }
        errorRequest(client, request, err || new RequestAbortedError);
      });
    } catch (err) {
      errorRequest(client, request, err);
    }
    if (request.aborted) {
      return false;
    }
    let stream;
    const h2State = client[kHTTP2SessionState];
    headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
    headers[HTTP2_HEADER_METHOD] = method;
    if (method === "CONNECT") {
      session.ref();
      stream = session.request(headers, { endStream: false, signal });
      if (stream.id && !stream.pending) {
        request.onUpgrade(null, null, stream);
        ++h2State.openStreams;
      } else {
        stream.once("ready", () => {
          request.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        });
      }
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0)
          session.unref();
      });
      return true;
    }
    headers[HTTP2_HEADER_PATH] = path;
    headers[HTTP2_HEADER_SCHEME] = "https";
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util.bodyLength(body);
    if (contentLength == null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 || !expectsPayload) {
      contentLength = null;
    }
    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    if (contentLength != null) {
      assert(body, "no body must not have content length");
      headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
    }
    session.ref();
    const shouldEndStream = method === "GET" || method === "HEAD";
    if (expectContinue) {
      headers[HTTP2_HEADER_EXPECT] = "100-continue";
      stream = session.request(headers, { endStream: shouldEndStream, signal });
      stream.once("continue", writeBodyH2);
    } else {
      stream = session.request(headers, {
        endStream: shouldEndStream,
        signal
      });
      writeBodyH2();
    }
    ++h2State.openStreams;
    stream.once("response", (headers2) => {
      const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
      if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
        stream.pause();
      }
    });
    stream.once("end", () => {
      request.onComplete([]);
    });
    stream.on("data", (chunk) => {
      if (request.onData(chunk) === false) {
        stream.pause();
      }
    });
    stream.once("close", () => {
      h2State.openStreams -= 1;
      if (h2State.openStreams === 0) {
        session.unref();
      }
    });
    stream.once("error", function(err) {
      if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
        h2State.streams -= 1;
        util.destroy(stream, err);
      }
    });
    stream.once("frameError", (type, code) => {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      errorRequest(client, request, err);
      if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
        h2State.streams -= 1;
        util.destroy(stream, err);
      }
    });
    return true;
    function writeBodyH2() {
      if (!body) {
        request.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        stream.cork();
        stream.write(body);
        stream.uncork();
        stream.end();
        request.onBodySent(body);
        request.onRequestSent();
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({
            client,
            request,
            contentLength,
            h2stream: stream,
            expectsPayload,
            body: body.stream(),
            socket: client[kSocket],
            header: ""
          });
        } else {
          writeBlob({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            h2stream: stream,
            header: "",
            socket: client[kSocket]
          });
        }
      } else if (util.isStream(body)) {
        writeStream({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          socket: client[kSocket],
          h2stream: stream,
          header: ""
        });
      } else if (util.isIterable(body)) {
        writeIterable({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          header: "",
          h2stream: stream,
          socket: client[kSocket]
        });
      } else {
        assert(false);
      }
    }
  }
  function writeStream({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
    if (client[kHTTPConnVersion] === "h2") {
      let onPipeData = function(chunk) {
        request.onBodySent(chunk);
      };
      const pipe = pipeline(body, h2stream, (err) => {
        if (err) {
          util.destroy(body, err);
          util.destroy(h2stream, err);
        } else {
          request.onRequestSent();
        }
      });
      pipe.on("data", onPipeData);
      pipe.once("end", () => {
        pipe.removeListener("data", onPipeData);
        util.destroy(pipe);
      });
      return;
    }
    let finished = false;
    const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
    const onData = function(chunk) {
      if (finished) {
        return;
      }
      try {
        if (!writer.write(chunk) && this.pause) {
          this.pause();
        }
      } catch (err) {
        util.destroy(this, err);
      }
    };
    const onDrain = function() {
      if (finished) {
        return;
      }
      if (body.resume) {
        body.resume();
      }
    };
    const onAbort = function() {
      if (finished) {
        return;
      }
      const err = new RequestAbortedError;
      queueMicrotask(() => onFinished(err));
    };
    const onFinished = function(err) {
      if (finished) {
        return;
      }
      finished = true;
      assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
      socket.off("drain", onDrain).off("error", onFinished);
      body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
      if (!err) {
        try {
          writer.end();
        } catch (er) {
          err = er;
        }
      }
      writer.destroy(err);
      if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
        util.destroy(body, err);
      } else {
        util.destroy(body);
      }
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
    if (body.resume) {
      body.resume();
    }
    socket.on("drain", onDrain).on("error", onFinished);
  }
  async function writeBlob({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength === body.size, "blob body must have content length");
    const isH2 = client[kHTTPConnVersion] === "h2";
    try {
      if (contentLength != null && contentLength !== body.size) {
        throw new RequestContentLengthMismatchError;
      }
      const buffer = Buffer.from(await body.arrayBuffer());
      if (isH2) {
        h2stream.cork();
        h2stream.write(buffer);
        h2stream.uncork();
      } else {
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(buffer);
        socket.uncork();
      }
      request.onBodySent(buffer);
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
      resume(client);
    } catch (err) {
      util.destroy(isH2 ? h2stream : socket, err);
    }
  }
  async function writeIterable({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
      if (callback) {
        const cb = callback;
        callback = null;
        cb();
      }
    }
    const waitForDrain = () => new Promise((resolve, reject) => {
      assert(callback === null);
      if (socket[kError]) {
        reject(socket[kError]);
      } else {
        callback = resolve;
      }
    });
    if (client[kHTTPConnVersion] === "h2") {
      h2stream.on("close", onDrain).on("drain", onDrain);
      try {
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          const res = h2stream.write(chunk);
          request.onBodySent(chunk);
          if (!res) {
            await waitForDrain();
          }
        }
      } catch (err) {
        h2stream.destroy(err);
      } finally {
        request.onRequestSent();
        h2stream.end();
        h2stream.off("close", onDrain).off("drain", onDrain);
      }
      return;
    }
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
    try {
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError];
        }
        if (!writer.write(chunk)) {
          await waitForDrain();
        }
      }
      writer.end();
    } catch (err) {
      writer.destroy(err);
    } finally {
      socket.off("close", onDrain).off("drain", onDrain);
    }
  }

  class AsyncWriter {
    constructor({ socket, request, contentLength, client, expectsPayload, header }) {
      this.socket = socket;
      this.request = request;
      this.contentLength = contentLength;
      this.client = client;
      this.bytesWritten = 0;
      this.expectsPayload = expectsPayload;
      this.header = header;
      socket[kWriting] = true;
    }
    write(chunk) {
      const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return false;
      }
      const len = Buffer.byteLength(chunk);
      if (!len) {
        return true;
      }
      if (contentLength !== null && bytesWritten + len > contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        }
        process.emitWarning(new RequestContentLengthMismatchError);
      }
      socket.cork();
      if (bytesWritten === 0) {
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        if (contentLength === null) {
          socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
        } else {
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        }
      }
      if (contentLength === null) {
        socket.write(`\r
${len.toString(16)}\r
`, "latin1");
      }
      this.bytesWritten += len;
      const ret = socket.write(chunk);
      socket.uncork();
      request.onBodySent(chunk);
      if (!ret) {
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
      }
      return ret;
    }
    end() {
      const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
      request.onRequestSent();
      socket[kWriting] = false;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return;
      }
      if (bytesWritten === 0) {
        if (expectsPayload) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          socket.write(`${header}\r
`, "latin1");
        }
      } else if (contentLength === null) {
        socket.write(`\r
0\r
\r
`, "latin1");
      }
      if (contentLength !== null && bytesWritten !== contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        } else {
          process.emitWarning(new RequestContentLengthMismatchError);
        }
      }
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh();
        }
      }
      resume(client);
    }
    destroy(err) {
      const { socket, client } = this;
      socket[kWriting] = false;
      if (err) {
        assert(client[kRunning] <= 1, "pipeline should only contain this request");
        util.destroy(socket, err);
      }
    }
  }
  function errorRequest(client, request, err) {
    try {
      request.onError(err);
      assert(request.aborted);
    } catch (err2) {
      client.emit("error", err2);
    }
  }
  module.exports = Client;
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS((exports, module) => {
  var kSize = 2048;
  var kMask = kSize - 1;

  class FixedCircularBuffer {
    constructor() {
      this.bottom = 0;
      this.top = 0;
      this.list = new Array(kSize);
      this.next = null;
    }
    isEmpty() {
      return this.top === this.bottom;
    }
    isFull() {
      return (this.top + 1 & kMask) === this.bottom;
    }
    push(data) {
      this.list[this.top] = data;
      this.top = this.top + 1 & kMask;
    }
    shift() {
      const nextItem = this.list[this.bottom];
      if (nextItem === undefined)
        return null;
      this.list[this.bottom] = undefined;
      this.bottom = this.bottom + 1 & kMask;
      return nextItem;
    }
  }
  module.exports = class FixedQueue {
    constructor() {
      this.head = this.tail = new FixedCircularBuffer;
    }
    isEmpty() {
      return this.head.isEmpty();
    }
    push(data) {
      if (this.head.isFull()) {
        this.head = this.head.next = new FixedCircularBuffer;
      }
      this.head.push(data);
    }
    shift() {
      const tail = this.tail;
      const next = tail.shift();
      if (tail.isEmpty() && tail.next !== null) {
        this.tail = tail.next;
      }
      return next;
    }
  };
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS((exports, module) => {
  var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
  var kPool = Symbol("pool");

  class PoolStats {
    constructor(pool) {
      this[kPool] = pool;
    }
    get connected() {
      return this[kPool][kConnected];
    }
    get free() {
      return this[kPool][kFree];
    }
    get pending() {
      return this[kPool][kPending];
    }
    get queued() {
      return this[kPool][kQueued];
    }
    get running() {
      return this[kPool][kRunning];
    }
    get size() {
      return this[kPool][kSize];
    }
  }
  module.exports = PoolStats;
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS((exports, module) => {
  var DispatcherBase = require_dispatcher_base();
  var FixedQueue = require_fixed_queue();
  var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
  var PoolStats = require_pool_stats();
  var kClients = Symbol("clients");
  var kNeedDrain = Symbol("needDrain");
  var kQueue = Symbol("queue");
  var kClosedResolve = Symbol("closed resolve");
  var kOnDrain = Symbol("onDrain");
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kGetDispatcher = Symbol("get dispatcher");
  var kAddClient = Symbol("add client");
  var kRemoveClient = Symbol("remove client");
  var kStats = Symbol("stats");

  class PoolBase extends DispatcherBase {
    constructor() {
      super();
      this[kQueue] = new FixedQueue;
      this[kClients] = [];
      this[kQueued] = 0;
      const pool = this;
      this[kOnDrain] = function onDrain(origin, targets) {
        const queue = pool[kQueue];
        let needDrain = false;
        while (!needDrain) {
          const item = queue.shift();
          if (!item) {
            break;
          }
          pool[kQueued]--;
          needDrain = !this.dispatch(item.opts, item.handler);
        }
        this[kNeedDrain] = needDrain;
        if (!this[kNeedDrain] && pool[kNeedDrain]) {
          pool[kNeedDrain] = false;
          pool.emit("drain", origin, [pool, ...targets]);
        }
        if (pool[kClosedResolve] && queue.isEmpty()) {
          Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
        }
      };
      this[kOnConnect] = (origin, targets) => {
        pool.emit("connect", origin, [pool, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err) => {
        pool.emit("disconnect", origin, [pool, ...targets], err);
      };
      this[kOnConnectionError] = (origin, targets, err) => {
        pool.emit("connectionError", origin, [pool, ...targets], err);
      };
      this[kStats] = new PoolStats(this);
    }
    get [kBusy]() {
      return this[kNeedDrain];
    }
    get [kConnected]() {
      return this[kClients].filter((client) => client[kConnected]).length;
    }
    get [kFree]() {
      return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
    }
    get [kPending]() {
      let ret = this[kQueued];
      for (const { [kPending]: pending } of this[kClients]) {
        ret += pending;
      }
      return ret;
    }
    get [kRunning]() {
      let ret = 0;
      for (const { [kRunning]: running } of this[kClients]) {
        ret += running;
      }
      return ret;
    }
    get [kSize]() {
      let ret = this[kQueued];
      for (const { [kSize]: size } of this[kClients]) {
        ret += size;
      }
      return ret;
    }
    get stats() {
      return this[kStats];
    }
    async[kClose]() {
      if (this[kQueue].isEmpty()) {
        return Promise.all(this[kClients].map((c) => c.close()));
      } else {
        return new Promise((resolve) => {
          this[kClosedResolve] = resolve;
        });
      }
    }
    async[kDestroy](err) {
      while (true) {
        const item = this[kQueue].shift();
        if (!item) {
          break;
        }
        item.handler.onError(err);
      }
      return Promise.all(this[kClients].map((c) => c.destroy(err)));
    }
    [kDispatch](opts, handler) {
      const dispatcher = this[kGetDispatcher]();
      if (!dispatcher) {
        this[kNeedDrain] = true;
        this[kQueue].push({ opts, handler });
        this[kQueued]++;
      } else if (!dispatcher.dispatch(opts, handler)) {
        dispatcher[kNeedDrain] = true;
        this[kNeedDrain] = !this[kGetDispatcher]();
      }
      return !this[kNeedDrain];
    }
    [kAddClient](client) {
      client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
      this[kClients].push(client);
      if (this[kNeedDrain]) {
        process.nextTick(() => {
          if (this[kNeedDrain]) {
            this[kOnDrain](client[kUrl], [this, client]);
          }
        });
      }
      return this;
    }
    [kRemoveClient](client) {
      client.close(() => {
        const idx = this[kClients].indexOf(client);
        if (idx !== -1) {
          this[kClients].splice(idx, 1);
        }
      });
      this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
    }
  }
  module.exports = {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  };
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS((exports, module) => {
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kGetDispatcher
  } = require_pool_base();
  var Client = require_client();
  var {
    InvalidArgumentError
  } = require_errors();
  var util = require_util();
  var { kUrl, kInterceptors } = require_symbols();
  var buildConnector = require_connect();
  var kOptions = Symbol("options");
  var kConnections = Symbol("connections");
  var kFactory = Symbol("factory");
  function defaultFactory(origin, opts) {
    return new Client(origin, opts);
  }

  class Pool extends PoolBase {
    constructor(origin, {
      connections,
      factory = defaultFactory,
      connect,
      connectTimeout,
      tls,
      maxCachedSessions,
      socketPath,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      allowH2,
      ...options
    } = {}) {
      super();
      if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
        throw new InvalidArgumentError("invalid connections");
      }
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (typeof connect !== "function") {
        connect = buildConnector({
          ...tls,
          maxCachedSessions,
          allowH2,
          socketPath,
          timeout: connectTimeout,
          ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect
        });
      }
      this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
      this[kConnections] = connections || null;
      this[kUrl] = util.parseOrigin(origin);
      this[kOptions] = { ...util.deepClone(options), connect, allowH2 };
      this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
      this[kFactory] = factory;
      this.on("connectionError", (origin2, targets, error) => {
        for (const target of targets) {
          const idx = this[kClients].indexOf(target);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        }
      });
    }
    [kGetDispatcher]() {
      let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
      if (dispatcher) {
        return dispatcher;
      }
      if (!this[kConnections] || this[kClients].length < this[kConnections]) {
        dispatcher = this[kFactory](this[kUrl], this[kOptions]);
        this[kAddClient](dispatcher);
      }
      return dispatcher;
    }
  }
  module.exports = Pool;
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS((exports, module) => {
  var {
    BalancedPoolMissingUpstreamError,
    InvalidArgumentError
  } = require_errors();
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  } = require_pool_base();
  var Pool = require_pool();
  var { kUrl, kInterceptors } = require_symbols();
  var { parseOrigin } = require_util();
  var kFactory = Symbol("factory");
  var kOptions = Symbol("options");
  var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
  var kCurrentWeight = Symbol("kCurrentWeight");
  var kIndex = Symbol("kIndex");
  var kWeight = Symbol("kWeight");
  var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
  var kErrorPenalty = Symbol("kErrorPenalty");
  function getGreatestCommonDivisor(a, b) {
    if (b === 0)
      return a;
    return getGreatestCommonDivisor(b, a % b);
  }
  function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
  }

  class BalancedPool extends PoolBase {
    constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
      super();
      this[kOptions] = opts;
      this[kIndex] = -1;
      this[kCurrentWeight] = 0;
      this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
      this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
      if (!Array.isArray(upstreams)) {
        upstreams = [upstreams];
      }
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
      this[kFactory] = factory;
      for (const upstream of upstreams) {
        this.addUpstream(upstream);
      }
      this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
        return this;
      }
      const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
      this[kAddClient](pool);
      pool.on("connect", () => {
        pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
      });
      pool.on("connectionError", () => {
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
        this._updateBalancedPoolStats();
      });
      pool.on("disconnect", (...args) => {
        const err = args[2];
        if (err && err.code === "UND_ERR_SOCKET") {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        }
      });
      for (const client of this[kClients]) {
        client[kWeight] = this[kMaxWeightPerServer];
      }
      this._updateBalancedPoolStats();
      return this;
    }
    _updateBalancedPoolStats() {
      this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
    }
    removeUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
      if (pool) {
        this[kRemoveClient](pool);
      }
      return this;
    }
    get upstreams() {
      return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
    }
    [kGetDispatcher]() {
      if (this[kClients].length === 0) {
        throw new BalancedPoolMissingUpstreamError;
      }
      const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
      if (!dispatcher) {
        return;
      }
      const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
      if (allClientsBusy) {
        return;
      }
      let counter = 0;
      let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
      while (counter++ < this[kClients].length) {
        this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
        const pool = this[kClients][this[kIndex]];
        if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
          maxWeightIndex = this[kIndex];
        }
        if (this[kIndex] === 0) {
          this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
          if (this[kCurrentWeight] <= 0) {
            this[kCurrentWeight] = this[kMaxWeightPerServer];
          }
        }
        if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
          return pool;
        }
      }
      this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
      this[kIndex] = maxWeightIndex;
      return this[kClients][maxWeightIndex];
    }
  }
  module.exports = BalancedPool;
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS((exports, module) => {
  var { kConnected, kSize } = require_symbols();

  class CompatWeakRef {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;
    }
  }

  class CompatFinalizer {
    constructor(finalizer) {
      this.finalizer = finalizer;
    }
    register(dispatcher, key) {
      if (dispatcher.on) {
        dispatcher.on("disconnect", () => {
          if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
            this.finalizer(key);
          }
        });
      }
    }
  }
  module.exports = function() {
    if (process.env.NODE_V8_COVERAGE) {
      return {
        WeakRef: CompatWeakRef,
        FinalizationRegistry: CompatFinalizer
      };
    }
    return {
      WeakRef: global.WeakRef || CompatWeakRef,
      FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
    };
  };
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS((exports, module) => {
  var { InvalidArgumentError } = require_errors();
  var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
  var DispatcherBase = require_dispatcher_base();
  var Pool = require_pool();
  var Client = require_client();
  var util = require_util();
  var createRedirectInterceptor = require_redirectInterceptor();
  var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kMaxRedirections = Symbol("maxRedirections");
  var kOnDrain = Symbol("onDrain");
  var kFactory = Symbol("factory");
  var kFinalizer = Symbol("finalizer");
  var kOptions = Symbol("options");
  function defaultFactory(origin, opts) {
    return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
  }

  class Agent extends DispatcherBase {
    constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
      super();
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      if (connect && typeof connect !== "function") {
        connect = { ...connect };
      }
      this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
      this[kOptions] = { ...util.deepClone(options), connect };
      this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
      this[kMaxRedirections] = maxRedirections;
      this[kFactory] = factory;
      this[kClients] = new Map;
      this[kFinalizer] = new FinalizationRegistry((key) => {
        const ref = this[kClients].get(key);
        if (ref !== undefined && ref.deref() === undefined) {
          this[kClients].delete(key);
        }
      });
      const agent = this;
      this[kOnDrain] = (origin, targets) => {
        agent.emit("drain", origin, [agent, ...targets]);
      };
      this[kOnConnect] = (origin, targets) => {
        agent.emit("connect", origin, [agent, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err) => {
        agent.emit("disconnect", origin, [agent, ...targets], err);
      };
      this[kOnConnectionError] = (origin, targets, err) => {
        agent.emit("connectionError", origin, [agent, ...targets], err);
      };
    }
    get [kRunning]() {
      let ret = 0;
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          ret += client[kRunning];
        }
      }
      return ret;
    }
    [kDispatch](opts, handler) {
      let key;
      if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
        key = String(opts.origin);
      } else {
        throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
      }
      const ref = this[kClients].get(key);
      let dispatcher = ref ? ref.deref() : null;
      if (!dispatcher) {
        dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].set(key, new WeakRef2(dispatcher));
        this[kFinalizer].register(dispatcher, key);
      }
      return dispatcher.dispatch(opts, handler);
    }
    async[kClose]() {
      const closePromises = [];
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          closePromises.push(client.close());
        }
      }
      await Promise.all(closePromises);
    }
    async[kDestroy](err) {
      const destroyPromises = [];
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          destroyPromises.push(client.destroy(err));
        }
      }
      await Promise.all(destroyPromises);
    }
  }
  module.exports = Agent;
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS((exports, module) => {
  var assert = __require("assert");
  var { Readable } = __require("stream");
  var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
  var util = require_util();
  var { ReadableStreamFrom, toUSVString } = require_util();
  var Blob2;
  var kConsume = Symbol("kConsume");
  var kReading = Symbol("kReading");
  var kBody = Symbol("kBody");
  var kAbort = Symbol("abort");
  var kContentType = Symbol("kContentType");
  var noop = () => {};
  module.exports = class BodyReadable extends Readable {
    constructor({
      resume,
      abort,
      contentType = "",
      highWaterMark = 64 * 1024
    }) {
      super({
        autoDestroy: true,
        read: resume,
        highWaterMark
      });
      this._readableState.dataEmitted = false;
      this[kAbort] = abort;
      this[kConsume] = null;
      this[kBody] = null;
      this[kContentType] = contentType;
      this[kReading] = false;
    }
    destroy(err) {
      if (this.destroyed) {
        return this;
      }
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError;
      }
      if (err) {
        this[kAbort]();
      }
      return super.destroy(err);
    }
    emit(ev, ...args) {
      if (ev === "data") {
        this._readableState.dataEmitted = true;
      } else if (ev === "error") {
        this._readableState.errorEmitted = true;
      }
      return super.emit(ev, ...args);
    }
    on(ev, ...args) {
      if (ev === "data" || ev === "readable") {
        this[kReading] = true;
      }
      return super.on(ev, ...args);
    }
    addListener(ev, ...args) {
      return this.on(ev, ...args);
    }
    off(ev, ...args) {
      const ret = super.off(ev, ...args);
      if (ev === "data" || ev === "readable") {
        this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
      }
      return ret;
    }
    removeListener(ev, ...args) {
      return this.off(ev, ...args);
    }
    push(chunk) {
      if (this[kConsume] && chunk !== null && this.readableLength === 0) {
        consumePush(this[kConsume], chunk);
        return this[kReading] ? super.push(chunk) : true;
      }
      return super.push(chunk);
    }
    async text() {
      return consume(this, "text");
    }
    async json() {
      return consume(this, "json");
    }
    async blob() {
      return consume(this, "blob");
    }
    async arrayBuffer() {
      return consume(this, "arrayBuffer");
    }
    async formData() {
      throw new NotSupportedError;
    }
    get bodyUsed() {
      return util.isDisturbed(this);
    }
    get body() {
      if (!this[kBody]) {
        this[kBody] = ReadableStreamFrom(this);
        if (this[kConsume]) {
          this[kBody].getReader();
          assert(this[kBody].locked);
        }
      }
      return this[kBody];
    }
    dump(opts) {
      let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
      const signal = opts && opts.signal;
      if (signal) {
        try {
          if (typeof signal !== "object" || !("aborted" in signal)) {
            throw new InvalidArgumentError("signal must be an AbortSignal");
          }
          util.throwIfAborted(signal);
        } catch (err) {
          return Promise.reject(err);
        }
      }
      if (this.closed) {
        return Promise.resolve(null);
      }
      return new Promise((resolve, reject) => {
        const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
          this.destroy();
        }) : noop;
        this.on("close", function() {
          signalListenerCleanup();
          if (signal && signal.aborted) {
            reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
          } else {
            resolve(null);
          }
        }).on("error", noop).on("data", function(chunk) {
          limit -= chunk.length;
          if (limit <= 0) {
            this.destroy();
          }
        }).resume();
      });
    }
  };
  function isLocked(self2) {
    return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
  }
  function isUnusable(self2) {
    return util.isDisturbed(self2) || isLocked(self2);
  }
  async function consume(stream, type) {
    if (isUnusable(stream)) {
      throw new TypeError("unusable");
    }
    assert(!stream[kConsume]);
    return new Promise((resolve, reject) => {
      stream[kConsume] = {
        type,
        stream,
        resolve,
        reject,
        length: 0,
        body: []
      };
      stream.on("error", function(err) {
        consumeFinish(this[kConsume], err);
      }).on("close", function() {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError);
        }
      });
      process.nextTick(consumeStart, stream[kConsume]);
    });
  }
  function consumeStart(consume2) {
    if (consume2.body === null) {
      return;
    }
    const { _readableState: state } = consume2.stream;
    for (const chunk of state.buffer) {
      consumePush(consume2, chunk);
    }
    if (state.endEmitted) {
      consumeEnd(this[kConsume]);
    } else {
      consume2.stream.on("end", function() {
        consumeEnd(this[kConsume]);
      });
    }
    consume2.stream.resume();
    while (consume2.stream.read() != null) {}
  }
  function consumeEnd(consume2) {
    const { type, body, resolve, stream, length } = consume2;
    try {
      if (type === "text") {
        resolve(toUSVString(Buffer.concat(body)));
      } else if (type === "json") {
        resolve(JSON.parse(Buffer.concat(body)));
      } else if (type === "arrayBuffer") {
        const dst = new Uint8Array(length);
        let pos = 0;
        for (const buf of body) {
          dst.set(buf, pos);
          pos += buf.byteLength;
        }
        resolve(dst.buffer);
      } else if (type === "blob") {
        if (!Blob2) {
          Blob2 = __require("buffer").Blob;
        }
        resolve(new Blob2(body, { type: stream[kContentType] }));
      }
      consumeFinish(consume2);
    } catch (err) {
      stream.destroy(err);
    }
  }
  function consumePush(consume2, chunk) {
    consume2.length += chunk.length;
    consume2.body.push(chunk);
  }
  function consumeFinish(consume2, err) {
    if (consume2.body === null) {
      return;
    }
    if (err) {
      consume2.reject(err);
    } else {
      consume2.resolve();
    }
    consume2.type = null;
    consume2.stream = null;
    consume2.resolve = null;
    consume2.reject = null;
    consume2.length = 0;
    consume2.body = null;
  }
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS((exports, module) => {
  var assert = __require("assert");
  var {
    ResponseStatusCodeError
  } = require_errors();
  var { toUSVString } = require_util();
  async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
    assert(body);
    let chunks = [];
    let limit = 0;
    for await (const chunk of body) {
      chunks.push(chunk);
      limit += chunk.length;
      if (limit > 128 * 1024) {
        chunks = null;
        break;
      }
    }
    if (statusCode === 204 || !contentType || !chunks) {
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
      return;
    }
    try {
      if (contentType.startsWith("application/json")) {
        const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
        return;
      }
      if (contentType.startsWith("text/")) {
        const payload = toUSVString(Buffer.concat(chunks));
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
        return;
      }
    } catch (err) {}
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
  }
  module.exports = { getResolveErrorBodyCallback };
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS((exports, module) => {
  var { addAbortListener } = require_util();
  var { RequestAbortedError } = require_errors();
  var kListener = Symbol("kListener");
  var kSignal = Symbol("kSignal");
  function abort(self2) {
    if (self2.abort) {
      self2.abort();
    } else {
      self2.onError(new RequestAbortedError);
    }
  }
  function addSignal(self2, signal) {
    self2[kSignal] = null;
    self2[kListener] = null;
    if (!signal) {
      return;
    }
    if (signal.aborted) {
      abort(self2);
      return;
    }
    self2[kSignal] = signal;
    self2[kListener] = () => {
      abort(self2);
    };
    addAbortListener(self2[kSignal], self2[kListener]);
  }
  function removeSignal(self2) {
    if (!self2[kSignal]) {
      return;
    }
    if ("removeEventListener" in self2[kSignal]) {
      self2[kSignal].removeEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].removeListener("abort", self2[kListener]);
    }
    self2[kSignal] = null;
    self2[kListener] = null;
  }
  module.exports = {
    addSignal,
    removeSignal
  };
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS((exports, module) => {
  var Readable = require_readable();
  var {
    InvalidArgumentError,
    RequestAbortedError
  } = require_errors();
  var util = require_util();
  var { getResolveErrorBodyCallback } = require_util3();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();

  class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
          throw new InvalidArgumentError("invalid highWaterMark");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_REQUEST");
      } catch (err) {
        if (util.isStream(body)) {
          util.destroy(body.on("error", util.nop), err);
        }
        throw err;
      }
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.body = body;
      this.trailers = {};
      this.context = null;
      this.onInfo = onInfo || null;
      this.throwOnError = throwOnError;
      this.highWaterMark = highWaterMark;
      if (util.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
      const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
      const contentType = parsedHeaders["content-type"];
      const body = new Readable({ resume, abort, contentType, highWaterMark });
      this.callback = null;
      this.res = body;
      if (callback !== null) {
        if (this.throwOnError && statusCode >= 400) {
          this.runInAsyncScope(getResolveErrorBodyCallback, null, { callback, body, contentType, statusCode, statusMessage, headers });
        } else {
          this.runInAsyncScope(callback, null, null, {
            statusCode,
            headers,
            trailers: this.trailers,
            opaque,
            body,
            context
          });
        }
      }
    }
    onData(chunk) {
      const { res } = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      removeSignal(this);
      util.parseHeaders(trailers, this.trailers);
      res.push(null);
    }
    onError(err) {
      const { res, callback, body, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
      if (res) {
        this.res = null;
        queueMicrotask(() => {
          util.destroy(res, err);
        });
      }
      if (body) {
        this.body = null;
        util.destroy(body, err);
      }
    }
  }
  function request(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        request.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new RequestHandler(opts, callback));
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  }
  module.exports = request;
  module.exports.RequestHandler = RequestHandler;
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS((exports, module) => {
  var { finished, PassThrough } = __require("stream");
  var {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors();
  var util = require_util();
  var { getResolveErrorBodyCallback } = require_util3();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();

  class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("invalid factory");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_STREAM");
      } catch (err) {
        if (util.isStream(body)) {
          util.destroy(body.on("error", util.nop), err);
        }
        throw err;
      }
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.factory = factory;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.context = null;
      this.trailers = null;
      this.body = body;
      this.onInfo = onInfo || null;
      this.throwOnError = throwOnError || false;
      if (util.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { factory, opaque, context, callback, responseHeaders } = this;
      const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.factory = null;
      let res;
      if (this.throwOnError && statusCode >= 400) {
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        res = new PassThrough;
        this.callback = null;
        this.runInAsyncScope(getResolveErrorBodyCallback, null, { callback, body: res, contentType, statusCode, statusMessage, headers });
      } else {
        if (factory === null) {
          return;
        }
        res = this.runInAsyncScope(factory, null, {
          statusCode,
          headers,
          opaque,
          context
        });
        if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
          throw new InvalidReturnValueError("expected Writable");
        }
        finished(res, { readable: false }, (err) => {
          const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
          this.res = null;
          if (err || !res2.readable) {
            util.destroy(res2, err);
          }
          this.callback = null;
          this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
          if (err) {
            abort();
          }
        });
      }
      res.on("drain", resume);
      this.res = res;
      const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
      return needDrain !== true;
    }
    onData(chunk) {
      const { res } = this;
      return res ? res.write(chunk) : true;
    }
    onComplete(trailers) {
      const { res } = this;
      removeSignal(this);
      if (!res) {
        return;
      }
      this.trailers = util.parseHeaders(trailers);
      res.end();
    }
    onError(err) {
      const { res, callback, opaque, body } = this;
      removeSignal(this);
      this.factory = null;
      if (res) {
        this.res = null;
        util.destroy(res, err);
      } else if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
      if (body) {
        this.body = null;
        util.destroy(body, err);
      }
    }
  }
  function stream(opts, factory, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        stream.call(this, opts, factory, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new StreamHandler(opts, factory, callback));
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  }
  module.exports = stream;
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS((exports, module) => {
  var {
    Readable,
    Duplex,
    PassThrough
  } = __require("stream");
  var {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors();
  var util = require_util();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();
  var assert = __require("assert");
  var kResume = Symbol("resume");

  class PipelineRequest extends Readable {
    constructor() {
      super({ autoDestroy: true });
      this[kResume] = null;
    }
    _read() {
      const { [kResume]: resume } = this;
      if (resume) {
        this[kResume] = null;
        resume();
      }
    }
    _destroy(err, callback) {
      this._read();
      callback(err);
    }
  }

  class PipelineResponse extends Readable {
    constructor(resume) {
      super({ autoDestroy: true });
      this[kResume] = resume;
    }
    _read() {
      this[kResume]();
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError;
      }
      callback(err);
    }
  }

  class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof handler !== "function") {
        throw new InvalidArgumentError("invalid handler");
      }
      const { signal, method, opaque, onInfo, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      if (method === "CONNECT") {
        throw new InvalidArgumentError("invalid method");
      }
      if (onInfo && typeof onInfo !== "function") {
        throw new InvalidArgumentError("invalid onInfo callback");
      }
      super("UNDICI_PIPELINE");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.handler = handler;
      this.abort = null;
      this.context = null;
      this.onInfo = onInfo || null;
      this.req = new PipelineRequest().on("error", util.nop);
      this.ret = new Duplex({
        readableObjectMode: opts.objectMode,
        autoDestroy: true,
        read: () => {
          const { body } = this;
          if (body && body.resume) {
            body.resume();
          }
        },
        write: (chunk, encoding, callback) => {
          const { req } = this;
          if (req.push(chunk, encoding) || req._readableState.destroyed) {
            callback();
          } else {
            req[kResume] = callback;
          }
        },
        destroy: (err, callback) => {
          const { body, req, res, ret, abort } = this;
          if (!err && !ret._readableState.endEmitted) {
            err = new RequestAbortedError;
          }
          if (abort && err) {
            abort();
          }
          util.destroy(body, err);
          util.destroy(req, err);
          util.destroy(res, err);
          removeSignal(this);
          callback(err);
        }
      }).on("prefinish", () => {
        const { req } = this;
        req.push(null);
      });
      this.res = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      const { ret, res } = this;
      assert(!res, "pipeline cannot be retried");
      if (ret.destroyed) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
      const { opaque, handler, context } = this;
      if (statusCode < 200) {
        if (this.onInfo) {
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.res = new PipelineResponse(resume);
      let body;
      try {
        this.handler = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        body = this.runInAsyncScope(handler, null, {
          statusCode,
          headers,
          opaque,
          body: this.res,
          context
        });
      } catch (err) {
        this.res.on("error", util.nop);
        throw err;
      }
      if (!body || typeof body.on !== "function") {
        throw new InvalidReturnValueError("expected Readable");
      }
      body.on("data", (chunk) => {
        const { ret, body: body2 } = this;
        if (!ret.push(chunk) && body2.pause) {
          body2.pause();
        }
      }).on("error", (err) => {
        const { ret } = this;
        util.destroy(ret, err);
      }).on("end", () => {
        const { ret } = this;
        ret.push(null);
      }).on("close", () => {
        const { ret } = this;
        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError);
        }
      });
      this.body = body;
    }
    onData(chunk) {
      const { res } = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      res.push(null);
    }
    onError(err) {
      const { ret } = this;
      this.handler = null;
      util.destroy(ret, err);
    }
  }
  function pipeline(opts, handler) {
    try {
      const pipelineHandler = new PipelineHandler(opts, handler);
      this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
      return pipelineHandler.ret;
    } catch (err) {
      return new PassThrough().destroy(err);
    }
  }
  module.exports = pipeline;
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS((exports, module) => {
  var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
  var { AsyncResource } = __require("async_hooks");
  var util = require_util();
  var { addSignal, removeSignal } = require_abort_signal();
  var assert = __require("assert");

  class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_UPGRADE");
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      this.context = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = null;
    }
    onHeaders() {
      throw new SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      const { callback, opaque, context } = this;
      assert.strictEqual(statusCode, 101);
      removeSignal(this);
      this.callback = null;
      const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      this.runInAsyncScope(callback, null, null, {
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
    }
  }
  function upgrade(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        upgrade.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      const upgradeHandler = new UpgradeHandler(opts, callback);
      this.dispatch({
        ...opts,
        method: opts.method || "GET",
        upgrade: opts.protocol || "Websocket"
      }, upgradeHandler);
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  }
  module.exports = upgrade;
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS((exports, module) => {
  var { AsyncResource } = __require("async_hooks");
  var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
  var util = require_util();
  var { addSignal, removeSignal } = require_abort_signal();

  class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_CONNECT");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders() {
      throw new SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      const { callback, opaque, context } = this;
      removeSignal(this);
      this.callback = null;
      let headers = rawHeaders;
      if (headers != null) {
        headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      }
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
    }
  }
  function connect(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        connect.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      const connectHandler = new ConnectHandler(opts, callback);
      this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  }
  module.exports = connect;
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS((exports, module) => {
  exports.request = require_api_request();
  exports.stream = require_api_stream();
  exports.pipeline = require_api_pipeline();
  exports.upgrade = require_api_upgrade();
  exports.connect = require_api_connect();
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS((exports, module) => {
  var { UndiciError } = require_errors();

  class MockNotMatchedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, MockNotMatchedError);
      this.name = "MockNotMatchedError";
      this.message = message || "The request does not match any registered mock dispatches";
      this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
  }
  module.exports = {
    MockNotMatchedError
  };
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS((exports, module) => {
  module.exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected")
  };
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS((exports, module) => {
  var { MockNotMatchedError } = require_mock_errors();
  var {
    kDispatches,
    kMockAgent,
    kOriginalDispatch,
    kOrigin,
    kGetNetConnect
  } = require_mock_symbols();
  var { buildURL, nop } = require_util();
  var { STATUS_CODES } = __require("http");
  var {
    types: {
      isPromise
    }
  } = __require("util");
  function matchValue(match, value) {
    if (typeof match === "string") {
      return match === value;
    }
    if (match instanceof RegExp) {
      return match.test(value);
    }
    if (typeof match === "function") {
      return match(value) === true;
    }
    return false;
  }
  function lowerCaseEntries(headers) {
    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue];
    }));
  }
  function getHeaderByName(headers, key) {
    if (Array.isArray(headers)) {
      for (let i = 0;i < headers.length; i += 2) {
        if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
          return headers[i + 1];
        }
      }
      return;
    } else if (typeof headers.get === "function") {
      return headers.get(key);
    } else {
      return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
    }
  }
  function buildHeadersFromArray(headers) {
    const clone = headers.slice();
    const entries = [];
    for (let index = 0;index < clone.length; index += 2) {
      entries.push([clone[index], clone[index + 1]]);
    }
    return Object.fromEntries(entries);
  }
  function matchHeaders(mockDispatch2, headers) {
    if (typeof mockDispatch2.headers === "function") {
      if (Array.isArray(headers)) {
        headers = buildHeadersFromArray(headers);
      }
      return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
    }
    if (typeof mockDispatch2.headers === "undefined") {
      return true;
    }
    if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
      return false;
    }
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
      const headerValue = getHeaderByName(headers, matchHeaderName);
      if (!matchValue(matchHeaderValue, headerValue)) {
        return false;
      }
    }
    return true;
  }
  function safeUrl(path) {
    if (typeof path !== "string") {
      return path;
    }
    const pathSegments = path.split("?");
    if (pathSegments.length !== 2) {
      return path;
    }
    const qp = new URLSearchParams(pathSegments.pop());
    qp.sort();
    return [...pathSegments, qp.toString()].join("?");
  }
  function matchKey(mockDispatch2, { path, method, body, headers }) {
    const pathMatch = matchValue(mockDispatch2.path, path);
    const methodMatch = matchValue(mockDispatch2.method, method);
    const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
    const headersMatch = matchHeaders(mockDispatch2, headers);
    return pathMatch && methodMatch && bodyMatch && headersMatch;
  }
  function getResponseData(data) {
    if (Buffer.isBuffer(data)) {
      return data;
    } else if (typeof data === "object") {
      return JSON.stringify(data);
    } else {
      return data.toString();
    }
  }
  function getMockDispatch(mockDispatches, key) {
    const basePath = key.query ? buildURL(key.path, key.query) : key.path;
    const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
    let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
    }
    return matchedMockDispatches[0];
  }
  function addMockDispatch(mockDispatches, key, data) {
    const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
    const replyData = typeof data === "function" ? { callback: data } : { ...data };
    const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
    mockDispatches.push(newMockDispatch);
    return newMockDispatch;
  }
  function deleteMockDispatch(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch) => {
      if (!dispatch.consumed) {
        return false;
      }
      return matchKey(dispatch, key);
    });
    if (index !== -1) {
      mockDispatches.splice(index, 1);
    }
  }
  function buildKey(opts) {
    const { path, method, body, headers, query } = opts;
    return {
      path,
      method,
      body,
      headers,
      query
    };
  }
  function generateKeyValues(data) {
    return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
      ...keyValuePairs,
      Buffer.from(`${key}`),
      Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
    ], []);
  }
  function getStatusText(statusCode) {
    return STATUS_CODES[statusCode] || "unknown";
  }
  async function getResponse(body) {
    const buffers = [];
    for await (const data of body) {
      buffers.push(data);
    }
    return Buffer.concat(buffers).toString("utf8");
  }
  function mockDispatch(opts, handler) {
    const key = buildKey(opts);
    const mockDispatch2 = getMockDispatch(this[kDispatches], key);
    mockDispatch2.timesInvoked++;
    if (mockDispatch2.data.callback) {
      mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
    }
    const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;
    const { timesInvoked, times } = mockDispatch2;
    mockDispatch2.consumed = !persist && timesInvoked >= times;
    mockDispatch2.pending = timesInvoked < times;
    if (error !== null) {
      deleteMockDispatch(this[kDispatches], key);
      handler.onError(error);
      return true;
    }
    if (typeof delay === "number" && delay > 0) {
      setTimeout(() => {
        handleReply(this[kDispatches]);
      }, delay);
    } else {
      handleReply(this[kDispatches]);
    }
    function handleReply(mockDispatches, _data = data) {
      const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
      const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
      if (isPromise(body)) {
        body.then((newData) => handleReply(mockDispatches, newData));
        return;
      }
      const responseData = getResponseData(body);
      const responseHeaders = generateKeyValues(headers);
      const responseTrailers = generateKeyValues(trailers);
      handler.abort = nop;
      handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
      handler.onData(Buffer.from(responseData));
      handler.onComplete(responseTrailers);
      deleteMockDispatch(mockDispatches, key);
    }
    function resume() {}
    return true;
  }
  function buildMockDispatch() {
    const agent = this[kMockAgent];
    const origin = this[kOrigin];
    const originalDispatch = this[kOriginalDispatch];
    return function dispatch(opts, handler) {
      if (agent.isMockActive) {
        try {
          mockDispatch.call(this, opts, handler);
        } catch (error) {
          if (error instanceof MockNotMatchedError) {
            const netConnect = agent[kGetNetConnect]();
            if (netConnect === false) {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
            }
            if (checkNetConnect(netConnect, origin)) {
              originalDispatch.call(this, opts, handler);
            } else {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
            }
          } else {
            throw error;
          }
        }
      } else {
        originalDispatch.call(this, opts, handler);
      }
    };
  }
  function checkNetConnect(netConnect, origin) {
    const url = new URL(origin);
    if (netConnect === true) {
      return true;
    } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
      return true;
    }
    return false;
  }
  function buildMockOptions(opts) {
    if (opts) {
      const { agent, ...mockOptions } = opts;
      return mockOptions;
    }
  }
  module.exports = {
    getResponseData,
    getMockDispatch,
    addMockDispatch,
    deleteMockDispatch,
    buildKey,
    generateKeyValues,
    matchValue,
    getResponse,
    getStatusText,
    mockDispatch,
    buildMockDispatch,
    checkNetConnect,
    buildMockOptions,
    getHeaderByName
  };
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS((exports, module) => {
  var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kDispatchKey,
    kDefaultHeaders,
    kDefaultTrailers,
    kContentLength,
    kMockDispatch
  } = require_mock_symbols();
  var { InvalidArgumentError } = require_errors();
  var { buildURL } = require_util();

  class MockScope {
    constructor(mockDispatch) {
      this[kMockDispatch] = mockDispatch;
    }
    delay(waitInMs) {
      if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
        throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
      }
      this[kMockDispatch].delay = waitInMs;
      return this;
    }
    persist() {
      this[kMockDispatch].persist = true;
      return this;
    }
    times(repeatTimes) {
      if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
        throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
      }
      this[kMockDispatch].times = repeatTimes;
      return this;
    }
  }

  class MockInterceptor {
    constructor(opts, mockDispatches) {
      if (typeof opts !== "object") {
        throw new InvalidArgumentError("opts must be an object");
      }
      if (typeof opts.path === "undefined") {
        throw new InvalidArgumentError("opts.path must be defined");
      }
      if (typeof opts.method === "undefined") {
        opts.method = "GET";
      }
      if (typeof opts.path === "string") {
        if (opts.query) {
          opts.path = buildURL(opts.path, opts.query);
        } else {
          const parsedURL = new URL(opts.path, "data://");
          opts.path = parsedURL.pathname + parsedURL.search;
        }
      }
      if (typeof opts.method === "string") {
        opts.method = opts.method.toUpperCase();
      }
      this[kDispatchKey] = buildKey(opts);
      this[kDispatches] = mockDispatches;
      this[kDefaultHeaders] = {};
      this[kDefaultTrailers] = {};
      this[kContentLength] = false;
    }
    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
      const responseData = getResponseData(data);
      const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
      const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
      const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
      return { statusCode, data, headers, trailers };
    }
    validateReplyParameters(statusCode, data, responseOptions) {
      if (typeof statusCode === "undefined") {
        throw new InvalidArgumentError("statusCode must be defined");
      }
      if (typeof data === "undefined") {
        throw new InvalidArgumentError("data must be defined");
      }
      if (typeof responseOptions !== "object") {
        throw new InvalidArgumentError("responseOptions must be an object");
      }
    }
    reply(replyData) {
      if (typeof replyData === "function") {
        const wrappedDefaultsCallback = (opts) => {
          const resolvedData = replyData(opts);
          if (typeof resolvedData !== "object") {
            throw new InvalidArgumentError("reply options callback must return an object");
          }
          const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
          this.validateReplyParameters(statusCode2, data2, responseOptions2);
          return {
            ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
          };
        };
        const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
        return new MockScope(newMockDispatch2);
      }
      const [statusCode, data = "", responseOptions = {}] = [...arguments];
      this.validateReplyParameters(statusCode, data, responseOptions);
      const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
      return new MockScope(newMockDispatch);
    }
    replyWithError(error) {
      if (typeof error === "undefined") {
        throw new InvalidArgumentError("error must be defined");
      }
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
      return new MockScope(newMockDispatch);
    }
    defaultReplyHeaders(headers) {
      if (typeof headers === "undefined") {
        throw new InvalidArgumentError("headers must be defined");
      }
      this[kDefaultHeaders] = headers;
      return this;
    }
    defaultReplyTrailers(trailers) {
      if (typeof trailers === "undefined") {
        throw new InvalidArgumentError("trailers must be defined");
      }
      this[kDefaultTrailers] = trailers;
      return this;
    }
    replyContentLength() {
      this[kContentLength] = true;
      return this;
    }
  }
  exports.MockInterceptor = MockInterceptor;
  exports.MockScope = MockScope;
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS((exports, module) => {
  var { promisify } = __require("util");
  var Client = require_client();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors();

  class MockClient extends Client {
    constructor(origin, opts) {
      super(origin, opts);
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module.exports = MockClient;
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS((exports, module) => {
  var { promisify } = __require("util");
  var Pool = require_pool();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors();

  class MockPool extends Pool {
    constructor(origin, opts) {
      super(origin, opts);
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module.exports = MockPool;
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS((exports, module) => {
  var singulars = {
    pronoun: "it",
    is: "is",
    was: "was",
    this: "this"
  };
  var plurals = {
    pronoun: "they",
    is: "are",
    was: "were",
    this: "these"
  };
  module.exports = class Pluralizer {
    constructor(singular, plural) {
      this.singular = singular;
      this.plural = plural;
    }
    pluralize(count) {
      const one = count === 1;
      const keys = one ? singulars : plurals;
      const noun = one ? this.singular : this.plural;
      return { ...keys, count, noun };
    }
  };
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS((exports, module) => {
  var { Transform } = __require("stream");
  var { Console } = __require("console");
  module.exports = class PendingInterceptorsFormatter {
    constructor({ disableColors } = {}) {
      this.transform = new Transform({
        transform(chunk, _enc, cb) {
          cb(null, chunk);
        }
      });
      this.logger = new Console({
        stdout: this.transform,
        inspectOptions: {
          colors: !disableColors && !process.env.CI
        }
      });
    }
    format(pendingInterceptors) {
      const withPrettyHeaders = pendingInterceptors.map(({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        "Status code": statusCode,
        Persistent: persist ? "✅" : "❌",
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }));
      this.logger.table(withPrettyHeaders);
      return this.transform.read().toString();
    }
  };
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS((exports, module) => {
  var { kClients } = require_symbols();
  var Agent = require_agent();
  var {
    kAgent,
    kMockAgentSet,
    kMockAgentGet,
    kDispatches,
    kIsMockActive,
    kNetConnect,
    kGetNetConnect,
    kOptions,
    kFactory
  } = require_mock_symbols();
  var MockClient = require_mock_client();
  var MockPool = require_mock_pool();
  var { matchValue, buildMockOptions } = require_mock_utils();
  var { InvalidArgumentError, UndiciError } = require_errors();
  var Dispatcher = require_dispatcher();
  var Pluralizer = require_pluralizer();
  var PendingInterceptorsFormatter = require_pending_interceptors_formatter();

  class FakeWeakRef {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value;
    }
  }

  class MockAgent extends Dispatcher {
    constructor(opts) {
      super(opts);
      this[kNetConnect] = true;
      this[kIsMockActive] = true;
      if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      const agent = opts && opts.agent ? opts.agent : new Agent(opts);
      this[kAgent] = agent;
      this[kClients] = agent[kClients];
      this[kOptions] = buildMockOptions(opts);
    }
    get(origin) {
      let dispatcher = this[kMockAgentGet](origin);
      if (!dispatcher) {
        dispatcher = this[kFactory](origin);
        this[kMockAgentSet](origin, dispatcher);
      }
      return dispatcher;
    }
    dispatch(opts, handler) {
      this.get(opts.origin);
      return this[kAgent].dispatch(opts, handler);
    }
    async close() {
      await this[kAgent].close();
      this[kClients].clear();
    }
    deactivate() {
      this[kIsMockActive] = false;
    }
    activate() {
      this[kIsMockActive] = true;
    }
    enableNetConnect(matcher) {
      if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
        if (Array.isArray(this[kNetConnect])) {
          this[kNetConnect].push(matcher);
        } else {
          this[kNetConnect] = [matcher];
        }
      } else if (typeof matcher === "undefined") {
        this[kNetConnect] = true;
      } else {
        throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
      }
    }
    disableNetConnect() {
      this[kNetConnect] = false;
    }
    get isMockActive() {
      return this[kIsMockActive];
    }
    [kMockAgentSet](origin, dispatcher) {
      this[kClients].set(origin, new FakeWeakRef(dispatcher));
    }
    [kFactory](origin) {
      const mockOptions = Object.assign({ agent: this }, this[kOptions]);
      return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
    }
    [kMockAgentGet](origin) {
      const ref = this[kClients].get(origin);
      if (ref) {
        return ref.deref();
      }
      if (typeof origin !== "string") {
        const dispatcher = this[kFactory]("http://localhost:9999");
        this[kMockAgentSet](origin, dispatcher);
        return dispatcher;
      }
      for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
        const nonExplicitDispatcher = nonExplicitRef.deref();
        if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
          const dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
          dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
          return dispatcher;
        }
      }
    }
    [kGetNetConnect]() {
      return this[kNetConnect];
    }
    pendingInterceptors() {
      const mockAgentClients = this[kClients];
      return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
    }
    assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter } = {}) {
      const pending = this.pendingInterceptors();
      if (pending.length === 0) {
        return;
      }
      const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
      throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
    }
  }
  module.exports = MockAgent;
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS((exports, module) => {
  var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
  var { URL: URL2 } = __require("url");
  var Agent = require_agent();
  var Pool = require_pool();
  var DispatcherBase = require_dispatcher_base();
  var { InvalidArgumentError, RequestAbortedError } = require_errors();
  var buildConnector = require_connect();
  var kAgent = Symbol("proxy agent");
  var kClient = Symbol("proxy client");
  var kProxyHeaders = Symbol("proxy headers");
  var kRequestTls = Symbol("request tls settings");
  var kProxyTls = Symbol("proxy tls settings");
  var kConnectEndpoint = Symbol("connect endpoint function");
  function defaultProtocolPort(protocol) {
    return protocol === "https:" ? 443 : 80;
  }
  function buildProxyOptions(opts) {
    if (typeof opts === "string") {
      opts = { uri: opts };
    }
    if (!opts || !opts.uri) {
      throw new InvalidArgumentError("Proxy opts.uri is mandatory");
    }
    return {
      uri: opts.uri,
      protocol: opts.protocol || "https"
    };
  }
  function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
  }

  class ProxyAgent extends DispatcherBase {
    constructor(opts) {
      super(opts);
      this[kProxy] = buildProxyOptions(opts);
      this[kAgent] = new Agent(opts);
      this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      const { clientFactory = defaultFactory } = opts;
      if (typeof clientFactory !== "function") {
        throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
      }
      this[kRequestTls] = opts.requestTls;
      this[kProxyTls] = opts.proxyTls;
      this[kProxyHeaders] = opts.headers || {};
      const resolvedUrl = new URL2(opts.uri);
      const { origin, port, host, username, password } = resolvedUrl;
      if (opts.auth && opts.token) {
        throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
      } else if (opts.auth) {
        this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
      } else if (opts.token) {
        this[kProxyHeaders]["proxy-authorization"] = opts.token;
      } else if (username && password) {
        this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
      }
      const connect = buildConnector({ ...opts.proxyTls });
      this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
      this[kClient] = clientFactory(resolvedUrl, { connect });
      this[kAgent] = new Agent({
        ...opts,
        connect: async (opts2, callback) => {
          let requestedHost = opts2.host;
          if (!opts2.port) {
            requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
          }
          try {
            const { socket, statusCode } = await this[kClient].connect({
              origin,
              port,
              path: requestedHost,
              signal: opts2.signal,
              headers: {
                ...this[kProxyHeaders],
                host
              }
            });
            if (statusCode !== 200) {
              socket.on("error", () => {}).destroy();
              callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
            }
            if (opts2.protocol !== "https:") {
              callback(null, socket);
              return;
            }
            let servername;
            if (this[kRequestTls]) {
              servername = this[kRequestTls].servername;
            } else {
              servername = opts2.servername;
            }
            this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
          } catch (err) {
            callback(err);
          }
        }
      });
    }
    dispatch(opts, handler) {
      const { host } = new URL2(opts.origin);
      const headers = buildHeaders(opts.headers);
      throwIfProxyAuthIsSent(headers);
      return this[kAgent].dispatch({
        ...opts,
        headers: {
          ...headers,
          host
        }
      }, handler);
    }
    async[kClose]() {
      await this[kAgent].close();
      await this[kClient].close();
    }
    async[kDestroy]() {
      await this[kAgent].destroy();
      await this[kClient].destroy();
    }
  }
  function buildHeaders(headers) {
    if (Array.isArray(headers)) {
      const headersPair = {};
      for (let i = 0;i < headers.length; i += 2) {
        headersPair[headers[i]] = headers[i + 1];
      }
      return headersPair;
    }
    return headers;
  }
  function throwIfProxyAuthIsSent(headers) {
    const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
    if (existProxyAuth) {
      throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
    }
  }
  module.exports = ProxyAgent;
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS((exports, module) => {
  var assert = __require("assert");
  var { kRetryHandlerDefaultRetry } = require_symbols();
  var { RequestRetryError } = require_errors();
  var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
  function calculateRetryAfterHeader(retryAfter) {
    const current = Date.now();
    const diff = new Date(retryAfter).getTime() - current;
    return diff;
  }

  class RetryHandler {
    constructor(opts, handlers) {
      const { retryOptions, ...dispatchOpts } = opts;
      const {
        retry: retryFn,
        maxRetries,
        maxTimeout,
        minTimeout,
        timeoutFactor,
        methods,
        errorCodes,
        retryAfter,
        statusCodes
      } = retryOptions ?? {};
      this.dispatch = handlers.dispatch;
      this.handler = handlers.handler;
      this.opts = dispatchOpts;
      this.abort = null;
      this.aborted = false;
      this.retryOpts = {
        retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
        retryAfter: retryAfter ?? true,
        maxTimeout: maxTimeout ?? 30 * 1000,
        timeout: minTimeout ?? 500,
        timeoutFactor: timeoutFactor ?? 2,
        maxRetries: maxRetries ?? 5,
        methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
        statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
        errorCodes: errorCodes ?? [
          "ECONNRESET",
          "ECONNREFUSED",
          "ENOTFOUND",
          "ENETDOWN",
          "ENETUNREACH",
          "EHOSTDOWN",
          "EHOSTUNREACH",
          "EPIPE"
        ]
      };
      this.retryCount = 0;
      this.start = 0;
      this.end = null;
      this.etag = null;
      this.resume = null;
      this.handler.onConnect((reason) => {
        this.aborted = true;
        if (this.abort) {
          this.abort(reason);
        } else {
          this.reason = reason;
        }
      });
    }
    onRequestSent() {
      if (this.handler.onRequestSent) {
        this.handler.onRequestSent();
      }
    }
    onUpgrade(statusCode, headers, socket) {
      if (this.handler.onUpgrade) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
    }
    onConnect(abort) {
      if (this.aborted) {
        abort(this.reason);
      } else {
        this.abort = abort;
      }
    }
    onBodySent(chunk) {
      if (this.handler.onBodySent)
        return this.handler.onBodySent(chunk);
    }
    static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
      const { statusCode, code, headers } = err;
      const { method, retryOptions } = opts;
      const {
        maxRetries,
        timeout,
        maxTimeout,
        timeoutFactor,
        statusCodes,
        errorCodes,
        methods
      } = retryOptions;
      let { counter, currentTimeout } = state;
      currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
      if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
        cb(err);
        return;
      }
      if (Array.isArray(methods) && !methods.includes(method)) {
        cb(err);
        return;
      }
      if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
        cb(err);
        return;
      }
      if (counter > maxRetries) {
        cb(err);
        return;
      }
      let retryAfterHeader = headers != null && headers["retry-after"];
      if (retryAfterHeader) {
        retryAfterHeader = Number(retryAfterHeader);
        retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1000;
      }
      const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
      state.currentTimeout = retryTimeout;
      setTimeout(() => cb(null), retryTimeout);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const headers = parseHeaders(rawHeaders);
      this.retryCount += 1;
      if (statusCode >= 300) {
        this.abort(new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        }));
        return false;
      }
      if (this.resume != null) {
        this.resume = null;
        if (statusCode !== 206) {
          return true;
        }
        const contentRange = parseRangeHeader(headers["content-range"]);
        if (!contentRange) {
          this.abort(new RequestRetryError("Content-Range mismatch", statusCode, {
            headers,
            count: this.retryCount
          }));
          return false;
        }
        if (this.etag != null && this.etag !== headers.etag) {
          this.abort(new RequestRetryError("ETag mismatch", statusCode, {
            headers,
            count: this.retryCount
          }));
          return false;
        }
        const { start, size, end = size } = contentRange;
        assert(this.start === start, "content-range mismatch");
        assert(this.end == null || this.end === end, "content-range mismatch");
        this.resume = resume;
        return true;
      }
      if (this.end == null) {
        if (statusCode === 206) {
          const range = parseRangeHeader(headers["content-range"]);
          if (range == null) {
            return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
          }
          const { start, size, end = size } = range;
          assert(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
          assert(Number.isFinite(start));
          assert(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
          this.start = start;
          this.end = end;
        }
        if (this.end == null) {
          const contentLength = headers["content-length"];
          this.end = contentLength != null ? Number(contentLength) : null;
        }
        assert(Number.isFinite(this.start));
        assert(this.end == null || Number.isFinite(this.end), "invalid content-length");
        this.resume = resume;
        this.etag = headers.etag != null ? headers.etag : null;
        return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
      }
      const err = new RequestRetryError("Request failed", statusCode, {
        headers,
        count: this.retryCount
      });
      this.abort(err);
      return false;
    }
    onData(chunk) {
      this.start += chunk.length;
      return this.handler.onData(chunk);
    }
    onComplete(rawTrailers) {
      this.retryCount = 0;
      return this.handler.onComplete(rawTrailers);
    }
    onError(err) {
      if (this.aborted || isDisturbed(this.opts.body)) {
        return this.handler.onError(err);
      }
      this.retryOpts.retry(err, {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      }, onRetry.bind(this));
      function onRetry(err2) {
        if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err2);
        }
        if (this.start !== 0) {
          this.opts = {
            ...this.opts,
            headers: {
              ...this.opts.headers,
              range: `bytes=${this.start}-${this.end ?? ""}`
            }
          };
        }
        try {
          this.dispatch(this.opts, this);
        } catch (err3) {
          this.handler.onError(err3);
        }
      }
    }
  }
  module.exports = RetryHandler;
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS((exports, module) => {
  var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
  var { InvalidArgumentError } = require_errors();
  var Agent = require_agent();
  if (getGlobalDispatcher() === undefined) {
    setGlobalDispatcher(new Agent);
  }
  function setGlobalDispatcher(agent) {
    if (!agent || typeof agent.dispatch !== "function") {
      throw new InvalidArgumentError("Argument agent must implement Agent");
    }
    Object.defineProperty(globalThis, globalDispatcher, {
      value: agent,
      writable: true,
      enumerable: false,
      configurable: false
    });
  }
  function getGlobalDispatcher() {
    return globalThis[globalDispatcher];
  }
  module.exports = {
    setGlobalDispatcher,
    getGlobalDispatcher
  };
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS((exports, module) => {
  module.exports = class DecoratorHandler {
    constructor(handler) {
      this.handler = handler;
    }
    onConnect(...args) {
      return this.handler.onConnect(...args);
    }
    onError(...args) {
      return this.handler.onError(...args);
    }
    onUpgrade(...args) {
      return this.handler.onUpgrade(...args);
    }
    onHeaders(...args) {
      return this.handler.onHeaders(...args);
    }
    onData(...args) {
      return this.handler.onData(...args);
    }
    onComplete(...args) {
      return this.handler.onComplete(...args);
    }
    onBodySent(...args) {
      return this.handler.onBodySent(...args);
    }
  };
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS((exports, module) => {
  var { kHeadersList, kConstruct } = require_symbols();
  var { kGuard } = require_symbols2();
  var { kEnumerableProperty } = require_util();
  var {
    makeIterator,
    isValidHeaderName,
    isValidHeaderValue
  } = require_util2();
  var util = __require("util");
  var { webidl } = require_webidl();
  var assert = __require("assert");
  var kHeadersMap = Symbol("headers map");
  var kHeadersSortedMap = Symbol("headers map sorted");
  function isHTTPWhiteSpaceCharCode(code) {
    return code === 10 || code === 13 || code === 9 || code === 32;
  }
  function headerValueNormalize(potentialValue) {
    let i = 0;
    let j = potentialValue.length;
    while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))
      --j;
    while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))
      ++i;
    return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
  }
  function fill(headers, object) {
    if (Array.isArray(object)) {
      for (let i = 0;i < object.length; ++i) {
        const header = object[i];
        if (header.length !== 2) {
          throw webidl.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${header.length}.`
          });
        }
        appendHeader(headers, header[0], header[1]);
      }
    } else if (typeof object === "object" && object !== null) {
      const keys = Object.keys(object);
      for (let i = 0;i < keys.length; ++i) {
        appendHeader(headers, keys[i], object[keys[i]]);
      }
    } else {
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    }
  }
  function appendHeader(headers, name, value) {
    value = headerValueNormalize(value);
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: name,
        type: "header name"
      });
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value,
        type: "header value"
      });
    }
    if (headers[kGuard] === "immutable") {
      throw new TypeError("immutable");
    } else if (headers[kGuard] === "request-no-cors") {}
    return headers[kHeadersList].append(name, value);
  }

  class HeadersList {
    cookies = null;
    constructor(init) {
      if (init instanceof HeadersList) {
        this[kHeadersMap] = new Map(init[kHeadersMap]);
        this[kHeadersSortedMap] = init[kHeadersSortedMap];
        this.cookies = init.cookies === null ? null : [...init.cookies];
      } else {
        this[kHeadersMap] = new Map(init);
        this[kHeadersSortedMap] = null;
      }
    }
    contains(name) {
      name = name.toLowerCase();
      return this[kHeadersMap].has(name);
    }
    clear() {
      this[kHeadersMap].clear();
      this[kHeadersSortedMap] = null;
      this.cookies = null;
    }
    append(name, value) {
      this[kHeadersSortedMap] = null;
      const lowercaseName = name.toLowerCase();
      const exists = this[kHeadersMap].get(lowercaseName);
      if (exists) {
        const delimiter = lowercaseName === "cookie" ? "; " : ", ";
        this[kHeadersMap].set(lowercaseName, {
          name: exists.name,
          value: `${exists.value}${delimiter}${value}`
        });
      } else {
        this[kHeadersMap].set(lowercaseName, { name, value });
      }
      if (lowercaseName === "set-cookie") {
        this.cookies ??= [];
        this.cookies.push(value);
      }
    }
    set(name, value) {
      this[kHeadersSortedMap] = null;
      const lowercaseName = name.toLowerCase();
      if (lowercaseName === "set-cookie") {
        this.cookies = [value];
      }
      this[kHeadersMap].set(lowercaseName, { name, value });
    }
    delete(name) {
      this[kHeadersSortedMap] = null;
      name = name.toLowerCase();
      if (name === "set-cookie") {
        this.cookies = null;
      }
      this[kHeadersMap].delete(name);
    }
    get(name) {
      const value = this[kHeadersMap].get(name.toLowerCase());
      return value === undefined ? null : value.value;
    }
    *[Symbol.iterator]() {
      for (const [name, { value }] of this[kHeadersMap]) {
        yield [name, value];
      }
    }
    get entries() {
      const headers = {};
      if (this[kHeadersMap].size) {
        for (const { name, value } of this[kHeadersMap].values()) {
          headers[name] = value;
        }
      }
      return headers;
    }
  }

  class Headers2 {
    constructor(init = undefined) {
      if (init === kConstruct) {
        return;
      }
      this[kHeadersList] = new HeadersList;
      this[kGuard] = "none";
      if (init !== undefined) {
        init = webidl.converters.HeadersInit(init);
        fill(this, init);
      }
    }
    append(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
      name = webidl.converters.ByteString(name);
      value = webidl.converters.ByteString(value);
      return appendHeader(this, name, value);
    }
    delete(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.delete",
          value: name,
          type: "header name"
        });
      }
      if (this[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (this[kGuard] === "request-no-cors") {}
      if (!this[kHeadersList].contains(name)) {
        return;
      }
      this[kHeadersList].delete(name);
    }
    get(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.get",
          value: name,
          type: "header name"
        });
      }
      return this[kHeadersList].get(name);
    }
    has(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.has",
          value: name,
          type: "header name"
        });
      }
      return this[kHeadersList].contains(name);
    }
    set(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
      name = webidl.converters.ByteString(name);
      value = webidl.converters.ByteString(value);
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.set",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.set",
          value,
          type: "header value"
        });
      }
      if (this[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (this[kGuard] === "request-no-cors") {}
      this[kHeadersList].set(name, value);
    }
    getSetCookie() {
      webidl.brandCheck(this, Headers2);
      const list = this[kHeadersList].cookies;
      if (list) {
        return [...list];
      }
      return [];
    }
    get [kHeadersSortedMap]() {
      if (this[kHeadersList][kHeadersSortedMap]) {
        return this[kHeadersList][kHeadersSortedMap];
      }
      const headers = [];
      const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
      const cookies = this[kHeadersList].cookies;
      for (let i = 0;i < names.length; ++i) {
        const [name, value] = names[i];
        if (name === "set-cookie") {
          for (let j = 0;j < cookies.length; ++j) {
            headers.push([name, cookies[j]]);
          }
        } else {
          assert(value !== null);
          headers.push([name, value]);
        }
      }
      this[kHeadersList][kHeadersSortedMap] = headers;
      return headers;
    }
    keys() {
      webidl.brandCheck(this, Headers2);
      if (this[kGuard] === "immutable") {
        const value = this[kHeadersSortedMap];
        return makeIterator(() => value, "Headers", "key");
      }
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
    }
    values() {
      webidl.brandCheck(this, Headers2);
      if (this[kGuard] === "immutable") {
        const value = this[kHeadersSortedMap];
        return makeIterator(() => value, "Headers", "value");
      }
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
    }
    entries() {
      webidl.brandCheck(this, Headers2);
      if (this[kGuard] === "immutable") {
        const value = this[kHeadersSortedMap];
        return makeIterator(() => value, "Headers", "key+value");
      }
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
    }
    forEach(callbackFn, thisArg = globalThis) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
      if (typeof callbackFn !== "function") {
        throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
      }
      for (const [key, value] of this) {
        callbackFn.apply(thisArg, [value, key, this]);
      }
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      webidl.brandCheck(this, Headers2);
      return this[kHeadersList];
    }
  }
  Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
  Object.defineProperties(Headers2.prototype, {
    append: kEnumerableProperty,
    delete: kEnumerableProperty,
    get: kEnumerableProperty,
    has: kEnumerableProperty,
    set: kEnumerableProperty,
    getSetCookie: kEnumerableProperty,
    keys: kEnumerableProperty,
    values: kEnumerableProperty,
    entries: kEnumerableProperty,
    forEach: kEnumerableProperty,
    [Symbol.iterator]: { enumerable: false },
    [Symbol.toStringTag]: {
      value: "Headers",
      configurable: true
    },
    [util.inspect.custom]: {
      enumerable: false
    }
  });
  webidl.converters.HeadersInit = function(V) {
    if (webidl.util.Type(V) === "Object") {
      if (V[Symbol.iterator]) {
        return webidl.converters["sequence<sequence<ByteString>>"](V);
      }
      return webidl.converters["record<ByteString, ByteString>"](V);
    }
    throw webidl.errors.conversionFailed({
      prefix: "Headers constructor",
      argument: "Argument 1",
      types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
    });
  };
  module.exports = {
    fill,
    Headers: Headers2,
    HeadersList
  };
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS((exports, module) => {
  var { Headers: Headers2, HeadersList, fill } = require_headers();
  var { extractBody, cloneBody, mixinBody } = require_body();
  var util = require_util();
  var { kEnumerableProperty } = util;
  var {
    isValidReasonPhrase,
    isCancelled,
    isAborted,
    isBlobLike,
    serializeJavascriptValueToJSONString,
    isErrorLike,
    isomorphicEncode
  } = require_util2();
  var {
    redirectStatusSet,
    nullBodyStatus,
    DOMException: DOMException2
  } = require_constants2();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var { webidl } = require_webidl();
  var { FormData } = require_formdata();
  var { getGlobalOrigin } = require_global();
  var { URLSerializer } = require_dataURL();
  var { kHeadersList, kConstruct } = require_symbols();
  var assert = __require("assert");
  var { types } = __require("util");
  var ReadableStream = globalThis.ReadableStream || __require("stream/web").ReadableStream;
  var textEncoder = new TextEncoder("utf-8");

  class Response {
    static error() {
      const relevantRealm = { settingsObject: {} };
      const responseObject = new Response;
      responseObject[kState] = makeNetworkError();
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      return responseObject;
    }
    static json(data, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
      if (init !== null) {
        init = webidl.converters.ResponseInit(init);
      }
      const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));
      const body = extractBody(bytes);
      const relevantRealm = { settingsObject: {} };
      const responseObject = new Response;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kGuard] = "response";
      responseObject[kHeaders][kRealm] = relevantRealm;
      initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
      return responseObject;
    }
    static redirect(url, status = 302) {
      const relevantRealm = { settingsObject: {} };
      webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
      url = webidl.converters.USVString(url);
      status = webidl.converters["unsigned short"](status);
      let parsedURL;
      try {
        parsedURL = new URL(url, getGlobalOrigin());
      } catch (err) {
        throw Object.assign(new TypeError("Failed to parse URL from " + url), {
          cause: err
        });
      }
      if (!redirectStatusSet.has(status)) {
        throw new RangeError("Invalid status code " + status);
      }
      const responseObject = new Response;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      responseObject[kState].status = status;
      const value = isomorphicEncode(URLSerializer(parsedURL));
      responseObject[kState].headersList.append("location", value);
      return responseObject;
    }
    constructor(body = null, init = {}) {
      if (body !== null) {
        body = webidl.converters.BodyInit(body);
      }
      init = webidl.converters.ResponseInit(init);
      this[kRealm] = { settingsObject: {} };
      this[kState] = makeResponse({});
      this[kHeaders] = new Headers2(kConstruct);
      this[kHeaders][kGuard] = "response";
      this[kHeaders][kHeadersList] = this[kState].headersList;
      this[kHeaders][kRealm] = this[kRealm];
      let bodyWithType = null;
      if (body != null) {
        const [extractedBody, type] = extractBody(body);
        bodyWithType = { body: extractedBody, type };
      }
      initializeResponse(this, init, bodyWithType);
    }
    get type() {
      webidl.brandCheck(this, Response);
      return this[kState].type;
    }
    get url() {
      webidl.brandCheck(this, Response);
      const urlList = this[kState].urlList;
      const url = urlList[urlList.length - 1] ?? null;
      if (url === null) {
        return "";
      }
      return URLSerializer(url, true);
    }
    get redirected() {
      webidl.brandCheck(this, Response);
      return this[kState].urlList.length > 1;
    }
    get status() {
      webidl.brandCheck(this, Response);
      return this[kState].status;
    }
    get ok() {
      webidl.brandCheck(this, Response);
      return this[kState].status >= 200 && this[kState].status <= 299;
    }
    get statusText() {
      webidl.brandCheck(this, Response);
      return this[kState].statusText;
    }
    get headers() {
      webidl.brandCheck(this, Response);
      return this[kHeaders];
    }
    get body() {
      webidl.brandCheck(this, Response);
      return this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Response);
      return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    clone() {
      webidl.brandCheck(this, Response);
      if (this.bodyUsed || this.body && this.body.locked) {
        throw webidl.errors.exception({
          header: "Response.clone",
          message: "Body has already been consumed."
        });
      }
      const clonedResponse = cloneResponse(this[kState]);
      const clonedResponseObject = new Response;
      clonedResponseObject[kState] = clonedResponse;
      clonedResponseObject[kRealm] = this[kRealm];
      clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
      clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
      clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
      return clonedResponseObject;
    }
  }
  mixinBody(Response);
  Object.defineProperties(Response.prototype, {
    type: kEnumerableProperty,
    url: kEnumerableProperty,
    status: kEnumerableProperty,
    ok: kEnumerableProperty,
    redirected: kEnumerableProperty,
    statusText: kEnumerableProperty,
    headers: kEnumerableProperty,
    clone: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Response",
      configurable: true
    }
  });
  Object.defineProperties(Response, {
    json: kEnumerableProperty,
    redirect: kEnumerableProperty,
    error: kEnumerableProperty
  });
  function cloneResponse(response) {
    if (response.internalResponse) {
      return filterResponse(cloneResponse(response.internalResponse), response.type);
    }
    const newResponse = makeResponse({ ...response, body: null });
    if (response.body != null) {
      newResponse.body = cloneBody(response.body);
    }
    return newResponse;
  }
  function makeResponse(init) {
    return {
      aborted: false,
      rangeRequested: false,
      timingAllowPassed: false,
      requestIncludesCredentials: false,
      type: "default",
      status: 200,
      timingInfo: null,
      cacheState: "",
      statusText: "",
      ...init,
      headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList,
      urlList: init.urlList ? [...init.urlList] : []
    };
  }
  function makeNetworkError(reason) {
    const isError = isErrorLike(reason);
    return makeResponse({
      type: "error",
      status: 0,
      error: isError ? reason : new Error(reason ? String(reason) : reason),
      aborted: reason && reason.name === "AbortError"
    });
  }
  function makeFilteredResponse(response, state) {
    state = {
      internalResponse: response,
      ...state
    };
    return new Proxy(response, {
      get(target, p) {
        return p in state ? state[p] : target[p];
      },
      set(target, p, value) {
        assert(!(p in state));
        target[p] = value;
        return true;
      }
    });
  }
  function filterResponse(response, type) {
    if (type === "basic") {
      return makeFilteredResponse(response, {
        type: "basic",
        headersList: response.headersList
      });
    } else if (type === "cors") {
      return makeFilteredResponse(response, {
        type: "cors",
        headersList: response.headersList
      });
    } else if (type === "opaque") {
      return makeFilteredResponse(response, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
      });
    } else if (type === "opaqueredirect") {
      return makeFilteredResponse(response, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
      });
    } else {
      assert(false);
    }
  }
  function makeAppropriateNetworkError(fetchParams, err = null) {
    assert(isCancelled(fetchParams));
    return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
  }
  function initializeResponse(response, init, body) {
    if (init.status !== null && (init.status < 200 || init.status > 599)) {
      throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    }
    if ("statusText" in init && init.statusText != null) {
      if (!isValidReasonPhrase(String(init.statusText))) {
        throw new TypeError("Invalid statusText");
      }
    }
    if ("status" in init && init.status != null) {
      response[kState].status = init.status;
    }
    if ("statusText" in init && init.statusText != null) {
      response[kState].statusText = init.statusText;
    }
    if ("headers" in init && init.headers != null) {
      fill(response[kHeaders], init.headers);
    }
    if (body) {
      if (nullBodyStatus.includes(response.status)) {
        throw webidl.errors.exception({
          header: "Response constructor",
          message: "Invalid response status code " + response.status
        });
      }
      response[kState].body = body.body;
      if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
        response[kState].headersList.append("content-type", body.type);
      }
    }
  }
  webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);
  webidl.converters.FormData = webidl.interfaceConverter(FormData);
  webidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);
  webidl.converters.XMLHttpRequestBodyInit = function(V) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V);
    }
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false });
    }
    if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
      return webidl.converters.BufferSource(V);
    }
    if (util.isFormDataLike(V)) {
      return webidl.converters.FormData(V, { strict: false });
    }
    if (V instanceof URLSearchParams) {
      return webidl.converters.URLSearchParams(V);
    }
    return webidl.converters.DOMString(V);
  };
  webidl.converters.BodyInit = function(V) {
    if (V instanceof ReadableStream) {
      return webidl.converters.ReadableStream(V);
    }
    if (V?.[Symbol.asyncIterator]) {
      return V;
    }
    return webidl.converters.XMLHttpRequestBodyInit(V);
  };
  webidl.converters.ResponseInit = webidl.dictionaryConverter([
    {
      key: "status",
      converter: webidl.converters["unsigned short"],
      defaultValue: 200
    },
    {
      key: "statusText",
      converter: webidl.converters.ByteString,
      defaultValue: ""
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    }
  ]);
  module.exports = {
    makeNetworkError,
    makeResponse,
    makeAppropriateNetworkError,
    filterResponse,
    Response,
    cloneResponse
  };
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS((exports, module) => {
  var { extractBody, mixinBody, cloneBody } = require_body();
  var { Headers: Headers2, fill: fillHeaders, HeadersList } = require_headers();
  var { FinalizationRegistry } = require_dispatcher_weakref()();
  var util = require_util();
  var {
    isValidHTTPToken,
    sameOrigin,
    normalizeMethod,
    makePolicyContainer,
    normalizeMethodRecord
  } = require_util2();
  var {
    forbiddenMethodsSet,
    corsSafeListedMethodsSet,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    requestDuplex
  } = require_constants2();
  var { kEnumerableProperty } = util;
  var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
  var { webidl } = require_webidl();
  var { getGlobalOrigin } = require_global();
  var { URLSerializer } = require_dataURL();
  var { kHeadersList, kConstruct } = require_symbols();
  var assert = __require("assert");
  var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
  var TransformStream = globalThis.TransformStream;
  var kAbortController = Symbol("abortController");
  var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
    signal.removeEventListener("abort", abort);
  });

  class Request {
    constructor(input, init = {}) {
      if (input === kConstruct) {
        return;
      }
      webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
      input = webidl.converters.RequestInfo(input);
      init = webidl.converters.RequestInit(init);
      this[kRealm] = {
        settingsObject: {
          baseUrl: getGlobalOrigin(),
          get origin() {
            return this.baseUrl?.origin;
          },
          policyContainer: makePolicyContainer()
        }
      };
      let request = null;
      let fallbackMode = null;
      const baseUrl = this[kRealm].settingsObject.baseUrl;
      let signal = null;
      if (typeof input === "string") {
        let parsedURL;
        try {
          parsedURL = new URL(input, baseUrl);
        } catch (err) {
          throw new TypeError("Failed to parse URL from " + input, { cause: err });
        }
        if (parsedURL.username || parsedURL.password) {
          throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
        }
        request = makeRequest({ urlList: [parsedURL] });
        fallbackMode = "cors";
      } else {
        assert(input instanceof Request);
        request = input[kState];
        signal = input[kSignal];
      }
      const origin = this[kRealm].settingsObject.origin;
      let window2 = "client";
      if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
        window2 = request.window;
      }
      if (init.window != null) {
        throw new TypeError(`'window' option '${window2}' must be null`);
      }
      if ("window" in init) {
        window2 = "no-window";
      }
      request = makeRequest({
        method: request.method,
        headersList: request.headersList,
        unsafeRequest: request.unsafeRequest,
        client: this[kRealm].settingsObject,
        window: window2,
        priority: request.priority,
        origin: request.origin,
        referrer: request.referrer,
        referrerPolicy: request.referrerPolicy,
        mode: request.mode,
        credentials: request.credentials,
        cache: request.cache,
        redirect: request.redirect,
        integrity: request.integrity,
        keepalive: request.keepalive,
        reloadNavigation: request.reloadNavigation,
        historyNavigation: request.historyNavigation,
        urlList: [...request.urlList]
      });
      const initHasKey = Object.keys(init).length !== 0;
      if (initHasKey) {
        if (request.mode === "navigate") {
          request.mode = "same-origin";
        }
        request.reloadNavigation = false;
        request.historyNavigation = false;
        request.origin = "client";
        request.referrer = "client";
        request.referrerPolicy = "";
        request.url = request.urlList[request.urlList.length - 1];
        request.urlList = [request.url];
      }
      if (init.referrer !== undefined) {
        const referrer = init.referrer;
        if (referrer === "") {
          request.referrer = "no-referrer";
        } else {
          let parsedReferrer;
          try {
            parsedReferrer = new URL(referrer, baseUrl);
          } catch (err) {
            throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
          }
          if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
            request.referrer = "client";
          } else {
            request.referrer = parsedReferrer;
          }
        }
      }
      if (init.referrerPolicy !== undefined) {
        request.referrerPolicy = init.referrerPolicy;
      }
      let mode;
      if (init.mode !== undefined) {
        mode = init.mode;
      } else {
        mode = fallbackMode;
      }
      if (mode === "navigate") {
        throw webidl.errors.exception({
          header: "Request constructor",
          message: "invalid request mode navigate."
        });
      }
      if (mode != null) {
        request.mode = mode;
      }
      if (init.credentials !== undefined) {
        request.credentials = init.credentials;
      }
      if (init.cache !== undefined) {
        request.cache = init.cache;
      }
      if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
        throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
      }
      if (init.redirect !== undefined) {
        request.redirect = init.redirect;
      }
      if (init.integrity != null) {
        request.integrity = String(init.integrity);
      }
      if (init.keepalive !== undefined) {
        request.keepalive = Boolean(init.keepalive);
      }
      if (init.method !== undefined) {
        let method = init.method;
        if (!isValidHTTPToken(method)) {
          throw new TypeError(`'${method}' is not a valid HTTP method.`);
        }
        if (forbiddenMethodsSet.has(method.toUpperCase())) {
          throw new TypeError(`'${method}' HTTP method is unsupported.`);
        }
        method = normalizeMethodRecord[method] ?? normalizeMethod(method);
        request.method = method;
      }
      if (init.signal !== undefined) {
        signal = init.signal;
      }
      this[kState] = request;
      const ac = new AbortController;
      this[kSignal] = ac.signal;
      this[kSignal][kRealm] = this[kRealm];
      if (signal != null) {
        if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
          throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
        }
        if (signal.aborted) {
          ac.abort(signal.reason);
        } else {
          this[kAbortController] = ac;
          const acRef = new WeakRef(ac);
          const abort = function() {
            const ac2 = acRef.deref();
            if (ac2 !== undefined) {
              ac2.abort(this.reason);
            }
          };
          try {
            if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
              setMaxListeners(100, signal);
            } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
              setMaxListeners(100, signal);
            }
          } catch {}
          util.addAbortListener(signal, abort);
          requestFinalizer.register(ac, { signal, abort });
        }
      }
      this[kHeaders] = new Headers2(kConstruct);
      this[kHeaders][kHeadersList] = request.headersList;
      this[kHeaders][kGuard] = "request";
      this[kHeaders][kRealm] = this[kRealm];
      if (mode === "no-cors") {
        if (!corsSafeListedMethodsSet.has(request.method)) {
          throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
        }
        this[kHeaders][kGuard] = "request-no-cors";
      }
      if (initHasKey) {
        const headersList = this[kHeaders][kHeadersList];
        const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);
        headersList.clear();
        if (headers instanceof HeadersList) {
          for (const [key, val] of headers) {
            headersList.append(key, val);
          }
          headersList.cookies = headers.cookies;
        } else {
          fillHeaders(this[kHeaders], headers);
        }
      }
      const inputBody = input instanceof Request ? input[kState].body : null;
      if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body.");
      }
      let initBody = null;
      if (init.body != null) {
        const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
        initBody = extractedBody;
        if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
          this[kHeaders].append("content-type", contentType);
        }
      }
      const inputOrInitBody = initBody ?? inputBody;
      if (inputOrInitBody != null && inputOrInitBody.source == null) {
        if (initBody != null && init.duplex == null) {
          throw new TypeError("RequestInit: duplex option is required when sending a body.");
        }
        if (request.mode !== "same-origin" && request.mode !== "cors") {
          throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
        }
        request.useCORSPreflightFlag = true;
      }
      let finalBody = inputOrInitBody;
      if (initBody == null && inputBody != null) {
        if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
          throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
        }
        if (!TransformStream) {
          TransformStream = __require("stream/web").TransformStream;
        }
        const identityTransform = new TransformStream;
        inputBody.stream.pipeThrough(identityTransform);
        finalBody = {
          source: inputBody.source,
          length: inputBody.length,
          stream: identityTransform.readable
        };
      }
      this[kState].body = finalBody;
    }
    get method() {
      webidl.brandCheck(this, Request);
      return this[kState].method;
    }
    get url() {
      webidl.brandCheck(this, Request);
      return URLSerializer(this[kState].url);
    }
    get headers() {
      webidl.brandCheck(this, Request);
      return this[kHeaders];
    }
    get destination() {
      webidl.brandCheck(this, Request);
      return this[kState].destination;
    }
    get referrer() {
      webidl.brandCheck(this, Request);
      if (this[kState].referrer === "no-referrer") {
        return "";
      }
      if (this[kState].referrer === "client") {
        return "about:client";
      }
      return this[kState].referrer.toString();
    }
    get referrerPolicy() {
      webidl.brandCheck(this, Request);
      return this[kState].referrerPolicy;
    }
    get mode() {
      webidl.brandCheck(this, Request);
      return this[kState].mode;
    }
    get credentials() {
      return this[kState].credentials;
    }
    get cache() {
      webidl.brandCheck(this, Request);
      return this[kState].cache;
    }
    get redirect() {
      webidl.brandCheck(this, Request);
      return this[kState].redirect;
    }
    get integrity() {
      webidl.brandCheck(this, Request);
      return this[kState].integrity;
    }
    get keepalive() {
      webidl.brandCheck(this, Request);
      return this[kState].keepalive;
    }
    get isReloadNavigation() {
      webidl.brandCheck(this, Request);
      return this[kState].reloadNavigation;
    }
    get isHistoryNavigation() {
      webidl.brandCheck(this, Request);
      return this[kState].historyNavigation;
    }
    get signal() {
      webidl.brandCheck(this, Request);
      return this[kSignal];
    }
    get body() {
      webidl.brandCheck(this, Request);
      return this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Request);
      return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    get duplex() {
      webidl.brandCheck(this, Request);
      return "half";
    }
    clone() {
      webidl.brandCheck(this, Request);
      if (this.bodyUsed || this.body?.locked) {
        throw new TypeError("unusable");
      }
      const clonedRequest = cloneRequest(this[kState]);
      const clonedRequestObject = new Request(kConstruct);
      clonedRequestObject[kState] = clonedRequest;
      clonedRequestObject[kRealm] = this[kRealm];
      clonedRequestObject[kHeaders] = new Headers2(kConstruct);
      clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
      clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
      clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
      const ac = new AbortController;
      if (this.signal.aborted) {
        ac.abort(this.signal.reason);
      } else {
        util.addAbortListener(this.signal, () => {
          ac.abort(this.signal.reason);
        });
      }
      clonedRequestObject[kSignal] = ac.signal;
      return clonedRequestObject;
    }
  }
  mixinBody(Request);
  function makeRequest(init) {
    const request = {
      method: "GET",
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: null,
      reservedClient: null,
      replacesClientId: "",
      window: "client",
      keepalive: false,
      serviceWorkers: "all",
      initiator: "",
      destination: "",
      priority: null,
      origin: "client",
      policyContainer: "client",
      referrer: "client",
      referrerPolicy: "",
      mode: "no-cors",
      useCORSPreflightFlag: false,
      credentials: "same-origin",
      useCredentials: false,
      cache: "default",
      redirect: "follow",
      integrity: "",
      cryptoGraphicsNonceMetadata: "",
      parserMetadata: "",
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: "basic",
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      ...init,
      headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList
    };
    request.url = request.urlList[0];
    return request;
  }
  function cloneRequest(request) {
    const newRequest = makeRequest({ ...request, body: null });
    if (request.body != null) {
      newRequest.body = cloneBody(request.body);
    }
    return newRequest;
  }
  Object.defineProperties(Request.prototype, {
    method: kEnumerableProperty,
    url: kEnumerableProperty,
    headers: kEnumerableProperty,
    redirect: kEnumerableProperty,
    clone: kEnumerableProperty,
    signal: kEnumerableProperty,
    duplex: kEnumerableProperty,
    destination: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    isHistoryNavigation: kEnumerableProperty,
    isReloadNavigation: kEnumerableProperty,
    keepalive: kEnumerableProperty,
    integrity: kEnumerableProperty,
    cache: kEnumerableProperty,
    credentials: kEnumerableProperty,
    attribute: kEnumerableProperty,
    referrerPolicy: kEnumerableProperty,
    referrer: kEnumerableProperty,
    mode: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Request",
      configurable: true
    }
  });
  webidl.converters.Request = webidl.interfaceConverter(Request);
  webidl.converters.RequestInfo = function(V) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V);
    }
    if (V instanceof Request) {
      return webidl.converters.Request(V);
    }
    return webidl.converters.USVString(V);
  };
  webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);
  webidl.converters.RequestInit = webidl.dictionaryConverter([
    {
      key: "method",
      converter: webidl.converters.ByteString
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    },
    {
      key: "body",
      converter: webidl.nullableConverter(webidl.converters.BodyInit)
    },
    {
      key: "referrer",
      converter: webidl.converters.USVString
    },
    {
      key: "referrerPolicy",
      converter: webidl.converters.DOMString,
      allowedValues: referrerPolicy
    },
    {
      key: "mode",
      converter: webidl.converters.DOMString,
      allowedValues: requestMode
    },
    {
      key: "credentials",
      converter: webidl.converters.DOMString,
      allowedValues: requestCredentials
    },
    {
      key: "cache",
      converter: webidl.converters.DOMString,
      allowedValues: requestCache
    },
    {
      key: "redirect",
      converter: webidl.converters.DOMString,
      allowedValues: requestRedirect
    },
    {
      key: "integrity",
      converter: webidl.converters.DOMString
    },
    {
      key: "keepalive",
      converter: webidl.converters.boolean
    },
    {
      key: "signal",
      converter: webidl.nullableConverter((signal) => webidl.converters.AbortSignal(signal, { strict: false }))
    },
    {
      key: "window",
      converter: webidl.converters.any
    },
    {
      key: "duplex",
      converter: webidl.converters.DOMString,
      allowedValues: requestDuplex
    }
  ]);
  module.exports = { Request, makeRequest };
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS((exports, module) => {
  var {
    Response,
    makeNetworkError,
    makeAppropriateNetworkError,
    filterResponse,
    makeResponse
  } = require_response();
  var { Headers: Headers2 } = require_headers();
  var { Request, makeRequest } = require_request2();
  var zlib = __require("zlib");
  var {
    bytesMatch,
    makePolicyContainer,
    clonePolicyContainer,
    requestBadPort,
    TAOCheck,
    appendRequestOriginHeader,
    responseLocationURL,
    requestCurrentURL,
    setRequestReferrerPolicyOnRedirect,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    createOpaqueTimingInfo,
    appendFetchMetadata,
    corsCheck,
    crossOriginResourcePolicyCheck,
    determineRequestsReferrer,
    coarsenedSharedCurrentTime,
    createDeferredPromise,
    isBlobLike,
    sameOrigin,
    isCancelled,
    isAborted,
    isErrorLike,
    fullyReadBody,
    readableStreamClose,
    isomorphicEncode,
    urlIsLocal,
    urlIsHttpHttpsScheme,
    urlHasHttpsScheme
  } = require_util2();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var assert = __require("assert");
  var { safelyExtractBody } = require_body();
  var {
    redirectStatusSet,
    nullBodyStatus,
    safeMethodsSet,
    requestBodyHeader,
    subresourceSet,
    DOMException: DOMException2
  } = require_constants2();
  var { kHeadersList } = require_symbols();
  var EE = __require("events");
  var { Readable, pipeline } = __require("stream");
  var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
  var { dataURLProcessor, serializeAMimeType } = require_dataURL();
  var { TransformStream } = __require("stream/web");
  var { getGlobalDispatcher } = require_global2();
  var { webidl } = require_webidl();
  var { STATUS_CODES } = __require("http");
  var GET_OR_HEAD = ["GET", "HEAD"];
  var resolveObjectURL;
  var ReadableStream = globalThis.ReadableStream;

  class Fetch extends EE {
    constructor(dispatcher) {
      super();
      this.dispatcher = dispatcher;
      this.connection = null;
      this.dump = false;
      this.state = "ongoing";
      this.setMaxListeners(21);
    }
    terminate(reason) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "terminated";
      this.connection?.destroy(reason);
      this.emit("terminated", reason);
    }
    abort(error) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "aborted";
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      this.serializedAbortReason = error;
      this.connection?.destroy(error);
      this.emit("terminated", error);
    }
  }
  function fetch2(input, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
    const p = createDeferredPromise();
    let requestObject;
    try {
      requestObject = new Request(input, init);
    } catch (e) {
      p.reject(e);
      return p.promise;
    }
    const request = requestObject[kState];
    if (requestObject.signal.aborted) {
      abortFetch(p, request, null, requestObject.signal.reason);
      return p.promise;
    }
    const globalObject = request.client.globalObject;
    if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
      request.serviceWorkers = "none";
    }
    let responseObject = null;
    const relevantRealm = null;
    let locallyAborted = false;
    let controller = null;
    addAbortListener(requestObject.signal, () => {
      locallyAborted = true;
      assert(controller != null);
      controller.abort(requestObject.signal.reason);
      abortFetch(p, request, responseObject, requestObject.signal.reason);
    });
    const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
    const processResponse = (response) => {
      if (locallyAborted) {
        return Promise.resolve();
      }
      if (response.aborted) {
        abortFetch(p, request, responseObject, controller.serializedAbortReason);
        return Promise.resolve();
      }
      if (response.type === "error") {
        p.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
        return Promise.resolve();
      }
      responseObject = new Response;
      responseObject[kState] = response;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kHeadersList] = response.headersList;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      p.resolve(responseObject);
    };
    controller = fetching({
      request,
      processResponseEndOfBody: handleFetchDone,
      processResponse,
      dispatcher: init.dispatcher ?? getGlobalDispatcher()
    });
    return p.promise;
  }
  function finalizeAndReportTiming(response, initiatorType = "other") {
    if (response.type === "error" && response.aborted) {
      return;
    }
    if (!response.urlList?.length) {
      return;
    }
    const originalURL = response.urlList[0];
    let timingInfo = response.timingInfo;
    let cacheState = response.cacheState;
    if (!urlIsHttpHttpsScheme(originalURL)) {
      return;
    }
    if (timingInfo === null) {
      return;
    }
    if (!response.timingAllowPassed) {
      timingInfo = createOpaqueTimingInfo({
        startTime: timingInfo.startTime
      });
      cacheState = "";
    }
    timingInfo.endTime = coarsenedSharedCurrentTime();
    response.timingInfo = timingInfo;
    markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
  }
  function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
    if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
      performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
    }
  }
  function abortFetch(p, request, responseObject, error) {
    if (!error) {
      error = new DOMException2("The operation was aborted.", "AbortError");
    }
    p.reject(error);
    if (request.body != null && isReadable(request.body?.stream)) {
      request.body.stream.cancel(error).catch((err) => {
        if (err.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err;
      });
    }
    if (responseObject == null) {
      return;
    }
    const response = responseObject[kState];
    if (response.body != null && isReadable(response.body?.stream)) {
      response.body.stream.cancel(error).catch((err) => {
        if (err.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err;
      });
    }
  }
  function fetching({
    request,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseEndOfBody,
    processResponseConsumeBody,
    useParallelQueue = false,
    dispatcher
  }) {
    let taskDestination = null;
    let crossOriginIsolatedCapability = false;
    if (request.client != null) {
      taskDestination = request.client.globalObject;
      crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
    }
    const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
    const timingInfo = createOpaqueTimingInfo({
      startTime: currenTime
    });
    const fetchParams = {
      controller: new Fetch(dispatcher),
      request,
      timingInfo,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseConsumeBody,
      processResponseEndOfBody,
      taskDestination,
      crossOriginIsolatedCapability
    };
    assert(!request.body || request.body.stream);
    if (request.window === "client") {
      request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
    }
    if (request.origin === "client") {
      request.origin = request.client?.origin;
    }
    if (request.policyContainer === "client") {
      if (request.client != null) {
        request.policyContainer = clonePolicyContainer(request.client.policyContainer);
      } else {
        request.policyContainer = makePolicyContainer();
      }
    }
    if (!request.headersList.contains("accept")) {
      const value = "*/*";
      request.headersList.append("accept", value);
    }
    if (!request.headersList.contains("accept-language")) {
      request.headersList.append("accept-language", "*");
    }
    if (request.priority === null) {}
    if (subresourceSet.has(request.destination)) {}
    mainFetch(fetchParams).catch((err) => {
      fetchParams.controller.terminate(err);
    });
    return fetchParams.controller;
  }
  async function mainFetch(fetchParams, recursive = false) {
    const request = fetchParams.request;
    let response = null;
    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
      response = makeNetworkError("local URLs only");
    }
    tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
    if (requestBadPort(request) === "blocked") {
      response = makeNetworkError("bad port");
    }
    if (request.referrerPolicy === "") {
      request.referrerPolicy = request.policyContainer.referrerPolicy;
    }
    if (request.referrer !== "no-referrer") {
      request.referrer = determineRequestsReferrer(request);
    }
    if (response === null) {
      response = await (async () => {
        const currentURL = requestCurrentURL(request);
        if (sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || currentURL.protocol === "data:" || (request.mode === "navigate" || request.mode === "websocket")) {
          request.responseTainting = "basic";
          return await schemeFetch(fetchParams);
        }
        if (request.mode === "same-origin") {
          return makeNetworkError('request mode cannot be "same-origin"');
        }
        if (request.mode === "no-cors") {
          if (request.redirect !== "follow") {
            return makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
          }
          request.responseTainting = "opaque";
          return await schemeFetch(fetchParams);
        }
        if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
          return makeNetworkError("URL scheme must be a HTTP(S) scheme");
        }
        request.responseTainting = "cors";
        return await httpFetch(fetchParams);
      })();
    }
    if (recursive) {
      return response;
    }
    if (response.status !== 0 && !response.internalResponse) {
      if (request.responseTainting === "cors") {}
      if (request.responseTainting === "basic") {
        response = filterResponse(response, "basic");
      } else if (request.responseTainting === "cors") {
        response = filterResponse(response, "cors");
      } else if (request.responseTainting === "opaque") {
        response = filterResponse(response, "opaque");
      } else {
        assert(false);
      }
    }
    let internalResponse = response.status === 0 ? response : response.internalResponse;
    if (internalResponse.urlList.length === 0) {
      internalResponse.urlList.push(...request.urlList);
    }
    if (!request.timingAllowFailed) {
      response.timingAllowPassed = true;
    }
    if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) {
      response = internalResponse = makeNetworkError();
    }
    if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
      internalResponse.body = null;
      fetchParams.controller.dump = true;
    }
    if (request.integrity) {
      const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
      if (request.responseTainting === "opaque" || response.body == null) {
        processBodyError(response.error);
        return;
      }
      const processBody = (bytes) => {
        if (!bytesMatch(bytes, request.integrity)) {
          processBodyError("integrity mismatch");
          return;
        }
        response.body = safelyExtractBody(bytes)[0];
        fetchFinale(fetchParams, response);
      };
      await fullyReadBody(response.body, processBody, processBodyError);
    } else {
      fetchFinale(fetchParams, response);
    }
  }
  function schemeFetch(fetchParams) {
    if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
      return Promise.resolve(makeAppropriateNetworkError(fetchParams));
    }
    const { request } = fetchParams;
    const { protocol: scheme } = requestCurrentURL(request);
    switch (scheme) {
      case "about:": {
        return Promise.resolve(makeNetworkError("about scheme is not supported"));
      }
      case "blob:": {
        if (!resolveObjectURL) {
          resolveObjectURL = __require("buffer").resolveObjectURL;
        }
        const blobURLEntry = requestCurrentURL(request);
        if (blobURLEntry.search.length !== 0) {
          return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
        }
        const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
        if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
          return Promise.resolve(makeNetworkError("invalid method"));
        }
        const bodyWithType = safelyExtractBody(blobURLEntryObject);
        const body = bodyWithType[0];
        const length = isomorphicEncode(`${body.length}`);
        const type = bodyWithType[1] ?? "";
        const response = makeResponse({
          statusText: "OK",
          headersList: [
            ["content-length", { name: "Content-Length", value: length }],
            ["content-type", { name: "Content-Type", value: type }]
          ]
        });
        response.body = body;
        return Promise.resolve(response);
      }
      case "data:": {
        const currentURL = requestCurrentURL(request);
        const dataURLStruct = dataURLProcessor(currentURL);
        if (dataURLStruct === "failure") {
          return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
        }
        const mimeType = serializeAMimeType(dataURLStruct.mimeType);
        return Promise.resolve(makeResponse({
          statusText: "OK",
          headersList: [
            ["content-type", { name: "Content-Type", value: mimeType }]
          ],
          body: safelyExtractBody(dataURLStruct.body)[0]
        }));
      }
      case "file:": {
        return Promise.resolve(makeNetworkError("not implemented... yet..."));
      }
      case "http:":
      case "https:": {
        return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
      }
      default: {
        return Promise.resolve(makeNetworkError("unknown scheme"));
      }
    }
  }
  function finalizeResponse(fetchParams, response) {
    fetchParams.request.done = true;
    if (fetchParams.processResponseDone != null) {
      queueMicrotask(() => fetchParams.processResponseDone(response));
    }
  }
  function fetchFinale(fetchParams, response) {
    if (response.type === "error") {
      response.urlList = [fetchParams.request.urlList[0]];
      response.timingInfo = createOpaqueTimingInfo({
        startTime: fetchParams.timingInfo.startTime
      });
    }
    const processResponseEndOfBody = () => {
      fetchParams.request.done = true;
      if (fetchParams.processResponseEndOfBody != null) {
        queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
      }
    };
    if (fetchParams.processResponse != null) {
      queueMicrotask(() => fetchParams.processResponse(response));
    }
    if (response.body == null) {
      processResponseEndOfBody();
    } else {
      const identityTransformAlgorithm = (chunk, controller) => {
        controller.enqueue(chunk);
      };
      const transformStream = new TransformStream({
        start() {},
        transform: identityTransformAlgorithm,
        flush: processResponseEndOfBody
      }, {
        size() {
          return 1;
        }
      }, {
        size() {
          return 1;
        }
      });
      response.body = { stream: response.body.stream.pipeThrough(transformStream) };
    }
    if (fetchParams.processResponseConsumeBody != null) {
      const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
      const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
      if (response.body == null) {
        queueMicrotask(() => processBody(null));
      } else {
        return fullyReadBody(response.body, processBody, processBodyError);
      }
      return Promise.resolve();
    }
  }
  async function httpFetch(fetchParams) {
    const request = fetchParams.request;
    let response = null;
    let actualResponse = null;
    const timingInfo = fetchParams.timingInfo;
    if (request.serviceWorkers === "all") {}
    if (response === null) {
      if (request.redirect === "follow") {
        request.serviceWorkers = "none";
      }
      actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
      if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
        return makeNetworkError("cors failure");
      }
      if (TAOCheck(request, response) === "failure") {
        request.timingAllowFailed = true;
      }
    }
    if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === "blocked") {
      return makeNetworkError("blocked");
    }
    if (redirectStatusSet.has(actualResponse.status)) {
      if (request.redirect !== "manual") {
        fetchParams.controller.connection.destroy();
      }
      if (request.redirect === "error") {
        response = makeNetworkError("unexpected redirect");
      } else if (request.redirect === "manual") {
        response = actualResponse;
      } else if (request.redirect === "follow") {
        response = await httpRedirectFetch(fetchParams, response);
      } else {
        assert(false);
      }
    }
    response.timingInfo = timingInfo;
    return response;
  }
  function httpRedirectFetch(fetchParams, response) {
    const request = fetchParams.request;
    const actualResponse = response.internalResponse ? response.internalResponse : response;
    let locationURL;
    try {
      locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);
      if (locationURL == null) {
        return response;
      }
    } catch (err) {
      return Promise.resolve(makeNetworkError(err));
    }
    if (!urlIsHttpHttpsScheme(locationURL)) {
      return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
    }
    if (request.redirectCount === 20) {
      return Promise.resolve(makeNetworkError("redirect count exceeded"));
    }
    request.redirectCount += 1;
    if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
      return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
    }
    if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
      return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode "cors"'));
    }
    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
      return Promise.resolve(makeNetworkError());
    }
    if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
      request.method = "GET";
      request.body = null;
      for (const headerName of requestBodyHeader) {
        request.headersList.delete(headerName);
      }
    }
    if (!sameOrigin(requestCurrentURL(request), locationURL)) {
      request.headersList.delete("authorization");
      request.headersList.delete("proxy-authorization", true);
      request.headersList.delete("cookie");
      request.headersList.delete("host");
    }
    if (request.body != null) {
      assert(request.body.source != null);
      request.body = safelyExtractBody(request.body.source)[0];
    }
    const timingInfo = fetchParams.timingInfo;
    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
    if (timingInfo.redirectStartTime === 0) {
      timingInfo.redirectStartTime = timingInfo.startTime;
    }
    request.urlList.push(locationURL);
    setRequestReferrerPolicyOnRedirect(request, actualResponse);
    return mainFetch(fetchParams, true);
  }
  async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
    const request = fetchParams.request;
    let httpFetchParams = null;
    let httpRequest = null;
    let response = null;
    const httpCache = null;
    const revalidatingFlag = false;
    if (request.window === "no-window" && request.redirect === "error") {
      httpFetchParams = fetchParams;
      httpRequest = request;
    } else {
      httpRequest = makeRequest(request);
      httpFetchParams = { ...fetchParams };
      httpFetchParams.request = httpRequest;
    }
    const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
    const contentLength = httpRequest.body ? httpRequest.body.length : null;
    let contentLengthHeaderValue = null;
    if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
      contentLengthHeaderValue = "0";
    }
    if (contentLength != null) {
      contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
    }
    if (contentLengthHeaderValue != null) {
      httpRequest.headersList.append("content-length", contentLengthHeaderValue);
    }
    if (contentLength != null && httpRequest.keepalive) {}
    if (httpRequest.referrer instanceof URL) {
      httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
    }
    appendRequestOriginHeader(httpRequest);
    appendFetchMetadata(httpRequest);
    if (!httpRequest.headersList.contains("user-agent")) {
      httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
    }
    if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
      httpRequest.headersList.append("cache-control", "max-age=0");
    }
    if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
      if (!httpRequest.headersList.contains("pragma")) {
        httpRequest.headersList.append("pragma", "no-cache");
      }
      if (!httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "no-cache");
      }
    }
    if (httpRequest.headersList.contains("range")) {
      httpRequest.headersList.append("accept-encoding", "identity");
    }
    if (!httpRequest.headersList.contains("accept-encoding")) {
      if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
        httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
      } else {
        httpRequest.headersList.append("accept-encoding", "gzip, deflate");
      }
    }
    httpRequest.headersList.delete("host");
    if (includeCredentials) {}
    if (httpCache == null) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {}
    if (response == null) {
      if (httpRequest.mode === "only-if-cached") {
        return makeNetworkError("only if cached");
      }
      const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
      if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
      if (revalidatingFlag && forwardResponse.status === 304) {}
      if (response == null) {
        response = forwardResponse;
      }
    }
    response.urlList = [...httpRequest.urlList];
    if (httpRequest.headersList.contains("range")) {
      response.rangeRequested = true;
    }
    response.requestIncludesCredentials = includeCredentials;
    if (response.status === 407) {
      if (request.window === "no-window") {
        return makeNetworkError();
      }
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      return makeNetworkError("proxy authentication required");
    }
    if (response.status === 421 && !isNewConnectionFetch && (request.body == null || request.body.source != null)) {
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      fetchParams.controller.connection.destroy();
      response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
    }
    if (isAuthenticationFetch) {}
    return response;
  }
  async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
    assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
    fetchParams.controller.connection = {
      abort: null,
      destroyed: false,
      destroy(err) {
        if (!this.destroyed) {
          this.destroyed = true;
          this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
        }
      }
    };
    const request = fetchParams.request;
    let response = null;
    const timingInfo = fetchParams.timingInfo;
    const httpCache = null;
    if (httpCache == null) {
      request.cache = "no-store";
    }
    const newConnection = forceNewConnection ? "yes" : "no";
    if (request.mode === "websocket") {} else {}
    let requestBody = null;
    if (request.body == null && fetchParams.processRequestEndOfBody) {
      queueMicrotask(() => fetchParams.processRequestEndOfBody());
    } else if (request.body != null) {
      const processBodyChunk = async function* (bytes) {
        if (isCancelled(fetchParams)) {
          return;
        }
        yield bytes;
        fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
      };
      const processEndOfBody = () => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (fetchParams.processRequestEndOfBody) {
          fetchParams.processRequestEndOfBody();
        }
      };
      const processBodyError = (e) => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (e.name === "AbortError") {
          fetchParams.controller.abort();
        } else {
          fetchParams.controller.terminate(e);
        }
      };
      requestBody = async function* () {
        try {
          for await (const bytes of request.body.stream) {
            yield* processBodyChunk(bytes);
          }
          processEndOfBody();
        } catch (err) {
          processBodyError(err);
        }
      }();
    }
    try {
      const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
      if (socket) {
        response = makeResponse({ status, statusText, headersList, socket });
      } else {
        const iterator = body[Symbol.asyncIterator]();
        fetchParams.controller.next = () => iterator.next();
        response = makeResponse({ status, statusText, headersList });
      }
    } catch (err) {
      if (err.name === "AbortError") {
        fetchParams.controller.connection.destroy();
        return makeAppropriateNetworkError(fetchParams, err);
      }
      return makeNetworkError(err);
    }
    const pullAlgorithm = () => {
      fetchParams.controller.resume();
    };
    const cancelAlgorithm = (reason) => {
      fetchParams.controller.abort(reason);
    };
    if (!ReadableStream) {
      ReadableStream = __require("stream/web").ReadableStream;
    }
    const stream = new ReadableStream({
      async start(controller) {
        fetchParams.controller.controller = controller;
      },
      async pull(controller) {
        await pullAlgorithm(controller);
      },
      async cancel(reason) {
        await cancelAlgorithm(reason);
      }
    }, {
      highWaterMark: 0,
      size() {
        return 1;
      }
    });
    response.body = { stream };
    fetchParams.controller.on("terminated", onAborted);
    fetchParams.controller.resume = async () => {
      while (true) {
        let bytes;
        let isFailure;
        try {
          const { done, value } = await fetchParams.controller.next();
          if (isAborted(fetchParams)) {
            break;
          }
          bytes = done ? undefined : value;
        } catch (err) {
          if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
            bytes = undefined;
          } else {
            bytes = err;
            isFailure = true;
          }
        }
        if (bytes === undefined) {
          readableStreamClose(fetchParams.controller.controller);
          finalizeResponse(fetchParams, response);
          return;
        }
        timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
        if (isFailure) {
          fetchParams.controller.terminate(bytes);
          return;
        }
        fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
        if (isErrored(stream)) {
          fetchParams.controller.terminate();
          return;
        }
        if (!fetchParams.controller.controller.desiredSize) {
          return;
        }
      }
    };
    function onAborted(reason) {
      if (isAborted(fetchParams)) {
        response.aborted = true;
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
        }
      } else {
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(new TypeError("terminated", {
            cause: isErrorLike(reason) ? reason : undefined
          }));
        }
      }
      fetchParams.controller.connection.destroy();
    }
    return response;
    async function dispatch({ body }) {
      const url = requestCurrentURL(request);
      const agent = fetchParams.controller.dispatcher;
      return new Promise((resolve, reject) => agent.dispatch({
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === "websocket" ? "websocket" : undefined
      }, {
        body: null,
        abort: null,
        onConnect(abort) {
          const { connection } = fetchParams.controller;
          if (connection.destroyed) {
            abort(new DOMException2("The operation was aborted.", "AbortError"));
          } else {
            fetchParams.controller.on("terminated", abort);
            this.abort = connection.abort = abort;
          }
        },
        onHeaders(status, headersList, resume, statusText) {
          if (status < 200) {
            return;
          }
          let codings = [];
          let location = "";
          const headers = new Headers2;
          if (Array.isArray(headersList)) {
            for (let n = 0;n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString("latin1");
              const val = headersList[n + 1].toString("latin1");
              if (key.toLowerCase() === "content-encoding") {
                codings = val.toLowerCase().split(",").map((x) => x.trim());
              } else if (key.toLowerCase() === "location") {
                location = val;
              }
              headers[kHeadersList].append(key, val);
            }
          } else {
            const keys = Object.keys(headersList);
            for (const key of keys) {
              const val = headersList[key];
              if (key.toLowerCase() === "content-encoding") {
                codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
              } else if (key.toLowerCase() === "location") {
                location = val;
              }
              headers[kHeadersList].append(key, val);
            }
          }
          this.body = new Readable({ read: resume });
          const decoders = [];
          const willFollow = request.redirect === "follow" && location && redirectStatusSet.has(status);
          if (request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              if (coding === "x-gzip" || coding === "gzip") {
                decoders.push(zlib.createGunzip({
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }));
              } else if (coding === "deflate") {
                decoders.push(zlib.createInflate());
              } else if (coding === "br") {
                decoders.push(zlib.createBrotliDecompress());
              } else {
                decoders.length = 0;
                break;
              }
            }
          }
          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length ? pipeline(this.body, ...decoders, () => {}) : this.body.on("error", () => {})
          });
          return true;
        },
        onData(chunk) {
          if (fetchParams.controller.dump) {
            return;
          }
          const bytes = chunk;
          timingInfo.encodedBodySize += bytes.byteLength;
          return this.body.push(bytes);
        },
        onComplete() {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          fetchParams.controller.ended = true;
          this.body.push(null);
        },
        onError(error) {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          this.body?.destroy(error);
          fetchParams.controller.terminate(error);
          reject(error);
        },
        onUpgrade(status, headersList, socket) {
          if (status !== 101) {
            return;
          }
          const headers = new Headers2;
          for (let n = 0;n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString("latin1");
            const val = headersList[n + 1].toString("latin1");
            headers[kHeadersList].append(key, val);
          }
          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          });
          return true;
        }
      }));
    }
  }
  module.exports = {
    fetch: fetch2,
    Fetch,
    fetching,
    finalizeAndReportTiming
  };
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS((exports, module) => {
  module.exports = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
  };
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var kState = Symbol("ProgressEvent state");

  class ProgressEvent extends Event {
    constructor(type, eventInitDict = {}) {
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
      super(type, eventInitDict);
      this[kState] = {
        lengthComputable: eventInitDict.lengthComputable,
        loaded: eventInitDict.loaded,
        total: eventInitDict.total
      };
    }
    get lengthComputable() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].lengthComputable;
    }
    get loaded() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].loaded;
    }
    get total() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].total;
    }
  }
  webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
    {
      key: "lengthComputable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "loaded",
      converter: webidl.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "total",
      converter: webidl.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "bubbles",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "cancelable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "composed",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ]);
  module.exports = {
    ProgressEvent
  };
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS((exports, module) => {
  function getEncoding(label) {
    if (!label) {
      return "failure";
    }
    switch (label.trim().toLowerCase()) {
      case "unicode-1-1-utf-8":
      case "unicode11utf8":
      case "unicode20utf8":
      case "utf-8":
      case "utf8":
      case "x-unicode20utf8":
        return "UTF-8";
      case "866":
      case "cp866":
      case "csibm866":
      case "ibm866":
        return "IBM866";
      case "csisolatin2":
      case "iso-8859-2":
      case "iso-ir-101":
      case "iso8859-2":
      case "iso88592":
      case "iso_8859-2":
      case "iso_8859-2:1987":
      case "l2":
      case "latin2":
        return "ISO-8859-2";
      case "csisolatin3":
      case "iso-8859-3":
      case "iso-ir-109":
      case "iso8859-3":
      case "iso88593":
      case "iso_8859-3":
      case "iso_8859-3:1988":
      case "l3":
      case "latin3":
        return "ISO-8859-3";
      case "csisolatin4":
      case "iso-8859-4":
      case "iso-ir-110":
      case "iso8859-4":
      case "iso88594":
      case "iso_8859-4":
      case "iso_8859-4:1988":
      case "l4":
      case "latin4":
        return "ISO-8859-4";
      case "csisolatincyrillic":
      case "cyrillic":
      case "iso-8859-5":
      case "iso-ir-144":
      case "iso8859-5":
      case "iso88595":
      case "iso_8859-5":
      case "iso_8859-5:1988":
        return "ISO-8859-5";
      case "arabic":
      case "asmo-708":
      case "csiso88596e":
      case "csiso88596i":
      case "csisolatinarabic":
      case "ecma-114":
      case "iso-8859-6":
      case "iso-8859-6-e":
      case "iso-8859-6-i":
      case "iso-ir-127":
      case "iso8859-6":
      case "iso88596":
      case "iso_8859-6":
      case "iso_8859-6:1987":
        return "ISO-8859-6";
      case "csisolatingreek":
      case "ecma-118":
      case "elot_928":
      case "greek":
      case "greek8":
      case "iso-8859-7":
      case "iso-ir-126":
      case "iso8859-7":
      case "iso88597":
      case "iso_8859-7":
      case "iso_8859-7:1987":
      case "sun_eu_greek":
        return "ISO-8859-7";
      case "csiso88598e":
      case "csisolatinhebrew":
      case "hebrew":
      case "iso-8859-8":
      case "iso-8859-8-e":
      case "iso-ir-138":
      case "iso8859-8":
      case "iso88598":
      case "iso_8859-8":
      case "iso_8859-8:1988":
      case "visual":
        return "ISO-8859-8";
      case "csiso88598i":
      case "iso-8859-8-i":
      case "logical":
        return "ISO-8859-8-I";
      case "csisolatin6":
      case "iso-8859-10":
      case "iso-ir-157":
      case "iso8859-10":
      case "iso885910":
      case "l6":
      case "latin6":
        return "ISO-8859-10";
      case "iso-8859-13":
      case "iso8859-13":
      case "iso885913":
        return "ISO-8859-13";
      case "iso-8859-14":
      case "iso8859-14":
      case "iso885914":
        return "ISO-8859-14";
      case "csisolatin9":
      case "iso-8859-15":
      case "iso8859-15":
      case "iso885915":
      case "iso_8859-15":
      case "l9":
        return "ISO-8859-15";
      case "iso-8859-16":
        return "ISO-8859-16";
      case "cskoi8r":
      case "koi":
      case "koi8":
      case "koi8-r":
      case "koi8_r":
        return "KOI8-R";
      case "koi8-ru":
      case "koi8-u":
        return "KOI8-U";
      case "csmacintosh":
      case "mac":
      case "macintosh":
      case "x-mac-roman":
        return "macintosh";
      case "iso-8859-11":
      case "iso8859-11":
      case "iso885911":
      case "tis-620":
      case "windows-874":
        return "windows-874";
      case "cp1250":
      case "windows-1250":
      case "x-cp1250":
        return "windows-1250";
      case "cp1251":
      case "windows-1251":
      case "x-cp1251":
        return "windows-1251";
      case "ansi_x3.4-1968":
      case "ascii":
      case "cp1252":
      case "cp819":
      case "csisolatin1":
      case "ibm819":
      case "iso-8859-1":
      case "iso-ir-100":
      case "iso8859-1":
      case "iso88591":
      case "iso_8859-1":
      case "iso_8859-1:1987":
      case "l1":
      case "latin1":
      case "us-ascii":
      case "windows-1252":
      case "x-cp1252":
        return "windows-1252";
      case "cp1253":
      case "windows-1253":
      case "x-cp1253":
        return "windows-1253";
      case "cp1254":
      case "csisolatin5":
      case "iso-8859-9":
      case "iso-ir-148":
      case "iso8859-9":
      case "iso88599":
      case "iso_8859-9":
      case "iso_8859-9:1989":
      case "l5":
      case "latin5":
      case "windows-1254":
      case "x-cp1254":
        return "windows-1254";
      case "cp1255":
      case "windows-1255":
      case "x-cp1255":
        return "windows-1255";
      case "cp1256":
      case "windows-1256":
      case "x-cp1256":
        return "windows-1256";
      case "cp1257":
      case "windows-1257":
      case "x-cp1257":
        return "windows-1257";
      case "cp1258":
      case "windows-1258":
      case "x-cp1258":
        return "windows-1258";
      case "x-mac-cyrillic":
      case "x-mac-ukrainian":
        return "x-mac-cyrillic";
      case "chinese":
      case "csgb2312":
      case "csiso58gb231280":
      case "gb2312":
      case "gb_2312":
      case "gb_2312-80":
      case "gbk":
      case "iso-ir-58":
      case "x-gbk":
        return "GBK";
      case "gb18030":
        return "gb18030";
      case "big5":
      case "big5-hkscs":
      case "cn-big5":
      case "csbig5":
      case "x-x-big5":
        return "Big5";
      case "cseucpkdfmtjapanese":
      case "euc-jp":
      case "x-euc-jp":
        return "EUC-JP";
      case "csiso2022jp":
      case "iso-2022-jp":
        return "ISO-2022-JP";
      case "csshiftjis":
      case "ms932":
      case "ms_kanji":
      case "shift-jis":
      case "shift_jis":
      case "sjis":
      case "windows-31j":
      case "x-sjis":
        return "Shift_JIS";
      case "cseuckr":
      case "csksc56011987":
      case "euc-kr":
      case "iso-ir-149":
      case "korean":
      case "ks_c_5601-1987":
      case "ks_c_5601-1989":
      case "ksc5601":
      case "ksc_5601":
      case "windows-949":
        return "EUC-KR";
      case "csiso2022kr":
      case "hz-gb-2312":
      case "iso-2022-cn":
      case "iso-2022-cn-ext":
      case "iso-2022-kr":
      case "replacement":
        return "replacement";
      case "unicodefffe":
      case "utf-16be":
        return "UTF-16BE";
      case "csunicode":
      case "iso-10646-ucs-2":
      case "ucs-2":
      case "unicode":
      case "unicodefeff":
      case "utf-16":
      case "utf-16le":
        return "UTF-16LE";
      case "x-user-defined":
        return "x-user-defined";
      default:
        return "failure";
    }
  }
  module.exports = {
    getEncoding
  };
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS((exports, module) => {
  var {
    kState,
    kError,
    kResult,
    kAborted,
    kLastProgressEventFired
  } = require_symbols3();
  var { ProgressEvent } = require_progressevent();
  var { getEncoding } = require_encoding();
  var { DOMException: DOMException2 } = require_constants2();
  var { serializeAMimeType, parseMIMEType } = require_dataURL();
  var { types } = __require("util");
  var { StringDecoder } = __require("string_decoder");
  var { btoa: btoa2 } = __require("buffer");
  var staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
  };
  function readOperation(fr, blob, type, encodingName) {
    if (fr[kState] === "loading") {
      throw new DOMException2("Invalid state", "InvalidStateError");
    }
    fr[kState] = "loading";
    fr[kResult] = null;
    fr[kError] = null;
    const stream = blob.stream();
    const reader = stream.getReader();
    const bytes = [];
    let chunkPromise = reader.read();
    let isFirstChunk = true;
    (async () => {
      while (!fr[kAborted]) {
        try {
          const { done, value } = await chunkPromise;
          if (isFirstChunk && !fr[kAborted]) {
            queueMicrotask(() => {
              fireAProgressEvent("loadstart", fr);
            });
          }
          isFirstChunk = false;
          if (!done && types.isUint8Array(value)) {
            bytes.push(value);
            if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
              fr[kLastProgressEventFired] = Date.now();
              queueMicrotask(() => {
                fireAProgressEvent("progress", fr);
              });
            }
            chunkPromise = reader.read();
          } else if (done) {
            queueMicrotask(() => {
              fr[kState] = "done";
              try {
                const result = packageData(bytes, type, blob.type, encodingName);
                if (fr[kAborted]) {
                  return;
                }
                fr[kResult] = result;
                fireAProgressEvent("load", fr);
              } catch (error) {
                fr[kError] = error;
                fireAProgressEvent("error", fr);
              }
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        } catch (error) {
          if (fr[kAborted]) {
            return;
          }
          queueMicrotask(() => {
            fr[kState] = "done";
            fr[kError] = error;
            fireAProgressEvent("error", fr);
            if (fr[kState] !== "loading") {
              fireAProgressEvent("loadend", fr);
            }
          });
          break;
        }
      }
    })();
  }
  function fireAProgressEvent(e, reader) {
    const event = new ProgressEvent(e, {
      bubbles: false,
      cancelable: false
    });
    reader.dispatchEvent(event);
  }
  function packageData(bytes, type, mimeType, encodingName) {
    switch (type) {
      case "DataURL": {
        let dataURL = "data:";
        const parsed = parseMIMEType(mimeType || "application/octet-stream");
        if (parsed !== "failure") {
          dataURL += serializeAMimeType(parsed);
        }
        dataURL += ";base64,";
        const decoder = new StringDecoder("latin1");
        for (const chunk of bytes) {
          dataURL += btoa2(decoder.write(chunk));
        }
        dataURL += btoa2(decoder.end());
        return dataURL;
      }
      case "Text": {
        let encoding = "failure";
        if (encodingName) {
          encoding = getEncoding(encodingName);
        }
        if (encoding === "failure" && mimeType) {
          const type2 = parseMIMEType(mimeType);
          if (type2 !== "failure") {
            encoding = getEncoding(type2.parameters.get("charset"));
          }
        }
        if (encoding === "failure") {
          encoding = "UTF-8";
        }
        return decode(bytes, encoding);
      }
      case "ArrayBuffer": {
        const sequence = combineByteSequences(bytes);
        return sequence.buffer;
      }
      case "BinaryString": {
        let binaryString = "";
        const decoder = new StringDecoder("latin1");
        for (const chunk of bytes) {
          binaryString += decoder.write(chunk);
        }
        binaryString += decoder.end();
        return binaryString;
      }
    }
  }
  function decode(ioQueue, encoding) {
    const bytes = combineByteSequences(ioQueue);
    const BOMEncoding = BOMSniffing(bytes);
    let slice = 0;
    if (BOMEncoding !== null) {
      encoding = BOMEncoding;
      slice = BOMEncoding === "UTF-8" ? 3 : 2;
    }
    const sliced = bytes.slice(slice);
    return new TextDecoder(encoding).decode(sliced);
  }
  function BOMSniffing(ioQueue) {
    const [a, b, c] = ioQueue;
    if (a === 239 && b === 187 && c === 191) {
      return "UTF-8";
    } else if (a === 254 && b === 255) {
      return "UTF-16BE";
    } else if (a === 255 && b === 254) {
      return "UTF-16LE";
    }
    return null;
  }
  function combineByteSequences(sequences) {
    const size = sequences.reduce((a, b) => {
      return a + b.byteLength;
    }, 0);
    let offset = 0;
    return sequences.reduce((a, b) => {
      a.set(b, offset);
      offset += b.byteLength;
      return a;
    }, new Uint8Array(size));
  }
  module.exports = {
    staticPropertyDescriptors,
    readOperation,
    fireAProgressEvent
  };
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS((exports, module) => {
  var {
    staticPropertyDescriptors,
    readOperation,
    fireAProgressEvent
  } = require_util4();
  var {
    kState,
    kError,
    kResult,
    kEvents,
    kAborted
  } = require_symbols3();
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();

  class FileReader extends EventTarget {
    constructor() {
      super();
      this[kState] = "empty";
      this[kResult] = null;
      this[kError] = null;
      this[kEvents] = {
        loadend: null,
        error: null,
        abort: null,
        load: null,
        progress: null,
        loadstart: null
      };
    }
    readAsArrayBuffer(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "ArrayBuffer");
    }
    readAsBinaryString(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "BinaryString");
    }
    readAsText(blob, encoding = undefined) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
      blob = webidl.converters.Blob(blob, { strict: false });
      if (encoding !== undefined) {
        encoding = webidl.converters.DOMString(encoding);
      }
      readOperation(this, blob, "Text", encoding);
    }
    readAsDataURL(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "DataURL");
    }
    abort() {
      if (this[kState] === "empty" || this[kState] === "done") {
        this[kResult] = null;
        return;
      }
      if (this[kState] === "loading") {
        this[kState] = "done";
        this[kResult] = null;
      }
      this[kAborted] = true;
      fireAProgressEvent("abort", this);
      if (this[kState] !== "loading") {
        fireAProgressEvent("loadend", this);
      }
    }
    get readyState() {
      webidl.brandCheck(this, FileReader);
      switch (this[kState]) {
        case "empty":
          return this.EMPTY;
        case "loading":
          return this.LOADING;
        case "done":
          return this.DONE;
      }
    }
    get result() {
      webidl.brandCheck(this, FileReader);
      return this[kResult];
    }
    get error() {
      webidl.brandCheck(this, FileReader);
      return this[kError];
    }
    get onloadend() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].loadend;
    }
    set onloadend(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].loadend) {
        this.removeEventListener("loadend", this[kEvents].loadend);
      }
      if (typeof fn === "function") {
        this[kEvents].loadend = fn;
        this.addEventListener("loadend", fn);
      } else {
        this[kEvents].loadend = null;
      }
    }
    get onerror() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].error;
    }
    set onerror(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].error) {
        this.removeEventListener("error", this[kEvents].error);
      }
      if (typeof fn === "function") {
        this[kEvents].error = fn;
        this.addEventListener("error", fn);
      } else {
        this[kEvents].error = null;
      }
    }
    get onloadstart() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].loadstart;
    }
    set onloadstart(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].loadstart) {
        this.removeEventListener("loadstart", this[kEvents].loadstart);
      }
      if (typeof fn === "function") {
        this[kEvents].loadstart = fn;
        this.addEventListener("loadstart", fn);
      } else {
        this[kEvents].loadstart = null;
      }
    }
    get onprogress() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].progress;
    }
    set onprogress(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].progress) {
        this.removeEventListener("progress", this[kEvents].progress);
      }
      if (typeof fn === "function") {
        this[kEvents].progress = fn;
        this.addEventListener("progress", fn);
      } else {
        this[kEvents].progress = null;
      }
    }
    get onload() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].load;
    }
    set onload(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].load) {
        this.removeEventListener("load", this[kEvents].load);
      }
      if (typeof fn === "function") {
        this[kEvents].load = fn;
        this.addEventListener("load", fn);
      } else {
        this[kEvents].load = null;
      }
    }
    get onabort() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].abort;
    }
    set onabort(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].abort) {
        this.removeEventListener("abort", this[kEvents].abort);
      }
      if (typeof fn === "function") {
        this[kEvents].abort = fn;
        this.addEventListener("abort", fn);
      } else {
        this[kEvents].abort = null;
      }
    }
  }
  FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
  FileReader.LOADING = FileReader.prototype.LOADING = 1;
  FileReader.DONE = FileReader.prototype.DONE = 2;
  Object.defineProperties(FileReader.prototype, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors,
    readAsArrayBuffer: kEnumerableProperty,
    readAsBinaryString: kEnumerableProperty,
    readAsText: kEnumerableProperty,
    readAsDataURL: kEnumerableProperty,
    abort: kEnumerableProperty,
    readyState: kEnumerableProperty,
    result: kEnumerableProperty,
    error: kEnumerableProperty,
    onloadstart: kEnumerableProperty,
    onprogress: kEnumerableProperty,
    onload: kEnumerableProperty,
    onabort: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onloadend: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "FileReader",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  Object.defineProperties(FileReader, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors
  });
  module.exports = {
    FileReader
  };
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS((exports, module) => {
  module.exports = {
    kConstruct: require_symbols().kConstruct
  };
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS((exports, module) => {
  var assert = __require("assert");
  var { URLSerializer } = require_dataURL();
  var { isValidHeaderName } = require_util2();
  function urlEquals(A, B, excludeFragment = false) {
    const serializedA = URLSerializer(A, excludeFragment);
    const serializedB = URLSerializer(B, excludeFragment);
    return serializedA === serializedB;
  }
  function fieldValues(header) {
    assert(header !== null);
    const values = [];
    for (let value of header.split(",")) {
      value = value.trim();
      if (!value.length) {
        continue;
      } else if (!isValidHeaderName(value)) {
        continue;
      }
      values.push(value);
    }
    return values;
  }
  module.exports = {
    urlEquals,
    fieldValues
  };
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS((exports, module) => {
  var { kConstruct } = require_symbols4();
  var { urlEquals, fieldValues: getFieldValues } = require_util5();
  var { kEnumerableProperty, isDisturbed } = require_util();
  var { kHeadersList } = require_symbols();
  var { webidl } = require_webidl();
  var { Response, cloneResponse } = require_response();
  var { Request } = require_request2();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var { fetching } = require_fetch();
  var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
  var assert = __require("assert");
  var { getGlobalDispatcher } = require_global2();

  class Cache {
    #relevantRequestResponseList;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
      this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      const p = await this.matchAll(request, options);
      if (p.length === 0) {
        return;
      }
      return p[0];
    }
    async matchAll(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request !== undefined) {
        if (request instanceof Request) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = new Request(request)[kState];
        }
      }
      const responses = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          responses.push(requestResponse[1]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          responses.push(requestResponse[1]);
        }
      }
      const responseList = [];
      for (const response of responses) {
        const responseObject = new Response(response.body?.source ?? null);
        const body = responseObject[kState].body;
        responseObject[kState] = response;
        responseObject[kState].body = body;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseList.push(responseObject);
      }
      return Object.freeze(responseList);
    }
    async add(request) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
      request = webidl.converters.RequestInfo(request);
      const requests = [request];
      const responseArrayPromise = this.addAll(requests);
      return await responseArrayPromise;
    }
    async addAll(requests) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
      requests = webidl.converters["sequence<RequestInfo>"](requests);
      const responsePromises = [];
      const requestList = [];
      for (const request of requests) {
        if (typeof request === "string") {
          continue;
        }
        const r = request[kState];
        if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme when method is not GET."
          });
        }
      }
      const fetchControllers = [];
      for (const request of requests) {
        const r = new Request(request)[kState];
        if (!urlIsHttpHttpsScheme(r.url)) {
          throw webidl.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme."
          });
        }
        r.initiator = "fetch";
        r.destination = "subresource";
        requestList.push(r);
        const responsePromise = createDeferredPromise();
        fetchControllers.push(fetching({
          request: r,
          dispatcher: getGlobalDispatcher(),
          processResponse(response) {
            if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
              responsePromise.reject(webidl.errors.exception({
                header: "Cache.addAll",
                message: "Received an invalid status code or the request failed."
              }));
            } else if (response.headersList.contains("vary")) {
              const fieldValues = getFieldValues(response.headersList.get("vary"));
              for (const fieldValue of fieldValues) {
                if (fieldValue === "*") {
                  responsePromise.reject(webidl.errors.exception({
                    header: "Cache.addAll",
                    message: "invalid vary field value"
                  }));
                  for (const controller of fetchControllers) {
                    controller.abort();
                  }
                  return;
                }
              }
            }
          },
          processResponseEndOfBody(response) {
            if (response.aborted) {
              responsePromise.reject(new DOMException("aborted", "AbortError"));
              return;
            }
            responsePromise.resolve(response);
          }
        }));
        responsePromises.push(responsePromise.promise);
      }
      const p = Promise.all(responsePromises);
      const responses = await p;
      const operations = [];
      let index = 0;
      for (const response of responses) {
        const operation = {
          type: "put",
          request: requestList[index],
          response
        };
        operations.push(operation);
        index++;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(undefined);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async put(request, response) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
      request = webidl.converters.RequestInfo(request);
      response = webidl.converters.Response(response);
      let innerRequest = null;
      if (request instanceof Request) {
        innerRequest = request[kState];
      } else {
        innerRequest = new Request(request)[kState];
      }
      if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Expected an http/s scheme when method is not GET"
        });
      }
      const innerResponse = response[kState];
      if (innerResponse.status === 206) {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Got 206 status"
        });
      }
      if (innerResponse.headersList.contains("vary")) {
        const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            throw webidl.errors.exception({
              header: "Cache.put",
              message: "Got * vary field value"
            });
          }
        }
      }
      if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Response body is locked or disturbed"
        });
      }
      const clonedResponse = cloneResponse(innerResponse);
      const bodyReadPromise = createDeferredPromise();
      if (innerResponse.body != null) {
        const stream = innerResponse.body.stream;
        const reader = stream.getReader();
        readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
      } else {
        bodyReadPromise.resolve(undefined);
      }
      const operations = [];
      const operation = {
        type: "put",
        request: innerRequest,
        response: clonedResponse
      };
      operations.push(operation);
      const bytes = await bodyReadPromise.promise;
      if (clonedResponse.body != null) {
        clonedResponse.body.source = bytes;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve();
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request instanceof Request) {
        r = request[kState];
        if (r.method !== "GET" && !options.ignoreMethod) {
          return false;
        }
      } else {
        assert(typeof request === "string");
        r = new Request(request)[kState];
      }
      const operations = [];
      const operation = {
        type: "delete",
        request: r,
        options
      };
      operations.push(operation);
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      let requestResponses;
      try {
        requestResponses = this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(!!requestResponses?.length);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async keys(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request !== undefined) {
        if (request instanceof Request) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = new Request(request)[kState];
        }
      }
      const promise = createDeferredPromise();
      const requests = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          requests.push(requestResponse[0]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          requests.push(requestResponse[0]);
        }
      }
      queueMicrotask(() => {
        const requestList = [];
        for (const request2 of requests) {
          const requestObject = new Request("https://a");
          requestObject[kState] = request2;
          requestObject[kHeaders][kHeadersList] = request2.headersList;
          requestObject[kHeaders][kGuard] = "immutable";
          requestObject[kRealm] = request2.client;
          requestList.push(requestObject);
        }
        promise.resolve(Object.freeze(requestList));
      });
      return promise.promise;
    }
    #batchCacheOperations(operations) {
      const cache = this.#relevantRequestResponseList;
      const backupCache = [...cache];
      const addedItems = [];
      const resultList = [];
      try {
        for (const operation of operations) {
          if (operation.type !== "delete" && operation.type !== "put") {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: 'operation type does not match "delete" or "put"'
            });
          }
          if (operation.type === "delete" && operation.response != null) {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "delete operation should not have an associated response"
            });
          }
          if (this.#queryCache(operation.request, operation.options, addedItems).length) {
            throw new DOMException("???", "InvalidStateError");
          }
          let requestResponses;
          if (operation.type === "delete") {
            requestResponses = this.#queryCache(operation.request, operation.options);
            if (requestResponses.length === 0) {
              return [];
            }
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
          } else if (operation.type === "put") {
            if (operation.response == null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "put operation should have an associated response"
              });
            }
            const r = operation.request;
            if (!urlIsHttpHttpsScheme(r.url)) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "expected http or https scheme"
              });
            }
            if (r.method !== "GET") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "not get method"
              });
            }
            if (operation.options != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "options must not be defined"
              });
            }
            requestResponses = this.#queryCache(operation.request);
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
            cache.push([operation.request, operation.response]);
            addedItems.push([operation.request, operation.response]);
          }
          resultList.push([operation.request, operation.response]);
        }
        return resultList;
      } catch (e) {
        this.#relevantRequestResponseList.length = 0;
        this.#relevantRequestResponseList = backupCache;
        throw e;
      }
    }
    #queryCache(requestQuery, options, targetStorage) {
      const resultList = [];
      const storage = targetStorage ?? this.#relevantRequestResponseList;
      for (const requestResponse of storage) {
        const [cachedRequest, cachedResponse] = requestResponse;
        if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
          resultList.push(requestResponse);
        }
      }
      return resultList;
    }
    #requestMatchesCachedItem(requestQuery, request, response = null, options) {
      const queryURL = new URL(requestQuery.url);
      const cachedURL = new URL(request.url);
      if (options?.ignoreSearch) {
        cachedURL.search = "";
        queryURL.search = "";
      }
      if (!urlEquals(queryURL, cachedURL, true)) {
        return false;
      }
      if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
        return true;
      }
      const fieldValues = getFieldValues(response.headersList.get("vary"));
      for (const fieldValue of fieldValues) {
        if (fieldValue === "*") {
          return false;
        }
        const requestValue = request.headersList.get(fieldValue);
        const queryValue = requestQuery.headersList.get(fieldValue);
        if (requestValue !== queryValue) {
          return false;
        }
      }
      return true;
    }
  }
  Object.defineProperties(Cache.prototype, {
    [Symbol.toStringTag]: {
      value: "Cache",
      configurable: true
    },
    match: kEnumerableProperty,
    matchAll: kEnumerableProperty,
    add: kEnumerableProperty,
    addAll: kEnumerableProperty,
    put: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  var cacheQueryOptionConverters = [
    {
      key: "ignoreSearch",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "ignoreMethod",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "ignoreVary",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ];
  webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
  webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
    ...cacheQueryOptionConverters,
    {
      key: "cacheName",
      converter: webidl.converters.DOMString
    }
  ]);
  webidl.converters.Response = webidl.interfaceConverter(Response);
  webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(webidl.converters.RequestInfo);
  module.exports = {
    Cache
  };
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS((exports, module) => {
  var { kConstruct } = require_symbols4();
  var { Cache } = require_cache();
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();

  class CacheStorage {
    #caches = new Map;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.MultiCacheQueryOptions(options);
      if (options.cacheName != null) {
        if (this.#caches.has(options.cacheName)) {
          const cacheList = this.#caches.get(options.cacheName);
          const cache = new Cache(kConstruct, cacheList);
          return await cache.match(request, options);
        }
      } else {
        for (const cacheList of this.#caches.values()) {
          const cache = new Cache(kConstruct, cacheList);
          const response = await cache.match(request, options);
          if (response !== undefined) {
            return response;
          }
        }
      }
    }
    async has(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
      cacheName = webidl.converters.DOMString(cacheName);
      return this.#caches.has(cacheName);
    }
    async open(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
      cacheName = webidl.converters.DOMString(cacheName);
      if (this.#caches.has(cacheName)) {
        const cache2 = this.#caches.get(cacheName);
        return new Cache(kConstruct, cache2);
      }
      const cache = [];
      this.#caches.set(cacheName, cache);
      return new Cache(kConstruct, cache);
    }
    async delete(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
      cacheName = webidl.converters.DOMString(cacheName);
      return this.#caches.delete(cacheName);
    }
    async keys() {
      webidl.brandCheck(this, CacheStorage);
      const keys = this.#caches.keys();
      return [...keys];
    }
  }
  Object.defineProperties(CacheStorage.prototype, {
    [Symbol.toStringTag]: {
      value: "CacheStorage",
      configurable: true
    },
    match: kEnumerableProperty,
    has: kEnumerableProperty,
    open: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  module.exports = {
    CacheStorage
  };
});

// node_modules/undici/lib/cookies/constants.js
var require_constants4 = __commonJS((exports, module) => {
  var maxAttributeValueSize = 1024;
  var maxNameValuePairSize = 4096;
  module.exports = {
    maxAttributeValueSize,
    maxNameValuePairSize
  };
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS((exports, module) => {
  function isCTLExcludingHtab(value) {
    if (value.length === 0) {
      return false;
    }
    for (const char of value) {
      const code = char.charCodeAt(0);
      if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
        return false;
      }
    }
  }
  function validateCookieName(name) {
    for (const char of name) {
      const code = char.charCodeAt(0);
      if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
        throw new Error("Invalid cookie name");
      }
    }
  }
  function validateCookieValue(value) {
    for (const char of value) {
      const code = char.charCodeAt(0);
      if (code < 33 || code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
        throw new Error("Invalid header value");
      }
    }
  }
  function validateCookiePath(path) {
    for (const char of path) {
      const code = char.charCodeAt(0);
      if (code < 33 || char === ";") {
        throw new Error("Invalid cookie path");
      }
    }
  }
  function validateCookieDomain(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
      throw new Error("Invalid cookie domain");
    }
  }
  function toIMFDate(date) {
    if (typeof date === "number") {
      date = new Date(date);
    }
    const days = [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ];
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    const dayName = days[date.getUTCDay()];
    const day = date.getUTCDate().toString().padStart(2, "0");
    const month = months[date.getUTCMonth()];
    const year = date.getUTCFullYear();
    const hour = date.getUTCHours().toString().padStart(2, "0");
    const minute = date.getUTCMinutes().toString().padStart(2, "0");
    const second = date.getUTCSeconds().toString().padStart(2, "0");
    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
  }
  function validateCookieMaxAge(maxAge) {
    if (maxAge < 0) {
      throw new Error("Invalid cookie max-age");
    }
  }
  function stringify(cookie) {
    if (cookie.name.length === 0) {
      return null;
    }
    validateCookieName(cookie.name);
    validateCookieValue(cookie.value);
    const out = [`${cookie.name}=${cookie.value}`];
    if (cookie.name.startsWith("__Secure-")) {
      cookie.secure = true;
    }
    if (cookie.name.startsWith("__Host-")) {
      cookie.secure = true;
      cookie.domain = null;
      cookie.path = "/";
    }
    if (cookie.secure) {
      out.push("Secure");
    }
    if (cookie.httpOnly) {
      out.push("HttpOnly");
    }
    if (typeof cookie.maxAge === "number") {
      validateCookieMaxAge(cookie.maxAge);
      out.push(`Max-Age=${cookie.maxAge}`);
    }
    if (cookie.domain) {
      validateCookieDomain(cookie.domain);
      out.push(`Domain=${cookie.domain}`);
    }
    if (cookie.path) {
      validateCookiePath(cookie.path);
      out.push(`Path=${cookie.path}`);
    }
    if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
      out.push(`Expires=${toIMFDate(cookie.expires)}`);
    }
    if (cookie.sameSite) {
      out.push(`SameSite=${cookie.sameSite}`);
    }
    for (const part of cookie.unparsed) {
      if (!part.includes("=")) {
        throw new Error("Invalid unparsed");
      }
      const [key, ...value] = part.split("=");
      out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
  }
  module.exports = {
    isCTLExcludingHtab,
    validateCookieName,
    validateCookiePath,
    validateCookieValue,
    toIMFDate,
    stringify
  };
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS((exports, module) => {
  var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
  var { isCTLExcludingHtab } = require_util6();
  var { collectASequenceOfCodePointsFast } = require_dataURL();
  var assert = __require("assert");
  function parseSetCookie(header) {
    if (isCTLExcludingHtab(header)) {
      return null;
    }
    let nameValuePair = "";
    let unparsedAttributes = "";
    let name = "";
    let value = "";
    if (header.includes(";")) {
      const position = { position: 0 };
      nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
      unparsedAttributes = header.slice(position.position);
    } else {
      nameValuePair = header;
    }
    if (!nameValuePair.includes("=")) {
      value = nameValuePair;
    } else {
      const position = { position: 0 };
      name = collectASequenceOfCodePointsFast("=", nameValuePair, position);
      value = nameValuePair.slice(position.position + 1);
    }
    name = name.trim();
    value = value.trim();
    if (name.length + value.length > maxNameValuePairSize) {
      return null;
    }
    return {
      name,
      value,
      ...parseUnparsedAttributes(unparsedAttributes)
    };
  }
  function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    if (unparsedAttributes.length === 0) {
      return cookieAttributeList;
    }
    assert(unparsedAttributes[0] === ";");
    unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    if (unparsedAttributes.includes(";")) {
      cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
      unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
    } else {
      cookieAv = unparsedAttributes;
      unparsedAttributes = "";
    }
    let attributeName = "";
    let attributeValue = "";
    if (cookieAv.includes("=")) {
      const position = { position: 0 };
      attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position);
      attributeValue = cookieAv.slice(position.position + 1);
    } else {
      attributeName = cookieAv;
    }
    attributeName = attributeName.trim();
    attributeValue = attributeValue.trim();
    if (attributeValue.length > maxAttributeValueSize) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    const attributeNameLowercase = attributeName.toLowerCase();
    if (attributeNameLowercase === "expires") {
      const expiryTime = new Date(attributeValue);
      cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
      const charCode = attributeValue.charCodeAt(0);
      if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      if (!/^\d+$/.test(attributeValue)) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const deltaSeconds = Number(attributeValue);
      cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
      let cookieDomain = attributeValue;
      if (cookieDomain[0] === ".") {
        cookieDomain = cookieDomain.slice(1);
      }
      cookieDomain = cookieDomain.toLowerCase();
      cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
      let cookiePath = "";
      if (attributeValue.length === 0 || attributeValue[0] !== "/") {
        cookiePath = "/";
      } else {
        cookiePath = attributeValue;
      }
      cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") {
      cookieAttributeList.secure = true;
    } else if (attributeNameLowercase === "httponly") {
      cookieAttributeList.httpOnly = true;
    } else if (attributeNameLowercase === "samesite") {
      let enforcement = "Default";
      const attributeValueLowercase = attributeValue.toLowerCase();
      if (attributeValueLowercase.includes("none")) {
        enforcement = "None";
      }
      if (attributeValueLowercase.includes("strict")) {
        enforcement = "Strict";
      }
      if (attributeValueLowercase.includes("lax")) {
        enforcement = "Lax";
      }
      cookieAttributeList.sameSite = enforcement;
    } else {
      cookieAttributeList.unparsed ??= [];
      cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    }
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
  }
  module.exports = {
    parseSetCookie,
    parseUnparsedAttributes
  };
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS((exports, module) => {
  var { parseSetCookie } = require_parse();
  var { stringify } = require_util6();
  var { webidl } = require_webidl();
  var { Headers: Headers2 } = require_headers();
  function getCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    const cookie = headers.get("cookie");
    const out = {};
    if (!cookie) {
      return out;
    }
    for (const piece of cookie.split(";")) {
      const [name, ...value] = piece.split("=");
      out[name.trim()] = value.join("=");
    }
    return out;
  }
  function deleteCookie(headers, name, attributes) {
    webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    name = webidl.converters.DOMString(name);
    attributes = webidl.converters.DeleteCookieAttributes(attributes);
    setCookie(headers, {
      name,
      value: "",
      expires: new Date(0),
      ...attributes
    });
  }
  function getSetCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    const cookies = headers.getSetCookie();
    if (!cookies) {
      return [];
    }
    return cookies.map((pair) => parseSetCookie(pair));
  }
  function setCookie(headers, cookie) {
    webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    cookie = webidl.converters.Cookie(cookie);
    const str = stringify(cookie);
    if (str) {
      headers.append("Set-Cookie", stringify(cookie));
    }
  }
  webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: null
    }
  ]);
  webidl.converters.Cookie = webidl.dictionaryConverter([
    {
      converter: webidl.converters.DOMString,
      key: "name"
    },
    {
      converter: webidl.converters.DOMString,
      key: "value"
    },
    {
      converter: webidl.nullableConverter((value) => {
        if (typeof value === "number") {
          return webidl.converters["unsigned long long"](value);
        }
        return new Date(value);
      }),
      key: "expires",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters["long long"]),
      key: "maxAge",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "secure",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "httpOnly",
      defaultValue: null
    },
    {
      converter: webidl.converters.USVString,
      key: "sameSite",
      allowedValues: ["Strict", "Lax", "None"]
    },
    {
      converter: webidl.sequenceConverter(webidl.converters.DOMString),
      key: "unparsed",
      defaultValue: []
    }
  ]);
  module.exports = {
    getCookies,
    deleteCookie,
    getSetCookies,
    setCookie
  };
});

// node_modules/undici/lib/websocket/constants.js
var require_constants5 = __commonJS((exports, module) => {
  var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
  var staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
  };
  var states = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
  };
  var opcodes = {
    CONTINUATION: 0,
    TEXT: 1,
    BINARY: 2,
    CLOSE: 8,
    PING: 9,
    PONG: 10
  };
  var maxUnsigned16Bit = 2 ** 16 - 1;
  var parserStates = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
  };
  var emptyBuffer = Buffer.allocUnsafe(0);
  module.exports = {
    uid,
    staticPropertyDescriptors,
    states,
    opcodes,
    maxUnsigned16Bit,
    parserStates,
    emptyBuffer
  };
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS((exports, module) => {
  module.exports = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
  };
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();
  var { MessagePort } = __require("worker_threads");

  class MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
    }
    get data() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.data;
    }
    get origin() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.origin;
    }
    get lastEventId() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.lastEventId;
    }
    get source() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.source;
    }
    get ports() {
      webidl.brandCheck(this, MessageEvent);
      if (!Object.isFrozen(this.#eventInit.ports)) {
        Object.freeze(this.#eventInit.ports);
      }
      return this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
      webidl.brandCheck(this, MessageEvent);
      webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
      return new MessageEvent(type, {
        bubbles,
        cancelable,
        data,
        origin,
        lastEventId,
        source,
        ports
      });
    }
  }

  class CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
    }
    get wasClean() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.wasClean;
    }
    get code() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.code;
    }
    get reason() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.reason;
    }
  }

  class ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict) {
      webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
      super(type, eventInitDict);
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
      this.#eventInit = eventInitDict;
    }
    get message() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.message;
    }
    get filename() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.filename;
    }
    get lineno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.lineno;
    }
    get colno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.colno;
    }
    get error() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.error;
    }
  }
  Object.defineProperties(MessageEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "MessageEvent",
      configurable: true
    },
    data: kEnumerableProperty,
    origin: kEnumerableProperty,
    lastEventId: kEnumerableProperty,
    source: kEnumerableProperty,
    ports: kEnumerableProperty,
    initMessageEvent: kEnumerableProperty
  });
  Object.defineProperties(CloseEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "CloseEvent",
      configurable: true
    },
    reason: kEnumerableProperty,
    code: kEnumerableProperty,
    wasClean: kEnumerableProperty
  });
  Object.defineProperties(ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "ErrorEvent",
      configurable: true
    },
    message: kEnumerableProperty,
    filename: kEnumerableProperty,
    lineno: kEnumerableProperty,
    colno: kEnumerableProperty,
    error: kEnumerableProperty
  });
  webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
  webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(webidl.converters.MessagePort);
  var eventInit = [
    {
      key: "bubbles",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "cancelable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "composed",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ];
  webidl.converters.MessageEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "data",
      converter: webidl.converters.any,
      defaultValue: null
    },
    {
      key: "origin",
      converter: webidl.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lastEventId",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "source",
      converter: webidl.nullableConverter(webidl.converters.MessagePort),
      defaultValue: null
    },
    {
      key: "ports",
      converter: webidl.converters["sequence<MessagePort>"],
      get defaultValue() {
        return [];
      }
    }
  ]);
  webidl.converters.CloseEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "wasClean",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "code",
      converter: webidl.converters["unsigned short"],
      defaultValue: 0
    },
    {
      key: "reason",
      converter: webidl.converters.USVString,
      defaultValue: ""
    }
  ]);
  webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "message",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "filename",
      converter: webidl.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lineno",
      converter: webidl.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "colno",
      converter: webidl.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "error",
      converter: webidl.converters.any
    }
  ]);
  module.exports = {
    MessageEvent,
    CloseEvent,
    ErrorEvent
  };
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS((exports, module) => {
  var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
  var { states, opcodes } = require_constants5();
  var { MessageEvent, ErrorEvent } = require_events();
  function isEstablished(ws) {
    return ws[kReadyState] === states.OPEN;
  }
  function isClosing(ws) {
    return ws[kReadyState] === states.CLOSING;
  }
  function isClosed(ws) {
    return ws[kReadyState] === states.CLOSED;
  }
  function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
    const event = new eventConstructor(e, eventInitDict);
    target.dispatchEvent(event);
  }
  function websocketMessageReceived(ws, type, data) {
    if (ws[kReadyState] !== states.OPEN) {
      return;
    }
    let dataForEvent;
    if (type === opcodes.TEXT) {
      try {
        dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
      } catch {
        failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
        return;
      }
    } else if (type === opcodes.BINARY) {
      if (ws[kBinaryType] === "blob") {
        dataForEvent = new Blob([data]);
      } else {
        dataForEvent = new Uint8Array(data).buffer;
      }
    }
    fireEvent("message", ws, MessageEvent, {
      origin: ws[kWebSocketURL].origin,
      data: dataForEvent
    });
  }
  function isValidSubprotocol(protocol) {
    if (protocol.length === 0) {
      return false;
    }
    for (const char of protocol) {
      const code = char.charCodeAt(0);
      if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || code === 9) {
        return false;
      }
    }
    return true;
  }
  function isValidStatusCode(code) {
    if (code >= 1000 && code < 1015) {
      return code !== 1004 && code !== 1005 && code !== 1006;
    }
    return code >= 3000 && code <= 4999;
  }
  function failWebsocketConnection(ws, reason) {
    const { [kController]: controller, [kResponse]: response } = ws;
    controller.abort();
    if (response?.socket && !response.socket.destroyed) {
      response.socket.destroy();
    }
    if (reason) {
      fireEvent("error", ws, ErrorEvent, {
        error: new Error(reason)
      });
    }
  }
  module.exports = {
    isEstablished,
    isClosing,
    isClosed,
    fireEvent,
    isValidSubprotocol,
    isValidStatusCode,
    failWebsocketConnection,
    websocketMessageReceived
  };
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS((exports, module) => {
  var diagnosticsChannel = __require("diagnostics_channel");
  var { uid, states } = require_constants5();
  var {
    kReadyState,
    kSentClose,
    kByteParser,
    kReceivedClose
  } = require_symbols5();
  var { fireEvent, failWebsocketConnection } = require_util7();
  var { CloseEvent } = require_events();
  var { makeRequest } = require_request2();
  var { fetching } = require_fetch();
  var { Headers: Headers2 } = require_headers();
  var { getGlobalDispatcher } = require_global2();
  var { kHeadersList } = require_symbols();
  var channels = {};
  channels.open = diagnosticsChannel.channel("undici:websocket:open");
  channels.close = diagnosticsChannel.channel("undici:websocket:close");
  channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
  var crypto2;
  try {
    crypto2 = __require("crypto");
  } catch {}
  function establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
    const requestURL = url;
    requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
    const request = makeRequest({
      urlList: [requestURL],
      serviceWorkers: "none",
      referrer: "no-referrer",
      mode: "websocket",
      credentials: "include",
      cache: "no-store",
      redirect: "error"
    });
    if (options.headers) {
      const headersList = new Headers2(options.headers)[kHeadersList];
      request.headersList = headersList;
    }
    const keyValue = crypto2.randomBytes(16).toString("base64");
    request.headersList.append("sec-websocket-key", keyValue);
    request.headersList.append("sec-websocket-version", "13");
    for (const protocol of protocols) {
      request.headersList.append("sec-websocket-protocol", protocol);
    }
    const permessageDeflate = "";
    const controller = fetching({
      request,
      useParallelQueue: true,
      dispatcher: options.dispatcher ?? getGlobalDispatcher(),
      processResponse(response) {
        if (response.type === "error" || response.status !== 101) {
          failWebsocketConnection(ws, "Received network error or non-101 status code.");
          return;
        }
        if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
          failWebsocketConnection(ws, "Server did not respond with sent protocols.");
          return;
        }
        if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
          failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
          return;
        }
        if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
          failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
          return;
        }
        const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
        const digest = crypto2.createHash("sha1").update(keyValue + uid).digest("base64");
        if (secWSAccept !== digest) {
          failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
          return;
        }
        const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
        if (secExtension !== null && secExtension !== permessageDeflate) {
          failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
          return;
        }
        const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
        if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
          failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
          return;
        }
        response.socket.on("data", onSocketData);
        response.socket.on("close", onSocketClose);
        response.socket.on("error", onSocketError);
        if (channels.open.hasSubscribers) {
          channels.open.publish({
            address: response.socket.address(),
            protocol: secProtocol,
            extensions: secExtension
          });
        }
        onEstablish(response);
      }
    });
    return controller;
  }
  function onSocketData(chunk) {
    if (!this.ws[kByteParser].write(chunk)) {
      this.pause();
    }
  }
  function onSocketClose() {
    const { ws } = this;
    const wasClean = ws[kSentClose] && ws[kReceivedClose];
    let code = 1005;
    let reason = "";
    const result = ws[kByteParser].closingInfo;
    if (result) {
      code = result.code ?? 1005;
      reason = result.reason;
    } else if (!ws[kSentClose]) {
      code = 1006;
    }
    ws[kReadyState] = states.CLOSED;
    fireEvent("close", ws, CloseEvent, {
      wasClean,
      code,
      reason
    });
    if (channels.close.hasSubscribers) {
      channels.close.publish({
        websocket: ws,
        code,
        reason
      });
    }
  }
  function onSocketError(error) {
    const { ws } = this;
    ws[kReadyState] = states.CLOSING;
    if (channels.socketError.hasSubscribers) {
      channels.socketError.publish(error);
    }
    this.destroy();
  }
  module.exports = {
    establishWebSocketConnection
  };
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS((exports, module) => {
  var { maxUnsigned16Bit } = require_constants5();
  var crypto2;
  try {
    crypto2 = __require("crypto");
  } catch {}

  class WebsocketFrameSend {
    constructor(data) {
      this.frameData = data;
      this.maskKey = crypto2.randomBytes(4);
    }
    createFrame(opcode) {
      const bodyLength = this.frameData?.byteLength ?? 0;
      let payloadLength = bodyLength;
      let offset = 6;
      if (bodyLength > maxUnsigned16Bit) {
        offset += 8;
        payloadLength = 127;
      } else if (bodyLength > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const buffer = Buffer.allocUnsafe(bodyLength + offset);
      buffer[0] = buffer[1] = 0;
      buffer[0] |= 128;
      buffer[0] = (buffer[0] & 240) + opcode;
      /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
      buffer[offset - 4] = this.maskKey[0];
      buffer[offset - 3] = this.maskKey[1];
      buffer[offset - 2] = this.maskKey[2];
      buffer[offset - 1] = this.maskKey[3];
      buffer[1] = payloadLength;
      if (payloadLength === 126) {
        buffer.writeUInt16BE(bodyLength, 2);
      } else if (payloadLength === 127) {
        buffer[2] = buffer[3] = 0;
        buffer.writeUIntBE(bodyLength, 4, 6);
      }
      buffer[1] |= 128;
      for (let i = 0;i < bodyLength; i++) {
        buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
      }
      return buffer;
    }
  }
  module.exports = {
    WebsocketFrameSend
  };
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS((exports, module) => {
  var { Writable } = __require("stream");
  var diagnosticsChannel = __require("diagnostics_channel");
  var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
  var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
  var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
  var { WebsocketFrameSend } = require_frame();
  var channels = {};
  channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
  channels.pong = diagnosticsChannel.channel("undici:websocket:pong");

  class ByteParser extends Writable {
    #buffers = [];
    #byteOffset = 0;
    #state = parserStates.INFO;
    #info = {};
    #fragments = [];
    constructor(ws) {
      super();
      this.ws = ws;
    }
    _write(chunk, _, callback) {
      this.#buffers.push(chunk);
      this.#byteOffset += chunk.length;
      this.run(callback);
    }
    run(callback) {
      while (true) {
        if (this.#state === parserStates.INFO) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          this.#info.fin = (buffer[0] & 128) !== 0;
          this.#info.opcode = buffer[0] & 15;
          this.#info.originalOpcode ??= this.#info.opcode;
          this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
          if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
            failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
            return;
          }
          const payloadLength = buffer[1] & 127;
          if (payloadLength <= 125) {
            this.#info.payloadLength = payloadLength;
            this.#state = parserStates.READ_DATA;
          } else if (payloadLength === 126) {
            this.#state = parserStates.PAYLOADLENGTH_16;
          } else if (payloadLength === 127) {
            this.#state = parserStates.PAYLOADLENGTH_64;
          }
          if (this.#info.fragmented && payloadLength > 125) {
            failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
            return;
          } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
            failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
            return;
          } else if (this.#info.opcode === opcodes.CLOSE) {
            if (payloadLength === 1) {
              failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
              return;
            }
            const body = this.consume(payloadLength);
            this.#info.closeInfo = this.parseCloseBody(false, body);
            if (!this.ws[kSentClose]) {
              const body2 = Buffer.allocUnsafe(2);
              body2.writeUInt16BE(this.#info.closeInfo.code, 0);
              const closeFrame = new WebsocketFrameSend(body2);
              this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), (err) => {
                if (!err) {
                  this.ws[kSentClose] = true;
                }
              });
            }
            this.ws[kReadyState] = states.CLOSING;
            this.ws[kReceivedClose] = true;
            this.end();
            return;
          } else if (this.#info.opcode === opcodes.PING) {
            const body = this.consume(payloadLength);
            if (!this.ws[kReceivedClose]) {
              const frame = new WebsocketFrameSend(body);
              this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
              if (channels.ping.hasSubscribers) {
                channels.ping.publish({
                  payload: body
                });
              }
            }
            this.#state = parserStates.INFO;
            if (this.#byteOffset > 0) {
              continue;
            } else {
              callback();
              return;
            }
          } else if (this.#info.opcode === opcodes.PONG) {
            const body = this.consume(payloadLength);
            if (channels.pong.hasSubscribers) {
              channels.pong.publish({
                payload: body
              });
            }
            if (this.#byteOffset > 0) {
              continue;
            } else {
              callback();
              return;
            }
          }
        } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          this.#info.payloadLength = buffer.readUInt16BE(0);
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
          if (this.#byteOffset < 8) {
            return callback();
          }
          const buffer = this.consume(8);
          const upper = buffer.readUInt32BE(0);
          if (upper > 2 ** 31 - 1) {
            failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
            return;
          }
          const lower = buffer.readUInt32BE(4);
          this.#info.payloadLength = (upper << 8) + lower;
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.READ_DATA) {
          if (this.#byteOffset < this.#info.payloadLength) {
            return callback();
          } else if (this.#byteOffset >= this.#info.payloadLength) {
            const body = this.consume(this.#info.payloadLength);
            this.#fragments.push(body);
            if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
              const fullMessage = Buffer.concat(this.#fragments);
              websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
              this.#info = {};
              this.#fragments.length = 0;
            }
            this.#state = parserStates.INFO;
          }
        }
        if (this.#byteOffset > 0) {
          continue;
        } else {
          callback();
          break;
        }
      }
    }
    consume(n) {
      if (n > this.#byteOffset) {
        return null;
      } else if (n === 0) {
        return emptyBuffer;
      }
      if (this.#buffers[0].length === n) {
        this.#byteOffset -= this.#buffers[0].length;
        return this.#buffers.shift();
      }
      const buffer = Buffer.allocUnsafe(n);
      let offset = 0;
      while (offset !== n) {
        const next = this.#buffers[0];
        const { length } = next;
        if (length + offset === n) {
          buffer.set(this.#buffers.shift(), offset);
          break;
        } else if (length + offset > n) {
          buffer.set(next.subarray(0, n - offset), offset);
          this.#buffers[0] = next.subarray(n - offset);
          break;
        } else {
          buffer.set(this.#buffers.shift(), offset);
          offset += next.length;
        }
      }
      this.#byteOffset -= n;
      return buffer;
    }
    parseCloseBody(onlyCode, data) {
      let code;
      if (data.length >= 2) {
        code = data.readUInt16BE(0);
      }
      if (onlyCode) {
        if (!isValidStatusCode(code)) {
          return null;
        }
        return { code };
      }
      let reason = data.subarray(2);
      if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
        reason = reason.subarray(3);
      }
      if (code !== undefined && !isValidStatusCode(code)) {
        return null;
      }
      try {
        reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
      } catch {
        return null;
      }
      return { code, reason };
    }
    get closingInfo() {
      return this.#info.closeInfo;
    }
  }
  module.exports = {
    ByteParser
  };
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var { DOMException: DOMException2 } = require_constants2();
  var { URLSerializer } = require_dataURL();
  var { getGlobalOrigin } = require_global();
  var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants5();
  var {
    kWebSocketURL,
    kReadyState,
    kController,
    kBinaryType,
    kResponse,
    kSentClose,
    kByteParser
  } = require_symbols5();
  var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
  var { establishWebSocketConnection } = require_connection();
  var { WebsocketFrameSend } = require_frame();
  var { ByteParser } = require_receiver();
  var { kEnumerableProperty, isBlobLike } = require_util();
  var { getGlobalDispatcher } = require_global2();
  var { types } = __require("util");
  var experimentalWarned = false;

  class WebSocket extends EventTarget {
    #events = {
      open: null,
      error: null,
      close: null,
      message: null
    };
    #bufferedAmount = 0;
    #protocol = "";
    #extensions = "";
    constructor(url, protocols = []) {
      super();
      webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
      if (!experimentalWarned) {
        experimentalWarned = true;
        process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
          code: "UNDICI-WS"
        });
      }
      const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
      url = webidl.converters.USVString(url);
      protocols = options.protocols;
      const baseURL = getGlobalOrigin();
      let urlRecord;
      try {
        urlRecord = new URL(url, baseURL);
      } catch (e) {
        throw new DOMException2(e, "SyntaxError");
      }
      if (urlRecord.protocol === "http:") {
        urlRecord.protocol = "ws:";
      } else if (urlRecord.protocol === "https:") {
        urlRecord.protocol = "wss:";
      }
      if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
        throw new DOMException2(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
      }
      if (urlRecord.hash || urlRecord.href.endsWith("#")) {
        throw new DOMException2("Got fragment", "SyntaxError");
      }
      if (typeof protocols === "string") {
        protocols = [protocols];
      }
      if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
        throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
        throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      this[kWebSocketURL] = new URL(urlRecord.href);
      this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response) => this.#onConnectionEstablished(response), options);
      this[kReadyState] = WebSocket.CONNECTING;
      this[kBinaryType] = "blob";
    }
    close(code = undefined, reason = undefined) {
      webidl.brandCheck(this, WebSocket);
      if (code !== undefined) {
        code = webidl.converters["unsigned short"](code, { clamp: true });
      }
      if (reason !== undefined) {
        reason = webidl.converters.USVString(reason);
      }
      if (code !== undefined) {
        if (code !== 1000 && (code < 3000 || code > 4999)) {
          throw new DOMException2("invalid code", "InvalidAccessError");
        }
      }
      let reasonByteLength = 0;
      if (reason !== undefined) {
        reasonByteLength = Buffer.byteLength(reason);
        if (reasonByteLength > 123) {
          throw new DOMException2(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
        }
      }
      if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {} else if (!isEstablished(this)) {
        failWebsocketConnection(this, "Connection was closed before it was established.");
        this[kReadyState] = WebSocket.CLOSING;
      } else if (!isClosing(this)) {
        const frame = new WebsocketFrameSend;
        if (code !== undefined && reason === undefined) {
          frame.frameData = Buffer.allocUnsafe(2);
          frame.frameData.writeUInt16BE(code, 0);
        } else if (code !== undefined && reason !== undefined) {
          frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
          frame.frameData.writeUInt16BE(code, 0);
          frame.frameData.write(reason, 2, "utf-8");
        } else {
          frame.frameData = emptyBuffer;
        }
        const socket = this[kResponse].socket;
        socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
          if (!err) {
            this[kSentClose] = true;
          }
        });
        this[kReadyState] = states.CLOSING;
      } else {
        this[kReadyState] = WebSocket.CLOSING;
      }
    }
    send(data) {
      webidl.brandCheck(this, WebSocket);
      webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
      data = webidl.converters.WebSocketSendData(data);
      if (this[kReadyState] === WebSocket.CONNECTING) {
        throw new DOMException2("Sent before connected.", "InvalidStateError");
      }
      if (!isEstablished(this) || isClosing(this)) {
        return;
      }
      const socket = this[kResponse].socket;
      if (typeof data === "string") {
        const value = Buffer.from(data);
        const frame = new WebsocketFrameSend(value);
        const buffer = frame.createFrame(opcodes.TEXT);
        this.#bufferedAmount += value.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength;
        });
      } else if (types.isArrayBuffer(data)) {
        const value = Buffer.from(data);
        const frame = new WebsocketFrameSend(value);
        const buffer = frame.createFrame(opcodes.BINARY);
        this.#bufferedAmount += value.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength;
        });
      } else if (ArrayBuffer.isView(data)) {
        const ab = Buffer.from(data, data.byteOffset, data.byteLength);
        const frame = new WebsocketFrameSend(ab);
        const buffer = frame.createFrame(opcodes.BINARY);
        this.#bufferedAmount += ab.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= ab.byteLength;
        });
      } else if (isBlobLike(data)) {
        const frame = new WebsocketFrameSend;
        data.arrayBuffer().then((ab) => {
          const value = Buffer.from(ab);
          frame.frameData = value;
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        });
      }
    }
    get readyState() {
      webidl.brandCheck(this, WebSocket);
      return this[kReadyState];
    }
    get bufferedAmount() {
      webidl.brandCheck(this, WebSocket);
      return this.#bufferedAmount;
    }
    get url() {
      webidl.brandCheck(this, WebSocket);
      return URLSerializer(this[kWebSocketURL]);
    }
    get extensions() {
      webidl.brandCheck(this, WebSocket);
      return this.#extensions;
    }
    get protocol() {
      webidl.brandCheck(this, WebSocket);
      return this.#protocol;
    }
    get onopen() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.open;
    }
    set onopen(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.open) {
        this.removeEventListener("open", this.#events.open);
      }
      if (typeof fn === "function") {
        this.#events.open = fn;
        this.addEventListener("open", fn);
      } else {
        this.#events.open = null;
      }
    }
    get onerror() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.error;
    }
    set onerror(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.error) {
        this.removeEventListener("error", this.#events.error);
      }
      if (typeof fn === "function") {
        this.#events.error = fn;
        this.addEventListener("error", fn);
      } else {
        this.#events.error = null;
      }
    }
    get onclose() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.close;
    }
    set onclose(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.close) {
        this.removeEventListener("close", this.#events.close);
      }
      if (typeof fn === "function") {
        this.#events.close = fn;
        this.addEventListener("close", fn);
      } else {
        this.#events.close = null;
      }
    }
    get onmessage() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.message;
    }
    set onmessage(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.message) {
        this.removeEventListener("message", this.#events.message);
      }
      if (typeof fn === "function") {
        this.#events.message = fn;
        this.addEventListener("message", fn);
      } else {
        this.#events.message = null;
      }
    }
    get binaryType() {
      webidl.brandCheck(this, WebSocket);
      return this[kBinaryType];
    }
    set binaryType(type) {
      webidl.brandCheck(this, WebSocket);
      if (type !== "blob" && type !== "arraybuffer") {
        this[kBinaryType] = "blob";
      } else {
        this[kBinaryType] = type;
      }
    }
    #onConnectionEstablished(response) {
      this[kResponse] = response;
      const parser = new ByteParser(this);
      parser.on("drain", function onParserDrain() {
        this.ws[kResponse].socket.resume();
      });
      response.socket.ws = this;
      this[kByteParser] = parser;
      this[kReadyState] = states.OPEN;
      const extensions = response.headersList.get("sec-websocket-extensions");
      if (extensions !== null) {
        this.#extensions = extensions;
      }
      const protocol = response.headersList.get("sec-websocket-protocol");
      if (protocol !== null) {
        this.#protocol = protocol;
      }
      fireEvent("open", this);
    }
  }
  WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
  WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
  WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
  WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
  Object.defineProperties(WebSocket.prototype, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors,
    url: kEnumerableProperty,
    readyState: kEnumerableProperty,
    bufferedAmount: kEnumerableProperty,
    onopen: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onclose: kEnumerableProperty,
    close: kEnumerableProperty,
    onmessage: kEnumerableProperty,
    binaryType: kEnumerableProperty,
    send: kEnumerableProperty,
    extensions: kEnumerableProperty,
    protocol: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "WebSocket",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  Object.defineProperties(WebSocket, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors
  });
  webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
  webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
    if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
      return webidl.converters["sequence<DOMString>"](V);
    }
    return webidl.converters.DOMString(V);
  };
  webidl.converters.WebSocketInit = webidl.dictionaryConverter([
    {
      key: "protocols",
      converter: webidl.converters["DOMString or sequence<DOMString>"],
      get defaultValue() {
        return [];
      }
    },
    {
      key: "dispatcher",
      converter: (V) => V,
      get defaultValue() {
        return getGlobalDispatcher();
      }
    },
    {
      key: "headers",
      converter: webidl.nullableConverter(webidl.converters.HeadersInit)
    }
  ]);
  webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
      return webidl.converters.WebSocketInit(V);
    }
    return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
  };
  webidl.converters.WebSocketSendData = function(V) {
    if (webidl.util.Type(V) === "Object") {
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
        return webidl.converters.BufferSource(V);
      }
    }
    return webidl.converters.USVString(V);
  };
  module.exports = {
    WebSocket
  };
});

// node_modules/undici/index.js
var require_undici = __commonJS((exports, module) => {
  var Client = require_client();
  var Dispatcher = require_dispatcher();
  var errors = require_errors();
  var Pool = require_pool();
  var BalancedPool = require_balanced_pool();
  var Agent = require_agent();
  var util = require_util();
  var { InvalidArgumentError } = errors;
  var api = require_api();
  var buildConnector = require_connect();
  var MockClient = require_mock_client();
  var MockAgent = require_mock_agent();
  var MockPool = require_mock_pool();
  var mockErrors = require_mock_errors();
  var ProxyAgent = require_proxy_agent();
  var RetryHandler = require_RetryHandler();
  var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
  var DecoratorHandler = require_DecoratorHandler();
  var RedirectHandler = require_RedirectHandler();
  var createRedirectInterceptor = require_redirectInterceptor();
  var hasCrypto;
  try {
    __require("crypto");
    hasCrypto = true;
  } catch {
    hasCrypto = false;
  }
  Object.assign(Dispatcher.prototype, api);
  exports.Dispatcher = Dispatcher;
  exports.Client = Client;
  exports.Pool = Pool;
  exports.BalancedPool = BalancedPool;
  exports.Agent = Agent;
  exports.ProxyAgent = ProxyAgent;
  exports.RetryHandler = RetryHandler;
  exports.DecoratorHandler = DecoratorHandler;
  exports.RedirectHandler = RedirectHandler;
  exports.createRedirectInterceptor = createRedirectInterceptor;
  exports.buildConnector = buildConnector;
  exports.errors = errors;
  function makeDispatcher(fn) {
    return (url, opts, handler) => {
      if (typeof opts === "function") {
        handler = opts;
        opts = null;
      }
      if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
        throw new InvalidArgumentError("invalid url");
      }
      if (opts != null && typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (opts && opts.path != null) {
        if (typeof opts.path !== "string") {
          throw new InvalidArgumentError("invalid opts.path");
        }
        let path = opts.path;
        if (!opts.path.startsWith("/")) {
          path = `/${path}`;
        }
        url = new URL(util.parseOrigin(url).origin + path);
      } else {
        if (!opts) {
          opts = typeof url === "object" ? url : {};
        }
        url = util.parseURL(url);
      }
      const { agent, dispatcher = getGlobalDispatcher() } = opts;
      if (agent) {
        throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
      }
      return fn.call(dispatcher, {
        ...opts,
        origin: url.origin,
        path: url.search ? `${url.pathname}${url.search}` : url.pathname,
        method: opts.method || (opts.body ? "PUT" : "GET")
      }, handler);
    };
  }
  exports.setGlobalDispatcher = setGlobalDispatcher;
  exports.getGlobalDispatcher = getGlobalDispatcher;
  if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
    let fetchImpl = null;
    exports.fetch = async function fetch(resource) {
      if (!fetchImpl) {
        fetchImpl = require_fetch().fetch;
      }
      try {
        return await fetchImpl(...arguments);
      } catch (err) {
        if (typeof err === "object") {
          Error.captureStackTrace(err, this);
        }
        throw err;
      }
    };
    exports.Headers = require_headers().Headers;
    exports.Response = require_response().Response;
    exports.Request = require_request2().Request;
    exports.FormData = require_formdata().FormData;
    exports.File = require_file().File;
    exports.FileReader = require_filereader().FileReader;
    const { setGlobalOrigin, getGlobalOrigin } = require_global();
    exports.setGlobalOrigin = setGlobalOrigin;
    exports.getGlobalOrigin = getGlobalOrigin;
    const { CacheStorage } = require_cachestorage();
    const { kConstruct } = require_symbols4();
    exports.caches = new CacheStorage(kConstruct);
  }
  if (util.nodeMajor >= 16) {
    const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
    exports.deleteCookie = deleteCookie;
    exports.getCookies = getCookies;
    exports.getSetCookies = getSetCookies;
    exports.setCookie = setCookie;
    const { parseMIMEType, serializeAMimeType } = require_dataURL();
    exports.parseMIMEType = parseMIMEType;
    exports.serializeAMimeType = serializeAMimeType;
  }
  if (util.nodeMajor >= 18 && hasCrypto) {
    const { WebSocket } = require_websocket();
    exports.WebSocket = WebSocket;
  }
  exports.request = makeDispatcher(api.request);
  exports.stream = makeDispatcher(api.stream);
  exports.pipeline = makeDispatcher(api.pipeline);
  exports.connect = makeDispatcher(api.connect);
  exports.upgrade = makeDispatcher(api.upgrade);
  exports.MockClient = MockClient;
  exports.MockPool = MockPool;
  exports.MockAgent = MockAgent;
  exports.mockErrors = mockErrors;
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = undefined;
  var http = __importStar(__require("http"));
  var https = __importStar(__require("https"));
  var pm = __importStar(require_proxy());
  var tunnel = __importStar(require_tunnel());
  var undici_1 = require_undici();
  var HttpCodes;
  (function(HttpCodes2) {
    HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
    HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
    HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
    HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
    HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
    HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
    HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
    HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
    HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
    HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
    HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
  })(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
  var Headers2;
  (function(Headers3) {
    Headers3["Accept"] = "accept";
    Headers3["ContentType"] = "content-type";
  })(Headers2 || (exports.Headers = Headers2 = {}));
  var MediaTypes;
  (function(MediaTypes2) {
    MediaTypes2["ApplicationJson"] = "application/json";
  })(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
  function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
  }
  exports.getProxyUrl = getProxyUrl;
  var HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
  ];
  var HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
  ];
  var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
  var ExponentialBackoffCeiling = 10;
  var ExponentialBackoffTimeSlice = 5;

  class HttpClientError extends Error {
    constructor(message, statusCode) {
      super(message);
      this.name = "HttpClientError";
      this.statusCode = statusCode;
      Object.setPrototypeOf(this, HttpClientError.prototype);
    }
  }
  exports.HttpClientError = HttpClientError;

  class HttpClientResponse {
    constructor(message) {
      this.message = message;
    }
    readBody() {
      return __awaiter(this, undefined, undefined, function* () {
        return new Promise((resolve) => __awaiter(this, undefined, undefined, function* () {
          let output = Buffer.alloc(0);
          this.message.on("data", (chunk) => {
            output = Buffer.concat([output, chunk]);
          });
          this.message.on("end", () => {
            resolve(output.toString());
          });
        }));
      });
    }
    readBodyBuffer() {
      return __awaiter(this, undefined, undefined, function* () {
        return new Promise((resolve) => __awaiter(this, undefined, undefined, function* () {
          const chunks = [];
          this.message.on("data", (chunk) => {
            chunks.push(chunk);
          });
          this.message.on("end", () => {
            resolve(Buffer.concat(chunks));
          });
        }));
      });
    }
  }
  exports.HttpClientResponse = HttpClientResponse;
  function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === "https:";
  }
  exports.isHttps = isHttps;

  class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
      this._ignoreSslError = false;
      this._allowRedirects = true;
      this._allowRedirectDowngrade = false;
      this._maxRedirects = 50;
      this._allowRetries = false;
      this._maxRetries = 1;
      this._keepAlive = false;
      this._disposed = false;
      this.userAgent = userAgent;
      this.handlers = handlers || [];
      this.requestOptions = requestOptions;
      if (requestOptions) {
        if (requestOptions.ignoreSslError != null) {
          this._ignoreSslError = requestOptions.ignoreSslError;
        }
        this._socketTimeout = requestOptions.socketTimeout;
        if (requestOptions.allowRedirects != null) {
          this._allowRedirects = requestOptions.allowRedirects;
        }
        if (requestOptions.allowRedirectDowngrade != null) {
          this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
        }
        if (requestOptions.maxRedirects != null) {
          this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
        }
        if (requestOptions.keepAlive != null) {
          this._keepAlive = requestOptions.keepAlive;
        }
        if (requestOptions.allowRetries != null) {
          this._allowRetries = requestOptions.allowRetries;
        }
        if (requestOptions.maxRetries != null) {
          this._maxRetries = requestOptions.maxRetries;
        }
      }
    }
    options(requestUrl, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
      });
    }
    get(requestUrl, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("GET", requestUrl, null, additionalHeaders || {});
      });
    }
    del(requestUrl, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("DELETE", requestUrl, null, additionalHeaders || {});
      });
    }
    post(requestUrl, data, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("POST", requestUrl, data, additionalHeaders || {});
      });
    }
    patch(requestUrl, data, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("PATCH", requestUrl, data, additionalHeaders || {});
      });
    }
    put(requestUrl, data, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("PUT", requestUrl, data, additionalHeaders || {});
      });
    }
    head(requestUrl, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request("HEAD", requestUrl, null, additionalHeaders || {});
      });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
      return __awaiter(this, undefined, undefined, function* () {
        return this.request(verb, requestUrl, stream, additionalHeaders);
      });
    }
    getJson(requestUrl, additionalHeaders = {}) {
      return __awaiter(this, undefined, undefined, function* () {
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        const res = yield this.get(requestUrl, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, undefined, undefined, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.post(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, undefined, undefined, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.put(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, undefined, undefined, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.patch(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    request(verb, requestUrl, data, headers) {
      return __awaiter(this, undefined, undefined, function* () {
        if (this._disposed) {
          throw new Error("Client has already been disposed.");
        }
        const parsedUrl = new URL(requestUrl);
        let info = this._prepareRequest(verb, parsedUrl, headers);
        const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
        let numTries = 0;
        let response;
        do {
          response = yield this.requestRaw(info, data);
          if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
            let authenticationHandler;
            for (const handler of this.handlers) {
              if (handler.canHandleAuthentication(response)) {
                authenticationHandler = handler;
                break;
              }
            }
            if (authenticationHandler) {
              return authenticationHandler.handleAuthentication(this, info, data);
            } else {
              return response;
            }
          }
          let redirectsRemaining = this._maxRedirects;
          while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
            const redirectUrl = response.message.headers["location"];
            if (!redirectUrl) {
              break;
            }
            const parsedRedirectUrl = new URL(redirectUrl);
            if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
              throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
            }
            yield response.readBody();
            if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
              for (const header in headers) {
                if (header.toLowerCase() === "authorization") {
                  delete headers[header];
                }
              }
            }
            info = this._prepareRequest(verb, parsedRedirectUrl, headers);
            response = yield this.requestRaw(info, data);
            redirectsRemaining--;
          }
          if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
            return response;
          }
          numTries += 1;
          if (numTries < maxTries) {
            yield response.readBody();
            yield this._performExponentialBackoff(numTries);
          }
        } while (numTries < maxTries);
        return response;
      });
    }
    dispose() {
      if (this._agent) {
        this._agent.destroy();
      }
      this._disposed = true;
    }
    requestRaw(info, data) {
      return __awaiter(this, undefined, undefined, function* () {
        return new Promise((resolve, reject) => {
          function callbackForResult(err, res) {
            if (err) {
              reject(err);
            } else if (!res) {
              reject(new Error("Unknown error"));
            } else {
              resolve(res);
            }
          }
          this.requestRawWithCallback(info, data, callbackForResult);
        });
      });
    }
    requestRawWithCallback(info, data, onResult) {
      if (typeof data === "string") {
        if (!info.options.headers) {
          info.options.headers = {};
        }
        info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
      }
      let callbackCalled = false;
      function handleResult(err, res) {
        if (!callbackCalled) {
          callbackCalled = true;
          onResult(err, res);
        }
      }
      const req = info.httpModule.request(info.options, (msg) => {
        const res = new HttpClientResponse(msg);
        handleResult(undefined, res);
      });
      let socket;
      req.on("socket", (sock) => {
        socket = sock;
      });
      req.setTimeout(this._socketTimeout || 3 * 60000, () => {
        if (socket) {
          socket.end();
        }
        handleResult(new Error(`Request timeout: ${info.options.path}`));
      });
      req.on("error", function(err) {
        handleResult(err);
      });
      if (data && typeof data === "string") {
        req.write(data, "utf8");
      }
      if (data && typeof data !== "string") {
        data.on("close", function() {
          req.end();
        });
        data.pipe(req);
      } else {
        req.end();
      }
    }
    getAgent(serverUrl) {
      const parsedUrl = new URL(serverUrl);
      return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
      const parsedUrl = new URL(serverUrl);
      const proxyUrl = pm.getProxyUrl(parsedUrl);
      const useProxy = proxyUrl && proxyUrl.hostname;
      if (!useProxy) {
        return;
      }
      return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
      const info = {};
      info.parsedUrl = requestUrl;
      const usingSsl = info.parsedUrl.protocol === "https:";
      info.httpModule = usingSsl ? https : http;
      const defaultPort = usingSsl ? 443 : 80;
      info.options = {};
      info.options.host = info.parsedUrl.hostname;
      info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
      info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
      info.options.method = method;
      info.options.headers = this._mergeHeaders(headers);
      if (this.userAgent != null) {
        info.options.headers["user-agent"] = this.userAgent;
      }
      info.options.agent = this._getAgent(info.parsedUrl);
      if (this.handlers) {
        for (const handler of this.handlers) {
          handler.prepareRequest(info.options);
        }
      }
      return info;
    }
    _mergeHeaders(headers) {
      if (this.requestOptions && this.requestOptions.headers) {
        return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
      }
      return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
      let clientHeader;
      if (this.requestOptions && this.requestOptions.headers) {
        clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
      }
      return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
      let agent;
      const proxyUrl = pm.getProxyUrl(parsedUrl);
      const useProxy = proxyUrl && proxyUrl.hostname;
      if (this._keepAlive && useProxy) {
        agent = this._proxyAgent;
      }
      if (!useProxy) {
        agent = this._agent;
      }
      if (agent) {
        return agent;
      }
      const usingSsl = parsedUrl.protocol === "https:";
      let maxSockets = 100;
      if (this.requestOptions) {
        maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
      }
      if (proxyUrl && proxyUrl.hostname) {
        const agentOptions = {
          maxSockets,
          keepAlive: this._keepAlive,
          proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
            proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
          }), { host: proxyUrl.hostname, port: proxyUrl.port })
        };
        let tunnelAgent;
        const overHttps = proxyUrl.protocol === "https:";
        if (usingSsl) {
          tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
        } else {
          tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
        }
        agent = tunnelAgent(agentOptions);
        this._proxyAgent = agent;
      }
      if (!agent) {
        const options = { keepAlive: this._keepAlive, maxSockets };
        agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
        this._agent = agent;
      }
      if (usingSsl && this._ignoreSslError) {
        agent.options = Object.assign(agent.options || {}, {
          rejectUnauthorized: false
        });
      }
      return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
      let proxyAgent;
      if (this._keepAlive) {
        proxyAgent = this._proxyAgentDispatcher;
      }
      if (proxyAgent) {
        return proxyAgent;
      }
      const usingSsl = parsedUrl.protocol === "https:";
      proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, (proxyUrl.username || proxyUrl.password) && {
        token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`
      }));
      this._proxyAgentDispatcher = proxyAgent;
      if (usingSsl && this._ignoreSslError) {
        proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
          rejectUnauthorized: false
        });
      }
      return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
      return __awaiter(this, undefined, undefined, function* () {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise((resolve) => setTimeout(() => resolve(), ms));
      });
    }
    _processResponse(res, options) {
      return __awaiter(this, undefined, undefined, function* () {
        return new Promise((resolve, reject) => __awaiter(this, undefined, undefined, function* () {
          const statusCode = res.message.statusCode || 0;
          const response = {
            statusCode,
            result: null,
            headers: {}
          };
          if (statusCode === HttpCodes.NotFound) {
            resolve(response);
          }
          function dateTimeDeserializer(key, value) {
            if (typeof value === "string") {
              const a = new Date(value);
              if (!isNaN(a.valueOf())) {
                return a;
              }
            }
            return value;
          }
          let obj;
          let contents;
          try {
            contents = yield res.readBody();
            if (contents && contents.length > 0) {
              if (options && options.deserializeDates) {
                obj = JSON.parse(contents, dateTimeDeserializer);
              } else {
                obj = JSON.parse(contents);
              }
              response.result = obj;
            }
            response.headers = res.message.headers;
          } catch (err) {}
          if (statusCode > 299) {
            let msg;
            if (obj && obj.message) {
              msg = obj.message;
            } else if (contents && contents.length > 0) {
              msg = contents;
            } else {
              msg = `Failed request: (${statusCode})`;
            }
            const err = new HttpClientError(msg, statusCode);
            err.result = response.result;
            reject(err);
          } else {
            resolve(response);
          }
        }));
      });
    }
  }
  exports.HttpClient = HttpClient;
  var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS((exports) => {
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = undefined;

  class BasicCredentialHandler {
    constructor(username, password) {
      this.username = username;
      this.password = password;
    }
    prepareRequest(options) {
      if (!options.headers) {
        throw Error("The request has no headers");
      }
      options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, undefined, undefined, function* () {
        throw new Error("not implemented");
      });
    }
  }
  exports.BasicCredentialHandler = BasicCredentialHandler;

  class BearerCredentialHandler {
    constructor(token) {
      this.token = token;
    }
    prepareRequest(options) {
      if (!options.headers) {
        throw Error("The request has no headers");
      }
      options.headers["Authorization"] = `Bearer ${this.token}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, undefined, undefined, function* () {
        throw new Error("not implemented");
      });
    }
  }
  exports.BearerCredentialHandler = BearerCredentialHandler;

  class PersonalAccessTokenCredentialHandler {
    constructor(token) {
      this.token = token;
    }
    prepareRequest(options) {
      if (!options.headers) {
        throw Error("The request has no headers");
      }
      options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, undefined, undefined, function* () {
        throw new Error("not implemented");
      });
    }
  }
  exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS((exports) => {
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.OidcClient = undefined;
  var http_client_1 = require_lib();
  var auth_1 = require_auth();
  var core_1 = require_core();

  class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
      const requestOptions = {
        allowRetries: allowRetry,
        maxRetries: maxRetry
      };
      return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
      const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
      if (!token) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
      }
      return token;
    }
    static getIDTokenUrl() {
      const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
      if (!runtimeUrl) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
      }
      return runtimeUrl;
    }
    static getCall(id_token_url) {
      var _a;
      return __awaiter(this, undefined, undefined, function* () {
        const httpclient = OidcClient.createHttpClient();
        const res = yield httpclient.getJson(id_token_url).catch((error) => {
          throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
        });
        const id_token = (_a = res.result) === null || _a === undefined ? undefined : _a.value;
        if (!id_token) {
          throw new Error("Response json body do not have ID Token field");
        }
        return id_token;
      });
    }
    static getIDToken(audience) {
      return __awaiter(this, undefined, undefined, function* () {
        try {
          let id_token_url = OidcClient.getIDTokenUrl();
          if (audience) {
            const encodedAudience = encodeURIComponent(audience);
            id_token_url = `${id_token_url}&audience=${encodedAudience}`;
          }
          (0, core_1.debug)(`ID token url is ${id_token_url}`);
          const id_token = yield OidcClient.getCall(id_token_url);
          (0, core_1.setSecret)(id_token);
          return id_token;
        } catch (error) {
          throw new Error(`Error message: ${error.message}`);
        }
      });
    }
  }
  exports.OidcClient = OidcClient;
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS((exports) => {
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = undefined;
  var os_1 = __require("os");
  var fs_1 = __require("fs");
  var { access, appendFile, writeFile } = fs_1.promises;
  exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
  exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";

  class Summary {
    constructor() {
      this._buffer = "";
    }
    filePath() {
      return __awaiter(this, undefined, undefined, function* () {
        if (this._filePath) {
          return this._filePath;
        }
        const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
        if (!pathFromEnv) {
          throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
        }
        try {
          yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
        } catch (_a) {
          throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
        }
        this._filePath = pathFromEnv;
        return this._filePath;
      });
    }
    wrap(tag, content, attrs = {}) {
      const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
      if (!content) {
        return `<${tag}${htmlAttrs}>`;
      }
      return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    write(options) {
      return __awaiter(this, undefined, undefined, function* () {
        const overwrite = !!(options === null || options === undefined ? undefined : options.overwrite);
        const filePath = yield this.filePath();
        const writeFunc = overwrite ? writeFile : appendFile;
        yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
        return this.emptyBuffer();
      });
    }
    clear() {
      return __awaiter(this, undefined, undefined, function* () {
        return this.emptyBuffer().write({ overwrite: true });
      });
    }
    stringify() {
      return this._buffer;
    }
    isEmptyBuffer() {
      return this._buffer.length === 0;
    }
    emptyBuffer() {
      this._buffer = "";
      return this;
    }
    addRaw(text, addEOL = false) {
      this._buffer += text;
      return addEOL ? this.addEOL() : this;
    }
    addEOL() {
      return this.addRaw(os_1.EOL);
    }
    addCodeBlock(code, lang) {
      const attrs = Object.assign({}, lang && { lang });
      const element = this.wrap("pre", this.wrap("code", code), attrs);
      return this.addRaw(element).addEOL();
    }
    addList(items, ordered = false) {
      const tag = ordered ? "ol" : "ul";
      const listItems = items.map((item) => this.wrap("li", item)).join("");
      const element = this.wrap(tag, listItems);
      return this.addRaw(element).addEOL();
    }
    addTable(rows) {
      const tableBody = rows.map((row) => {
        const cells = row.map((cell) => {
          if (typeof cell === "string") {
            return this.wrap("td", cell);
          }
          const { header, data, colspan, rowspan } = cell;
          const tag = header ? "th" : "td";
          const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
          return this.wrap(tag, data, attrs);
        }).join("");
        return this.wrap("tr", cells);
      }).join("");
      const element = this.wrap("table", tableBody);
      return this.addRaw(element).addEOL();
    }
    addDetails(label, content) {
      const element = this.wrap("details", this.wrap("summary", label) + content);
      return this.addRaw(element).addEOL();
    }
    addImage(src, alt, options) {
      const { width, height } = options || {};
      const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
      const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
      return this.addRaw(element).addEOL();
    }
    addHeading(text, level) {
      const tag = `h${level}`;
      const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
      const element = this.wrap(allowedTag, text);
      return this.addRaw(element).addEOL();
    }
    addSeparator() {
      const element = this.wrap("hr", null);
      return this.addRaw(element).addEOL();
    }
    addBreak() {
      const element = this.wrap("br", null);
      return this.addRaw(element).addEOL();
    }
    addQuote(text, cite) {
      const attrs = Object.assign({}, cite && { cite });
      const element = this.wrap("blockquote", text, attrs);
      return this.addRaw(element).addEOL();
    }
    addLink(text, href) {
      const element = this.wrap("a", text, { href });
      return this.addRaw(element).addEOL();
    }
  }
  var _summary = new Summary;
  exports.markdownSummary = _summary;
  exports.summary = _summary;
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = undefined;
  var path = __importStar(__require("path"));
  function toPosixPath(pth) {
    return pth.replace(/[\\]/g, "/");
  }
  exports.toPosixPath = toPosixPath;
  function toWin32Path(pth) {
    return pth.replace(/[/]/g, "\\");
  }
  exports.toWin32Path = toWin32Path;
  function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
  }
  exports.toPlatformPath = toPlatformPath;
});

// node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var _a;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = undefined;
  var fs = __importStar(__require("fs"));
  var path = __importStar(__require("path"));
  _a = fs.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
  exports.IS_WINDOWS = process.platform === "win32";
  exports.UV_FS_O_EXLOCK = 268435456;
  exports.READONLY = fs.constants.O_RDONLY;
  function exists(fsPath) {
    return __awaiter(this, undefined, undefined, function* () {
      try {
        yield exports.stat(fsPath);
      } catch (err) {
        if (err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return true;
    });
  }
  exports.exists = exists;
  function isDirectory(fsPath, useStat = false) {
    return __awaiter(this, undefined, undefined, function* () {
      const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
      return stats.isDirectory();
    });
  }
  exports.isDirectory = isDirectory;
  function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
      throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
      return p.startsWith("\\") || /^[A-Z]:/i.test(p);
    }
    return p.startsWith("/");
  }
  exports.isRooted = isRooted;
  function tryGetExecutablePath(filePath, extensions) {
    return __awaiter(this, undefined, undefined, function* () {
      let stats = undefined;
      try {
        stats = yield exports.stat(filePath);
      } catch (err) {
        if (err.code !== "ENOENT") {
          console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
        }
      }
      if (stats && stats.isFile()) {
        if (exports.IS_WINDOWS) {
          const upperExt = path.extname(filePath).toUpperCase();
          if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
            return filePath;
          }
        } else {
          if (isUnixExecutable(stats)) {
            return filePath;
          }
        }
      }
      const originalFilePath = filePath;
      for (const extension of extensions) {
        filePath = originalFilePath + extension;
        stats = undefined;
        try {
          stats = yield exports.stat(filePath);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports.IS_WINDOWS) {
            try {
              const directory = path.dirname(filePath);
              const upperName = path.basename(filePath).toUpperCase();
              for (const actualName of yield exports.readdir(directory)) {
                if (upperName === actualName.toUpperCase()) {
                  filePath = path.join(directory, actualName);
                  break;
                }
              }
            } catch (err) {
              console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
            }
            return filePath;
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
      }
      return "";
    });
  }
  exports.tryGetExecutablePath = tryGetExecutablePath;
  function normalizeSeparators(p) {
    p = p || "";
    if (exports.IS_WINDOWS) {
      p = p.replace(/\//g, "\\");
      return p.replace(/\\\\+/g, "\\");
    }
    return p.replace(/\/\/+/g, "/");
  }
  function isUnixExecutable(stats) {
    return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
  }
  function getCmdPath() {
    var _a2;
    return (_a2 = process.env["COMSPEC"]) !== null && _a2 !== undefined ? _a2 : `cmd.exe`;
  }
  exports.getCmdPath = getCmdPath;
});

// node_modules/@actions/io/lib/io.js
var require_io = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = undefined;
  var assert_1 = __require("assert");
  var path = __importStar(__require("path"));
  var ioUtil = __importStar(require_io_util());
  function cp(source, dest, options = {}) {
    return __awaiter(this, undefined, undefined, function* () {
      const { force, recursive, copySourceDirectory } = readCopyOptions(options);
      const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
      if (destStat && destStat.isFile() && !force) {
        return;
      }
      const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path.join(dest, path.basename(source)) : dest;
      if (!(yield ioUtil.exists(source))) {
        throw new Error(`no such file or directory: ${source}`);
      }
      const sourceStat = yield ioUtil.stat(source);
      if (sourceStat.isDirectory()) {
        if (!recursive) {
          throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
        } else {
          yield cpDirRecursive(source, newDest, 0, force);
        }
      } else {
        if (path.relative(source, newDest) === "") {
          throw new Error(`'${newDest}' and '${source}' are the same file`);
        }
        yield copyFile(source, newDest, force);
      }
    });
  }
  exports.cp = cp;
  function mv(source, dest, options = {}) {
    return __awaiter(this, undefined, undefined, function* () {
      if (yield ioUtil.exists(dest)) {
        let destExists = true;
        if (yield ioUtil.isDirectory(dest)) {
          dest = path.join(dest, path.basename(source));
          destExists = yield ioUtil.exists(dest);
        }
        if (destExists) {
          if (options.force == null || options.force) {
            yield rmRF(dest);
          } else {
            throw new Error("Destination already exists");
          }
        }
      }
      yield mkdirP(path.dirname(dest));
      yield ioUtil.rename(source, dest);
    });
  }
  exports.mv = mv;
  function rmRF(inputPath) {
    return __awaiter(this, undefined, undefined, function* () {
      if (ioUtil.IS_WINDOWS) {
        if (/[*"<>|]/.test(inputPath)) {
          throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
        }
      }
      try {
        yield ioUtil.rm(inputPath, {
          force: true,
          maxRetries: 3,
          recursive: true,
          retryDelay: 300
        });
      } catch (err) {
        throw new Error(`File was unable to be removed ${err}`);
      }
    });
  }
  exports.rmRF = rmRF;
  function mkdirP(fsPath) {
    return __awaiter(this, undefined, undefined, function* () {
      assert_1.ok(fsPath, "a path argument must be provided");
      yield ioUtil.mkdir(fsPath, { recursive: true });
    });
  }
  exports.mkdirP = mkdirP;
  function which(tool, check) {
    return __awaiter(this, undefined, undefined, function* () {
      if (!tool) {
        throw new Error("parameter 'tool' is required");
      }
      if (check) {
        const result = yield which(tool, false);
        if (!result) {
          if (ioUtil.IS_WINDOWS) {
            throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
          } else {
            throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
          }
        }
        return result;
      }
      const matches = yield findInPath(tool);
      if (matches && matches.length > 0) {
        return matches[0];
      }
      return "";
    });
  }
  exports.which = which;
  function findInPath(tool) {
    return __awaiter(this, undefined, undefined, function* () {
      if (!tool) {
        throw new Error("parameter 'tool' is required");
      }
      const extensions = [];
      if (ioUtil.IS_WINDOWS && process.env["PATHEXT"]) {
        for (const extension of process.env["PATHEXT"].split(path.delimiter)) {
          if (extension) {
            extensions.push(extension);
          }
        }
      }
      if (ioUtil.isRooted(tool)) {
        const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
        if (filePath) {
          return [filePath];
        }
        return [];
      }
      if (tool.includes(path.sep)) {
        return [];
      }
      const directories = [];
      if (process.env.PATH) {
        for (const p of process.env.PATH.split(path.delimiter)) {
          if (p) {
            directories.push(p);
          }
        }
      }
      const matches = [];
      for (const directory of directories) {
        const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
        if (filePath) {
          matches.push(filePath);
        }
      }
      return matches;
    });
  }
  exports.findInPath = findInPath;
  function readCopyOptions(options) {
    const force = options.force == null ? true : options.force;
    const recursive = Boolean(options.recursive);
    const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
    return { force, recursive, copySourceDirectory };
  }
  function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, undefined, undefined, function* () {
      if (currentDepth >= 255)
        return;
      currentDepth++;
      yield mkdirP(destDir);
      const files = yield ioUtil.readdir(sourceDir);
      for (const fileName of files) {
        const srcFile = `${sourceDir}/${fileName}`;
        const destFile = `${destDir}/${fileName}`;
        const srcFileStat = yield ioUtil.lstat(srcFile);
        if (srcFileStat.isDirectory()) {
          yield cpDirRecursive(srcFile, destFile, currentDepth, force);
        } else {
          yield copyFile(srcFile, destFile, force);
        }
      }
      yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    });
  }
  function copyFile(srcFile, destFile, force) {
    return __awaiter(this, undefined, undefined, function* () {
      if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
        try {
          yield ioUtil.lstat(destFile);
          yield ioUtil.unlink(destFile);
        } catch (e) {
          if (e.code === "EPERM") {
            yield ioUtil.chmod(destFile, "0666");
            yield ioUtil.unlink(destFile);
          }
        }
        const symlinkFull = yield ioUtil.readlink(srcFile);
        yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? "junction" : null);
      } else if (!(yield ioUtil.exists(destFile)) || force) {
        yield ioUtil.copyFile(srcFile, destFile);
      }
    });
  }
});

// node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.argStringToArray = exports.ToolRunner = undefined;
  var os = __importStar(__require("os"));
  var events = __importStar(__require("events"));
  var child = __importStar(__require("child_process"));
  var path = __importStar(__require("path"));
  var io = __importStar(require_io());
  var ioUtil = __importStar(require_io_util());
  var timers_1 = __require("timers");
  var IS_WINDOWS = process.platform === "win32";

  class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
      super();
      if (!toolPath) {
        throw new Error("Parameter 'toolPath' cannot be null or empty.");
      }
      this.toolPath = toolPath;
      this.args = args || [];
      this.options = options || {};
    }
    _debug(message) {
      if (this.options.listeners && this.options.listeners.debug) {
        this.options.listeners.debug(message);
      }
    }
    _getCommandString(options, noPrefix) {
      const toolPath = this._getSpawnFileName();
      const args = this._getSpawnArgs(options);
      let cmd = noPrefix ? "" : "[command]";
      if (IS_WINDOWS) {
        if (this._isCmdFile()) {
          cmd += toolPath;
          for (const a of args) {
            cmd += ` ${a}`;
          }
        } else if (options.windowsVerbatimArguments) {
          cmd += `"${toolPath}"`;
          for (const a of args) {
            cmd += ` ${a}`;
          }
        } else {
          cmd += this._windowsQuoteCmdArg(toolPath);
          for (const a of args) {
            cmd += ` ${this._windowsQuoteCmdArg(a)}`;
          }
        }
      } else {
        cmd += toolPath;
        for (const a of args) {
          cmd += ` ${a}`;
        }
      }
      return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
      try {
        let s = strBuffer + data.toString();
        let n = s.indexOf(os.EOL);
        while (n > -1) {
          const line = s.substring(0, n);
          onLine(line);
          s = s.substring(n + os.EOL.length);
          n = s.indexOf(os.EOL);
        }
        return s;
      } catch (err) {
        this._debug(`error processing line. Failed with error ${err}`);
        return "";
      }
    }
    _getSpawnFileName() {
      if (IS_WINDOWS) {
        if (this._isCmdFile()) {
          return process.env["COMSPEC"] || "cmd.exe";
        }
      }
      return this.toolPath;
    }
    _getSpawnArgs(options) {
      if (IS_WINDOWS) {
        if (this._isCmdFile()) {
          let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
          for (const a of this.args) {
            argline += " ";
            argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
          }
          argline += '"';
          return [argline];
        }
      }
      return this.args;
    }
    _endsWith(str, end) {
      return str.endsWith(end);
    }
    _isCmdFile() {
      const upperToolPath = this.toolPath.toUpperCase();
      return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
    }
    _windowsQuoteCmdArg(arg) {
      if (!this._isCmdFile()) {
        return this._uvQuoteCmdArg(arg);
      }
      if (!arg) {
        return '""';
      }
      const cmdSpecialChars = [
        " ",
        "\t",
        "&",
        "(",
        ")",
        "[",
        "]",
        "{",
        "}",
        "^",
        "=",
        ";",
        "!",
        "'",
        "+",
        ",",
        "`",
        "~",
        "|",
        "<",
        ">",
        '"'
      ];
      let needsQuotes = false;
      for (const char of arg) {
        if (cmdSpecialChars.some((x) => x === char)) {
          needsQuotes = true;
          break;
        }
      }
      if (!needsQuotes) {
        return arg;
      }
      let reverse = '"';
      let quoteHit = true;
      for (let i = arg.length;i > 0; i--) {
        reverse += arg[i - 1];
        if (quoteHit && arg[i - 1] === "\\") {
          reverse += "\\";
        } else if (arg[i - 1] === '"') {
          quoteHit = true;
          reverse += '"';
        } else {
          quoteHit = false;
        }
      }
      reverse += '"';
      return reverse.split("").reverse().join("");
    }
    _uvQuoteCmdArg(arg) {
      if (!arg) {
        return '""';
      }
      if (!arg.includes(" ") && !arg.includes("\t") && !arg.includes('"')) {
        return arg;
      }
      if (!arg.includes('"') && !arg.includes("\\")) {
        return `"${arg}"`;
      }
      let reverse = '"';
      let quoteHit = true;
      for (let i = arg.length;i > 0; i--) {
        reverse += arg[i - 1];
        if (quoteHit && arg[i - 1] === "\\") {
          reverse += "\\";
        } else if (arg[i - 1] === '"') {
          quoteHit = true;
          reverse += "\\";
        } else {
          quoteHit = false;
        }
      }
      reverse += '"';
      return reverse.split("").reverse().join("");
    }
    _cloneExecOptions(options) {
      options = options || {};
      const result = {
        cwd: options.cwd || process.cwd(),
        env: options.env || process.env,
        silent: options.silent || false,
        windowsVerbatimArguments: options.windowsVerbatimArguments || false,
        failOnStdErr: options.failOnStdErr || false,
        ignoreReturnCode: options.ignoreReturnCode || false,
        delay: options.delay || 1e4
      };
      result.outStream = options.outStream || process.stdout;
      result.errStream = options.errStream || process.stderr;
      return result;
    }
    _getSpawnOptions(options, toolPath) {
      options = options || {};
      const result = {};
      result.cwd = options.cwd;
      result.env = options.env;
      result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
      if (options.windowsVerbatimArguments) {
        result.argv0 = `"${toolPath}"`;
      }
      return result;
    }
    exec() {
      return __awaiter(this, undefined, undefined, function* () {
        if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) {
          this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
        }
        this.toolPath = yield io.which(this.toolPath, true);
        return new Promise((resolve, reject) => __awaiter(this, undefined, undefined, function* () {
          this._debug(`exec tool: ${this.toolPath}`);
          this._debug("arguments:");
          for (const arg of this.args) {
            this._debug(`   ${arg}`);
          }
          const optionsNonNull = this._cloneExecOptions(this.options);
          if (!optionsNonNull.silent && optionsNonNull.outStream) {
            optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
          }
          const state = new ExecState(optionsNonNull, this.toolPath);
          state.on("debug", (message) => {
            this._debug(message);
          });
          if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
            return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
          }
          const fileName = this._getSpawnFileName();
          const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
          let stdbuffer = "";
          if (cp.stdout) {
            cp.stdout.on("data", (data) => {
              if (this.options.listeners && this.options.listeners.stdout) {
                this.options.listeners.stdout(data);
              }
              if (!optionsNonNull.silent && optionsNonNull.outStream) {
                optionsNonNull.outStream.write(data);
              }
              stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                if (this.options.listeners && this.options.listeners.stdline) {
                  this.options.listeners.stdline(line);
                }
              });
            });
          }
          let errbuffer = "";
          if (cp.stderr) {
            cp.stderr.on("data", (data) => {
              state.processStderr = true;
              if (this.options.listeners && this.options.listeners.stderr) {
                this.options.listeners.stderr(data);
              }
              if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
                const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
                s.write(data);
              }
              errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                if (this.options.listeners && this.options.listeners.errline) {
                  this.options.listeners.errline(line);
                }
              });
            });
          }
          cp.on("error", (err) => {
            state.processError = err.message;
            state.processExited = true;
            state.processClosed = true;
            state.CheckComplete();
          });
          cp.on("exit", (code) => {
            state.processExitCode = code;
            state.processExited = true;
            this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
            state.CheckComplete();
          });
          cp.on("close", (code) => {
            state.processExitCode = code;
            state.processExited = true;
            state.processClosed = true;
            this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
            state.CheckComplete();
          });
          state.on("done", (error, exitCode) => {
            if (stdbuffer.length > 0) {
              this.emit("stdline", stdbuffer);
            }
            if (errbuffer.length > 0) {
              this.emit("errline", errbuffer);
            }
            cp.removeAllListeners();
            if (error) {
              reject(error);
            } else {
              resolve(exitCode);
            }
          });
          if (this.options.input) {
            if (!cp.stdin) {
              throw new Error("child process missing stdin");
            }
            cp.stdin.end(this.options.input);
          }
        }));
      });
    }
  }
  exports.ToolRunner = ToolRunner;
  function argStringToArray(argString) {
    const args = [];
    let inQuotes = false;
    let escaped = false;
    let arg = "";
    function append(c) {
      if (escaped && c !== '"') {
        arg += "\\";
      }
      arg += c;
      escaped = false;
    }
    for (let i = 0;i < argString.length; i++) {
      const c = argString.charAt(i);
      if (c === '"') {
        if (!escaped) {
          inQuotes = !inQuotes;
        } else {
          append(c);
        }
        continue;
      }
      if (c === "\\" && escaped) {
        append(c);
        continue;
      }
      if (c === "\\" && inQuotes) {
        escaped = true;
        continue;
      }
      if (c === " " && !inQuotes) {
        if (arg.length > 0) {
          args.push(arg);
          arg = "";
        }
        continue;
      }
      append(c);
    }
    if (arg.length > 0) {
      args.push(arg.trim());
    }
    return args;
  }
  exports.argStringToArray = argStringToArray;

  class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
      super();
      this.processClosed = false;
      this.processError = "";
      this.processExitCode = 0;
      this.processExited = false;
      this.processStderr = false;
      this.delay = 1e4;
      this.done = false;
      this.timeout = null;
      if (!toolPath) {
        throw new Error("toolPath must not be empty");
      }
      this.options = options;
      this.toolPath = toolPath;
      if (options.delay) {
        this.delay = options.delay;
      }
    }
    CheckComplete() {
      if (this.done) {
        return;
      }
      if (this.processClosed) {
        this._setResult();
      } else if (this.processExited) {
        this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
      }
    }
    _debug(message) {
      this.emit("debug", message);
    }
    _setResult() {
      let error;
      if (this.processExited) {
        if (this.processError) {
          error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
        } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
          error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
        } else if (this.processStderr && this.options.failOnStdErr) {
          error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
        }
      }
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }
      this.done = true;
      this.emit("done", error, this.processExitCode);
    }
    static HandleTimeout(state) {
      if (state.done) {
        return;
      }
      if (!state.processClosed && state.processExited) {
        const message = `The STDIO streams did not close within ${state.delay / 1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
        state._debug(message);
      }
      state._setResult();
    }
  }
});

// node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getExecOutput = exports.exec = undefined;
  var string_decoder_1 = __require("string_decoder");
  var tr = __importStar(require_toolrunner());
  function exec(commandLine, args, options) {
    return __awaiter(this, undefined, undefined, function* () {
      const commandArgs = tr.argStringToArray(commandLine);
      if (commandArgs.length === 0) {
        throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
      }
      const toolPath = commandArgs[0];
      args = commandArgs.slice(1).concat(args || []);
      const runner = new tr.ToolRunner(toolPath, args, options);
      return runner.exec();
    });
  }
  exports.exec = exec;
  function getExecOutput(commandLine, args, options) {
    var _a, _b;
    return __awaiter(this, undefined, undefined, function* () {
      let stdout = "";
      let stderr = "";
      const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
      const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
      const originalStdoutListener = (_a = options === null || options === undefined ? undefined : options.listeners) === null || _a === undefined ? undefined : _a.stdout;
      const originalStdErrListener = (_b = options === null || options === undefined ? undefined : options.listeners) === null || _b === undefined ? undefined : _b.stderr;
      const stdErrListener = (data) => {
        stderr += stderrDecoder.write(data);
        if (originalStdErrListener) {
          originalStdErrListener(data);
        }
      };
      const stdOutListener = (data) => {
        stdout += stdoutDecoder.write(data);
        if (originalStdoutListener) {
          originalStdoutListener(data);
        }
      };
      const listeners = Object.assign(Object.assign({}, options === null || options === undefined ? undefined : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
      const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
      stdout += stdoutDecoder.end();
      stderr += stderrDecoder.end();
      return {
        exitCode,
        stdout,
        stderr
      };
    });
  }
  exports.getExecOutput = getExecOutput;
});

// node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = undefined;
  var os_1 = __importDefault(__require("os"));
  var exec = __importStar(require_exec());
  var getWindowsInfo = () => __awaiter(undefined, undefined, undefined, function* () {
    const { stdout: version } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', undefined, {
      silent: true
    });
    const { stdout: name } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', undefined, {
      silent: true
    });
    return {
      name: name.trim(),
      version: version.trim()
    };
  });
  var getMacOsInfo = () => __awaiter(undefined, undefined, undefined, function* () {
    var _a, _b, _c, _d;
    const { stdout } = yield exec.getExecOutput("sw_vers", undefined, {
      silent: true
    });
    const version = (_b = (_a = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a === undefined ? undefined : _a[1]) !== null && _b !== undefined ? _b : "";
    const name = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === undefined ? undefined : _c[1]) !== null && _d !== undefined ? _d : "";
    return {
      name,
      version
    };
  });
  var getLinuxInfo = () => __awaiter(undefined, undefined, undefined, function* () {
    const { stdout } = yield exec.getExecOutput("lsb_release", ["-i", "-r", "-s"], {
      silent: true
    });
    const [name, version] = stdout.trim().split(`
`);
    return {
      name,
      version
    };
  });
  exports.platform = os_1.default.platform();
  exports.arch = os_1.default.arch();
  exports.isWindows = exports.platform === "win32";
  exports.isMacOS = exports.platform === "darwin";
  exports.isLinux = exports.platform === "linux";
  function getDetails() {
    return __awaiter(this, undefined, undefined, function* () {
      return Object.assign(Object.assign({}, yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
        platform: exports.platform,
        arch: exports.arch,
        isWindows: exports.isWindows,
        isMacOS: exports.isMacOS,
        isLinux: exports.isLinux
      });
    });
  }
  exports.getDetails = getDetails;
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = undefined;
  var command_1 = require_command();
  var file_command_1 = require_file_command();
  var utils_1 = require_utils();
  var os = __importStar(__require("os"));
  var path = __importStar(__require("path"));
  var oidc_utils_1 = require_oidc_utils();
  var ExitCode;
  (function(ExitCode2) {
    ExitCode2[ExitCode2["Success"] = 0] = "Success";
    ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
  })(ExitCode || (exports.ExitCode = ExitCode = {}));
  function exportVariable(name, val) {
    const convertedVal = (0, utils_1.toCommandValue)(val);
    process.env[name] = convertedVal;
    const filePath = process.env["GITHUB_ENV"] || "";
    if (filePath) {
      return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name, val));
    }
    (0, command_1.issueCommand)("set-env", { name }, convertedVal);
  }
  exports.exportVariable = exportVariable;
  function setSecret(secret) {
    (0, command_1.issueCommand)("add-mask", {}, secret);
  }
  exports.setSecret = setSecret;
  function addPath(inputPath) {
    const filePath = process.env["GITHUB_PATH"] || "";
    if (filePath) {
      (0, file_command_1.issueFileCommand)("PATH", inputPath);
    } else {
      (0, command_1.issueCommand)("add-path", {}, inputPath);
    }
    process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
  }
  exports.addPath = addPath;
  function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
    if (options && options.required && !val) {
      throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
      return val;
    }
    return val.trim();
  }
  exports.getInput = getInput;
  function getMultilineInput(name, options) {
    const inputs = getInput(name, options).split(`
`).filter((x) => x !== "");
    if (options && options.trimWhitespace === false) {
      return inputs;
    }
    return inputs.map((input) => input.trim());
  }
  exports.getMultilineInput = getMultilineInput;
  function getBooleanInput(name, options) {
    const trueValue = ["true", "True", "TRUE"];
    const falseValue = ["false", "False", "FALSE"];
    const val = getInput(name, options);
    if (trueValue.includes(val))
      return true;
    if (falseValue.includes(val))
      return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
` + `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
  }
  exports.getBooleanInput = getBooleanInput;
  function setOutput(name, value) {
    const filePath = process.env["GITHUB_OUTPUT"] || "";
    if (filePath) {
      return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    process.stdout.write(os.EOL);
    (0, command_1.issueCommand)("set-output", { name }, (0, utils_1.toCommandValue)(value));
  }
  exports.setOutput = setOutput;
  function setCommandEcho(enabled) {
    (0, command_1.issue)("echo", enabled ? "on" : "off");
  }
  exports.setCommandEcho = setCommandEcho;
  function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
  }
  exports.setFailed = setFailed;
  function isDebug() {
    return process.env["RUNNER_DEBUG"] === "1";
  }
  exports.isDebug = isDebug;
  function debug(message) {
    (0, command_1.issueCommand)("debug", {}, message);
  }
  exports.debug = debug;
  function error(message, properties = {}) {
    (0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
  }
  exports.error = error;
  function warning(message, properties = {}) {
    (0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
  }
  exports.warning = warning;
  function notice(message, properties = {}) {
    (0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
  }
  exports.notice = notice;
  function info(message) {
    process.stdout.write(message + os.EOL);
  }
  exports.info = info;
  function startGroup(name) {
    (0, command_1.issue)("group", name);
  }
  exports.startGroup = startGroup;
  function endGroup() {
    (0, command_1.issue)("endgroup");
  }
  exports.endGroup = endGroup;
  function group(name, fn) {
    return __awaiter(this, undefined, undefined, function* () {
      startGroup(name);
      let result;
      try {
        result = yield fn();
      } finally {
        endGroup();
      }
      return result;
    });
  }
  exports.group = group;
  function saveState(name, value) {
    const filePath = process.env["GITHUB_STATE"] || "";
    if (filePath) {
      return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    (0, command_1.issueCommand)("save-state", { name }, (0, utils_1.toCommandValue)(value));
  }
  exports.saveState = saveState;
  function getState(name) {
    return process.env[`STATE_${name}`] || "";
  }
  exports.getState = getState;
  function getIDToken(aud) {
    return __awaiter(this, undefined, undefined, function* () {
      return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
  }
  exports.getIDToken = getIDToken;
  var summary_1 = require_summary();
  Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
    return summary_1.summary;
  } });
  var summary_2 = require_summary();
  Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
    return summary_2.markdownSummary;
  } });
  var path_utils_1 = require_path_utils();
  Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
    return path_utils_1.toPosixPath;
  } });
  Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
    return path_utils_1.toWin32Path;
  } });
  Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
    return path_utils_1.toPlatformPath;
  } });
  exports.platform = __importStar(require_platform());
});

// node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.splitWhen = exports.flatten = undefined;
  function flatten(items) {
    return items.reduce((collection, item) => [].concat(collection, item), []);
  }
  exports.flatten = flatten;
  function splitWhen(items, predicate) {
    const result = [[]];
    let groupIndex = 0;
    for (const item of items) {
      if (predicate(item)) {
        groupIndex++;
        result[groupIndex] = [];
      } else {
        result[groupIndex].push(item);
      }
    }
    return result;
  }
  exports.splitWhen = splitWhen;
});

// node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEnoentCodeError = undefined;
  function isEnoentCodeError(error) {
    return error.code === "ENOENT";
  }
  exports.isEnoentCodeError = isEnoentCodeError;
});

// node_modules/fast-glob/out/utils/fs.js
var require_fs = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createDirentFromStats = undefined;

  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  exports.createDirentFromStats = createDirentFromStats;
});

// node_modules/fast-glob/out/utils/path.js
var require_path = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.convertPosixPathToPattern = exports.convertWindowsPathToPattern = exports.convertPathToPattern = exports.escapePosixPath = exports.escapeWindowsPath = exports.escape = exports.removeLeadingDotSegment = exports.makeAbsolute = exports.unixify = undefined;
  var os = __require("os");
  var path = __require("path");
  var IS_WINDOWS_PLATFORM = os.platform() === "win32";
  var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
  var POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
  var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
  var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
  var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
  function unixify(filepath) {
    return filepath.replace(/\\/g, "/");
  }
  exports.unixify = unixify;
  function makeAbsolute(cwd, filepath) {
    return path.resolve(cwd, filepath);
  }
  exports.makeAbsolute = makeAbsolute;
  function removeLeadingDotSegment(entry) {
    if (entry.charAt(0) === ".") {
      const secondCharactery = entry.charAt(1);
      if (secondCharactery === "/" || secondCharactery === "\\") {
        return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
      }
    }
    return entry;
  }
  exports.removeLeadingDotSegment = removeLeadingDotSegment;
  exports.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
  function escapeWindowsPath(pattern) {
    return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  exports.escapeWindowsPath = escapeWindowsPath;
  function escapePosixPath(pattern) {
    return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  exports.escapePosixPath = escapePosixPath;
  exports.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
  function convertWindowsPathToPattern(filepath) {
    return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
  }
  exports.convertWindowsPathToPattern = convertWindowsPathToPattern;
  function convertPosixPathToPattern(filepath) {
    return escapePosixPath(filepath);
  }
  exports.convertPosixPathToPattern = convertPosixPathToPattern;
});

// node_modules/is-extglob/index.js
var require_is_extglob = __commonJS((exports, module) => {
  /*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  module.exports = function isExtglob(str) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    var match;
    while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
      if (match[2])
        return true;
      str = str.slice(match.index + match[0].length);
    }
    return false;
  };
});

// node_modules/is-glob/index.js
var require_is_glob = __commonJS((exports, module) => {
  /*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  var isExtglob = require_is_extglob();
  var chars = { "{": "}", "(": ")", "[": "]" };
  var strictCheck = function(str) {
    if (str[0] === "!") {
      return true;
    }
    var index = 0;
    var pipeIndex = -2;
    var closeSquareIndex = -2;
    var closeCurlyIndex = -2;
    var closeParenIndex = -2;
    var backSlashIndex = -2;
    while (index < str.length) {
      if (str[index] === "*") {
        return true;
      }
      if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
        return true;
      }
      if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
        if (closeSquareIndex < index) {
          closeSquareIndex = str.indexOf("]", index);
        }
        if (closeSquareIndex > index) {
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
        }
      }
      if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
        closeCurlyIndex = str.indexOf("}", index);
        if (closeCurlyIndex > index) {
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
            return true;
          }
        }
      }
      if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
        closeParenIndex = str.indexOf(")", index);
        if (closeParenIndex > index) {
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
      if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
        if (pipeIndex < index) {
          pipeIndex = str.indexOf("|", index);
        }
        if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
          closeParenIndex = str.indexOf(")", pipeIndex);
          if (closeParenIndex > pipeIndex) {
            backSlashIndex = str.indexOf("\\", pipeIndex);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
      }
      if (str[index] === "\\") {
        var open = str[index + 1];
        index += 2;
        var close = chars[open];
        if (close) {
          var n = str.indexOf(close, index);
          if (n !== -1) {
            index = n + 1;
          }
        }
        if (str[index] === "!") {
          return true;
        }
      } else {
        index++;
      }
    }
    return false;
  };
  var relaxedCheck = function(str) {
    if (str[0] === "!") {
      return true;
    }
    var index = 0;
    while (index < str.length) {
      if (/[*?{}()[\]]/.test(str[index])) {
        return true;
      }
      if (str[index] === "\\") {
        var open = str[index + 1];
        index += 2;
        var close = chars[open];
        if (close) {
          var n = str.indexOf(close, index);
          if (n !== -1) {
            index = n + 1;
          }
        }
        if (str[index] === "!") {
          return true;
        }
      } else {
        index++;
      }
    }
    return false;
  };
  module.exports = function isGlob(str, options) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    if (isExtglob(str)) {
      return true;
    }
    var check = strictCheck;
    if (options && options.strict === false) {
      check = relaxedCheck;
    }
    return check(str);
  };
});

// node_modules/glob-parent/index.js
var require_glob_parent = __commonJS((exports, module) => {
  var isGlob = require_is_glob();
  var pathPosixDirname = __require("path").posix.dirname;
  var isWin32 = __require("os").platform() === "win32";
  var slash = "/";
  var backslash = /\\/g;
  var enclosure = /[\{\[].*[\}\]]$/;
  var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
  var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
  module.exports = function globParent(str, opts) {
    var options = Object.assign({ flipBackslashes: true }, opts);
    if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
      str = str.replace(backslash, slash);
    }
    if (enclosure.test(str)) {
      str += slash;
    }
    str += "a";
    do {
      str = pathPosixDirname(str);
    } while (isGlob(str) || globby.test(str));
    return str.replace(escaped, "$1");
  };
});

// node_modules/braces/lib/utils.js
var require_utils3 = __commonJS((exports) => {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type) => {
    const node = block.nodes[n];
    if (!node)
      return;
    if (type && node.type === type || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0;i < arr.length; i++) {
        const ele = arr[i];
        if (Array.isArray(ele)) {
          flat(ele);
          continue;
        }
        if (ele !== undefined) {
          result.push(ele);
        }
      }
      return result;
    };
    flat(args);
    return result;
  };
});

// node_modules/braces/lib/stringify.js
var require_stringify = __commonJS((exports, module) => {
  var utils = require_utils3();
  module.exports = (ast, options = {}) => {
    const stringify = (node, parent = {}) => {
      const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
      const invalidNode = node.invalid === true && options.escapeInvalid === true;
      let output = "";
      if (node.value) {
        if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
          return "\\" + node.value;
        }
        return node.value;
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes) {
        for (const child of node.nodes) {
          output += stringify(child);
        }
      }
      return output;
    };
    return stringify(ast);
  };
});

// node_modules/is-number/index.js
var require_is_number = __commonJS((exports, module) => {
  /*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  module.exports = function(num) {
    if (typeof num === "number") {
      return num - num === 0;
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
    }
    return false;
  };
});

// node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS((exports, module) => {
  /*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  var isNumber = require_is_number();
  var toRegexRange = (min, max, options) => {
    if (isNumber(min) === false) {
      throw new TypeError("toRegexRange: expected the first argument to be a number");
    }
    if (max === undefined || min === max) {
      return String(min);
    }
    if (isNumber(max) === false) {
      throw new TypeError("toRegexRange: expected the second argument to be a number.");
    }
    let opts = { relaxZeros: true, ...options };
    if (typeof opts.strictZeros === "boolean") {
      opts.relaxZeros = opts.strictZeros === false;
    }
    let relax = String(opts.relaxZeros);
    let shorthand = String(opts.shorthand);
    let capture = String(opts.capture);
    let wrap = String(opts.wrap);
    let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
    if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
      return toRegexRange.cache[cacheKey].result;
    }
    let a = Math.min(min, max);
    let b = Math.max(min, max);
    if (Math.abs(a - b) === 1) {
      let result = min + "|" + max;
      if (opts.capture) {
        return `(${result})`;
      }
      if (opts.wrap === false) {
        return result;
      }
      return `(?:${result})`;
    }
    let isPadded = hasPadding(min) || hasPadding(max);
    let state = { min, max, a, b };
    let positives = [];
    let negatives = [];
    if (isPadded) {
      state.isPadded = isPadded;
      state.maxLen = String(state.max).length;
    }
    if (a < 0) {
      let newMin = b < 0 ? Math.abs(b) : 1;
      negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
      a = state.a = 0;
    }
    if (b >= 0) {
      positives = splitToPatterns(a, b, state, opts);
    }
    state.negatives = negatives;
    state.positives = positives;
    state.result = collatePatterns(negatives, positives, opts);
    if (opts.capture === true) {
      state.result = `(${state.result})`;
    } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
      state.result = `(?:${state.result})`;
    }
    toRegexRange.cache[cacheKey] = state;
    return state.result;
  };
  function collatePatterns(neg, pos, options) {
    let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
    let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
    let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
    let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
    return subpatterns.join("|");
  }
  function splitToRanges(min, max) {
    let nines = 1;
    let zeros = 1;
    let stop = countNines(min, nines);
    let stops = new Set([max]);
    while (min <= stop && stop <= max) {
      stops.add(stop);
      nines += 1;
      stop = countNines(min, nines);
    }
    stop = countZeros(max + 1, zeros) - 1;
    while (min < stop && stop <= max) {
      stops.add(stop);
      zeros += 1;
      stop = countZeros(max + 1, zeros) - 1;
    }
    stops = [...stops];
    stops.sort(compare);
    return stops;
  }
  function rangeToPattern(start, stop, options) {
    if (start === stop) {
      return { pattern: start, count: [], digits: 0 };
    }
    let zipped = zip(start, stop);
    let digits = zipped.length;
    let pattern = "";
    let count = 0;
    for (let i = 0;i < digits; i++) {
      let [startDigit, stopDigit] = zipped[i];
      if (startDigit === stopDigit) {
        pattern += startDigit;
      } else if (startDigit !== "0" || stopDigit !== "9") {
        pattern += toCharacterClass(startDigit, stopDigit, options);
      } else {
        count++;
      }
    }
    if (count) {
      pattern += options.shorthand === true ? "\\d" : "[0-9]";
    }
    return { pattern, count: [count], digits };
  }
  function splitToPatterns(min, max, tok, options) {
    let ranges = splitToRanges(min, max);
    let tokens = [];
    let start = min;
    let prev;
    for (let i = 0;i < ranges.length; i++) {
      let max2 = ranges[i];
      let obj = rangeToPattern(String(start), String(max2), options);
      let zeros = "";
      if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
        if (prev.count.length > 1) {
          prev.count.pop();
        }
        prev.count.push(obj.count[0]);
        prev.string = prev.pattern + toQuantifier(prev.count);
        start = max2 + 1;
        continue;
      }
      if (tok.isPadded) {
        zeros = padZeros(max2, tok, options);
      }
      obj.string = zeros + obj.pattern + toQuantifier(obj.count);
      tokens.push(obj);
      start = max2 + 1;
      prev = obj;
    }
    return tokens;
  }
  function filterPatterns(arr, comparison, prefix, intersection, options) {
    let result = [];
    for (let ele of arr) {
      let { string } = ele;
      if (!intersection && !contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
      if (intersection && contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
    }
    return result;
  }
  function zip(a, b) {
    let arr = [];
    for (let i = 0;i < a.length; i++)
      arr.push([a[i], b[i]]);
    return arr;
  }
  function compare(a, b) {
    return a > b ? 1 : b > a ? -1 : 0;
  }
  function contains(arr, key, val) {
    return arr.some((ele) => ele[key] === val);
  }
  function countNines(min, len) {
    return Number(String(min).slice(0, -len) + "9".repeat(len));
  }
  function countZeros(integer, zeros) {
    return integer - integer % Math.pow(10, zeros);
  }
  function toQuantifier(digits) {
    let [start = 0, stop = ""] = digits;
    if (stop || start > 1) {
      return `{${start + (stop ? "," + stop : "")}}`;
    }
    return "";
  }
  function toCharacterClass(a, b, options) {
    return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
  }
  function hasPadding(str) {
    return /^-?(0+)\d/.test(str);
  }
  function padZeros(value, tok, options) {
    if (!tok.isPadded) {
      return value;
    }
    let diff = Math.abs(tok.maxLen - String(value).length);
    let relax = options.relaxZeros !== false;
    switch (diff) {
      case 0:
        return "";
      case 1:
        return relax ? "0?" : "0";
      case 2:
        return relax ? "0{0,2}" : "00";
      default: {
        return relax ? `0{0,${diff}}` : `0{${diff}}`;
      }
    }
  }
  toRegexRange.cache = {};
  toRegexRange.clearCache = () => toRegexRange.cache = {};
  module.exports = toRegexRange;
});

// node_modules/fill-range/index.js
var require_fill_range = __commonJS((exports, module) => {
  /*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  var util = __require("util");
  var toRegexRange = require_to_regex_range();
  var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  var transform = (toNumber) => {
    return (value) => toNumber === true ? Number(value) : String(value);
  };
  var isValidValue = (value) => {
    return typeof value === "number" || typeof value === "string" && value !== "";
  };
  var isNumber = (num) => Number.isInteger(+num);
  var zeros = (input) => {
    let value = `${input}`;
    let index = -1;
    if (value[0] === "-")
      value = value.slice(1);
    if (value === "0")
      return false;
    while (value[++index] === "0")
      ;
    return index > 0;
  };
  var stringify = (start, end, options) => {
    if (typeof start === "string" || typeof end === "string") {
      return true;
    }
    return options.stringify === true;
  };
  var pad = (input, maxLength, toNumber) => {
    if (maxLength > 0) {
      let dash = input[0] === "-" ? "-" : "";
      if (dash)
        input = input.slice(1);
      input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
    }
    if (toNumber === false) {
      return String(input);
    }
    return input;
  };
  var toMaxLen = (input, maxLength) => {
    let negative = input[0] === "-" ? "-" : "";
    if (negative) {
      input = input.slice(1);
      maxLength--;
    }
    while (input.length < maxLength)
      input = "0" + input;
    return negative ? "-" + input : input;
  };
  var toSequence = (parts, options, maxLen) => {
    parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    let prefix = options.capture ? "" : "?:";
    let positives = "";
    let negatives = "";
    let result;
    if (parts.positives.length) {
      positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
    }
    if (parts.negatives.length) {
      negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
    }
    if (positives && negatives) {
      result = `${positives}|${negatives}`;
    } else {
      result = positives || negatives;
    }
    if (options.wrap) {
      return `(${prefix}${result})`;
    }
    return result;
  };
  var toRange = (a, b, isNumbers, options) => {
    if (isNumbers) {
      return toRegexRange(a, b, { wrap: false, ...options });
    }
    let start = String.fromCharCode(a);
    if (a === b)
      return start;
    let stop = String.fromCharCode(b);
    return `[${start}-${stop}]`;
  };
  var toRegex = (start, end, options) => {
    if (Array.isArray(start)) {
      let wrap = options.wrap === true;
      let prefix = options.capture ? "" : "?:";
      return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
    }
    return toRegexRange(start, end, options);
  };
  var rangeError = (...args) => {
    return new RangeError("Invalid range arguments: " + util.inspect(...args));
  };
  var invalidRange = (start, end, options) => {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  };
  var invalidStep = (step, options) => {
    if (options.strictRanges === true) {
      throw new TypeError(`Expected step "${step}" to be a number`);
    }
    return [];
  };
  var fillNumbers = (start, end, step = 1, options = {}) => {
    let a = Number(start);
    let b = Number(end);
    if (!Number.isInteger(a) || !Number.isInteger(b)) {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    }
    if (a === 0)
      a = 0;
    if (b === 0)
      b = 0;
    let descending = a > b;
    let startString = String(start);
    let endString = String(end);
    let stepString = String(step);
    step = Math.max(Math.abs(step), 1);
    let padded = zeros(startString) || zeros(endString) || zeros(stepString);
    let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
    let toNumber = padded === false && stringify(start, end, options) === false;
    let format = options.transform || transform(toNumber);
    if (options.toRegex && step === 1) {
      return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
    }
    let parts = { negatives: [], positives: [] };
    let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      if (options.toRegex === true && step > 1) {
        push(a);
      } else {
        range.push(pad(format(a, index), maxLen, toNumber));
      }
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range, null, { wrap: false, ...options });
    }
    return range;
  };
  var fillLetters = (start, end, step = 1, options = {}) => {
    if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
      return invalidRange(start, end, options);
    }
    let format = options.transform || ((val) => String.fromCharCode(val));
    let a = `${start}`.charCodeAt(0);
    let b = `${end}`.charCodeAt(0);
    let descending = a > b;
    let min = Math.min(a, b);
    let max = Math.max(a, b);
    if (options.toRegex && step === 1) {
      return toRange(min, max, false, options);
    }
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      range.push(format(a, index));
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return toRegex(range, null, { wrap: false, options });
    }
    return range;
  };
  var fill = (start, end, step, options = {}) => {
    if (end == null && isValidValue(start)) {
      return [start];
    }
    if (!isValidValue(start) || !isValidValue(end)) {
      return invalidRange(start, end, options);
    }
    if (typeof step === "function") {
      return fill(start, end, 1, { transform: step });
    }
    if (isObject(step)) {
      return fill(start, end, 0, step);
    }
    let opts = { ...options };
    if (opts.capture === true)
      opts.wrap = true;
    step = step || opts.step || 1;
    if (!isNumber(step)) {
      if (step != null && !isObject(step))
        return invalidStep(step, opts);
      return fill(start, end, 1, step);
    }
    if (isNumber(start) && isNumber(end)) {
      return fillNumbers(start, end, step, opts);
    }
    return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
  };
  module.exports = fill;
});

// node_modules/braces/lib/compile.js
var require_compile = __commonJS((exports, module) => {
  var fill = require_fill_range();
  var utils = require_utils3();
  var compile = (ast, options = {}) => {
    const walk = (node, parent = {}) => {
      const invalidBlock = utils.isInvalidBrace(parent);
      const invalidNode = node.invalid === true && options.escapeInvalid === true;
      const invalid = invalidBlock === true || invalidNode === true;
      const prefix = options.escapeInvalid === true ? "\\" : "";
      let output = "";
      if (node.isOpen === true) {
        return prefix + node.value;
      }
      if (node.isClose === true) {
        console.log("node.isClose", prefix, node.value);
        return prefix + node.value;
      }
      if (node.type === "open") {
        return invalid ? prefix + node.value : "(";
      }
      if (node.type === "close") {
        return invalid ? prefix + node.value : ")";
      }
      if (node.type === "comma") {
        return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes && node.ranges > 0) {
        const args = utils.reduce(node.nodes);
        const range = fill(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
        if (range.length !== 0) {
          return args.length > 1 && range.length > 1 ? `(${range})` : range;
        }
      }
      if (node.nodes) {
        for (const child of node.nodes) {
          output += walk(child, node);
        }
      }
      return output;
    };
    return walk(ast);
  };
  module.exports = compile;
});

// node_modules/braces/lib/expand.js
var require_expand = __commonJS((exports, module) => {
  var fill = require_fill_range();
  var stringify = require_stringify();
  var utils = require_utils3();
  var append = (queue = "", stash = "", enclose = false) => {
    const result = [];
    queue = [].concat(queue);
    stash = [].concat(stash);
    if (!stash.length)
      return queue;
    if (!queue.length) {
      return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
    }
    for (const item of queue) {
      if (Array.isArray(item)) {
        for (const value of item) {
          result.push(append(value, stash, enclose));
        }
      } else {
        for (let ele of stash) {
          if (enclose === true && typeof ele === "string")
            ele = `{${ele}}`;
          result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
        }
      }
    }
    return utils.flatten(result);
  };
  var expand = (ast, options = {}) => {
    const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;
    const walk = (node, parent = {}) => {
      node.queue = [];
      let p = parent;
      let q = parent.queue;
      while (p.type !== "brace" && p.type !== "root" && p.parent) {
        p = p.parent;
        q = p.queue;
      }
      if (node.invalid || node.dollar) {
        q.push(append(q.pop(), stringify(node, options)));
        return;
      }
      if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
        q.push(append(q.pop(), ["{}"]));
        return;
      }
      if (node.nodes && node.ranges > 0) {
        const args = utils.reduce(node.nodes);
        if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
          throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
        }
        let range = fill(...args, options);
        if (range.length === 0) {
          range = stringify(node, options);
        }
        q.push(append(q.pop(), range));
        node.nodes = [];
        return;
      }
      const enclose = utils.encloseBrace(node);
      let queue = node.queue;
      let block = node;
      while (block.type !== "brace" && block.type !== "root" && block.parent) {
        block = block.parent;
        queue = block.queue;
      }
      for (let i = 0;i < node.nodes.length; i++) {
        const child = node.nodes[i];
        if (child.type === "comma" && node.type === "brace") {
          if (i === 1)
            queue.push("");
          queue.push("");
          continue;
        }
        if (child.type === "close") {
          q.push(append(q.pop(), queue, enclose));
          continue;
        }
        if (child.value && child.type !== "open") {
          queue.push(append(queue.pop(), child.value));
          continue;
        }
        if (child.nodes) {
          walk(child, node);
        }
      }
      return queue;
    };
    return utils.flatten(walk(ast));
  };
  module.exports = expand;
});

// node_modules/braces/lib/constants.js
var require_constants6 = __commonJS((exports, module) => {
  module.exports = {
    MAX_LENGTH: 1e4,
    CHAR_0: "0",
    CHAR_9: "9",
    CHAR_UPPERCASE_A: "A",
    CHAR_LOWERCASE_A: "a",
    CHAR_UPPERCASE_Z: "Z",
    CHAR_LOWERCASE_Z: "z",
    CHAR_LEFT_PARENTHESES: "(",
    CHAR_RIGHT_PARENTHESES: ")",
    CHAR_ASTERISK: "*",
    CHAR_AMPERSAND: "&",
    CHAR_AT: "@",
    CHAR_BACKSLASH: "\\",
    CHAR_BACKTICK: "`",
    CHAR_CARRIAGE_RETURN: "\r",
    CHAR_CIRCUMFLEX_ACCENT: "^",
    CHAR_COLON: ":",
    CHAR_COMMA: ",",
    CHAR_DOLLAR: "$",
    CHAR_DOT: ".",
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: "=",
    CHAR_EXCLAMATION_MARK: "!",
    CHAR_FORM_FEED: "\f",
    CHAR_FORWARD_SLASH: "/",
    CHAR_HASH: "#",
    CHAR_HYPHEN_MINUS: "-",
    CHAR_LEFT_ANGLE_BRACKET: "<",
    CHAR_LEFT_CURLY_BRACE: "{",
    CHAR_LEFT_SQUARE_BRACKET: "[",
    CHAR_LINE_FEED: `
`,
    CHAR_NO_BREAK_SPACE: " ",
    CHAR_PERCENT: "%",
    CHAR_PLUS: "+",
    CHAR_QUESTION_MARK: "?",
    CHAR_RIGHT_ANGLE_BRACKET: ">",
    CHAR_RIGHT_CURLY_BRACE: "}",
    CHAR_RIGHT_SQUARE_BRACKET: "]",
    CHAR_SEMICOLON: ";",
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: " ",
    CHAR_TAB: "\t",
    CHAR_UNDERSCORE: "_",
    CHAR_VERTICAL_LINE: "|",
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  };
});

// node_modules/braces/lib/parse.js
var require_parse2 = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var {
    MAX_LENGTH,
    CHAR_BACKSLASH,
    CHAR_BACKTICK,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_LEFT_PARENTHESES,
    CHAR_RIGHT_PARENTHESES,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_RIGHT_SQUARE_BRACKET,
    CHAR_DOUBLE_QUOTE,
    CHAR_SINGLE_QUOTE,
    CHAR_NO_BREAK_SPACE,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE
  } = require_constants6();
  var parse = (input, options = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    const opts = options || {};
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    if (input.length > max) {
      throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
    }
    const ast = { type: "root", input, nodes: [] };
    const stack = [ast];
    let block = ast;
    let prev = ast;
    let brackets = 0;
    const length = input.length;
    let index = 0;
    let depth = 0;
    let value;
    const advance = () => input[index++];
    const push = (node) => {
      if (node.type === "text" && prev.type === "dot") {
        prev.type = "text";
      }
      if (prev && prev.type === "text" && node.type === "text") {
        prev.value += node.value;
        return;
      }
      block.nodes.push(node);
      node.parent = block;
      node.prev = prev;
      prev = node;
      return node;
    };
    push({ type: "bos" });
    while (index < length) {
      block = stack[stack.length - 1];
      value = advance();
      if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
        continue;
      }
      if (value === CHAR_BACKSLASH) {
        push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
        continue;
      }
      if (value === CHAR_RIGHT_SQUARE_BRACKET) {
        push({ type: "text", value: "\\" + value });
        continue;
      }
      if (value === CHAR_LEFT_SQUARE_BRACKET) {
        brackets++;
        let next;
        while (index < length && (next = advance())) {
          value += next;
          if (next === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            continue;
          }
          if (next === CHAR_BACKSLASH) {
            value += advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            brackets--;
            if (brackets === 0) {
              break;
            }
          }
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_PARENTHESES) {
        block = push({ type: "paren", nodes: [] });
        stack.push(block);
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_RIGHT_PARENTHESES) {
        if (block.type !== "paren") {
          push({ type: "text", value });
          continue;
        }
        block = stack.pop();
        push({ type: "text", value });
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
        const open = value;
        let next;
        if (options.keepQuotes !== true) {
          value = "";
        }
        while (index < length && (next = advance())) {
          if (next === CHAR_BACKSLASH) {
            value += next + advance();
            continue;
          }
          if (next === open) {
            if (options.keepQuotes === true)
              value += next;
            break;
          }
          value += next;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_CURLY_BRACE) {
        depth++;
        const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
        const brace = {
          type: "brace",
          open: true,
          close: false,
          dollar,
          depth,
          commas: 0,
          ranges: 0,
          nodes: []
        };
        block = push(brace);
        stack.push(block);
        push({ type: "open", value });
        continue;
      }
      if (value === CHAR_RIGHT_CURLY_BRACE) {
        if (block.type !== "brace") {
          push({ type: "text", value });
          continue;
        }
        const type = "close";
        block = stack.pop();
        block.close = true;
        push({ type, value });
        depth--;
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_COMMA && depth > 0) {
        if (block.ranges > 0) {
          block.ranges = 0;
          const open = block.nodes.shift();
          block.nodes = [open, { type: "text", value: stringify(block) }];
        }
        push({ type: "comma", value });
        block.commas++;
        continue;
      }
      if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
        const siblings = block.nodes;
        if (depth === 0 || siblings.length === 0) {
          push({ type: "text", value });
          continue;
        }
        if (prev.type === "dot") {
          block.range = [];
          prev.value += value;
          prev.type = "range";
          if (block.nodes.length !== 3 && block.nodes.length !== 5) {
            block.invalid = true;
            block.ranges = 0;
            prev.type = "text";
            continue;
          }
          block.ranges++;
          block.args = [];
          continue;
        }
        if (prev.type === "range") {
          siblings.pop();
          const before = siblings[siblings.length - 1];
          before.value += prev.value + value;
          prev = before;
          block.ranges--;
          continue;
        }
        push({ type: "dot", value });
        continue;
      }
      push({ type: "text", value });
    }
    do {
      block = stack.pop();
      if (block.type !== "root") {
        block.nodes.forEach((node) => {
          if (!node.nodes) {
            if (node.type === "open")
              node.isOpen = true;
            if (node.type === "close")
              node.isClose = true;
            if (!node.nodes)
              node.type = "text";
            node.invalid = true;
          }
        });
        const parent = stack[stack.length - 1];
        const index2 = parent.nodes.indexOf(block);
        parent.nodes.splice(index2, 1, ...block.nodes);
      }
    } while (stack.length > 0);
    push({ type: "eos" });
    return ast;
  };
  module.exports = parse;
});

// node_modules/braces/index.js
var require_braces = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var compile = require_compile();
  var expand = require_expand();
  var parse = require_parse2();
  var braces = (input, options = {}) => {
    let output = [];
    if (Array.isArray(input)) {
      for (const pattern of input) {
        const result = braces.create(pattern, options);
        if (Array.isArray(result)) {
          output.push(...result);
        } else {
          output.push(result);
        }
      }
    } else {
      output = [].concat(braces.create(input, options));
    }
    if (options && options.expand === true && options.nodupes === true) {
      output = [...new Set(output)];
    }
    return output;
  };
  braces.parse = (input, options = {}) => parse(input, options);
  braces.stringify = (input, options = {}) => {
    if (typeof input === "string") {
      return stringify(braces.parse(input, options), options);
    }
    return stringify(input, options);
  };
  braces.compile = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    return compile(input, options);
  };
  braces.expand = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    let result = expand(input, options);
    if (options.noempty === true) {
      result = result.filter(Boolean);
    }
    if (options.nodupes === true) {
      result = [...new Set(result)];
    }
    return result;
  };
  braces.create = (input, options = {}) => {
    if (input === "" || input.length < 3) {
      return [input];
    }
    return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
  };
  module.exports = braces;
});

// node_modules/picomatch/lib/constants.js
var require_constants7 = __commonJS((exports, module) => {
  var path = __require("path");
  var WIN_SLASH = "\\\\/";
  var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  var DOT_LITERAL = "\\.";
  var PLUS_LITERAL = "\\+";
  var QMARK_LITERAL = "\\?";
  var SLASH_LITERAL = "\\/";
  var ONE_CHAR = "(?=.)";
  var QMARK = "[^/]";
  var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  var NO_DOT = `(?!${DOT_LITERAL})`;
  var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  var STAR = `${QMARK}*?`;
  var POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  var WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  var POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  module.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path.sep,
    extglobChars(chars) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" }
      };
    },
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
});

// node_modules/picomatch/lib/utils.js
var require_utils4 = __commonJS((exports) => {
  var path = __require("path");
  var win32 = process.platform === "win32";
  var {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = require_constants7();
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
});

// node_modules/picomatch/lib/scan.js
var require_scan = __commonJS((exports, module) => {
  var utils = require_utils4();
  var {
    CHAR_ASTERISK,
    CHAR_AT,
    CHAR_BACKWARD_SLASH,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_EXCLAMATION_MARK,
    CHAR_FORWARD_SLASH,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_LEFT_PARENTHESES,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_PLUS,
    CHAR_QUESTION_MARK,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_RIGHT_PARENTHESES,
    CHAR_RIGHT_SQUARE_BRACKET
  } = require_constants7();
  var isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  var depth = (token) => {
    if (token.isPrefix !== true) {
      token.depth = token.isGlobstar ? Infinity : 1;
    }
  };
  var scan = (input, options) => {
    const opts = options || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = { value: "", depth: 0, isGlob: false };
    const eos = () => index >= length;
    const peek = () => str.charCodeAt(index + 1);
    const advance = () => {
      prev = code;
      return str.charCodeAt(++index);
    };
    while (index < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
        braces++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE) {
            braces--;
            if (braces === 0) {
              braceEscaped = false;
              isBrace = token.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index);
        tokens.push(token);
        token = { value: "", depth: 0, isGlob: false };
        if (finished === true)
          continue;
        if (prev === CHAR_DOT && index === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          isExtglob = token.isExtglob = true;
          finished = true;
          if (code === CHAR_EXCLAMATION_MARK && index === start) {
            negatedExtglob = true;
          }
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK) {
        if (prev === CHAR_ASTERISK)
          isGlobstar = token.isGlobstar = true;
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            isBracket = token.isBracket = true;
            isGlob = token.isGlob = true;
            finished = true;
            break;
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
        negated = token.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base = str;
    let prefix = "";
    let glob = "";
    if (start > 0) {
      prefix = str.slice(0, start);
      str = str.slice(start);
      lastIndex -= start;
    }
    if (base && isGlob === true && lastIndex > 0) {
      base = str.slice(0, lastIndex);
      glob = str.slice(lastIndex);
    } else if (isGlob === true) {
      base = "";
      glob = str;
    } else {
      base = str;
    }
    if (base && base !== "" && base !== "/" && base !== str) {
      if (isPathSeparator(base.charCodeAt(base.length - 1))) {
        base = base.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob)
        glob = utils.removeBackslashes(glob);
      if (base && backslashes === true) {
        base = utils.removeBackslashes(base);
      }
    }
    const state = {
      prefix,
      input,
      start,
      base,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated,
      negatedExtglob
    };
    if (opts.tokens === true) {
      state.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token);
      }
      state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0;idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value = input.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix;
          } else {
            tokens[idx].value = value;
          }
          depth(tokens[idx]);
          state.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value !== "") {
          parts.push(value);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input.length) {
        const value = input.slice(prevIndex + 1);
        parts.push(value);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value;
          depth(tokens[tokens.length - 1]);
          state.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state.slashes = slashes;
      state.parts = parts;
    }
    return state;
  };
  module.exports = scan;
});

// node_modules/picomatch/lib/parse.js
var require_parse3 = __commonJS((exports, module) => {
  var constants = require_constants7();
  var utils = require_utils4();
  var {
    MAX_LENGTH,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants;
  var expandRange = (args, options) => {
    if (typeof options.expandRange === "function") {
      return options.expandRange(...args, options);
    }
    args.sort();
    const value = `[${args.join("-")}]`;
    try {
      new RegExp(value);
    } catch (ex) {
      return args.map((v) => utils.escapeRegex(v)).join("..");
    }
    return value;
  };
  var syntaxError = (type, char) => {
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  var parse = (input, options) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    input = REPLACEMENTS[input] || input;
    const opts = { ...options };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    let len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = { type: "bos", value: "", output: opts.prepend || "" };
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils.isWindows(options);
    const PLATFORM_CHARS = constants.globChars(win32);
    const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state = {
      input,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input = utils.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    const eos = () => state.index === len - 1;
    const peek = state.peek = (n = 1) => input[state.index + n];
    const advance = state.advance = () => input[++state.index] || "";
    const remaining = () => input.slice(state.index + 1);
    const consume = (value2 = "", num = 0) => {
      state.consumed += value2;
      state.index += num;
    };
    const append = (token) => {
      state.output += token.output != null ? token.output : token.value;
      consume(token.value);
    };
    const negate = () => {
      let count = 1;
      while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
        advance();
        state.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state.negated = true;
      state.start++;
      return true;
    };
    const increment = (type) => {
      state[type]++;
      stack.push(type);
    };
    const decrement = (type) => {
      state[type]--;
      stack.pop();
    };
    const push = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren") {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output)
        append(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type, value2) => {
      const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
      token.prev = prev;
      token.parens = state.parens;
      token.output = state.output;
      const output = (opts.capture ? "(" : "") + token.open;
      increment("parens");
      push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
      push({ type: "paren", extglob: true, value: advance(), output });
      extglobs.push(token);
    };
    const extglobClose = (token) => {
      let output = token.close + (opts.capture ? ")" : "");
      let rest;
      if (token.type === "negate") {
        let extglobStar = star;
        if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token.close = `)$))${extglobStar}`;
        }
        if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
          const expression = parse(rest, { ...options, fastpaths: false }).output;
          output = token.close = `)${expression})${extglobStar})`;
        }
        if (token.prev.type === "bos") {
          state.negatedExtglob = true;
        }
      }
      push({ type: "paren", extglob: true, value, output });
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
      let backslashes = false;
      let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input && opts.contains === true) {
        state.output = input;
        return state;
      }
      state.output = utils.wrapOutput(output, state, options);
      return state;
    }
    while (!eos()) {
      value = advance();
      if (value === "\x00") {
        continue;
      }
      if (value === "\\") {
        const next = peek();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value += "\\";
          push({ type: "text", value });
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state.index += slashes;
          if (slashes % 2 !== 0) {
            value += "\\";
          }
        }
        if (opts.unescape === true) {
          value = advance();
        } else {
          value += advance();
        }
        if (state.brackets === 0) {
          push({ type: "text", value });
          continue;
        }
      }
      if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
          value = `\\${value}`;
        }
        if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
          value = `\\${value}`;
        }
        if (opts.posix === true && value === "!" && prev.value === "[") {
          value = "^";
        }
        prev.value += value;
        append({ value });
        continue;
      }
      if (state.quotes === 1 && value !== '"') {
        value = utils.escapeRegex(value);
        prev.value += value;
        append({ value });
        continue;
      }
      if (value === '"') {
        state.quotes = state.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push({ type: "text", value });
        }
        continue;
      }
      if (value === "(") {
        increment("parens");
        push({ type: "paren", value });
        continue;
      }
      if (value === ")") {
        if (state.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
        decrement("parens");
        continue;
      }
      if (value === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("closing", "]"));
          }
          value = `\\${value}`;
        } else {
          increment("brackets");
        }
        push({ type: "bracket", value });
        continue;
      }
      if (value === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        if (state.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "["));
          }
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value = `/${value}`;
        }
        prev.value += value;
        append({ value });
        if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils.escapeRegex(prev.value);
        state.output = state.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state.output += prev.value;
        continue;
      }
      if (value === "{" && opts.nobrace !== true) {
        increment("braces");
        const open = {
          type: "brace",
          value,
          output: "(",
          outputIndex: state.output.length,
          tokensIndex: state.tokens.length
        };
        braces.push(open);
        push(open);
        continue;
      }
      if (value === "}") {
        const brace = braces[braces.length - 1];
        if (opts.nobrace === true || !brace) {
          push({ type: "text", value, output: value });
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1;i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state.output.slice(0, brace.outputIndex);
          const toks = state.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value = output = "\\}";
          state.output = out;
          for (const t of toks) {
            state.output += t.output || t.value;
          }
        }
        push({ type: "brace", value, output });
        decrement("braces");
        braces.pop();
        continue;
      }
      if (value === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === ",") {
        let output = value;
        const brace = braces[braces.length - 1];
        if (brace && stack[stack.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push({ type: "comma", value, output });
        continue;
      }
      if (value === "/") {
        if (prev.type === "dot" && state.index === state.start + 1) {
          state.start = state.index + 1;
          state.consumed = "";
          state.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push({ type: "slash", value, output: SLASH_LITERAL });
        continue;
      }
      if (value === ".") {
        if (state.braces > 0 && prev.type === "dot") {
          if (prev.value === ".")
            prev.output = DOT_LITERAL;
          const brace = braces[braces.length - 1];
          prev.type = "dots";
          prev.output += value;
          prev.value += value;
          brace.dots = true;
          continue;
        }
        if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push({ type: "text", value, output: DOT_LITERAL });
          continue;
        }
        push({ type: "dot", value, output: DOT_LITERAL });
        continue;
      }
      if (value === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("qmark", value);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek();
          let output = value;
          if (next === "<" && !utils.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value}`;
          }
          push({ type: "text", value, output });
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push({ type: "qmark", value, output: QMARK_NO_DOT });
          continue;
        }
        push({ type: "qmark", value, output: QMARK });
        continue;
      }
      if (value === "!") {
        if (opts.noextglob !== true && peek() === "(") {
          if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
            extglobOpen("negate", value);
            continue;
          }
        }
        if (opts.nonegate !== true && state.index === 0) {
          negate();
          continue;
        }
      }
      if (value === "+") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("plus", value);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push({ type: "plus", value, output: PLUS_LITERAL });
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
          push({ type: "plus", value });
          continue;
        }
        push({ type: "plus", value: PLUS_LITERAL });
        continue;
      }
      if (value === "@") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          push({ type: "at", extglob: true, value, output: "" });
          continue;
        }
        push({ type: "text", value });
        continue;
      }
      if (value !== "*") {
        if (value === "$" || value === "^") {
          value = `\\${value}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value += match[0];
          state.index += match[0].length;
        }
        push({ type: "text", value });
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value;
        prev.output = star;
        state.backtrack = true;
        state.globstar = true;
        consume(value);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push({ type: "star", value, output: "" });
          continue;
        }
        const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push({ type: "star", value, output: "" });
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input[state.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value;
          prev.output = globstar(opts);
          state.output = prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value;
          state.globstar = true;
          state.output += prior.output + prev.output;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== undefined ? "|$" : "";
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value;
          state.output += prior.output + prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state.output = prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value;
        state.output += prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      const token = { type: "star", value, output: star };
      if (opts.bash === true) {
        token.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token.output = nodot + token.output;
        }
        push(token);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token.output = value;
        push(token);
        continue;
      }
      if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state.output += nodot;
          prev.output += nodot;
        }
        if (peek() !== "*") {
          state.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push(token);
    }
    while (state.brackets > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "]"));
      state.output = utils.escapeLast(state.output, "[");
      decrement("brackets");
    }
    while (state.parens > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", ")"));
      state.output = utils.escapeLast(state.output, "(");
      decrement("parens");
    }
    while (state.braces > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "}"));
      state.output = utils.escapeLast(state.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
    }
    if (state.backtrack === true) {
      state.output = "";
      for (const token of state.tokens) {
        state.output += token.output != null ? token.output : token.value;
        if (token.suffix) {
          state.output += token.suffix;
        }
      }
    }
    return state;
  };
  parse.fastpaths = (input, options) => {
    const opts = { ...options };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    const len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input = REPLACEMENTS[input] || input;
    const win32 = utils.isWindows(options);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = { negated: false, prefix: "" };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true)
        return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str) => {
      switch (str) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str);
          if (!match)
            return;
          const source2 = create(match[1]);
          if (!source2)
            return;
          return source2 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) {
      source += `${SLASH_LITERAL}?`;
    }
    return source;
  };
  module.exports = parse;
});

// node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS((exports, module) => {
  var path = __require("path");
  var scan = require_scan();
  var parse = require_parse3();
  var utils = require_utils4();
  var constants = require_constants7();
  var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
  var picomatch = (glob, options, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input) => picomatch(input, options, returnState));
      const arrayMatcher = (str) => {
        for (const isMatch of fns) {
          const state2 = isMatch(str);
          if (state2)
            return state2;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options || {};
    const posix = utils.isWindows(options);
    const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
      isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false) => {
      const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
      const result = { glob, state, regex, posix, input, output, match, isMatch };
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state;
    }
    return matcher;
  };
  picomatch.test = (input, regex, options, { glob, posix } = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input === "") {
      return { isMatch: false, output: "" };
    }
    const opts = options || {};
    const format = opts.format || (posix ? utils.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format ? format(input) : input;
    if (match === false) {
      output = format ? format(input) : input;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch.matchBase(input, regex, options, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return { isMatch: Boolean(match), match, output };
  };
  picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
    const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
    return regex.test(path.basename(input));
  };
  picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
  picomatch.parse = (pattern, options) => {
    if (Array.isArray(pattern))
      return pattern.map((p) => picomatch.parse(p, options));
    return parse(pattern, { ...options, fastpaths: false });
  };
  picomatch.scan = (input, options) => scan(input, options);
  picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return state.output;
    }
    const opts = options || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${state.output})${append}`;
    if (state && state.negated === true) {
      source = `^(?!${source}).*$`;
    }
    const regex = picomatch.toRegex(source, options);
    if (returnState === true) {
      regex.state = state;
    }
    return regex;
  };
  picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
    if (!input || typeof input !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    let parsed = { negated: false, fastpaths: true };
    if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
      parsed.output = parse.fastpaths(input, options);
    }
    if (!parsed.output) {
      parsed = parse(input, options);
    }
    return picomatch.compileRe(parsed, options, returnOutput, returnState);
  };
  picomatch.toRegex = (source, options) => {
    try {
      const opts = options || {};
      return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options && options.debug === true)
        throw err;
      return /$^/;
    }
  };
  picomatch.constants = constants;
  module.exports = picomatch;
});

// node_modules/micromatch/index.js
var require_micromatch = __commonJS((exports, module) => {
  var util = __require("util");
  var braces = require_braces();
  var picomatch = require_picomatch();
  var utils = require_utils4();
  var isEmptyString = (v) => v === "" || v === "./";
  var hasBraces = (v) => {
    const index = v.indexOf("{");
    return index > -1 && v.indexOf("}", index) > -1;
  };
  var micromatch = (list, patterns, options) => {
    patterns = [].concat(patterns);
    list = [].concat(list);
    let omit = new Set;
    let keep = new Set;
    let items = new Set;
    let negatives = 0;
    let onResult = (state) => {
      items.add(state.output);
      if (options && options.onResult) {
        options.onResult(state);
      }
    };
    for (let i = 0;i < patterns.length; i++) {
      let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
      let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
      if (negated)
        negatives++;
      for (let item of list) {
        let matched = isMatch(item, true);
        let match = negated ? !matched.isMatch : matched.isMatch;
        if (!match)
          continue;
        if (negated) {
          omit.add(matched.output);
        } else {
          omit.delete(matched.output);
          keep.add(matched.output);
        }
      }
    }
    let result = negatives === patterns.length ? [...items] : [...keep];
    let matches = result.filter((item) => !omit.has(item));
    if (options && matches.length === 0) {
      if (options.failglob === true) {
        throw new Error(`No matches found for "${patterns.join(", ")}"`);
      }
      if (options.nonull === true || options.nullglob === true) {
        return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
      }
    }
    return matches;
  };
  micromatch.match = micromatch;
  micromatch.matcher = (pattern, options) => picomatch(pattern, options);
  micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
  micromatch.any = micromatch.isMatch;
  micromatch.not = (list, patterns, options = {}) => {
    patterns = [].concat(patterns).map(String);
    let result = new Set;
    let items = [];
    let onResult = (state) => {
      if (options.onResult)
        options.onResult(state);
      items.push(state.output);
    };
    let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
    for (let item of items) {
      if (!matches.has(item)) {
        result.add(item);
      }
    }
    return [...result];
  };
  micromatch.contains = (str, pattern, options) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
    }
    if (Array.isArray(pattern)) {
      return pattern.some((p) => micromatch.contains(str, p, options));
    }
    if (typeof pattern === "string") {
      if (isEmptyString(str) || isEmptyString(pattern)) {
        return false;
      }
      if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
        return true;
      }
    }
    return micromatch.isMatch(str, pattern, { ...options, contains: true });
  };
  micromatch.matchKeys = (obj, patterns, options) => {
    if (!utils.isObject(obj)) {
      throw new TypeError("Expected the first argument to be an object");
    }
    let keys = micromatch(Object.keys(obj), patterns, options);
    let res = {};
    for (let key of keys)
      res[key] = obj[key];
    return res;
  };
  micromatch.some = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (items.some((item) => isMatch(item))) {
        return true;
      }
    }
    return false;
  };
  micromatch.every = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (!items.every((item) => isMatch(item))) {
        return false;
      }
    }
    return true;
  };
  micromatch.all = (str, patterns, options) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
    }
    return [].concat(patterns).every((p) => picomatch(p, options)(str));
  };
  micromatch.capture = (glob, input, options) => {
    let posix = utils.isWindows(options);
    let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
    let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
    if (match) {
      return match.slice(1).map((v) => v === undefined ? "" : v);
    }
  };
  micromatch.makeRe = (...args) => picomatch.makeRe(...args);
  micromatch.scan = (...args) => picomatch.scan(...args);
  micromatch.parse = (patterns, options) => {
    let res = [];
    for (let pattern of [].concat(patterns || [])) {
      for (let str of braces(String(pattern), options)) {
        res.push(picomatch.parse(str, options));
      }
    }
    return res;
  };
  micromatch.braces = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    if (options && options.nobrace === true || !hasBraces(pattern)) {
      return [pattern];
    }
    return braces(pattern, options);
  };
  micromatch.braceExpand = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    return micromatch.braces(pattern, { ...options, expand: true });
  };
  micromatch.hasBraces = hasBraces;
  module.exports = micromatch;
});

// node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isAbsolute = exports.partitionAbsoluteAndRelative = exports.removeDuplicateSlashes = exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = undefined;
  var path = __require("path");
  var globParent = require_glob_parent();
  var micromatch = require_micromatch();
  var GLOBSTAR = "**";
  var ESCAPE_SYMBOL = "\\";
  var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
  var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
  var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
  var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
  var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
  var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
  function isStaticPattern(pattern, options = {}) {
    return !isDynamicPattern(pattern, options);
  }
  exports.isStaticPattern = isStaticPattern;
  function isDynamicPattern(pattern, options = {}) {
    if (pattern === "") {
      return false;
    }
    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
      return true;
    }
    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
      return true;
    }
    return false;
  }
  exports.isDynamicPattern = isDynamicPattern;
  function hasBraceExpansion(pattern) {
    const openingBraceIndex = pattern.indexOf("{");
    if (openingBraceIndex === -1) {
      return false;
    }
    const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
    if (closingBraceIndex === -1) {
      return false;
    }
    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
  }
  function convertToPositivePattern(pattern) {
    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
  }
  exports.convertToPositivePattern = convertToPositivePattern;
  function convertToNegativePattern(pattern) {
    return "!" + pattern;
  }
  exports.convertToNegativePattern = convertToNegativePattern;
  function isNegativePattern(pattern) {
    return pattern.startsWith("!") && pattern[1] !== "(";
  }
  exports.isNegativePattern = isNegativePattern;
  function isPositivePattern(pattern) {
    return !isNegativePattern(pattern);
  }
  exports.isPositivePattern = isPositivePattern;
  function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern);
  }
  exports.getNegativePatterns = getNegativePatterns;
  function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern);
  }
  exports.getPositivePatterns = getPositivePatterns;
  function getPatternsInsideCurrentDirectory(patterns) {
    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
  }
  exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
  function getPatternsOutsideCurrentDirectory(patterns) {
    return patterns.filter(isPatternRelatedToParentDirectory);
  }
  exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
  function isPatternRelatedToParentDirectory(pattern) {
    return pattern.startsWith("..") || pattern.startsWith("./..");
  }
  exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
  function getBaseDirectory(pattern) {
    return globParent(pattern, { flipBackslashes: false });
  }
  exports.getBaseDirectory = getBaseDirectory;
  function hasGlobStar(pattern) {
    return pattern.includes(GLOBSTAR);
  }
  exports.hasGlobStar = hasGlobStar;
  function endsWithSlashGlobStar(pattern) {
    return pattern.endsWith("/" + GLOBSTAR);
  }
  exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
  function isAffectDepthOfReadingPattern(pattern) {
    const basename = path.basename(pattern);
    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
  }
  exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
  function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern) => {
      return collection.concat(expandBraceExpansion(pattern));
    }, []);
  }
  exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
  function expandBraceExpansion(pattern) {
    const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
    patterns.sort((a, b) => a.length - b.length);
    return patterns.filter((pattern2) => pattern2 !== "");
  }
  exports.expandBraceExpansion = expandBraceExpansion;
  function getPatternParts(pattern, options) {
    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
    if (parts.length === 0) {
      parts = [pattern];
    }
    if (parts[0].startsWith("/")) {
      parts[0] = parts[0].slice(1);
      parts.unshift("");
    }
    return parts;
  }
  exports.getPatternParts = getPatternParts;
  function makeRe(pattern, options) {
    return micromatch.makeRe(pattern, options);
  }
  exports.makeRe = makeRe;
  function convertPatternsToRe(patterns, options) {
    return patterns.map((pattern) => makeRe(pattern, options));
  }
  exports.convertPatternsToRe = convertPatternsToRe;
  function matchAny(entry, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry));
  }
  exports.matchAny = matchAny;
  function removeDuplicateSlashes(pattern) {
    return pattern.replace(DOUBLE_SLASH_RE, "/");
  }
  exports.removeDuplicateSlashes = removeDuplicateSlashes;
  function partitionAbsoluteAndRelative(patterns) {
    const absolute = [];
    const relative = [];
    for (const pattern of patterns) {
      if (isAbsolute(pattern)) {
        absolute.push(pattern);
      } else {
        relative.push(pattern);
      }
    }
    return [absolute, relative];
  }
  exports.partitionAbsoluteAndRelative = partitionAbsoluteAndRelative;
  function isAbsolute(pattern) {
    return path.isAbsolute(pattern);
  }
  exports.isAbsolute = isAbsolute;
});

// node_modules/merge2/index.js
var require_merge2 = __commonJS((exports, module) => {
  var Stream = __require("stream");
  var PassThrough = Stream.PassThrough;
  var slice = Array.prototype.slice;
  module.exports = merge2;
  function merge2() {
    const streamsQueue = [];
    const args = slice.call(arguments);
    let merging = false;
    let options = args[args.length - 1];
    if (options && !Array.isArray(options) && options.pipe == null) {
      args.pop();
    } else {
      options = {};
    }
    const doEnd = options.end !== false;
    const doPipeError = options.pipeError === true;
    if (options.objectMode == null) {
      options.objectMode = true;
    }
    if (options.highWaterMark == null) {
      options.highWaterMark = 64 * 1024;
    }
    const mergedStream = PassThrough(options);
    function addStream() {
      for (let i = 0, len = arguments.length;i < len; i++) {
        streamsQueue.push(pauseStreams(arguments[i], options));
      }
      mergeStream();
      return this;
    }
    function mergeStream() {
      if (merging) {
        return;
      }
      merging = true;
      let streams = streamsQueue.shift();
      if (!streams) {
        process.nextTick(endStream);
        return;
      }
      if (!Array.isArray(streams)) {
        streams = [streams];
      }
      let pipesCount = streams.length + 1;
      function next() {
        if (--pipesCount > 0) {
          return;
        }
        merging = false;
        mergeStream();
      }
      function pipe(stream) {
        function onend() {
          stream.removeListener("merge2UnpipeEnd", onend);
          stream.removeListener("end", onend);
          if (doPipeError) {
            stream.removeListener("error", onerror);
          }
          next();
        }
        function onerror(err) {
          mergedStream.emit("error", err);
        }
        if (stream._readableState.endEmitted) {
          return next();
        }
        stream.on("merge2UnpipeEnd", onend);
        stream.on("end", onend);
        if (doPipeError) {
          stream.on("error", onerror);
        }
        stream.pipe(mergedStream, { end: false });
        stream.resume();
      }
      for (let i = 0;i < streams.length; i++) {
        pipe(streams[i]);
      }
      next();
    }
    function endStream() {
      merging = false;
      mergedStream.emit("queueDrain");
      if (doEnd) {
        mergedStream.end();
      }
    }
    mergedStream.setMaxListeners(0);
    mergedStream.add = addStream;
    mergedStream.on("unpipe", function(stream) {
      stream.emit("merge2UnpipeEnd");
    });
    if (args.length) {
      addStream.apply(null, args);
    }
    return mergedStream;
  }
  function pauseStreams(streams, options) {
    if (!Array.isArray(streams)) {
      if (!streams._readableState && streams.pipe) {
        streams = streams.pipe(PassThrough(options));
      }
      if (!streams._readableState || !streams.pause || !streams.pipe) {
        throw new Error("Only readable stream can be merged.");
      }
      streams.pause();
    } else {
      for (let i = 0, len = streams.length;i < len; i++) {
        streams[i] = pauseStreams(streams[i], options);
      }
    }
    return streams;
  }
});

// node_modules/fast-glob/out/utils/stream.js
var require_stream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.merge = undefined;
  var merge2 = require_merge2();
  function merge(streams) {
    const mergedStream = merge2(streams);
    streams.forEach((stream) => {
      stream.once("error", (error) => mergedStream.emit("error", error));
    });
    mergedStream.once("close", () => propagateCloseEventToSources(streams));
    mergedStream.once("end", () => propagateCloseEventToSources(streams));
    return mergedStream;
  }
  exports.merge = merge;
  function propagateCloseEventToSources(streams) {
    streams.forEach((stream) => stream.emit("close"));
  }
});

// node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEmpty = exports.isString = undefined;
  function isString(input) {
    return typeof input === "string";
  }
  exports.isString = isString;
  function isEmpty(input) {
    return input === "";
  }
  exports.isEmpty = isEmpty;
});

// node_modules/fast-glob/out/utils/index.js
var require_utils5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = undefined;
  var array = require_array();
  exports.array = array;
  var errno = require_errno();
  exports.errno = errno;
  var fs = require_fs();
  exports.fs = fs;
  var path = require_path();
  exports.path = path;
  var pattern = require_pattern();
  exports.pattern = pattern;
  var stream = require_stream();
  exports.stream = stream;
  var string = require_string();
  exports.string = string;
});

// node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = undefined;
  var utils = require_utils5();
  function generate(input, settings) {
    const patterns = processPatterns(input, settings);
    const ignore = processPatterns(settings.ignore, settings);
    const positivePatterns = getPositivePatterns(patterns);
    const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
    return staticTasks.concat(dynamicTasks);
  }
  exports.generate = generate;
  function processPatterns(input, settings) {
    let patterns = input;
    if (settings.braceExpansion) {
      patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
    }
    if (settings.baseNameMatch) {
      patterns = patterns.map((pattern) => pattern.includes("/") ? pattern : `**/${pattern}`);
    }
    return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
  }
  function convertPatternsToTasks(positive, negative, dynamic) {
    const tasks = [];
    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
    if ("." in insideCurrentDirectoryGroup) {
      tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
    } else {
      tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
    }
    return tasks;
  }
  exports.convertPatternsToTasks = convertPatternsToTasks;
  function getPositivePatterns(patterns) {
    return utils.pattern.getPositivePatterns(patterns);
  }
  exports.getPositivePatterns = getPositivePatterns;
  function getNegativePatternsAsPositive(patterns, ignore) {
    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
    const positive = negative.map(utils.pattern.convertToPositivePattern);
    return positive;
  }
  exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
  function groupPatternsByBaseDirectory(patterns) {
    const group = {};
    return patterns.reduce((collection, pattern) => {
      const base = utils.pattern.getBaseDirectory(pattern);
      if (base in collection) {
        collection[base].push(pattern);
      } else {
        collection[base] = [pattern];
      }
      return collection;
    }, group);
  }
  exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
  function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base) => {
      return convertPatternGroupToTask(base, positive[base], negative, dynamic);
    });
  }
  exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
  function convertPatternGroupToTask(base, positive, negative, dynamic) {
    return {
      dynamic,
      positive,
      negative,
      base,
      patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
    };
  }
  exports.convertPatternGroupToTask = convertPatternGroupToTask;
});

// node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.read = undefined;
  function read(path, settings, callback) {
    settings.fs.lstat(path, (lstatError, lstat) => {
      if (lstatError !== null) {
        callFailureCallback(callback, lstatError);
        return;
      }
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        callSuccessCallback(callback, lstat);
        return;
      }
      settings.fs.stat(path, (statError, stat) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            callFailureCallback(callback, statError);
            return;
          }
          callSuccessCallback(callback, lstat);
          return;
        }
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        callSuccessCallback(callback, stat);
      });
    });
  }
  exports.read = read;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});

// node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.read = undefined;
  function read(path, settings) {
    const lstat = settings.fs.lstatSync(path);
    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
      return lstat;
    }
    try {
      const stat = settings.fs.statSync(path);
      if (settings.markSymbolicLink) {
        stat.isSymbolicLink = () => true;
      }
      return stat;
    } catch (error) {
      if (!settings.throwErrorOnBrokenSymbolicLink) {
        return lstat;
      }
      throw error;
    }
  }
  exports.read = read;
});

// node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = undefined;
  var fs = __require("fs");
  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
      return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports.createFileSystemAdapter = createFileSystemAdapter;
});

// node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var fs = require_fs2();

  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
      this.fs = fs.createFileSystemAdapter(this._options.fs);
      this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
      return option !== null && option !== undefined ? option : value;
    }
  }
  exports.default = Settings;
});

// node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.statSync = exports.stat = exports.Settings = undefined;
  var async = require_async();
  var sync = require_sync();
  var settings_1 = require_settings();
  exports.Settings = settings_1.default;
  function stat(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async.read(path, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports.stat = stat;
  function statSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
  }
  exports.statSync = statSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS((exports, module) => {
  /*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var promise;
  module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
    throw err;
  }, 0));
});

// node_modules/run-parallel/index.js
var require_run_parallel = __commonJS((exports, module) => {
  /*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  module.exports = runParallel;
  var queueMicrotask2 = require_queue_microtask();
  function runParallel(tasks, cb) {
    let results, pending, keys;
    let isSync = true;
    if (Array.isArray(tasks)) {
      results = [];
      pending = tasks.length;
    } else {
      keys = Object.keys(tasks);
      results = {};
      pending = keys.length;
    }
    function done(err) {
      function end() {
        if (cb)
          cb(err, results);
        cb = null;
      }
      if (isSync)
        queueMicrotask2(end);
      else
        end();
    }
    function each(i, err, result) {
      results[i] = result;
      if (--pending === 0 || err) {
        done(err);
      }
    }
    if (!pending) {
      done(null);
    } else if (keys) {
      keys.forEach(function(key) {
        tasks[key](function(err, result) {
          each(key, err, result);
        });
      });
    } else {
      tasks.forEach(function(task, i) {
        task(function(err, result) {
          each(i, err, result);
        });
      });
    }
    isSync = false;
  }
});

// node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = undefined;
  var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
  if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
  }
  var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
  var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
  var SUPPORTED_MAJOR_VERSION = 10;
  var SUPPORTED_MINOR_VERSION = 10;
  var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
  var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
  exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
});

// node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createDirentFromStats = undefined;

  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  exports.createDirentFromStats = createDirentFromStats;
});

// node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fs = undefined;
  var fs = require_fs3();
  exports.fs = fs;
});

// node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.joinPathSegments = undefined;
  function joinPathSegments(a, b, separator) {
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  exports.joinPathSegments = joinPathSegments;
});

// node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.readdir = exports.readdirWithFileTypes = exports.read = undefined;
  var fsStat = require_out();
  var rpl = require_run_parallel();
  var constants_1 = require_constants8();
  var utils = require_utils6();
  var common = require_common();
  function read(directory, settings, callback) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      readdirWithFileTypes(directory, settings, callback);
      return;
    }
    readdir(directory, settings, callback);
  }
  exports.read = read;
  function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const entries = dirents.map((dirent) => ({
        dirent,
        name: dirent.name,
        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
      }));
      if (!settings.followSymbolicLinks) {
        callSuccessCallback(callback, entries);
        return;
      }
      const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
      rpl(tasks, (rplError, rplEntries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, rplEntries);
      });
    });
  }
  exports.readdirWithFileTypes = readdirWithFileTypes;
  function makeRplTaskEntry(entry, settings) {
    return (done) => {
      if (!entry.dirent.isSymbolicLink()) {
        done(null, entry);
        return;
      }
      settings.fs.stat(entry.path, (statError, stats) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            done(statError);
            return;
          }
          done(null, entry);
          return;
        }
        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        done(null, entry);
      });
    };
  }
  function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const tasks = names.map((name) => {
        const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        return (done) => {
          fsStat.stat(path, settings.fsStatSettings, (error, stats) => {
            if (error !== null) {
              done(error);
              return;
            }
            const entry = {
              name,
              path,
              dirent: utils.fs.createDirentFromStats(name, stats)
            };
            if (settings.stats) {
              entry.stats = stats;
            }
            done(null, entry);
          });
        };
      });
      rpl(tasks, (rplError, entries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, entries);
      });
    });
  }
  exports.readdir = readdir;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});

// node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.readdir = exports.readdirWithFileTypes = exports.read = undefined;
  var fsStat = require_out();
  var constants_1 = require_constants8();
  var utils = require_utils6();
  var common = require_common();
  function read(directory, settings) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings);
    }
    return readdir(directory, settings);
  }
  exports.read = read;
  function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
    return dirents.map((dirent) => {
      const entry = {
        dirent,
        name: dirent.name,
        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
      };
      if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
        try {
          const stats = settings.fs.statSync(entry.path);
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        } catch (error) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            throw error;
          }
        }
      }
      return entry;
    });
  }
  exports.readdirWithFileTypes = readdirWithFileTypes;
  function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory);
    return names.map((name) => {
      const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
      const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
      const entry = {
        name,
        path: entryPath,
        dirent: utils.fs.createDirentFromStats(name, stats)
      };
      if (settings.stats) {
        entry.stats = stats;
      }
      return entry;
    });
  }
  exports.readdir = readdir;
});

// node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = undefined;
  var fs = __require("fs");
  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync,
    readdir: fs.readdir,
    readdirSync: fs.readdirSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
      return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports.createFileSystemAdapter = createFileSystemAdapter;
});

// node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var path = __require("path");
  var fsStat = require_out();
  var fs = require_fs4();

  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
      this.fs = fs.createFileSystemAdapter(this._options.fs);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
      this.stats = this._getValue(this._options.stats, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      this.fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this.followSymbolicLinks,
        fs: this.fs,
        throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option !== null && option !== undefined ? option : value;
    }
  }
  exports.default = Settings;
});

// node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Settings = exports.scandirSync = exports.scandir = undefined;
  var async = require_async2();
  var sync = require_sync2();
  var settings_1 = require_settings2();
  exports.Settings = settings_1.default;
  function scandir(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async.read(path, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports.scandir = scandir;
  function scandirSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
  }
  exports.scandirSync = scandirSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// node_modules/reusify/reusify.js
var require_reusify = __commonJS((exports, module) => {
  function reusify(Constructor) {
    var head = new Constructor;
    var tail = head;
    function get() {
      var current = head;
      if (current.next) {
        head = current.next;
      } else {
        head = new Constructor;
        tail = head;
      }
      current.next = null;
      return current;
    }
    function release(obj) {
      tail.next = obj;
      tail = obj;
    }
    return {
      get,
      release
    };
  }
  module.exports = reusify;
});

// node_modules/fastq/queue.js
var require_queue = __commonJS((exports, module) => {
  var reusify = require_reusify();
  function fastqueue(context, worker, _concurrency) {
    if (typeof context === "function") {
      _concurrency = worker;
      worker = context;
      context = null;
    }
    if (!(_concurrency >= 1)) {
      throw new Error("fastqueue concurrency must be equal to or greater than 1");
    }
    var cache = reusify(Task);
    var queueHead = null;
    var queueTail = null;
    var _running = 0;
    var errorHandler = null;
    var self2 = {
      push,
      drain: noop,
      saturated: noop,
      pause,
      paused: false,
      get concurrency() {
        return _concurrency;
      },
      set concurrency(value) {
        if (!(value >= 1)) {
          throw new Error("fastqueue concurrency must be equal to or greater than 1");
        }
        _concurrency = value;
        if (self2.paused)
          return;
        for (;queueHead && _running < _concurrency; ) {
          _running++;
          release();
        }
      },
      running,
      resume,
      idle,
      length,
      getQueue,
      unshift,
      empty: noop,
      kill,
      killAndDrain,
      error
    };
    return self2;
    function running() {
      return _running;
    }
    function pause() {
      self2.paused = true;
    }
    function length() {
      var current = queueHead;
      var counter = 0;
      while (current) {
        current = current.next;
        counter++;
      }
      return counter;
    }
    function getQueue() {
      var current = queueHead;
      var tasks = [];
      while (current) {
        tasks.push(current.value);
        current = current.next;
      }
      return tasks;
    }
    function resume() {
      if (!self2.paused)
        return;
      self2.paused = false;
      if (queueHead === null) {
        _running++;
        release();
        return;
      }
      for (;queueHead && _running < _concurrency; ) {
        _running++;
        release();
      }
    }
    function idle() {
      return _running === 0 && self2.length() === 0;
    }
    function push(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running >= _concurrency || self2.paused) {
        if (queueTail) {
          queueTail.next = current;
          queueTail = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function unshift(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running >= _concurrency || self2.paused) {
        if (queueHead) {
          current.next = queueHead;
          queueHead = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function release(holder) {
      if (holder) {
        cache.release(holder);
      }
      var next = queueHead;
      if (next && _running <= _concurrency) {
        if (!self2.paused) {
          if (queueTail === queueHead) {
            queueTail = null;
          }
          queueHead = next.next;
          next.next = null;
          worker.call(context, next.value, next.worked);
          if (queueTail === null) {
            self2.empty();
          }
        } else {
          _running--;
        }
      } else if (--_running === 0) {
        self2.drain();
      }
    }
    function kill() {
      queueHead = null;
      queueTail = null;
      self2.drain = noop;
    }
    function killAndDrain() {
      queueHead = null;
      queueTail = null;
      self2.drain();
      self2.drain = noop;
    }
    function error(handler) {
      errorHandler = handler;
    }
  }
  function noop() {}
  function Task() {
    this.value = null;
    this.callback = noop;
    this.next = null;
    this.release = noop;
    this.context = null;
    this.errorHandler = null;
    var self2 = this;
    this.worked = function worked(err, result) {
      var callback = self2.callback;
      var errorHandler = self2.errorHandler;
      var val = self2.value;
      self2.value = null;
      self2.callback = noop;
      if (self2.errorHandler) {
        errorHandler(err, val);
      }
      callback.call(self2.context, err, result);
      self2.release(self2);
    };
  }
  function queueAsPromised(context, worker, _concurrency) {
    if (typeof context === "function") {
      _concurrency = worker;
      worker = context;
      context = null;
    }
    function asyncWrapper(arg, cb) {
      worker.call(this, arg).then(function(res) {
        cb(null, res);
      }, cb);
    }
    var queue = fastqueue(context, asyncWrapper, _concurrency);
    var pushCb = queue.push;
    var unshiftCb = queue.unshift;
    queue.push = push;
    queue.unshift = unshift;
    queue.drained = drained;
    return queue;
    function push(value) {
      var p = new Promise(function(resolve, reject) {
        pushCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function unshift(value) {
      var p = new Promise(function(resolve, reject) {
        unshiftCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function drained() {
      var p = new Promise(function(resolve) {
        process.nextTick(function() {
          if (queue.idle()) {
            resolve();
          } else {
            var previousDrain = queue.drain;
            queue.drain = function() {
              if (typeof previousDrain === "function")
                previousDrain();
              resolve();
              queue.drain = previousDrain;
            };
          }
        });
      });
      return p;
    }
  }
  module.exports = fastqueue;
  module.exports.promise = queueAsPromised;
});

// node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = undefined;
  function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
      return true;
    }
    return !settings.errorFilter(error);
  }
  exports.isFatalError = isFatalError;
  function isAppliedFilter(filter, value) {
    return filter === null || filter(value);
  }
  exports.isAppliedFilter = isAppliedFilter;
  function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[/\\]/).join(separator);
  }
  exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
  function joinPathSegments(a, b, separator) {
    if (a === "") {
      return b;
    }
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  exports.joinPathSegments = joinPathSegments;
});

// node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var common = require_common2();

  class Reader {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
  }
  exports.default = Reader;
});

// node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var events_1 = __require("events");
  var fsScandir = require_out2();
  var fastq = require_queue();
  var common = require_common2();
  var reader_1 = require_reader();

  class AsyncReader extends reader_1.default {
    constructor(_root, _settings) {
      super(_root, _settings);
      this._settings = _settings;
      this._scandir = fsScandir.scandir;
      this._emitter = new events_1.EventEmitter;
      this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
      this._isFatalError = false;
      this._isDestroyed = false;
      this._queue.drain = () => {
        if (!this._isFatalError) {
          this._emitter.emit("end");
        }
      };
    }
    read() {
      this._isFatalError = false;
      this._isDestroyed = false;
      setImmediate(() => {
        this._pushToQueue(this._root, this._settings.basePath);
      });
      return this._emitter;
    }
    get isDestroyed() {
      return this._isDestroyed;
    }
    destroy() {
      if (this._isDestroyed) {
        throw new Error("The reader is already destroyed");
      }
      this._isDestroyed = true;
      this._queue.killAndDrain();
    }
    onEntry(callback) {
      this._emitter.on("entry", callback);
    }
    onError(callback) {
      this._emitter.once("error", callback);
    }
    onEnd(callback) {
      this._emitter.once("end", callback);
    }
    _pushToQueue(directory, base) {
      const queueItem = { directory, base };
      this._queue.push(queueItem, (error) => {
        if (error !== null) {
          this._handleError(error);
        }
      });
    }
    _worker(item, done) {
      this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
        if (error !== null) {
          done(error, undefined);
          return;
        }
        for (const entry of entries) {
          this._handleEntry(entry, item.base);
        }
        done(null, undefined);
      });
    }
    _handleError(error) {
      if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
        return;
      }
      this._isFatalError = true;
      this._isDestroyed = true;
      this._emitter.emit("error", error);
    }
    _handleEntry(entry, base) {
      if (this._isDestroyed || this._isFatalError) {
        return;
      }
      const fullpath = entry.path;
      if (base !== undefined) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._emitEntry(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
      }
    }
    _emitEntry(entry) {
      this._emitter.emit("entry", entry);
    }
  }
  exports.default = AsyncReader;
});

// node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var async_1 = require_async3();

  class AsyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._storage = [];
    }
    read(callback) {
      this._reader.onError((error) => {
        callFailureCallback(callback, error);
      });
      this._reader.onEntry((entry) => {
        this._storage.push(entry);
      });
      this._reader.onEnd(() => {
        callSuccessCallback(callback, this._storage);
      });
      this._reader.read();
    }
  }
  exports.default = AsyncProvider;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, entries) {
    callback(null, entries);
  }
});

// node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var async_1 = require_async3();

  class StreamProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._stream = new stream_1.Readable({
        objectMode: true,
        read: () => {},
        destroy: () => {
          if (!this._reader.isDestroyed) {
            this._reader.destroy();
          }
        }
      });
    }
    read() {
      this._reader.onError((error) => {
        this._stream.emit("error", error);
      });
      this._reader.onEntry((entry) => {
        this._stream.push(entry);
      });
      this._reader.onEnd(() => {
        this._stream.push(null);
      });
      this._reader.read();
      return this._stream;
    }
  }
  exports.default = StreamProvider;
});

// node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var fsScandir = require_out2();
  var common = require_common2();
  var reader_1 = require_reader();

  class SyncReader extends reader_1.default {
    constructor() {
      super(...arguments);
      this._scandir = fsScandir.scandirSync;
      this._storage = [];
      this._queue = new Set;
    }
    read() {
      this._pushToQueue(this._root, this._settings.basePath);
      this._handleQueue();
      return this._storage;
    }
    _pushToQueue(directory, base) {
      this._queue.add({ directory, base });
    }
    _handleQueue() {
      for (const item of this._queue.values()) {
        this._handleDirectory(item.directory, item.base);
      }
    }
    _handleDirectory(directory, base) {
      try {
        const entries = this._scandir(directory, this._settings.fsScandirSettings);
        for (const entry of entries) {
          this._handleEntry(entry, base);
        }
      } catch (error) {
        this._handleError(error);
      }
    }
    _handleError(error) {
      if (!common.isFatalError(this._settings, error)) {
        return;
      }
      throw error;
    }
    _handleEntry(entry, base) {
      const fullpath = entry.path;
      if (base !== undefined) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._pushToStorage(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
      }
    }
    _pushToStorage(entry) {
      this._storage.push(entry);
    }
  }
  exports.default = SyncReader;
});

// node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var sync_1 = require_sync3();

  class SyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
      return this._reader.read();
    }
  }
  exports.default = SyncProvider;
});

// node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var path = __require("path");
  var fsScandir = require_out2();

  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.basePath = this._getValue(this._options.basePath, undefined);
      this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
      this.deepFilter = this._getValue(this._options.deepFilter, null);
      this.entryFilter = this._getValue(this._options.entryFilter, null);
      this.errorFilter = this._getValue(this._options.errorFilter, null);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
      this.fsScandirSettings = new fsScandir.Settings({
        followSymbolicLinks: this._options.followSymbolicLinks,
        fs: this._options.fs,
        pathSegmentSeparator: this._options.pathSegmentSeparator,
        stats: this._options.stats,
        throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option !== null && option !== undefined ? option : value;
    }
  }
  exports.default = Settings;
});

// node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Settings = exports.walkStream = exports.walkSync = exports.walk = undefined;
  var async_1 = require_async4();
  var stream_1 = require_stream2();
  var sync_1 = require_sync4();
  var settings_1 = require_settings3();
  exports.Settings = settings_1.default;
  function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
      return;
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
  }
  exports.walk = walk;
  function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new sync_1.default(directory, settings);
    return provider.read();
  }
  exports.walkSync = walkSync;
  function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new stream_1.default(directory, settings);
    return provider.read();
  }
  exports.walkStream = walkStream;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// node_modules/fast-glob/out/readers/reader.js
var require_reader2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var path = __require("path");
  var fsStat = require_out();
  var utils = require_utils5();

  class Reader {
    constructor(_settings) {
      this._settings = _settings;
      this._fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
      });
    }
    _getFullEntryPath(filepath) {
      return path.resolve(this._settings.cwd, filepath);
    }
    _makeEntry(stats, pattern) {
      const entry = {
        name: pattern,
        path: pattern,
        dirent: utils.fs.createDirentFromStats(pattern, stats)
      };
      if (this._settings.stats) {
        entry.stats = stats;
      }
      return entry;
    }
    _isFatalError(error) {
      return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
    }
  }
  exports.default = Reader;
});

// node_modules/fast-glob/out/readers/stream.js
var require_stream3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var fsStat = require_out();
  var fsWalk = require_out3();
  var reader_1 = require_reader2();

  class ReaderStream extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkStream = fsWalk.walkStream;
      this._stat = fsStat.stat;
    }
    dynamic(root, options) {
      return this._walkStream(root, options);
    }
    static(patterns, options) {
      const filepaths = patterns.map(this._getFullEntryPath, this);
      const stream = new stream_1.PassThrough({ objectMode: true });
      stream._write = (index, _enc, done) => {
        return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
          if (entry !== null && options.entryFilter(entry)) {
            stream.push(entry);
          }
          if (index === filepaths.length - 1) {
            stream.end();
          }
          done();
        }).catch(done);
      };
      for (let i = 0;i < filepaths.length; i++) {
        stream.write(i);
      }
      return stream;
    }
    _getEntry(filepath, pattern, options) {
      return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
        if (options.errorFilter(error)) {
          return null;
        }
        throw error;
      });
    }
    _getStat(filepath) {
      return new Promise((resolve, reject) => {
        this._stat(filepath, this._fsStatSettings, (error, stats) => {
          return error === null ? resolve(stats) : reject(error);
        });
      });
    }
  }
  exports.default = ReaderStream;
});

// node_modules/fast-glob/out/readers/async.js
var require_async5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var fsWalk = require_out3();
  var reader_1 = require_reader2();
  var stream_1 = require_stream3();

  class ReaderAsync extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkAsync = fsWalk.walk;
      this._readerStream = new stream_1.default(this._settings);
    }
    dynamic(root, options) {
      return new Promise((resolve, reject) => {
        this._walkAsync(root, options, (error, entries) => {
          if (error === null) {
            resolve(entries);
          } else {
            reject(error);
          }
        });
      });
    }
    async static(patterns, options) {
      const entries = [];
      const stream = this._readerStream.static(patterns, options);
      return new Promise((resolve, reject) => {
        stream.once("error", reject);
        stream.on("data", (entry) => entries.push(entry));
        stream.once("end", () => resolve(entries));
      });
    }
  }
  exports.default = ReaderAsync;
});

// node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils5();

  class Matcher {
    constructor(_patterns, _settings, _micromatchOptions) {
      this._patterns = _patterns;
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this._storage = [];
      this._fillStorage();
    }
    _fillStorage() {
      for (const pattern of this._patterns) {
        const segments = this._getPatternSegments(pattern);
        const sections = this._splitSegmentsIntoSections(segments);
        this._storage.push({
          complete: sections.length <= 1,
          pattern,
          segments,
          sections
        });
      }
    }
    _getPatternSegments(pattern) {
      const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
      return parts.map((part) => {
        const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part
          };
        }
        return {
          dynamic: true,
          pattern: part,
          patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
        };
      });
    }
    _splitSegmentsIntoSections(segments) {
      return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
    }
  }
  exports.default = Matcher;
});

// node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var matcher_1 = require_matcher();

  class PartialMatcher extends matcher_1.default {
    match(filepath) {
      const parts = filepath.split("/");
      const levels = parts.length;
      const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
      for (const pattern of patterns) {
        const section = pattern.sections[0];
        if (!pattern.complete && levels > section.length) {
          return true;
        }
        const match = parts.every((part, index) => {
          const segment = pattern.segments[index];
          if (segment.dynamic && segment.patternRe.test(part)) {
            return true;
          }
          if (!segment.dynamic && segment.pattern === part) {
            return true;
          }
          return false;
        });
        if (match) {
          return true;
        }
      }
      return false;
    }
  }
  exports.default = PartialMatcher;
});

// node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils5();
  var partial_1 = require_partial();

  class DeepFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
    }
    getFilter(basePath, positive, negative) {
      const matcher = this._getMatcher(positive);
      const negativeRe = this._getNegativePatternsRe(negative);
      return (entry) => this._filter(basePath, entry, matcher, negativeRe);
    }
    _getMatcher(patterns) {
      return new partial_1.default(patterns, this._settings, this._micromatchOptions);
    }
    _getNegativePatternsRe(patterns) {
      const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
      return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
    _filter(basePath, entry, matcher, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry.path)) {
        return false;
      }
      if (this._isSkippedSymbolicLink(entry)) {
        return false;
      }
      const filepath = utils.path.removeLeadingDotSegment(entry.path);
      if (this._isSkippedByPositivePatterns(filepath, matcher)) {
        return false;
      }
      return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
    _isSkippedByDeep(basePath, entryPath) {
      if (this._settings.deep === Infinity) {
        return false;
      }
      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
    _getEntryLevel(basePath, entryPath) {
      const entryPathDepth = entryPath.split("/").length;
      if (basePath === "") {
        return entryPathDepth;
      }
      const basePathDepth = basePath.split("/").length;
      return entryPathDepth - basePathDepth;
    }
    _isSkippedSymbolicLink(entry) {
      return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
    }
    _isSkippedByPositivePatterns(entryPath, matcher) {
      return !this._settings.baseNameMatch && !matcher.match(entryPath);
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils.pattern.matchAny(entryPath, patternsRe);
    }
  }
  exports.default = DeepFilter;
});

// node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils5();

  class EntryFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this.index = new Map;
    }
    getFilter(positive, negative) {
      const [absoluteNegative, relativeNegative] = utils.pattern.partitionAbsoluteAndRelative(negative);
      const patterns = {
        positive: {
          all: utils.pattern.convertPatternsToRe(positive, this._micromatchOptions)
        },
        negative: {
          absolute: utils.pattern.convertPatternsToRe(absoluteNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true })),
          relative: utils.pattern.convertPatternsToRe(relativeNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }))
        }
      };
      return (entry) => this._filter(entry, patterns);
    }
    _filter(entry, patterns) {
      const filepath = utils.path.removeLeadingDotSegment(entry.path);
      if (this._settings.unique && this._isDuplicateEntry(filepath)) {
        return false;
      }
      if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
        return false;
      }
      const isMatched = this._isMatchToPatternsSet(filepath, patterns, entry.dirent.isDirectory());
      if (this._settings.unique && isMatched) {
        this._createIndexRecord(filepath);
      }
      return isMatched;
    }
    _isDuplicateEntry(filepath) {
      return this.index.has(filepath);
    }
    _createIndexRecord(filepath) {
      this.index.set(filepath, undefined);
    }
    _onlyFileFilter(entry) {
      return this._settings.onlyFiles && !entry.dirent.isFile();
    }
    _onlyDirectoryFilter(entry) {
      return this._settings.onlyDirectories && !entry.dirent.isDirectory();
    }
    _isMatchToPatternsSet(filepath, patterns, isDirectory) {
      const isMatched = this._isMatchToPatterns(filepath, patterns.positive.all, isDirectory);
      if (!isMatched) {
        return false;
      }
      const isMatchedByRelativeNegative = this._isMatchToPatterns(filepath, patterns.negative.relative, isDirectory);
      if (isMatchedByRelativeNegative) {
        return false;
      }
      const isMatchedByAbsoluteNegative = this._isMatchToAbsoluteNegative(filepath, patterns.negative.absolute, isDirectory);
      if (isMatchedByAbsoluteNegative) {
        return false;
      }
      return true;
    }
    _isMatchToAbsoluteNegative(filepath, patternsRe, isDirectory) {
      if (patternsRe.length === 0) {
        return false;
      }
      const fullpath = utils.path.makeAbsolute(this._settings.cwd, filepath);
      return this._isMatchToPatterns(fullpath, patternsRe, isDirectory);
    }
    _isMatchToPatterns(filepath, patternsRe, isDirectory) {
      if (patternsRe.length === 0) {
        return false;
      }
      const isMatched = utils.pattern.matchAny(filepath, patternsRe);
      if (!isMatched && isDirectory) {
        return utils.pattern.matchAny(filepath + "/", patternsRe);
      }
      return isMatched;
    }
  }
  exports.default = EntryFilter;
});

// node_modules/fast-glob/out/providers/filters/error.js
var require_error = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils5();

  class ErrorFilter {
    constructor(_settings) {
      this._settings = _settings;
    }
    getFilter() {
      return (error) => this._isNonFatalError(error);
    }
    _isNonFatalError(error) {
      return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
    }
  }
  exports.default = ErrorFilter;
});

// node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils5();

  class EntryTransformer {
    constructor(_settings) {
      this._settings = _settings;
    }
    getTransformer() {
      return (entry) => this._transform(entry);
    }
    _transform(entry) {
      let filepath = entry.path;
      if (this._settings.absolute) {
        filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
        filepath = utils.path.unixify(filepath);
      }
      if (this._settings.markDirectories && entry.dirent.isDirectory()) {
        filepath += "/";
      }
      if (!this._settings.objectMode) {
        return filepath;
      }
      return Object.assign(Object.assign({}, entry), { path: filepath });
    }
  }
  exports.default = EntryTransformer;
});

// node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var path = __require("path");
  var deep_1 = require_deep();
  var entry_1 = require_entry();
  var error_1 = require_error();
  var entry_2 = require_entry2();

  class Provider {
    constructor(_settings) {
      this._settings = _settings;
      this.errorFilter = new error_1.default(this._settings);
      this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
      this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
      this.entryTransformer = new entry_2.default(this._settings);
    }
    _getRootDirectory(task) {
      return path.resolve(this._settings.cwd, task.base);
    }
    _getReaderOptions(task) {
      const basePath = task.base === "." ? "" : task.base;
      return {
        basePath,
        pathSegmentSeparator: "/",
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer()
      };
    }
    _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false
      };
    }
  }
  exports.default = Provider;
});

// node_modules/fast-glob/out/providers/async.js
var require_async6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var async_1 = require_async5();
  var provider_1 = require_provider();

  class ProviderAsync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new async_1.default(this._settings);
    }
    async read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = await this.api(root, task, options);
      return entries.map((entry) => options.transform(entry));
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports.default = ProviderAsync;
});

// node_modules/fast-glob/out/providers/stream.js
var require_stream4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var stream_2 = require_stream3();
  var provider_1 = require_provider();

  class ProviderStream extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_2.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const source = this.api(root, task, options);
      const destination = new stream_1.Readable({ objectMode: true, read: () => {} });
      source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
      destination.once("close", () => source.destroy());
      return destination;
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports.default = ProviderStream;
});

// node_modules/fast-glob/out/readers/sync.js
var require_sync5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var fsStat = require_out();
  var fsWalk = require_out3();
  var reader_1 = require_reader2();

  class ReaderSync extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkSync = fsWalk.walkSync;
      this._statSync = fsStat.statSync;
    }
    dynamic(root, options) {
      return this._walkSync(root, options);
    }
    static(patterns, options) {
      const entries = [];
      for (const pattern of patterns) {
        const filepath = this._getFullEntryPath(pattern);
        const entry = this._getEntry(filepath, pattern, options);
        if (entry === null || !options.entryFilter(entry)) {
          continue;
        }
        entries.push(entry);
      }
      return entries;
    }
    _getEntry(filepath, pattern, options) {
      try {
        const stats = this._getStat(filepath);
        return this._makeEntry(stats, pattern);
      } catch (error) {
        if (options.errorFilter(error)) {
          return null;
        }
        throw error;
      }
    }
    _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings);
    }
  }
  exports.default = ReaderSync;
});

// node_modules/fast-glob/out/providers/sync.js
var require_sync6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var sync_1 = require_sync5();
  var provider_1 = require_provider();

  class ProviderSync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new sync_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = this.api(root, task, options);
      return entries.map(options.transform);
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports.default = ProviderSync;
});

// node_modules/fast-glob/out/settings.js
var require_settings4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = undefined;
  var fs = __require("fs");
  var os = __require("os");
  var CPU_COUNT = Math.max(os.cpus().length, 1);
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    lstatSync: fs.lstatSync,
    stat: fs.stat,
    statSync: fs.statSync,
    readdir: fs.readdir,
    readdirSync: fs.readdirSync
  };

  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.absolute = this._getValue(this._options.absolute, false);
      this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
      this.braceExpansion = this._getValue(this._options.braceExpansion, true);
      this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
      this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
      this.cwd = this._getValue(this._options.cwd, process.cwd());
      this.deep = this._getValue(this._options.deep, Infinity);
      this.dot = this._getValue(this._options.dot, false);
      this.extglob = this._getValue(this._options.extglob, true);
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
      this.fs = this._getFileSystemMethods(this._options.fs);
      this.globstar = this._getValue(this._options.globstar, true);
      this.ignore = this._getValue(this._options.ignore, []);
      this.markDirectories = this._getValue(this._options.markDirectories, false);
      this.objectMode = this._getValue(this._options.objectMode, false);
      this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
      this.onlyFiles = this._getValue(this._options.onlyFiles, true);
      this.stats = this._getValue(this._options.stats, false);
      this.suppressErrors = this._getValue(this._options.suppressErrors, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
      this.unique = this._getValue(this._options.unique, true);
      if (this.onlyDirectories) {
        this.onlyFiles = false;
      }
      if (this.stats) {
        this.objectMode = true;
      }
      this.ignore = [].concat(this.ignore);
    }
    _getValue(option, value) {
      return option === undefined ? value : option;
    }
    _getFileSystemMethods(methods = {}) {
      return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
    }
  }
  exports.default = Settings;
});

// node_modules/fast-glob/out/index.js
var require_out4 = __commonJS((exports, module) => {
  var taskManager = require_tasks();
  var async_1 = require_async6();
  var stream_1 = require_stream4();
  var sync_1 = require_sync6();
  var settings_1 = require_settings4();
  var utils = require_utils5();
  async function FastGlob(source, options) {
    assertPatternsInput(source);
    const works = getWorks(source, async_1.default, options);
    const result = await Promise.all(works);
    return utils.array.flatten(result);
  }
  (function(FastGlob2) {
    FastGlob2.glob = FastGlob2;
    FastGlob2.globSync = sync;
    FastGlob2.globStream = stream;
    FastGlob2.async = FastGlob2;
    function sync(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, sync_1.default, options);
      return utils.array.flatten(works);
    }
    FastGlob2.sync = sync;
    function stream(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, stream_1.default, options);
      return utils.stream.merge(works);
    }
    FastGlob2.stream = stream;
    function generateTasks(source, options) {
      assertPatternsInput(source);
      const patterns = [].concat(source);
      const settings = new settings_1.default(options);
      return taskManager.generate(patterns, settings);
    }
    FastGlob2.generateTasks = generateTasks;
    function isDynamicPattern(source, options) {
      assertPatternsInput(source);
      const settings = new settings_1.default(options);
      return utils.pattern.isDynamicPattern(source, settings);
    }
    FastGlob2.isDynamicPattern = isDynamicPattern;
    function escapePath(source) {
      assertPatternsInput(source);
      return utils.path.escape(source);
    }
    FastGlob2.escapePath = escapePath;
    function convertPathToPattern(source) {
      assertPatternsInput(source);
      return utils.path.convertPathToPattern(source);
    }
    FastGlob2.convertPathToPattern = convertPathToPattern;
    let posix;
    (function(posix2) {
      function escapePath2(source) {
        assertPatternsInput(source);
        return utils.path.escapePosixPath(source);
      }
      posix2.escapePath = escapePath2;
      function convertPathToPattern2(source) {
        assertPatternsInput(source);
        return utils.path.convertPosixPathToPattern(source);
      }
      posix2.convertPathToPattern = convertPathToPattern2;
    })(posix = FastGlob2.posix || (FastGlob2.posix = {}));
    let win32;
    (function(win322) {
      function escapePath2(source) {
        assertPatternsInput(source);
        return utils.path.escapeWindowsPath(source);
      }
      win322.escapePath = escapePath2;
      function convertPathToPattern2(source) {
        assertPatternsInput(source);
        return utils.path.convertWindowsPathToPattern(source);
      }
      win322.convertPathToPattern = convertPathToPattern2;
    })(win32 = FastGlob2.win32 || (FastGlob2.win32 = {}));
  })(FastGlob || (FastGlob = {}));
  function getWorks(source, _Provider, options) {
    const patterns = [].concat(source);
    const settings = new settings_1.default(options);
    const tasks = taskManager.generate(patterns, settings);
    const provider = new _Provider(settings);
    return tasks.map(provider.read, provider);
  }
  function assertPatternsInput(input) {
    const source = [].concat(input);
    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
    if (!isValidSource) {
      throw new TypeError("Patterns must be a string (non empty) or an array of strings");
    }
  }
  module.exports = FastGlob;
});

// src/analysis/codebase-analyzer.ts
import { readFile, stat } from "node:fs/promises";
import { extname, resolve } from "node:path";

class CodebaseAnalyzer {
  fileCache = new Map;
  workspaceRoot;
  defaultOptions = {
    depth: "moderate",
    includeTests: false,
    includeNodeModules: false,
    maxFileSize: 500000,
    maxFilesToScan: 1000,
    confidenceThreshold: 0.3
  };
  constructor(workspaceRoot) {
    this.workspaceRoot = workspaceRoot || process.cwd();
  }
  async analyzeForFeedback(feedback, options = {}) {
    const startTime = Date.now();
    const analysisOptions = { ...this.defaultOptions, ...options };
    try {
      const files = await this.scanCodebase(analysisOptions);
      console.log(`Scanned ${files.length} files for analysis`);
      const patterns = this.extractFeedbackPatterns(feedback);
      const relevantAreas = await this.findRelevantCodeAreas(files, patterns, feedback, analysisOptions);
      const suggestions = this.generateSuggestions(relevantAreas, feedback);
      return {
        relevantFiles: relevantAreas.filter((area) => area.confidence >= analysisOptions.confidenceThreshold),
        totalFilesScanned: files.length,
        processingTime: Date.now() - startTime,
        analysisDepth: analysisOptions.depth,
        suggestions
      };
    } catch (error) {
      console.error(`Codebase analysis failed: ${error}`);
      return {
        relevantFiles: [],
        totalFilesScanned: 0,
        processingTime: Date.now() - startTime,
        analysisDepth: analysisOptions.depth,
        suggestions: {
          possibleComponents: [],
          suspectedModules: [],
          relatedPatterns: []
        }
      };
    }
  }
  async scanCodebase(options) {
    const patterns = [
      "**/*.{ts,tsx,js,jsx,swift,m,h,mm}",
      "**/*.{kt,java,py,rb,php,go,rs}",
      "**/*.{vue,svelte,json}"
    ];
    if (options.includeTests) {
      patterns.push("**/*.{test,spec}.{ts,tsx,js,jsx}");
    }
    const globOptions = {
      cwd: this.workspaceRoot,
      absolute: false,
      ignore: this.buildIgnorePatterns(options)
    };
    const filePaths = await import_fast_glob.glob(patterns, globOptions);
    const limitedPaths = filePaths.slice(0, options.maxFilesToScan);
    const files = [];
    for (const filePath of limitedPaths) {
      try {
        const file = await this.loadFile(filePath, options);
        if (file) {
          files.push(file);
        }
      } catch (error) {
        console.warn(`Failed to load file ${filePath}: ${error}`);
      }
    }
    return files;
  }
  async loadFile(filePath, options) {
    const fullPath = resolve(this.workspaceRoot, filePath);
    try {
      if (this.fileCache.has(filePath)) {
        const cached = this.fileCache.get(filePath);
        if (cached) {
          const stats2 = await stat(fullPath);
          if (stats2.mtime <= cached.lastModified) {
            return cached;
          }
        }
      }
      const stats = await stat(fullPath);
      if (stats.size > options.maxFileSize) {
        return null;
      }
      const content = await readFile(fullPath, "utf-8");
      const language = this.detectLanguage(filePath);
      const lines = content.split(`
`).length;
      const file = {
        path: filePath,
        content,
        size: stats.size,
        language,
        lastModified: stats.mtime,
        lines
      };
      this.fileCache.set(filePath, file);
      return file;
    } catch (_error) {
      return null;
    }
  }
  extractFeedbackPatterns(feedback) {
    const patterns = [];
    if (feedback.type === "crash" && feedback.crashData) {
      if (feedback.crashData.exceptionType) {
        patterns.push(feedback.crashData.exceptionType);
      }
      if (feedback.crashData?.trace) {
        const stackPatterns = this.extractStackTracePatterns(feedback.crashData.trace);
        patterns.push(...stackPatterns);
      }
      if (feedback.crashData?.exceptionMessage) {
        const messagePatterns = this.extractCrashPatterns(feedback.crashData.exceptionMessage);
        patterns.push(...messagePatterns);
      }
    }
    if (feedback.screenshotData?.text) {
      const uiPatterns = this.extractUIPatterns(feedback.screenshotData.text);
      patterns.push(...uiPatterns);
    }
    patterns.push(feedback.deviceInfo.model);
    patterns.push(feedback.deviceInfo.osVersion);
    patterns.push(feedback.appVersion);
    patterns.push(feedback.buildNumber);
    return patterns.filter((p) => p && p.length > 2);
  }
  extractStackTracePatterns(trace) {
    const patterns = [];
    const stackRegexes = [
      /(\w+\.\w+):(\d+)/g,
      /(\w+)\.(\w+)\(/g,
      /-\[(\w+) (\w+)\]/g,
      /\+\[(\w+) (\w+)\]/g,
      /(\w+ViewController)\.(\w+)/g,
      /(\w+View)\.(\w+)/g,
      /(\w+Manager)\.(\w+)/g,
      /(\w+Service)\.(\w+)/g,
      /(\w+Delegate)\.(\w+)/g,
      /(\w+)\.body\.getter/g,
      /closure.*in (\w+)/g,
      /(\w+)\$(\w+)/g,
      /UIKit\.(\w+)/g,
      /Foundation\.(\w+)/g,
      /CoreData\.(\w+)/g,
      /Network\.(\w+)/g,
      /AVFoundation\.(\w+)/g,
      /EXC_BAD_ACCESS/g,
      /SIGABRT/g,
      /SIGSEGV/g,
      /OutOfMemoryError/g,
      /at ([\w.]+)\.([\w$]+)\(/g,
      /(\w+Exception)/g,
      /(\w+Activity)\.(\w+)/g,
      /(\w+Fragment)\.(\w+)/g,
      /RCT(\w+)/g,
      /Bridge\.(\w+)/g,
      /at (\w+) \(/g,
      /(\w+Error)/g,
      /(\w+\.js):(\d+):(\d+)/g
    ];
    for (const regex of stackRegexes) {
      const matches = trace.matchAll(regex);
      for (const match of matches) {
        if (match[1]) {
          patterns.push(match[1]);
        }
        if (match[2]) {
          patterns.push(match[2]);
        }
        if (match[3]) {
          patterns.push(match[3]);
        }
      }
    }
    this.extractFrameworkPatterns(trace, patterns);
    return patterns;
  }
  extractFrameworkPatterns(trace, patterns) {
    const iosFrameworks = [
      "UIKit",
      "Foundation",
      "CoreData",
      "CoreGraphics",
      "QuartzCore",
      "AVFoundation",
      "CoreLocation",
      "MapKit",
      "StoreKit",
      "GameKit",
      "CloudKit",
      "HealthKit",
      "HomeKit",
      "WatchKit",
      "CoreML",
      "ARKit",
      "RealityKit",
      "Vision",
      "Speech",
      "CoreBluetooth"
    ];
    for (const framework of iosFrameworks) {
      if (trace.includes(framework)) {
        patterns.push(framework);
      }
    }
    const thirdPartySDKs = [
      "Firebase",
      "Crashlytics",
      "Analytics",
      "Alamofire",
      "Realm",
      "SDWebImage",
      "Lottie",
      "SnapKit",
      "RxSwift",
      "Charts"
    ];
    for (const sdk of thirdPartySDKs) {
      if (trace.toLowerCase().includes(sdk.toLowerCase())) {
        patterns.push(sdk);
      }
    }
  }
  extractCrashPatterns(message) {
    const patterns = [];
    const quotedRegex = /"([^"]+)"/g;
    for (const match of message.matchAll(quotedRegex)) {
      if (match[1]) {
        patterns.push(match[1]);
      }
    }
    const camelCaseRegex = /\b[a-z]+(?:[A-Z][a-z]*)+\b/g;
    for (const match of message.matchAll(camelCaseRegex)) {
      patterns.push(match[0]);
    }
    return patterns;
  }
  extractUIPatterns(text) {
    const patterns = [];
    const quotedRegex = /"([^"]+)"|'([^']+)'/g;
    for (const match of text.matchAll(quotedRegex)) {
      const quoted = match[1] || match[2];
      if (quoted && quoted.length > 2) {
        patterns.push(quoted);
      }
    }
    return patterns;
  }
  async findRelevantCodeAreas(files, patterns, feedback, options) {
    const relevantAreas = [];
    for (const file of files) {
      const areas = await this.analyzeFileForPatterns(file, patterns, feedback, options);
      relevantAreas.push(...areas);
    }
    relevantAreas.sort((a, b) => b.confidence - a.confidence);
    const maxResults = options.depth === "light" ? 5 : options.depth === "moderate" ? 10 : 15;
    return relevantAreas.slice(0, maxResults);
  }
  async analyzeFileForPatterns(file, patterns, feedback, options) {
    const areas = [];
    const lines = file.content.split(`
`);
    for (const pattern of patterns) {
      const matches = this.findPatternInFile(file, pattern);
      for (const match of matches) {
        const confidence = this.calculateConfidence(match, file, feedback);
        if (confidence >= options.confidenceThreshold) {
          const startLine = Math.max(0, match.line - 3);
          const endLine = Math.min(lines.length - 1, match.line + 3);
          const contextLines = lines.slice(startLine, endLine + 1);
          areas.push({
            file: file.path,
            lines: `${startLine + 1}-${endLine + 1}`,
            content: contextLines.join(`
`),
            confidence,
            reason: `Pattern "${pattern}" found (${match.matchType} match)`,
            matchType: match.matchType,
            metadata: this.extractMetadata(file, match.line)
          });
        }
      }
    }
    if (feedback.type === "crash") {
      const crashAreas = this.findCrashRelatedAreas(file, feedback);
      areas.push(...crashAreas);
    } else {
      const uiAreas = this.findUIRelatedAreas(file, feedback);
      areas.push(...uiAreas);
    }
    return areas;
  }
  findPatternInFile(file, pattern) {
    const matches = [];
    const lines = file.content.split(`
`);
    for (let i = 0;i < lines.length; i++) {
      const line = lines[i];
      if (!line) {
        continue;
      }
      const exactIndex = line.toLowerCase().indexOf(pattern.toLowerCase());
      if (exactIndex !== -1) {
        matches.push({
          pattern,
          file: file.path,
          line: i,
          column: exactIndex,
          context: line.trim(),
          confidence: 0.9,
          matchType: "exact"
        });
        continue;
      }
      if (this.fuzzyMatch(line, pattern)) {
        matches.push({
          pattern,
          file: file.path,
          line: i,
          context: line.trim(),
          confidence: 0.7,
          matchType: "fuzzy"
        });
      }
    }
    return matches;
  }
  fuzzyMatch(text, pattern) {
    const lowerText = text.toLowerCase();
    const lowerPattern = pattern.toLowerCase();
    if (lowerPattern.length < 3) {
      return false;
    }
    let matchCount = 0;
    let lastIndex = -1;
    for (const char of lowerPattern) {
      const index = lowerText.indexOf(char, lastIndex + 1);
      if (index !== -1) {
        matchCount++;
        lastIndex = index;
      }
    }
    return matchCount / lowerPattern.length >= 0.7;
  }
  calculateConfidence(match, file, feedback) {
    let { confidence } = match;
    if (feedback.type === "crash") {
      if (file.language === "swift" || file.language === "objc") {
        confidence += 0.1;
      }
      if (file.path.includes("crash") || file.path.includes("error")) {
        confidence += 0.2;
      }
    } else {
      if (file.path.includes("ui") || file.path.includes("component")) {
        confidence += 0.1;
      }
      if (file.path.includes("screen") || file.path.includes("view")) {
        confidence += 0.1;
      }
    }
    if (!file.path.includes("test") && !file.path.includes("spec")) {
      confidence += 0.05;
    }
    if (file.lines > 1000) {
      confidence -= 0.1;
    }
    if (file.lines < 200) {
      confidence += 0.05;
    }
    return Math.min(1, Math.max(0, confidence));
  }
  findCrashRelatedAreas(file, _feedback) {
    const areas = [];
    const lines = file.content.split(`
`);
    const errorPatterns = [
      /throw\s+/i,
      /NSException/i,
      /Error\s*\(/i,
      /fatalError/i,
      /assertionFailure/i
    ];
    for (let i = 0;i < lines.length; i++) {
      const line = lines[i];
      if (line) {
        for (const pattern of errorPatterns) {
          if (pattern.test(line)) {
            const startLine = Math.max(0, i - 2);
            const endLine = Math.min(lines.length - 1, i + 5);
            const contextLines = lines.slice(startLine, endLine + 1);
            areas.push({
              file: file.path,
              lines: `${startLine + 1}-${endLine + 1}`,
              content: contextLines.join(`
`),
              confidence: 0.6,
              reason: "Contains error handling code",
              matchType: "structural",
              metadata: this.extractMetadata(file, i)
            });
            break;
          }
        }
      }
    }
    return areas;
  }
  findUIRelatedAreas(file, _feedback) {
    const areas = [];
    const lines = file.content.split(`
`);
    const uiPatterns = [
      /UIButton/i,
      /UIViewController/i,
      /UIView/i,
      /Button/i,
      /View/i,
      /Component/i,
      /render\s*\(/i,
      /useState/i,
      /useEffect/i,
      /@State/i,
      /@IBAction/i,
      /@IBOutlet/i
    ];
    for (let i = 0;i < lines.length; i++) {
      const line = lines[i];
      if (line) {
        for (const pattern of uiPatterns) {
          if (pattern.test(line)) {
            const startLine = Math.max(0, i - 2);
            const endLine = Math.min(lines.length - 1, i + 5);
            const contextLines = lines.slice(startLine, endLine + 1);
            areas.push({
              file: file.path,
              lines: `${startLine + 1}-${endLine + 1}`,
              content: contextLines.join(`
`),
              confidence: 0.5,
              reason: "Contains UI-related code",
              matchType: "structural",
              metadata: this.extractMetadata(file, i)
            });
            break;
          }
        }
      }
    }
    return areas;
  }
  extractMetadata(file, lineNumber) {
    const lines = file.content.split(`
`);
    const metadata = {};
    for (let i = lineNumber;i >= Math.max(0, lineNumber - 10); i--) {
      const line = lines[i];
      if (!line) {
        continue;
      }
      const functionMatch = line.match(/(?:function|func|def)\s+(\w+)/);
      if (functionMatch) {
        metadata.function = functionMatch[1];
      }
      const classMatch = line.match(/(?:class|struct|interface)\s+(\w+)/);
      if (classMatch) {
        metadata.class = classMatch[1];
      }
    }
    return metadata;
  }
  generateSuggestions(relevantAreas, _feedback) {
    const componentNames = new Set;
    const moduleNames = new Set;
    const patterns = new Set;
    for (const area of relevantAreas) {
      if (area.metadata?.componentName) {
        componentNames.add(area.metadata.componentName);
      }
      if (area.metadata?.className) {
        componentNames.add(area.metadata.className);
      }
      const pathParts = area.file.split("/");
      if (pathParts.length > 1) {
        const parentDir = pathParts[pathParts.length - 2];
        if (parentDir) {
          moduleNames.add(parentDir);
        }
      }
      patterns.add(area.reason);
    }
    return {
      possibleComponents: Array.from(componentNames).slice(0, 5),
      suspectedModules: Array.from(moduleNames).slice(0, 5),
      relatedPatterns: Array.from(patterns).slice(0, 5)
    };
  }
  detectLanguage(filePath) {
    const ext = extname(filePath).toLowerCase();
    const languageMap = {
      ".ts": "typescript",
      ".tsx": "typescript",
      ".js": "javascript",
      ".jsx": "javascript",
      ".swift": "swift",
      ".m": "objc",
      ".h": "objc",
      ".mm": "objc",
      ".kt": "kotlin",
      ".java": "java",
      ".py": "python",
      ".rb": "ruby",
      ".php": "php",
      ".go": "go",
      ".rs": "rust",
      ".cpp": "cpp",
      ".c": "c",
      ".vue": "vue",
      ".svelte": "svelte"
    };
    return languageMap[ext] || "unknown";
  }
  buildIgnorePatterns(options) {
    const patterns = [
      "**/node_modules/**",
      "**/build/**",
      "**/dist/**",
      "**/coverage/**",
      "**/.git/**",
      "**/.DS_Store",
      "**/*.log",
      "**/*.lock"
    ];
    if (!options.includeTests) {
      patterns.push("**/*.test.*", "**/*.spec.*", "**/tests/**", "**/__tests__/**");
    }
    if (!options.includeNodeModules) {
      patterns.push("**/node_modules/**");
    }
    return patterns;
  }
  clearCache() {
    this.fileCache.clear();
  }
  getCacheStats() {
    return {
      size: this.fileCache.size,
      files: Array.from(this.fileCache.keys())
    };
  }
}
function getCodebaseAnalyzer(workspaceRoot) {
  if (!_analyzerInstance || workspaceRoot && workspaceRoot !== _analyzerInstance.workspaceRoot) {
    _analyzerInstance = new CodebaseAnalyzer(workspaceRoot);
  }
  return _analyzerInstance;
}
var import_fast_glob, _analyzerInstance = null;
var init_codebase_analyzer = __esm(() => {
  import_fast_glob = __toESM(require_out4(), 1);
});

// node_modules/llm-bridge/dist/index.mjs
function generateId() {
  return `msg_${Date.now()}_${Math.random().toString(36).substring(7)}`;
}
function parseAnthropicContent(content) {
  if (typeof content === "string") {
    return [
      {
        _original: { provider: "anthropic", raw: content },
        text: content,
        type: "text"
      }
    ];
  }
  if (Array.isArray(content)) {
    return content.map((block) => {
      if (block.type === "text") {
        return {
          _original: { provider: "anthropic", raw: block },
          text: block.text,
          type: "text"
        };
      }
      if (block.type === "image") {
        const imageBlock = block;
        return {
          _original: { provider: "anthropic", raw: block },
          media: {
            data: imageBlock.source.data,
            mimeType: imageBlock.source.media_type
          },
          type: "image"
        };
      }
      if (block.type === "tool_use") {
        const toolBlock = block;
        return {
          _original: { provider: "anthropic", raw: block },
          tool_call: {
            arguments: toolBlock.input || {},
            id: toolBlock.id,
            metadata: {
              input: toolBlock.input
            },
            name: toolBlock.name
          },
          type: "tool_call"
        };
      }
      if (block.type === "tool_result") {
        return {
          _original: { provider: "anthropic", raw: block },
          tool_result: {
            metadata: {
              content: block.content,
              tool_use_id: block.tool_use_id
            },
            name: "",
            result: block.content,
            tool_call_id: block.tool_use_id
          },
          type: "tool_result"
        };
      }
      return {
        _original: { provider: "anthropic", raw: block },
        text: JSON.stringify(block),
        type: "text"
      };
    });
  }
  return [
    {
      _original: { provider: "anthropic", raw: content },
      text: JSON.stringify(content),
      type: "text"
    }
  ];
}
function anthropicToUniversal(body) {
  const universalMessages = body.messages.map((msg, index) => {
    let cacheControl = undefined;
    if (Array.isArray(msg.content)) {
      const hasCache = msg.content.some((block) => typeof block === "object" && block && ("cache_control" in block) && block.cache_control);
      if (hasCache) {
        cacheControl = { type: "ephemeral" };
      }
    }
    return {
      content: parseAnthropicContent(msg.content),
      id: generateId(),
      metadata: {
        originalIndex: index,
        provider: "anthropic",
        cache_control: cacheControl
      },
      role: msg.role
    };
  });
  const tools = body.tools?.map((tool) => {
    if ("input_schema" in tool) {
      return {
        _original: { provider: "anthropic", raw: tool },
        description: tool.description || "",
        metadata: {
          input_schema: tool.input_schema
        },
        name: tool.name,
        parameters: tool.input_schema
      };
    }
    return {
      _original: { provider: "anthropic", raw: tool },
      description: "",
      metadata: {},
      name: tool.name || "unknown",
      parameters: {}
    };
  }) || [];
  let systemPrompt = undefined;
  if (body.system) {
    if (typeof body.system === "string") {
      systemPrompt = body.system;
    } else if (Array.isArray(body.system)) {
      const textParts = body.system.filter((part) => part.type === "text");
      if (textParts.length > 0) {
        const mainText = textParts.map((part) => part.text).join(" ");
        const hasCacheControl = textParts.some((part) => part.cache_control);
        if (hasCacheControl) {
          systemPrompt = {
            content: mainText,
            cache_control: { type: "ephemeral" },
            _original: { provider: "anthropic", raw: body.system }
          };
        } else {
          systemPrompt = mainText;
        }
      }
    }
  }
  return {
    _original: { provider: "anthropic", raw: body },
    max_tokens: body.max_tokens,
    messages: universalMessages,
    model: String(body.model),
    provider: "anthropic",
    provider_params: {
      anthropic_version: body.anthropic_version,
      stop_sequences: body.stop_sequences
    },
    stream: body.stream,
    system: systemPrompt,
    temperature: body.temperature,
    tool_choice: typeof body.tool_choice === "string" ? body.tool_choice : undefined,
    tools: tools.length > 0 ? tools : undefined,
    top_p: body.top_p
  };
}
function hasMessagesBeenModified(universal) {
  if (!universal._original?.raw)
    return true;
  const originalBody = universal._original.raw;
  const originalMessages = originalBody.messages || [];
  if (originalMessages.length !== universal.messages.length)
    return true;
  const hasInjectedMessages = universal.messages.some((m) => m.metadata.contextInjection || !m.metadata.originalIndex);
  return hasInjectedMessages;
}
function universalToAnthropic(universal) {
  if (universal._original?.provider === "anthropic" && !hasMessagesBeenModified(universal)) {
    return universal._original.raw;
  }
  const messages = universal.messages.map((msg) => {
    const anthropicMessage = {
      content: msg.content.map((content) => {
        if (content._original?.provider === "anthropic") {
          if (typeof content._original.raw !== "string") {
            return content._original.raw;
          }
        }
        if (typeof content === "string") {
          return {
            text: content,
            type: "text"
          };
        }
        if (content.type === "text") {
          return {
            text: content.text || "",
            type: "text"
          };
        }
        if (content.type === "image") {
          return {
            source: {
              data: content.media?.data || "",
              media_type: content.media?.mimeType,
              type: "base64"
            },
            type: "image"
          };
        }
        if (content.type === "tool_call") {
          return {
            id: content.tool_call?.id || "",
            input: content.tool_call?.arguments || {},
            name: content.tool_call?.name || "",
            type: "tool_use"
          };
        }
        if (content.type === "tool_result") {
          return {
            content: typeof content.tool_result?.result === "string" ? content.tool_result.result : JSON.stringify(content.tool_result?.result || {}),
            tool_use_id: content.tool_result?.tool_call_id || "",
            type: "tool_result"
          };
        }
        return {
          text: JSON.stringify(content),
          type: "text"
        };
      }),
      role: msg.role
    };
    return anthropicMessage;
  });
  const result = {
    max_tokens: universal.max_tokens,
    messages,
    model: universal.model,
    stream: universal.stream,
    temperature: universal.temperature,
    top_p: universal.top_p
  };
  if (universal.system) {
    result.system = typeof universal.system === "string" ? universal.system : universal.system.content;
  }
  if (universal.tools) {
    result.tools = universal.tools.map((tool) => {
      if (tool._original?.provider === "anthropic") {
        return tool._original.raw;
      }
      return {
        description: tool.description,
        input_schema: {
          ...tool.parameters,
          type: "object"
        },
        name: tool.name
      };
    });
  }
  if (universal.tool_choice) {
    if (typeof universal.tool_choice === "string") {
      result.tool_choice = { type: universal.tool_choice };
    } else {
      result.tool_choice = universal.tool_choice;
    }
  }
  if (universal.provider_params?.stop_sequences) {
    result.stop_sequences = universal.provider_params.stop_sequences;
  }
  return result;
}
function parseGoogleContent(parts) {
  if (!parts)
    return [];
  return parts.map((part) => {
    if (part.text) {
      return {
        _original: { provider: "google", raw: part },
        text: part.text,
        type: "text"
      };
    }
    if (part.inlineData) {
      const mimeType = part.inlineData.mimeType;
      if (mimeType.startsWith("image/")) {
        return {
          _original: { provider: "google", raw: part },
          media: {
            data: part.inlineData.data,
            mimeType
          },
          type: "image"
        };
      }
      if (mimeType.startsWith("audio/")) {
        return {
          _original: { provider: "google", raw: part },
          media: {
            data: part.inlineData.data,
            mimeType
          },
          type: "audio"
        };
      }
      if (mimeType.startsWith("video/")) {
        return {
          _original: { provider: "google", raw: part },
          media: {
            data: part.inlineData.data,
            mimeType
          },
          type: "video"
        };
      }
      if (mimeType === "application/pdf" || mimeType.includes("document")) {
        return {
          _original: { provider: "google", raw: part },
          media: {
            data: part.inlineData.data,
            fileName: part.fileName || "document.pdf",
            mimeType
          },
          type: "document"
        };
      }
    } else if (part.fileData) {
      return {
        _original: { provider: "google", raw: part },
        media: {
          fileName: part.fileData.fileName || "document",
          fileUri: part.fileData.fileUri,
          mimeType: part.fileData.mimeType
        },
        type: "document"
      };
    } else if (part.functionCall) {
      return {
        _original: { provider: "google", raw: part },
        tool_call: {
          arguments: part.functionCall.args,
          id: `call_${Date.now()}`,
          metadata: {
            args: part.functionCall.args
          },
          name: part.functionCall.name
        },
        type: "tool_call"
      };
    } else if (part.functionResponse) {
      return {
        _original: { provider: "google", raw: part },
        tool_result: {
          name: part.functionResponse.name,
          result: part.functionResponse.response,
          tool_call_id: `call_${part.functionResponse.name}`,
          metadata: {
            response: part.functionResponse.response
          }
        },
        type: "tool_result"
      };
    }
    return {
      _original: { provider: "google", raw: part },
      text: JSON.stringify(part),
      type: "text"
    };
  });
}
function googleToUniversal(body) {
  const universalMessages = (body.contents || []).map((content, index) => ({
    content: parseGoogleContent(content.parts),
    id: generateId(),
    metadata: {
      originalIndex: index,
      parts_metadata: content.parts,
      provider: "google"
    },
    role: content.role === "model" ? "assistant" : content.role
  }));
  const tools = [];
  if (body.tools) {
    for (const tool of body.tools) {
      if ("functionDeclarations" in tool && tool.functionDeclarations) {
        for (const fn of tool.functionDeclarations) {
          tools.push({
            _original: { provider: "google", raw: fn },
            description: fn.description || "",
            metadata: {
              function_declarations: fn
            },
            name: fn.name,
            parameters: fn.parameters || {}
          });
        }
      }
    }
  }
  let systemPrompt;
  if (body.systemInstruction && typeof body.systemInstruction === "object" && "parts" in body.systemInstruction && body.systemInstruction.parts) {
    systemPrompt = body.systemInstruction.parts.filter((part) => part.text).map((part) => part.text).join(" ");
  }
  return {
    _original: { provider: "google", raw: body },
    max_tokens: body.generationConfig?.maxOutputTokens,
    messages: universalMessages,
    model: "gemini-pro",
    provider: "google",
    provider_params: {
      generation_config: body.generationConfig,
      safety_settings: body.safetySettings
    },
    stream: false,
    system: systemPrompt,
    temperature: body.generationConfig?.temperature,
    tool_choice: body.toolConfig?.functionCallingConfig?.mode?.toLowerCase(),
    tools: tools.length > 0 ? tools : undefined,
    top_p: body.generationConfig?.topP
  };
}
function hasMessagesBeenModified2(universal) {
  if (!universal._original?.raw)
    return true;
  const originalBody = universal._original.raw;
  const originalMessages = originalBody.contents || [];
  if (originalMessages.length !== universal.messages.length)
    return true;
  const hasInjectedMessages = universal.messages.some((m) => m.metadata.contextInjection || !m.metadata.originalIndex);
  return hasInjectedMessages;
}
function universalToGoogle(universal) {
  if (universal._original?.provider === "google" && !hasMessagesBeenModified2(universal)) {
    return universal._original.raw;
  }
  const systemMessages = universal.messages.filter((msg) => msg.role === "system");
  const regularMessages = universal.messages.filter((msg) => msg.role !== "system");
  const contents = regularMessages.map((msg) => ({
    parts: msg.content.map((content) => {
      if (content._original?.provider === "google") {
        const originalRaw = content._original.raw;
        if (typeof originalRaw === "string") {
          throw new Error(`Invalid _original.raw format for Google provider. Expected object with 'text' property, got string: "${originalRaw}". Remove the _original field and let the library auto-generate it, or use format: { text: "${originalRaw}" }`);
        }
        if (typeof originalRaw === "object" && originalRaw !== null && "text" in originalRaw) {
          return originalRaw;
        }
        throw new Error(`Invalid _original.raw format for Google provider. Expected object with 'text' property, got: ${JSON.stringify(originalRaw)}`);
      }
      if (content.type === "text") {
        return { text: content.text };
      }
      if (content.type === "image") {
        return {
          inlineData: {
            data: content.media.data,
            mimeType: content.media.mimeType || "image/jpeg"
          }
        };
      }
      if (content.type === "audio") {
        return {
          inlineData: {
            data: content.media.data,
            mimeType: content.media.mimeType || "audio/mp3"
          }
        };
      }
      if (content.type === "video") {
        return {
          inlineData: {
            data: content.media.data,
            mimeType: content.media.mimeType || "video/mp4"
          }
        };
      }
      if (content.type === "document") {
        return {
          inlineData: {
            data: content.media.data,
            mimeType: content.media.mimeType || "application/pdf"
          }
        };
      }
      if (content.type === "tool_call") {
        return {
          functionCall: {
            args: content.tool_call.arguments,
            name: content.tool_call.name
          }
        };
      }
      if (content.type === "tool_result") {
        return {
          functionResponse: {
            name: content.tool_result.name,
            response: content.tool_result.result
          }
        };
      }
      return { text: JSON.stringify(content) };
    }),
    role: msg.role === "assistant" ? "model" : msg.role
  }));
  const result = {
    contents
  };
  const systemParts = [];
  if (universal.system) {
    const systemContent = typeof universal.system === "string" ? universal.system : universal.system.content;
    systemParts.push({ text: systemContent });
  }
  if (systemMessages.length > 0) {
    for (const systemMsg of systemMessages) {
      for (const content of systemMsg.content) {
        if (content.type === "text") {
          systemParts.push({ text: content.text });
        }
      }
    }
  }
  if (systemParts.length > 0) {
    result.systemInstruction = {
      parts: systemParts
    };
  }
  if (universal.temperature !== undefined || universal.max_tokens !== undefined || universal.top_p !== undefined) {
    result.generationConfig = {
      maxOutputTokens: universal.max_tokens,
      temperature: universal.temperature,
      topP: universal.top_p
    };
  }
  if (universal.tools) {
    result.tools = [
      {
        functionDeclarations: universal.tools.map((tool) => {
          if (tool._original?.provider === "google") {
            return tool._original.raw;
          }
          return {
            description: tool.description,
            name: tool.name,
            parameters: tool.parameters
          };
        })
      }
    ];
    if (universal.tool_choice) {
      result.toolConfig = {
        functionCallingConfig: {
          mode: universal.tool_choice === "auto" ? "AUTO" : universal.tool_choice === "required" ? "ANY" : "NONE"
        }
      };
    }
  }
  if (universal.provider_params) {
    if (universal.provider_params.generation_config) {
      result.generationConfig = {
        ...result.generationConfig,
        ...universal.provider_params.generation_config
      };
    }
    if (universal.provider_params.safety_settings) {
      result.safetySettings = universal.provider_params.safety_settings;
    }
  }
  return result;
}
function extractSystemFromOpenAIMessages(messages) {
  const systemMessage = messages.find((msg) => msg.role === "system");
  if (!systemMessage)
    return;
  if (typeof systemMessage.content === "string") {
    return systemMessage.content;
  }
  if (Array.isArray(systemMessage.content)) {
    const textParts = systemMessage.content.filter((part) => part.type === "text").map((part) => part.text);
    return textParts.join(" ");
  }
  return;
}
function parseOpenAIContent(content) {
  if (typeof content === "string") {
    return [
      {
        _original: { provider: "openai", raw: content },
        text: content,
        type: "text"
      }
    ];
  }
  if (Array.isArray(content)) {
    return content.map((part) => {
      if (part.type === "text") {
        return {
          _original: { provider: "openai", raw: part },
          text: part.text,
          type: "text"
        };
      }
      if (part.type === "image_url") {
        const url = part.image_url.url;
        let mimeType;
        let data;
        if (url.startsWith("data:")) {
          const match = url.match(/^data:([^;]+);base64,(.+)$/);
          if (match) {
            mimeType = match[1];
            data = match[2];
          }
        }
        return {
          _original: { provider: "openai", raw: part },
          media: {
            detail: part.image_url.detail,
            url: part.image_url.url,
            mimeType,
            data
          },
          type: "image"
        };
      }
      return {
        _original: { provider: "openai", raw: part },
        text: JSON.stringify(part),
        type: "text"
      };
    });
  }
  return [
    {
      _original: { provider: "openai", raw: content },
      text: JSON.stringify(content),
      type: "text"
    }
  ];
}
function parseOpenAIToolCalls(tool_calls) {
  return tool_calls.map((tc) => ({
    arguments: JSON.parse(tc.function.arguments),
    id: tc.id,
    metadata: {
      type: tc.type
    },
    name: tc.function.name
  }));
}
function openaiToUniversal(body) {
  if (!body.messages || !Array.isArray(body.messages)) {
    return {
      _original: { provider: "openai", raw: body },
      messages: [],
      model: String(body.model || "unknown"),
      provider: "openai"
    };
  }
  const systemPrompt = extractSystemFromOpenAIMessages(body.messages);
  const nonSystemMessages = body.messages.filter((msg) => msg.role !== "system");
  const universalMessages = nonSystemMessages.map((msg, index) => {
    const baseMessage = {
      content: parseOpenAIContent(msg.content),
      id: generateId(),
      metadata: {
        originalIndex: index,
        provider: "openai"
      },
      role: msg.role
    };
    if ("tool_calls" in msg && msg.tool_calls) {
      baseMessage.tool_calls = parseOpenAIToolCalls(msg.tool_calls);
    }
    if (msg.role === "tool") {
      const toolMsg = msg;
      baseMessage.metadata.tool_call_id = toolMsg.tool_call_id;
    }
    return baseMessage;
  });
  const tools = body.tools?.map((tool) => ({
    _original: { provider: "openai", raw: tool },
    description: tool.function.description || "",
    metadata: {
      type: tool.type
    },
    name: tool.function.name,
    parameters: tool.function.parameters || {}
  })) || [];
  return {
    _original: { provider: "openai", raw: body },
    frequency_penalty: body.frequency_penalty ?? undefined,
    max_tokens: body.max_tokens ?? undefined,
    messages: universalMessages,
    model: String(body.model),
    presence_penalty: body.presence_penalty ?? undefined,
    provider: "openai",
    provider_params: {
      logprobs: body.logprobs ?? undefined,
      response_format: body.response_format ?? undefined,
      top_logprobs: body.top_logprobs ?? undefined
    },
    seed: body.seed ?? undefined,
    stream: body.stream ?? undefined,
    system: systemPrompt,
    temperature: body.temperature ?? undefined,
    tool_choice: body.tool_choice,
    tools: tools.length > 0 ? tools : undefined,
    top_p: body.top_p ?? undefined
  };
}
function hasMessagesBeenModified3(universal) {
  if (!universal._original?.raw)
    return true;
  const originalBody = universal._original.raw;
  const originalMessages = originalBody.messages || [];
  const originalNonSystemCount = originalMessages.filter((m) => m.role !== "system").length;
  const currentNonSystemCount = universal.messages.filter((m) => m.role !== "system").length;
  if (originalNonSystemCount !== currentNonSystemCount)
    return true;
  const hasInjectedMessages = universal.messages.some((m) => m.metadata.contextInjection || !m.metadata.originalIndex);
  return hasInjectedMessages;
}
function universalToOpenAI(universal) {
  if (universal._original?.provider === "openai" && !hasMessagesBeenModified3(universal)) {
    return universal._original.raw;
  }
  const messages = [];
  if (universal.system) {
    if (typeof universal.system === "object" && universal.system._original?.provider === "openai") {
      const originalSystem = universal.system._original.raw;
      messages.push(originalSystem);
    } else {
      const systemContent = typeof universal.system === "string" ? universal.system : universal.system.content;
      messages.push({
        content: systemContent,
        role: "system"
      });
    }
  }
  for (const msg of universal.messages) {
    const openaiMessage = {
      role: msg.role
    };
    if (msg.content.length === 1 && msg.content[0]?._original?.provider === "openai") {
      const originalContent = msg.content[0]?._original?.raw;
      if (originalContent) {
        openaiMessage.content = originalContent;
      } else {
        openaiMessage.content = msg.content[0]?.text || "";
      }
    } else if (msg.content.length === 1 && msg.content[0]?.type === "text") {
      openaiMessage.content = msg.content[0]?.text || "";
    } else {
      openaiMessage.content = msg.content.map((content) => {
        if (content._original?.provider === "openai") {
          return content._original?.raw;
        }
        if (content.type === "text") {
          return {
            text: content.text || "",
            type: "text"
          };
        }
        if (content.type === "image") {
          return {
            image_url: {
              detail: content.media?.detail,
              url: content.media?.url
            },
            type: "image_url"
          };
        }
        return {
          text: JSON.stringify(content),
          type: "text"
        };
      });
    }
    if (msg.tool_calls) {
      openaiMessage.tool_calls = msg.tool_calls.map((tc) => {
        if (tc.metadata && "type" in tc.metadata && tc.metadata.type === "function") {
          return {
            function: {
              arguments: JSON.stringify(tc.arguments),
              name: tc.name
            },
            id: tc.id,
            type: "function"
          };
        }
        return {
          function: {
            arguments: JSON.stringify(tc.arguments),
            name: tc.name
          },
          id: tc.id,
          type: "function"
        };
      });
    }
    if (msg.role === "tool") {
      openaiMessage.name = msg.metadata.name;
      openaiMessage.tool_call_id = msg.metadata.tool_call_id;
    }
    messages.push(openaiMessage);
  }
  let tools;
  if (universal.tools) {
    tools = universal.tools.map((tool) => {
      if (tool._original?.provider === "openai") {
        return tool._original.raw;
      }
      return {
        function: {
          description: tool.description,
          name: tool.name,
          parameters: tool.parameters
        },
        type: "function"
      };
    });
  }
  const result = {
    frequency_penalty: universal.frequency_penalty,
    max_tokens: universal.max_tokens,
    messages,
    model: universal.model,
    presence_penalty: universal.presence_penalty,
    seed: universal.seed,
    stream: universal.stream,
    temperature: universal.temperature,
    tool_choice: universal.tool_choice,
    top_p: universal.top_p
  };
  if (tools) {
    result.tools = tools;
  }
  if (universal.provider_params) {
    if (universal.provider_params.response_format !== undefined) {
      result.response_format = universal.provider_params.response_format;
    }
    if (universal.provider_params.logprobs !== undefined) {
      result.logprobs = universal.provider_params.logprobs;
    }
    if (universal.provider_params.top_logprobs !== undefined) {
      result.top_logprobs = universal.provider_params.top_logprobs;
    }
  }
  return result;
}
function countUniversalTokens(input) {
  let inputTokens = 0;
  let multimodalContentCount = 0;
  let toolCallsCount = 0;
  if (Array.isArray(input)) {
    const messages = input;
    for (const message of messages) {
      for (const content of message.content) {
        if (content.type === "text" && content.text) {
          inputTokens += Math.ceil(content.text.length / 4);
        }
        if (["image", "audio", "video", "document"].includes(content.type)) {
          multimodalContentCount++;
          switch (content.type) {
            case "image":
              inputTokens += 85;
              break;
            case "audio":
              inputTokens += 100;
              break;
            case "video":
              inputTokens += 200;
              break;
            case "document":
              inputTokens += 500;
              break;
          }
        }
        if (content.type === "tool_call") {
          toolCallsCount++;
          inputTokens += 50;
        }
      }
      if (message.tool_calls) {
        toolCallsCount += message.tool_calls.length;
        inputTokens += message.tool_calls.length * 50;
      }
    }
    return {
      inputTokens,
      multimodalContentCount,
      toolCallsCount
    };
  }
  const universal = input;
  if (universal.system) {
    const systemText = typeof universal.system === "string" ? universal.system : universal.system.content;
    inputTokens += Math.ceil(systemText.length / 4);
  }
  for (const message of universal.messages) {
    for (const content of message.content) {
      if (content.type === "text" && content.text) {
        inputTokens += Math.ceil(content.text.length / 4);
      }
      if (["image", "audio", "video", "document"].includes(content.type)) {
        multimodalContentCount++;
        switch (content.type) {
          case "image":
            inputTokens += 85;
            break;
          case "audio":
            inputTokens += 100;
            break;
          case "video":
            inputTokens += 200;
            break;
          case "document":
            inputTokens += 500;
            break;
        }
      }
      if (content.type === "tool_call") {
        toolCallsCount++;
        inputTokens += 50;
      }
    }
    if (message.tool_calls) {
      toolCallsCount += message.tool_calls.length;
      inputTokens += message.tool_calls.length * 50;
    }
  }
  if (universal.tools) {
    for (const tool of universal.tools) {
      const toolJson = JSON.stringify(tool);
      inputTokens += Math.ceil(toolJson.length / 4);
    }
  }
  const estimatedOutputTokens = universal.max_tokens || 1000;
  return {
    estimatedOutputTokens,
    inputTokens,
    multimodalContentCount,
    toolCallsCount
  };
}
function translateBetweenProviders(fromProvider, toProvider, body) {
  const universal = toUniversal(fromProvider, body);
  const universalForTarget = {
    ...universal,
    provider: toProvider
  };
  return fromUniversal(toProvider, universalForTarget);
}
function detectProvider(targetUrl, body) {
  const hostname = new URL(targetUrl).hostname.toLowerCase();
  if (hostname.includes("anthropic.com") || hostname.includes("claude.ai")) {
    return "anthropic";
  }
  if (hostname.includes("generativelanguage.googleapis.com") || hostname.includes("aiplatform.googleapis.com") || hostname.includes("googleapis.com")) {
    return "google";
  }
  if (body && typeof body === "object") {
    const bodyObj = body;
    if (bodyObj.anthropic_version || typeof bodyObj.system === "string" && bodyObj.messages && !bodyObj.contents || bodyObj.max_tokens_to_sample) {
      return "anthropic";
    }
    if (bodyObj.contents || bodyObj.systemInstruction || bodyObj.generationConfig || bodyObj.tools && Array.isArray(bodyObj.tools) && bodyObj.tools[0]?.functionDeclarations) {
      return "google";
    }
  }
  return "openai";
}
function toUniversal(provider, body) {
  switch (provider) {
    case "openai":
      return openaiToUniversal(body);
    case "anthropic":
      return anthropicToUniversal(body);
    case "google":
      return googleToUniversal(body);
    default:
      throw new Error(`Unsupported provider: ${provider}`);
  }
}
function fromUniversal(provider, universal) {
  switch (provider) {
    case "openai":
      return universalToOpenAI(universal);
    case "anthropic":
      return universalToAnthropic(universal);
    case "google":
      return universalToGoogle(universal);
    default:
      throw new Error(`Unsupported provider: ${provider}`);
  }
}
function getProviderErrorType(errorType, provider) {
  if (provider === "openai") {
    const typeMap = {
      rate_limit_error: "insufficient_quota",
      authentication_error: "invalid_api_key",
      permission_error: "permission_denied",
      context_length_exceeded: "context_length_exceeded",
      content_filter_error: "content_filter",
      model_not_found: "model_not_found",
      insufficient_quota: "insufficient_quota"
    };
    return typeMap[errorType] || errorType;
  }
  if (provider === "google") {
    const statusMap = {
      invalid_request_error: "INVALID_ARGUMENT",
      invalid_argument: "INVALID_ARGUMENT",
      authentication_error: "UNAUTHENTICATED",
      permission_error: "PERMISSION_DENIED",
      not_found_error: "NOT_FOUND",
      rate_limit_error: "RESOURCE_EXHAUSTED",
      api_error: "INTERNAL",
      unavailable: "UNAVAILABLE",
      deadline_exceeded: "DEADLINE_EXCEEDED"
    };
    return statusMap[errorType] || "INVALID_ARGUMENT";
  }
  return errorType;
}
function getGoogleReason(errorType) {
  const reasonMap = {
    authentication_error: "API_KEY_INVALID",
    rate_limit_error: "RATE_LIMIT_EXCEEDED",
    permission_error: "ACCESS_DENIED",
    invalid_request_error: "INVALID_REQUEST",
    invalid_argument: "INVALID_REQUEST",
    model_not_found: "MODEL_NOT_FOUND",
    context_length_exceeded: "CONTEXT_LENGTH_EXCEEDED"
  };
  return reasonMap[errorType] || "UNKNOWN_ERROR";
}
function buildUniversalError(errorType, message, provider, options = {}) {
  const httpStatus = ERROR_TYPE_TO_HTTP_STATUS[errorType] || 500;
  const statusCode = httpStatus;
  const universal = {
    type: errorType,
    message,
    code: options.code,
    provider,
    httpStatus,
    details: options.details,
    toolName: options.toolName,
    functionName: options.functionName,
    usage: options.usage,
    retryAfter: options.retryAfter,
    timestamp: Date.now()
  };
  let body;
  switch (provider) {
    case "openai":
      body = {
        error: {
          code: options.code?.toString() || getProviderErrorType(errorType, provider),
          message,
          param: null,
          type: getProviderErrorType(errorType, provider)
        }
      };
      break;
    case "google":
      body = {
        error: {
          code: httpStatus,
          message,
          status: getProviderErrorType(errorType, provider),
          details: [
            {
              "@type": "type.googleapis.com/google.rpc.ErrorInfo",
              reason: getGoogleReason(errorType)
            }
          ]
        }
      };
      break;
    case "anthropic":
      body = {
        type: "error",
        error: {
          type: getProviderErrorType(errorType, provider),
          message
        }
      };
      break;
    default:
      throw new Error(`Unsupported provider: ${provider}`);
  }
  return { statusCode, body, universal };
}
function translateError(universal, targetProvider) {
  const result = buildUniversalError(universal.type, universal.message, targetProvider, {
    code: universal.code,
    details: universal.details,
    toolName: universal.toolName,
    functionName: universal.functionName,
    usage: universal.usage,
    retryAfter: universal.retryAfter
  });
  return {
    statusCode: result.statusCode,
    body: result.body
  };
}
var CACHE_DURATION, ERROR_TYPE_TO_HTTP_STATUS;
var init_dist = __esm(() => {
  CACHE_DURATION = 1000 * 60 * 60 * 24;
  ERROR_TYPE_TO_HTTP_STATUS = {
    invalid_request_error: 400,
    invalid_argument: 400,
    context_length_exceeded: 400,
    prompt_too_long: 400,
    output_too_long: 400,
    invalid_model: 400,
    invalid_function_call: 400,
    content_policy_violation: 400,
    authentication_error: 401,
    unauthenticated: 401,
    permission_error: 403,
    permission_denied: 403,
    payment_required: 402,
    not_found_error: 404,
    model_not_found: 404,
    function_not_found: 404,
    already_exists: 409,
    rate_limit_error: 429,
    insufficient_quota: 429,
    resource_exhausted: 429,
    token_limit_exceeded: 429,
    api_error: 500,
    internal_error: 500,
    model_overloaded: 503,
    unavailable: 503,
    deadline_exceeded: 504,
    function_timeout: 504,
    aborted: 409,
    out_of_range: 400,
    unimplemented: 501,
    failed_precondition: 400,
    data_loss: 500,
    tool_error: 500,
    billing_error: 402,
    trial_expired: 402,
    safety_error: 400,
    model_not_supported: 400,
    content_filter_error: 400,
    unknown_error: 500
  };
});

// src/config/environment-loader.ts
function isGitHubActionEnvironment() {
  return process.env.GITHUB_ACTION === "true" || !!process.env.GITHUB_ACTIONS;
}
function getEnvVar(name, githubActionInputName) {
  let value = process.env[name];
  if (!value && isGitHubActionEnvironment() && githubActionInputName) {
    const inputName = `INPUT_${githubActionInputName.toUpperCase().replace(/-/g, "_")}`;
    value = process.env[inputName];
  }
  return value;
}
function getRequiredEnvVar(name, githubActionInputName) {
  const value = getEnvVar(name, githubActionInputName);
  if (!value || value.trim() === "") {
    const sources = [name];
    if (githubActionInputName) {
      sources.push(`INPUT_${githubActionInputName.toUpperCase().replace(/-/g, "_")}`);
    }
    throw new Error(`Required environment variable not found. Tried: ${sources.join(", ")}`);
  }
  return value.trim();
}
function getBooleanEnvVar(name, githubActionInputName, defaultValue = false) {
  const value = getEnvVar(name, githubActionInputName);
  if (!value) {
    return defaultValue;
  }
  if (isGitHubActionEnvironment() && githubActionInputName) {
    return core.getBooleanInput(githubActionInputName) || defaultValue;
  }
  return value.toLowerCase() === "true";
}
function getNumericEnvVar(name, githubActionInputName, defaultValue = 0) {
  const value = getEnvVar(name, githubActionInputName);
  if (!value) {
    return defaultValue;
  }
  const parsed = Number.parseInt(value, 10);
  return Number.isNaN(parsed) ? defaultValue : parsed;
}
function getFloatEnvVar(name, githubActionInputName, defaultValue = 0) {
  const value = getEnvVar(name, githubActionInputName);
  if (!value) {
    return defaultValue;
  }
  const parsed = Number.parseFloat(value);
  return Number.isNaN(parsed) ? defaultValue : parsed;
}
function getListEnvVar(name, githubActionInputName, defaultValue = []) {
  const value = getEnvVar(name, githubActionInputName);
  if (!value) {
    return defaultValue;
  }
  return value.split(",").map((item) => item.trim()).filter((item) => item.length > 0);
}
function getGitHubContext() {
  if (!isGitHubActionEnvironment()) {
    return null;
  }
  return {
    repository: process.env.GITHUB_REPOSITORY,
    repositoryOwner: process.env.GITHUB_REPOSITORY_OWNER,
    repositoryName: process.env.GITHUB_REPOSITORY?.split("/")[1],
    ref: process.env.GITHUB_REF,
    sha: process.env.GITHUB_SHA,
    actor: process.env.GITHUB_ACTOR,
    workflow: process.env.GITHUB_WORKFLOW,
    runId: process.env.GITHUB_RUN_ID,
    runNumber: process.env.GITHUB_RUN_NUMBER
  };
}
var core, ENV_VARS;
var init_environment_loader = __esm(() => {
  core = __toESM(require_core(), 1);
  ENV_VARS = {
    APP_STORE_CONNECT_ISSUER_ID: "testflight-issuer-id",
    APP_STORE_CONNECT_KEY_ID: "testflight-key-id",
    APP_STORE_CONNECT_PRIVATE_KEY: "testflight-private-key",
    APP_STORE_CONNECT_PRIVATE_KEY_PATH: undefined,
    TESTFLIGHT_APP_ID: "app-id",
    TESTFLIGHT_BUNDLE_ID: "testflight-bundle-id",
    GITHUB_TOKEN: "gthb_token",
    GITHUB_OWNER: "github_owner",
    GITHUB_REPO: "github_repo",
    LINEAR_API_TOKEN: "linear_api_token",
    LINEAR_TEAM_ID: "linear_team_id",
    WEBHOOK_SECRET: undefined,
    WEBHOOK_PORT: undefined,
    ENABLE_LLM_ENHANCEMENT: "enable_llm_enhancement",
    LLM_PROVIDER: "llm_provider",
    LLM_FALLBACK_PROVIDERS: "llm_fallback_providers",
    OPENAI_API_KEY: "openai_api_key",
    OPENAI_MODEL: "openai_model",
    ANTHROPIC_API_KEY: "anthropic_api_key",
    ANTHROPIC_MODEL: "anthropic_model",
    GOOGLE_API_KEY: "google_api_key",
    GOOGLE_MODEL: "google_model",
    MAX_LLM_COST_PER_RUN: "max_llm_cost_per_run",
    MAX_LLM_COST_PER_MONTH: "max_llm_cost_per_month",
    MAX_TOKENS_PER_ISSUE: "max_tokens_per_issue",
    ENABLE_DUPLICATE_DETECTION: "enable_duplicate_detection",
    DUPLICATE_DETECTION_DAYS: "duplicate_detection_days",
    ENABLE_CODEBASE_ANALYSIS: "enable_codebase_analysis",
    CODEBASE_ANALYSIS_DEPTH: "codebase_analysis_depth",
    MIN_FEEDBACK_LENGTH: "min_feedback_length",
    PROCESSING_WINDOW_HOURS: "processing_window_hours",
    WORKSPACE_ROOT: "workspace_root",
    CRASH_LABELS: "crash_labels",
    FEEDBACK_LABELS: "feedback_labels",
    ADDITIONAL_LABELS: "additional_labels",
    NODE_ENV: undefined,
    LOG_LEVEL: undefined,
    DEBUG: undefined,
    DRY_RUN: "dry_run"
  };
});

// src/config/defaults.ts
var API_ENDPOINTS, DEFAULT_HTTP_CONFIG, DEFAULT_LABEL_CONFIG, PRIORITY_LEVELS, DEFAULT_TESTFLIGHT_CONFIG, VALIDATION_PATTERNS, DEFAULT_LLM_MODELS, DEFAULT_LLM_PROVIDERS, DEFAULT_LLM_COST_CONTROLS, DEFAULT_PROCESSING_CONFIG, ERROR_MESSAGES, PLATFORM_DEFAULTS;
var init_defaults = __esm(() => {
  API_ENDPOINTS = {
    GITHUB: "https://api.github.com",
    APP_STORE_CONNECT: "https://api.appstoreconnect.apple.com/v1",
    LINEAR_GRAPHQL: "https://api.linear.app/graphql"
  };
  DEFAULT_HTTP_CONFIG = {
    timeout: 30000,
    retries: 3,
    retryDelay: 1000,
    rateLimitBuffer: 100
  };
  DEFAULT_LABEL_CONFIG = {
    defaultLabels: ["testflight", "testflight-pm", "feedback"],
    crashLabels: ["bug", "crash", "urgent"],
    feedbackLabels: ["enhancement", "user-feedback"],
    additionalLabels: []
  };
  PRIORITY_LEVELS = {
    URGENT: 4,
    HIGH: 3,
    NORMAL: 2,
    LOW: 1
  };
  DEFAULT_TESTFLIGHT_CONFIG = {
    DEFAULT_LIMIT: 50,
    MAX_LIMIT: 200,
    DEFAULT_SORT: "-submittedAt",
    FETCH_LOOKBACK_HOURS: 24
  };
  VALIDATION_PATTERNS = {
    BUNDLE_ID: /^[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+$/,
    API_KEY_ID: /^[A-Z0-9]{10}$/,
    ISSUER_ID: /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/i,
    GTHB_TOKEN: /^gh[ps]_[A-Za-z0-9_]{36,255}$/
  };
  DEFAULT_LLM_MODELS = {
    openai: "gpt-5-mini",
    anthropic: "claude-4-sonnet",
    google: "gemini-2.5-flash"
  };
  DEFAULT_LLM_PROVIDERS = {
    openai: {
      model: DEFAULT_LLM_MODELS.openai,
      maxTokens: 4000,
      temperature: 0.2,
      timeout: 30000,
      maxRetries: 3
    },
    anthropic: {
      model: DEFAULT_LLM_MODELS.anthropic,
      maxTokens: 4000,
      temperature: 0.2,
      timeout: 30000,
      maxRetries: 3
    },
    google: {
      model: DEFAULT_LLM_MODELS.google,
      maxTokens: 4000,
      temperature: 0.2,
      timeout: 30000,
      maxRetries: 3
    }
  };
  DEFAULT_LLM_COST_CONTROLS = {
    maxCostPerRun: 5,
    maxCostPerMonth: 200,
    maxTokensPerIssue: 4000,
    enableCostAlerts: true,
    preventOverage: true
  };
  DEFAULT_PROCESSING_CONFIG = {
    enableDuplicateDetection: true,
    duplicateDetectionDays: 7,
    enableCodebaseAnalysis: true,
    codebaseAnalysisDepth: "moderate",
    minFeedbackLength: 10,
    processingWindowHours: 24,
    workspaceRoot: "."
  };
  ERROR_MESSAGES = {
    INVALID_PRIVATE_KEY: "Invalid private key format. Must be a PEM formatted private key.",
    MISSING_ENV_VAR: "Required environment variable not found",
    GITHUB_CONFIG_MISSING: "GitHub configuration not found. Please set GTHB_TOKEN, GITHUB_OWNER, and GITHUB_REPO.",
    LINEAR_CONFIG_MISSING: "Linear configuration not found. Please set LINEAR_API_TOKEN and LINEAR_TEAM_ID.",
    APP_STORE_CONFIG_MISSING: "App Store Connect configuration not found. Please set APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_ID, and APP_STORE_CONNECT_PRIVATE_KEY.",
    RATE_LIMIT_EXCEEDED: "API rate limit exceeded. Please wait before making more requests.",
    AUTHENTICATION_FAILED: "Authentication failed. Please check your credentials.",
    INVALID_CONFIGURATION: "Configuration validation failed"
  };
  PLATFORM_DEFAULTS = {
    github: {
      enableScreenshotUpload: true,
      maxScreenshotSize: 25 * 1024 * 1024,
      enableDuplicateDetection: true,
      duplicateDetectionDays: 7
    },
    linear: {
      defaultPriority: PRIORITY_LEVELS.NORMAL,
      enableDuplicateDetection: true,
      duplicateDetectionDays: 7
    },
    webhook: {
      maxPayloadSize: 10 * 1024 * 1024
    }
  };
});

// src/config/validation.ts
function validatePrivateKey(privateKey) {
  const cleanKey = privateKey.replace(/\\n/g, `
`);
  const PEM_HEADER = "-----BEGIN " + "PRIVATE KEY" + "-----";
  const PEM_FOOTER = "-----END " + "PRIVATE KEY" + "-----";
  if (!cleanKey.includes(PEM_HEADER) || !cleanKey.includes(PEM_FOOTER)) {
    throw new Error(ERROR_MESSAGES.INVALID_PRIVATE_KEY);
  }
  const keyContent = cleanKey.replace(PEM_HEADER, "").replace(PEM_FOOTER, "").replace(/\s/g, "");
  if (keyContent.length === 0) {
    throw new Error(ERROR_MESSAGES.INVALID_PRIVATE_KEY);
  }
  return cleanKey;
}
function validateAppStoreConnectConfig(config) {
  const errors = [];
  if (!VALIDATION_PATTERNS.ISSUER_ID.test(config.issuerId)) {
    errors.push("Invalid App Store Connect issuer ID format");
  }
  if (!VALIDATION_PATTERNS.API_KEY_ID.test(config.keyId)) {
    errors.push("Invalid App Store Connect key ID format");
  }
  try {
    validatePrivateKey(config.privateKey);
  } catch (error) {
    errors.push(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);
  }
  if (config.bundleId && !VALIDATION_PATTERNS.BUNDLE_ID.test(config.bundleId)) {
    errors.push("Invalid bundle ID format");
  }
  return errors;
}
function validateGitHubConfig(config) {
  const errors = [];
  if (!VALIDATION_PATTERNS.GTHB_TOKEN.test(config.token)) {
    errors.push("Invalid GitHub token format");
  }
  if (!config.owner || config.owner.trim().length === 0) {
    errors.push("GitHub repository owner is required");
  }
  if (!config.repo || config.repo.trim().length === 0) {
    errors.push("GitHub repository name is required");
  }
  if (!Array.isArray(config.defaultLabels) || config.defaultLabels.length === 0) {
    errors.push("GitHub default labels must be a non-empty array");
  }
  if (!Array.isArray(config.crashLabels) || config.crashLabels.length === 0) {
    errors.push("GitHub crash labels must be a non-empty array");
  }
  if (!Array.isArray(config.feedbackLabels) || config.feedbackLabels.length === 0) {
    errors.push("GitHub feedback labels must be a non-empty array");
  }
  if (config.maxScreenshotSize && config.maxScreenshotSize <= 0) {
    errors.push("GitHub max screenshot size must be positive");
  }
  if (config.duplicateDetectionDays && config.duplicateDetectionDays <= 0) {
    errors.push("GitHub duplicate detection days must be positive");
  }
  return errors;
}
function validateLinearConfig(config) {
  const errors = [];
  if (!config.apiToken || config.apiToken.trim().length === 0) {
    errors.push("Linear API token is required");
  }
  if (!config.teamId || config.teamId.trim().length === 0) {
    errors.push("Linear team ID is required");
  }
  if (!Array.isArray(config.defaultLabels) || config.defaultLabels.length === 0) {
    errors.push("Linear default labels must be a non-empty array");
  }
  if (!Array.isArray(config.crashLabels) || config.crashLabels.length === 0) {
    errors.push("Linear crash labels must be a non-empty array");
  }
  if (!Array.isArray(config.feedbackLabels) || config.feedbackLabels.length === 0) {
    errors.push("Linear feedback labels must be a non-empty array");
  }
  if (config.defaultPriority && (config.defaultPriority < 1 || config.defaultPriority > 4)) {
    errors.push("Linear default priority must be between 1 and 4");
  }
  if (config.duplicateDetectionDays && config.duplicateDetectionDays <= 0) {
    errors.push("Linear duplicate detection days must be positive");
  }
  return errors;
}
function validateLLMConfig(config) {
  const errors = [];
  if (!config.enabled) {
    return errors;
  }
  if (!config.primaryProvider) {
    errors.push("LLM primary provider is required when LLM is enabled");
  }
  const selectedProviders = new Set([
    config.primaryProvider,
    ...config.fallbackProviders
  ]);
  for (const [providerName, providerConfig] of Object.entries(config.providers)) {
    if (!selectedProviders.has(providerName)) {
      continue;
    }
    if (!providerConfig.apiKey || providerConfig.apiKey.trim().length === 0) {
      errors.push(`${providerName} API key is required`);
    }
    if (!providerConfig.model || providerConfig.model.trim().length === 0) {
      errors.push(`${providerName} model is required`);
    }
    if (providerConfig.maxTokens <= 0) {
      errors.push(`${providerName} max tokens must be positive`);
    }
    if (providerConfig.temperature < 0 || providerConfig.temperature > 2) {
      errors.push(`${providerName} temperature must be between 0 and 2`);
    }
  }
  if (config.costControls.maxCostPerRun <= 0) {
    errors.push("LLM max cost per run must be positive");
  }
  if (config.costControls.maxCostPerMonth <= 0) {
    errors.push("LLM max cost per month must be positive");
  }
  if (config.costControls.maxTokensPerIssue <= 0) {
    errors.push("LLM max tokens per issue must be positive");
  }
  return errors;
}
function validateApplicationConfig(config) {
  const errors = [];
  const warnings = [];
  errors.push(...validateAppStoreConnectConfig(config.appStoreConnect));
  if (config.github) {
    errors.push(...validateGitHubConfig(config.github));
  } else if (config.isGitHubAction) {
    warnings.push("GitHub configuration missing in GitHub Action environment");
  }
  if (config.linear) {
    errors.push(...validateLinearConfig(config.linear));
  }
  if (config.llm) {
    errors.push(...validateLLMConfig(config.llm));
  }
  if (config.processing) {
    if (config.processing.duplicateDetectionDays <= 0) {
      errors.push("Processing duplicate detection days must be positive");
    }
    if (config.processing.minFeedbackLength < 0) {
      errors.push("Processing min feedback length cannot be negative");
    }
    if (config.processing.processingWindowHours <= 0) {
      errors.push("Processing window hours must be positive");
    }
  }
  if (config.isGitHubAction && !config.github) {
    errors.push("GitHub configuration is required in GitHub Action environment");
  }
  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}
var init_validation = __esm(() => {
  init_defaults();
});

// src/config/manager.ts
class ConfigurationManager {
  cachedConfig = null;
  configSources = new Map;
  lastLoadTime = null;
  loadConfiguration() {
    if (this.cachedConfig && this.shouldUseCachedConfig()) {
      return this.cachedConfig;
    }
    const config = this.buildConfiguration();
    const validationResult = validateApplicationConfig(config);
    if (!validationResult.isValid) {
      throw new Error(`Configuration validation failed:
${validationResult.errors.join(`
`)}`);
    }
    if (validationResult.warnings.length > 0) {
      console.warn("Configuration warnings:", validationResult.warnings.join(`
`));
    }
    this.cachedConfig = config;
    this.lastLoadTime = new Date;
    return config;
  }
  validateConfiguration() {
    const config = this.buildConfiguration();
    return validateApplicationConfig(config);
  }
  clearCache() {
    this.cachedConfig = null;
    this.configSources.clear();
    this.lastLoadTime = null;
  }
  getConfigSources() {
    return new Map(this.configSources);
  }
  buildConfiguration() {
    const isGitHubAction = isGitHubActionEnvironment();
    return {
      environment: this.getEnvironment(),
      logLevel: this.getLogLevel(isGitHubAction),
      isGitHubAction,
      debug: getBooleanEnvVar("DEBUG", undefined, false),
      dryRun: getBooleanEnvVar(ENV_VARS.DRY_RUN, ENV_VARS.DRY_RUN, false),
      appStoreConnect: this.buildAppStoreConnectConfig(isGitHubAction),
      github: this.buildGitHubConfig(isGitHubAction),
      linear: this.buildLinearConfig(),
      webhook: this.buildWebhookConfig(isGitHubAction),
      llm: this.buildLLMConfig(),
      processing: this.buildProcessingConfig()
    };
  }
  buildAppStoreConnectConfig(isGitHubAction) {
    const issuerId = getRequiredEnvVar("APP_STORE_CONNECT_ISSUER_ID", ENV_VARS.APP_STORE_CONNECT_ISSUER_ID);
    const keyId = getRequiredEnvVar("APP_STORE_CONNECT_KEY_ID", ENV_VARS.APP_STORE_CONNECT_KEY_ID);
    let privateKey;
    const privateKeyEnv = getEnvVar("APP_STORE_CONNECT_PRIVATE_KEY", ENV_VARS.APP_STORE_CONNECT_PRIVATE_KEY);
    const privateKeyPathEnv = getEnvVar("APP_STORE_CONNECT_PRIVATE_KEY_PATH");
    if (privateKeyEnv) {
      privateKey = validatePrivateKey(privateKeyEnv);
      this.recordConfigSource("appStoreConnect.privateKey", "environment");
    } else if (privateKeyPathEnv && !isGitHubAction) {
      try {
        const fs = __require("node:fs");
        const keyContent = fs.readFileSync(privateKeyPathEnv, "utf8");
        privateKey = validatePrivateKey(keyContent);
        this.recordConfigSource("appStoreConnect.privateKey", "file", privateKeyPathEnv);
      } catch (error) {
        throw new Error(`Failed to read private key from ${privateKeyPathEnv}: ${error}`);
      }
    } else {
      throw new Error("APP_STORE_CONNECT_PRIVATE_KEY must be set (file paths not supported in GitHub Actions)");
    }
    return {
      issuerId,
      keyId,
      privateKey,
      appId: getEnvVar("TESTFLIGHT_APP_ID", ENV_VARS.TESTFLIGHT_APP_ID),
      bundleId: getEnvVar("TESTFLIGHT_BUNDLE_ID", ENV_VARS.TESTFLIGHT_BUNDLE_ID),
      ...DEFAULT_HTTP_CONFIG
    };
  }
  buildGitHubConfig(isGitHubAction) {
    const githubToken = getEnvVar("GTHB_TOKEN", ENV_VARS.GITHUB_TOKEN);
    if (!githubToken) {
      return;
    }
    const context = getGitHubContext();
    const githubOwner = getEnvVar("GITHUB_OWNER", ENV_VARS.GITHUB_OWNER) || (isGitHubAction ? context?.repositoryOwner : undefined);
    const githubRepo = getEnvVar("GITHUB_REPO", ENV_VARS.GITHUB_REPO) || (isGitHubAction ? context?.repositoryName : undefined);
    if (!githubOwner || !githubRepo) {
      if (isGitHubAction) {
        throw new Error("GitHub configuration incomplete in GitHub Action environment");
      }
      return;
    }
    const crashLabels = getListEnvVar("CRASH_LABELS", ENV_VARS.CRASH_LABELS, DEFAULT_LABEL_CONFIG.crashLabels);
    const feedbackLabels = getListEnvVar("FEEDBACK_LABELS", ENV_VARS.FEEDBACK_LABELS, DEFAULT_LABEL_CONFIG.feedbackLabels);
    const additionalLabels = getListEnvVar("ADDITIONAL_LABELS", ENV_VARS.ADDITIONAL_LABELS, []);
    return {
      token: githubToken,
      owner: githubOwner,
      repo: githubRepo,
      defaultLabels: [...DEFAULT_LABEL_CONFIG.defaultLabels, ...additionalLabels],
      crashLabels,
      feedbackLabels,
      ...DEFAULT_HTTP_CONFIG,
      ...PLATFORM_DEFAULTS.github,
      enableDuplicateDetection: getBooleanEnvVar("ENABLE_DUPLICATE_DETECTION", ENV_VARS.ENABLE_DUPLICATE_DETECTION, PLATFORM_DEFAULTS.github.enableDuplicateDetection),
      duplicateDetectionDays: getNumericEnvVar("DUPLICATE_DETECTION_DAYS", ENV_VARS.DUPLICATE_DETECTION_DAYS, PLATFORM_DEFAULTS.github.duplicateDetectionDays)
    };
  }
  buildLinearConfig() {
    const linearToken = getEnvVar("LINEAR_API_TOKEN", ENV_VARS.LINEAR_API_TOKEN);
    if (!linearToken) {
      return;
    }
    const linearTeamId = getEnvVar("LINEAR_TEAM_ID", ENV_VARS.LINEAR_TEAM_ID);
    if (!linearTeamId) {
      throw new Error("LINEAR_TEAM_ID is required when LINEAR_API_TOKEN is provided");
    }
    const crashLabels = getListEnvVar("CRASH_LABELS", ENV_VARS.CRASH_LABELS, DEFAULT_LABEL_CONFIG.crashLabels);
    const feedbackLabels = getListEnvVar("FEEDBACK_LABELS", ENV_VARS.FEEDBACK_LABELS, DEFAULT_LABEL_CONFIG.feedbackLabels);
    const additionalLabels = getListEnvVar("ADDITIONAL_LABELS", ENV_VARS.ADDITIONAL_LABELS, []);
    return {
      apiToken: linearToken,
      teamId: linearTeamId,
      defaultLabels: [...DEFAULT_LABEL_CONFIG.defaultLabels, ...additionalLabels],
      crashLabels,
      feedbackLabels,
      ...DEFAULT_HTTP_CONFIG,
      ...PLATFORM_DEFAULTS.linear,
      enableDuplicateDetection: getBooleanEnvVar("ENABLE_DUPLICATE_DETECTION", ENV_VARS.ENABLE_DUPLICATE_DETECTION, PLATFORM_DEFAULTS.linear.enableDuplicateDetection),
      duplicateDetectionDays: getNumericEnvVar("DUPLICATE_DETECTION_DAYS", ENV_VARS.DUPLICATE_DETECTION_DAYS, PLATFORM_DEFAULTS.linear.duplicateDetectionDays)
    };
  }
  buildWebhookConfig(isGitHubAction) {
    if (isGitHubAction) {
      return;
    }
    const webhookSecret = getEnvVar("WEBHOOK_SECRET");
    if (!webhookSecret) {
      return;
    }
    return {
      secret: webhookSecret,
      port: getNumericEnvVar("WEBHOOK_PORT", undefined, 3000),
      ...PLATFORM_DEFAULTS.webhook
    };
  }
  buildLLMConfig() {
    const enabled = getBooleanEnvVar("ENABLE_LLM_ENHANCEMENT", ENV_VARS.ENABLE_LLM_ENHANCEMENT, false);
    if (!enabled) {
      return;
    }
    const primaryProvider = getEnvVar("LLM_PROVIDER", ENV_VARS.LLM_PROVIDER) || "openai";
    const fallbackProviders = getListEnvVar("LLM_FALLBACK_PROVIDERS", ENV_VARS.LLM_FALLBACK_PROVIDERS, ["anthropic", "google"]);
    const providers = {
      openai: {
        apiKey: getEnvVar("OPENAI_API_KEY", ENV_VARS.OPENAI_API_KEY) || "",
        model: getEnvVar("OPENAI_MODEL", ENV_VARS.OPENAI_MODEL) || DEFAULT_LLM_PROVIDERS.openai.model,
        ...DEFAULT_LLM_PROVIDERS.openai
      },
      anthropic: {
        apiKey: getEnvVar("ANTHROPIC_API_KEY", ENV_VARS.ANTHROPIC_API_KEY) || "",
        model: getEnvVar("ANTHROPIC_MODEL", ENV_VARS.ANTHROPIC_MODEL) || DEFAULT_LLM_PROVIDERS.anthropic.model,
        ...DEFAULT_LLM_PROVIDERS.anthropic
      },
      google: {
        apiKey: getEnvVar("GOOGLE_API_KEY", ENV_VARS.GOOGLE_API_KEY) || "",
        model: getEnvVar("GOOGLE_MODEL", ENV_VARS.GOOGLE_MODEL) || DEFAULT_LLM_PROVIDERS.google.model,
        ...DEFAULT_LLM_PROVIDERS.google
      }
    };
    return {
      enabled: true,
      primaryProvider,
      fallbackProviders,
      providers,
      costControls: {
        maxCostPerRun: getFloatEnvVar("MAX_LLM_COST_PER_RUN", ENV_VARS.MAX_LLM_COST_PER_RUN, DEFAULT_LLM_COST_CONTROLS.maxCostPerRun),
        maxCostPerMonth: getFloatEnvVar("MAX_LLM_COST_PER_MONTH", ENV_VARS.MAX_LLM_COST_PER_MONTH, DEFAULT_LLM_COST_CONTROLS.maxCostPerMonth),
        maxTokensPerIssue: getNumericEnvVar("MAX_TOKENS_PER_ISSUE", ENV_VARS.MAX_TOKENS_PER_ISSUE, DEFAULT_LLM_COST_CONTROLS.maxTokensPerIssue),
        ...DEFAULT_LLM_COST_CONTROLS
      },
      features: {
        codebaseAnalysis: getBooleanEnvVar("ENABLE_CODEBASE_ANALYSIS", ENV_VARS.ENABLE_CODEBASE_ANALYSIS, true),
        screenshotAnalysis: true,
        priorityClassification: true,
        labelGeneration: true,
        assigneeRecommendation: false
      },
      security: {
        anonymizeData: false,
        excludeSensitiveInfo: true,
        logRequestsResponses: false,
        enableDataRetentionPolicy: false
      }
    };
  }
  buildProcessingConfig() {
    return {
      enableDuplicateDetection: getBooleanEnvVar("ENABLE_DUPLICATE_DETECTION", ENV_VARS.ENABLE_DUPLICATE_DETECTION, DEFAULT_PROCESSING_CONFIG.enableDuplicateDetection),
      duplicateDetectionDays: getNumericEnvVar("DUPLICATE_DETECTION_DAYS", ENV_VARS.DUPLICATE_DETECTION_DAYS, DEFAULT_PROCESSING_CONFIG.duplicateDetectionDays),
      enableCodebaseAnalysis: getBooleanEnvVar("ENABLE_CODEBASE_ANALYSIS", ENV_VARS.ENABLE_CODEBASE_ANALYSIS, DEFAULT_PROCESSING_CONFIG.enableCodebaseAnalysis),
      codebaseAnalysisDepth: getEnvVar("CODEBASE_ANALYSIS_DEPTH", ENV_VARS.CODEBASE_ANALYSIS_DEPTH) || DEFAULT_PROCESSING_CONFIG.codebaseAnalysisDepth,
      minFeedbackLength: getNumericEnvVar("MIN_FEEDBACK_LENGTH", ENV_VARS.MIN_FEEDBACK_LENGTH, DEFAULT_PROCESSING_CONFIG.minFeedbackLength),
      processingWindowHours: getNumericEnvVar("PROCESSING_WINDOW_HOURS", ENV_VARS.PROCESSING_WINDOW_HOURS, DEFAULT_PROCESSING_CONFIG.processingWindowHours),
      workspaceRoot: getEnvVar("WORKSPACE_ROOT", ENV_VARS.WORKSPACE_ROOT) || DEFAULT_PROCESSING_CONFIG.workspaceRoot
    };
  }
  getEnvironment() {
    const nodeEnv = "development";
    if (nodeEnv && ["development", "production", "test"].includes(nodeEnv)) {
      return nodeEnv;
    }
    return isGitHubActionEnvironment() ? "production" : "development";
  }
  getLogLevel(isGitHubAction) {
    const logLevel = process.env.LOG_LEVEL;
    if (logLevel && ["debug", "info", "warn", "error"].includes(logLevel)) {
      return logLevel;
    }
    return isGitHubAction ? "info" : "debug";
  }
  recordConfigSource(key, type, source) {
    this.configSources.set(key, {
      type,
      source: source || type,
      timestamp: new Date
    });
  }
  shouldUseCachedConfig() {
    if (!this.lastLoadTime) {
      return false;
    }
    const cacheMaxAge = this.cachedConfig?.environment === "production" ? 5 * 60 * 1000 : 0;
    return Date.now() - this.lastLoadTime.getTime() < cacheMaxAge;
  }
}
function getConfigManager() {
  if (!configManager) {
    configManager = new ConfigurationManager;
  }
  return configManager;
}
function getConfiguration() {
  return getConfigManager().loadConfiguration();
}
var configManager = null;
var init_manager = __esm(() => {
  init_environment_loader();
  init_defaults();
  init_validation();
});

// src/config/index.ts
var PATHS;
var init_config = __esm(() => {
  init_manager();
  init_manager();
  init_defaults();
  init_defaults();
  init_validation();
  init_environment_loader();
  init_llm_config();
  PATHS = {
    TEMP_DIR: "/tmp/testflight-pm",
    SCREENSHOTS_DIR: "/tmp/testflight-pm/screenshots",
    LOGS_DIR: "/tmp/testflight-pm/logs"
  };
});

// src/config/llm-config.ts
function loadLLMConfig() {
  const envConfig = getConfiguration();
  const config = { ...DEFAULT_LLM_CONFIG };
  function getEnvVar2(envName, actionInput) {
    if (envConfig.isGitHubAction && actionInput) {
      const actionValue = process.env[`INPUT_${actionInput.toUpperCase().replace(/-/g, "_")}`];
      if (actionValue) {
        return actionValue;
      }
    }
    return process.env[envName];
  }
  const enableLLM = getEnvVar2(LLM_ENV_VARS.ENABLE_LLM_ENHANCEMENT, LLM_ACTION_INPUTS.ENABLE_LLM_ENHANCEMENT);
  config.enabled = enableLLM === "true" || enableLLM === "1";
  if (!config.enabled) {
    return config;
  }
  const primaryProvider = getEnvVar2(LLM_ENV_VARS.LLM_PROVIDER, LLM_ACTION_INPUTS.LLM_PROVIDER);
  if (primaryProvider && ["openai", "anthropic", "google"].includes(primaryProvider)) {
    config.primaryProvider = primaryProvider;
  }
  const fallbackProviders = getEnvVar2(LLM_ENV_VARS.LLM_FALLBACK_PROVIDERS);
  if (fallbackProviders) {
    config.fallbackProviders = fallbackProviders.split(",").map((p) => p.trim());
  }
  const openaiKey = getEnvVar2(LLM_ENV_VARS.OPENAI_API_KEY);
  if (openaiKey) {
    config.providers.openai.apiKey = openaiKey;
  }
  const anthropicKey = getEnvVar2(LLM_ENV_VARS.ANTHROPIC_API_KEY);
  if (anthropicKey) {
    config.providers.anthropic.apiKey = anthropicKey;
  }
  const googleKey = getEnvVar2(LLM_ENV_VARS.GOOGLE_API_KEY);
  if (googleKey) {
    config.providers.google.apiKey = googleKey;
  }
  const maxCostPerRun = getEnvVar2(LLM_ENV_VARS.MAX_LLM_COST_PER_RUN, LLM_ACTION_INPUTS.MAX_LLM_COST_PER_RUN);
  if (maxCostPerRun) {
    const cost = Number.parseFloat(maxCostPerRun);
    if (!Number.isNaN(cost) && cost > 0) {
      config.costControls.maxCostPerRun = cost;
    }
  }
  const maxCostPerMonth = getEnvVar2(LLM_ENV_VARS.MAX_LLM_COST_PER_MONTH);
  if (maxCostPerMonth) {
    const cost = Number.parseFloat(maxCostPerMonth);
    if (!Number.isNaN(cost) && cost > 0) {
      config.costControls.maxCostPerMonth = cost;
    }
  }
  const maxTokensPerIssue = getEnvVar2(LLM_ENV_VARS.MAX_TOKENS_PER_ISSUE);
  if (maxTokensPerIssue) {
    const tokens = Number.parseInt(maxTokensPerIssue, 10);
    if (!Number.isNaN(tokens) && tokens > 0) {
      config.costControls.maxTokensPerIssue = tokens;
    }
  }
  const enableCodebaseAnalysis = getEnvVar2(LLM_ENV_VARS.ENABLE_CODEBASE_ANALYSIS, LLM_ACTION_INPUTS.ENABLE_CODEBASE_ANALYSIS);
  config.features.codebaseAnalysis = enableCodebaseAnalysis !== "false" && enableCodebaseAnalysis !== "0";
  const enableScreenshotAnalysis = getEnvVar2(LLM_ENV_VARS.ENABLE_SCREENSHOT_ANALYSIS);
  if (enableScreenshotAnalysis !== undefined) {
    config.features.screenshotAnalysis = enableScreenshotAnalysis === "true" || enableScreenshotAnalysis === "1";
  }
  const anonymizeData = getEnvVar2(LLM_ENV_VARS.ANONYMIZE_LLM_DATA);
  if (anonymizeData !== undefined) {
    config.security.anonymizeData = anonymizeData === "true" || anonymizeData === "1";
  }
  const excludeSensitiveInfo = getEnvVar2(LLM_ENV_VARS.EXCLUDE_SENSITIVE_INFO);
  if (excludeSensitiveInfo !== undefined) {
    config.security.excludeSensitiveInfo = excludeSensitiveInfo === "true" || excludeSensitiveInfo === "1";
  }
  return config;
}
function validateLLMConfig2(config) {
  const errors = [];
  const warnings = [];
  if (!config.enabled) {
    return { valid: true, errors, warnings: ["LLM enhancement is disabled"] };
  }
  const primaryProviderConfig = config.providers[config.primaryProvider];
  if (!primaryProviderConfig.apiKey || primaryProviderConfig.apiKey.trim() === "") {
    errors.push(`API key missing for primary provider: ${config.primaryProvider}`);
  }
  if (!primaryProviderConfig.model || primaryProviderConfig.model.trim() === "") {
    errors.push(`Model not specified for primary provider: ${config.primaryProvider}`);
  }
  if (primaryProviderConfig.model && !LLM_MODEL_PRICING[primaryProviderConfig.model]) {
    warnings.push(`Pricing information not available for model: ${primaryProviderConfig.model}`);
  }
  for (const fallbackProvider of config.fallbackProviders) {
    const fallbackConfig = config.providers[fallbackProvider];
    if (!fallbackConfig.apiKey || fallbackConfig.apiKey.trim() === "") {
      warnings.push(`API key missing for fallback provider: ${fallbackProvider}`);
    }
  }
  if (config.costControls.maxCostPerRun <= 0) {
    errors.push("Max cost per run must be greater than 0");
  }
  if (config.costControls.maxCostPerMonth <= 0) {
    errors.push("Max cost per month must be greater than 0");
  }
  if (config.costControls.maxTokensPerIssue <= 0) {
    errors.push("Max tokens per issue must be greater than 0");
  }
  if (config.features.codebaseAnalysis && !config.features.screenshotAnalysis) {
    warnings.push("Codebase analysis enabled but screenshot analysis disabled - may reduce accuracy");
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function getLLMConfig() {
  if (!_llmConfig) {
    _llmConfig = loadLLMConfig();
  }
  return _llmConfig;
}
var LLM_MODEL_PRICING, DEFAULT_LLM_CONFIG, LLM_ENV_VARS, LLM_ACTION_INPUTS, _llmConfig = null;
var init_llm_config = __esm(() => {
  init_config();
  init_defaults();
  LLM_MODEL_PRICING = {
    [DEFAULT_LLM_MODELS.openai]: { input: 0.00015, output: 0.0006 },
    [DEFAULT_LLM_MODELS.anthropic]: { input: 0.003, output: 0.015 },
    [DEFAULT_LLM_MODELS.google]: { input: 0.000075, output: 0.0003 }
  };
  DEFAULT_LLM_CONFIG = {
    enabled: false,
    primaryProvider: "openai",
    fallbackProviders: ["anthropic", "google"],
    providers: {
      openai: {
        apiKey: "",
        model: DEFAULT_LLM_MODELS.openai,
        maxTokens: 4000,
        temperature: 0.7,
        timeout: 30000,
        maxRetries: 3
      },
      anthropic: {
        apiKey: "",
        model: DEFAULT_LLM_MODELS.anthropic,
        maxTokens: 4000,
        temperature: 0.7,
        timeout: 30000,
        maxRetries: 3
      },
      google: {
        apiKey: "",
        model: DEFAULT_LLM_MODELS.google,
        maxTokens: 4000,
        temperature: 0.7,
        timeout: 30000,
        maxRetries: 3
      }
    },
    costControls: {
      maxTokensPerIssue: 8000,
      maxCostPerRun: 2,
      maxCostPerMonth: 50,
      enableCostAlerts: true,
      preventOverage: true
    },
    features: {
      codebaseAnalysis: true,
      screenshotAnalysis: true,
      priorityClassification: true,
      labelGeneration: true,
      assigneeRecommendation: false
    },
    security: {
      anonymizeData: false,
      excludeSensitiveInfo: true,
      logRequestsResponses: false,
      enableDataRetentionPolicy: true
    }
  };
  LLM_ENV_VARS = {
    ENABLE_LLM_ENHANCEMENT: "ENABLE_LLM_ENHANCEMENT",
    LLM_PROVIDER: "LLM_PROVIDER",
    LLM_FALLBACK_PROVIDERS: "LLM_FALLBACK_PROVIDERS",
    OPENAI_API_KEY: "OPENAI_API_KEY",
    ANTHROPIC_API_KEY: "ANTHROPIC_API_KEY",
    GOOGLE_API_KEY: "GOOGLE_API_KEY",
    OPENAI_MODEL: "OPENAI_MODEL",
    ANTHROPIC_MODEL: "ANTHROPIC_MODEL",
    GOOGLE_MODEL: "GOOGLE_MODEL",
    MAX_LLM_COST_PER_RUN: "MAX_LLM_COST_PER_RUN",
    MAX_LLM_COST_PER_MONTH: "MAX_LLM_COST_PER_MONTH",
    MAX_TOKENS_PER_ISSUE: "MAX_TOKENS_PER_ISSUE",
    ENABLE_CODEBASE_ANALYSIS: "ENABLE_CODEBASE_ANALYSIS",
    ENABLE_SCREENSHOT_ANALYSIS: "ENABLE_SCREENSHOT_ANALYSIS",
    ANALYSIS_DEPTH: "ANALYSIS_DEPTH",
    ANONYMIZE_LLM_DATA: "ANONYMIZE_LLM_DATA",
    EXCLUDE_SENSITIVE_INFO: "EXCLUDE_SENSITIVE_INFO"
  };
  LLM_ACTION_INPUTS = {
    ENABLE_LLM_ENHANCEMENT: "enable-llm-enhancement",
    LLM_PROVIDER: "llm-provider",
    LLM_API_KEY: "llm-api-key",
    LLM_MODEL: "llm-model",
    MAX_LLM_COST_PER_RUN: "max-llm-cost-per-run",
    ENABLE_CODEBASE_ANALYSIS: "enable-codebase-analysis",
    ANALYSIS_DEPTH: "analysis-depth",
    INCLUDE_RECENT_CHANGES: "include-recent-changes"
  };
});

// src/api/llm-client.ts
class LLMClient {
  config;
  usageStats;
  constructor() {
    this.config = getLLMConfig();
    if (!validateLLMConfig2(this.config)) {
      throw new Error("Invalid LLM configuration");
    }
    this.usageStats = this.initializeUsageStats();
  }
  async enhanceIssue(request) {
    if (!this.config.enabled) {
      return this.createFallbackEnhancement(request, Date.now());
    }
    const startTime = Date.now();
    try {
      const llmRequest = this.buildEnhancementPrompt(request);
      const response = await this.makeRequest(llmRequest, request.options || {});
      return this.parseEnhancementResponse(response, startTime);
    } catch (error) {
      console.warn(`LLM enhancement failed: ${error}`);
      return this.createFallbackEnhancement(request, startTime);
    }
  }
  async makeRequest(request, options = {}) {
    const targetProvider = options.provider || this.selectOptimalProvider(request, options);
    const sourceProvider = this.detectSourceProvider(request);
    const finalRequest = sourceProvider === targetProvider ? request : await this.translateRequest(request, sourceProvider, targetProvider);
    return await this.makeProviderRequest(targetProvider, finalRequest, options);
  }
  async makeProviderRequest(provider, request, options) {
    const providers = options.enableFallback !== false ? [
      provider,
      ...this.config.fallbackProviders.filter((p) => p !== provider)
    ] : [provider];
    let lastError = null;
    for (const currentProvider of providers) {
      try {
        if (!options.skipCostCheck) {
          await this.validateCostLimits(request, options, currentProvider);
        }
        const providerConfig = this.config.providers[currentProvider];
        if (!providerConfig) {
          throw new Error(`Provider ${currentProvider} not configured`);
        }
        const universalRequest = toUniversal(currentProvider, {
          ...request,
          model: request.model || providerConfig.model
        });
        const providerSpecificRequest = fromUniversal(currentProvider, universalRequest);
        const rawResponse = await this.makeUnifiedAPICall(currentProvider, providerSpecificRequest, providerConfig, options);
        const llmResponse = this.convertUniversalToLLMResponse(rawResponse, currentProvider);
        this.updateUsageStats(llmResponse);
        return llmResponse;
      } catch (error) {
        lastError = error;
        try {
          const universalError = {
            type: "api_error",
            message: lastError.message,
            statusCode: 500,
            httpStatus: 500,
            provider: currentProvider
          };
          const translatedError = translateError(universalError, currentProvider);
          if (translatedError && typeof translatedError === "object" && "statusCode" in translatedError) {
            console.warn(`LLM request failed for provider ${currentProvider}: ${translatedError.statusCode || lastError.message}`);
          } else {
            console.warn(`LLM request failed for provider ${currentProvider}: ${lastError.message}`);
          }
        } catch (_translateErr) {
          console.warn(`LLM request failed for provider ${currentProvider}: ${lastError.message}`);
        }
        if (lastError.message.includes("authentication") || lastError.message.includes("401")) {
          break;
        }
      }
    }
    throw new Error(`All LLM providers failed. Last error: ${lastError?.message || "Unknown error"}`);
  }
  selectOptimalProvider(request, options) {
    const availableProviders = this.getAvailableProviders();
    if (availableProviders.length === 0) {
      throw new Error("No LLM providers configured with API keys");
    }
    if (availableProviders.length === 1) {
      return availableProviders[0];
    }
    if (options.preferCheapest) {
      return this.selectCheapestProvider(request, availableProviders);
    }
    if (availableProviders.includes(this.config.primaryProvider)) {
      return this.config.primaryProvider;
    }
    return availableProviders[0];
  }
  selectCheapestProvider(request, availableProviders) {
    try {
      const sourceProvider = this.detectSourceProvider(request);
      let universal;
      try {
        universal = toUniversal(sourceProvider, request);
        if (!universal) {
          universal = request;
        }
      } catch {
        universal = request;
      }
      const tokens = "provider" in universal ? countUniversalTokens(universal) : {
        inputTokens: 100,
        estimatedOutputTokens: 30,
        multimodalContentCount: 0,
        toolCallsCount: 0
      };
      const providerCosts = availableProviders.map((provider) => {
        try {
          const inputTokens = tokens.inputTokens || 0;
          const outputTokens = tokens.estimatedOutputTokens || 0;
          let inputCostPer1K = 0.001;
          let outputCostPer1K = 0.002;
          if (provider === "openai") {
            inputCostPer1K = 0.0015;
            outputCostPer1K = 0.002;
          } else if (provider === "anthropic") {
            inputCostPer1K = 0.0008;
            outputCostPer1K = 0.024;
          } else if (provider === "google") {
            inputCostPer1K = 0.0005;
            outputCostPer1K = 0.0015;
          }
          const estimatedCost = inputTokens * inputCostPer1K / 1000 + outputTokens * outputCostPer1K / 1000;
          return { provider, estimatedCost };
        } catch {
          return { provider, estimatedCost: 0.01 };
        }
      });
      const cheapest = providerCosts.sort((a, b) => a.estimatedCost - b.estimatedCost)[0];
      if (cheapest) {
        console.log(`Selected cheapest provider: ${cheapest.provider} (estimated cost: $${cheapest.estimatedCost.toFixed(4)})`);
        return cheapest.provider;
      }
    } catch (error) {
      console.warn(`Cost calculation failed: ${error}. Using primary provider.`);
    }
    if (availableProviders.includes(this.config.primaryProvider)) {
      return this.config.primaryProvider;
    }
    return availableProviders[0];
  }
  getAvailableProviders() {
    return Object.keys(this.config.providers).filter((provider) => this.config.providers[provider]?.apiKey);
  }
  detectSourceProvider(request) {
    try {
      const detected = detectProvider(JSON.stringify(request), {});
      return detected || "openai";
    } catch {
      return "openai";
    }
  }
  async translateRequest(request, fromProvider, toProvider) {
    try {
      return await translateBetweenProviders(fromProvider, toProvider, request);
    } catch (error) {
      console.warn(`Request translation failed from ${fromProvider} to ${toProvider}: ${error}`);
      return request;
    }
  }
  async makeUnifiedAPICall(provider, providerSpecificRequest, providerConfig, options) {
    const timeout = options.timeout || 30000;
    const controller = new AbortController;
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    try {
      const { endpoint, headers } = this.getProviderEndpointConfig(provider, providerConfig, providerSpecificRequest);
      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          ...headers,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(providerSpecificRequest),
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      return await response.json();
    } finally {
      clearTimeout(timeoutId);
    }
  }
  getProviderEndpointConfig(provider, providerConfig, request) {
    switch (provider) {
      case "openai":
        return {
          endpoint: "https://api.openai.com/v1/chat/completions",
          headers: { Authorization: `Bearer ${providerConfig.apiKey}` }
        };
      case "anthropic":
        return {
          endpoint: "https://api.anthropic.com/v1/messages",
          headers: {
            "x-api-key": providerConfig.apiKey,
            "anthropic-version": "2023-06-01"
          }
        };
      case "google":
        return {
          endpoint: `https://generativelanguage.googleapis.com/v1beta/models/${request.model || providerConfig.model || DEFAULT_LLM_MODELS.google}:generateContent?key=${providerConfig.apiKey}`,
          headers: {}
        };
      default:
        throw new Error(`Unsupported provider: ${provider}`);
    }
  }
  convertUniversalToLLMResponse(universalResponse, provider) {
    const response = universalResponse;
    return {
      content: response.content || "",
      usage: {
        prompt_tokens: response.usage?.prompt_tokens || 0,
        completion_tokens: response.usage?.completion_tokens || 0,
        total_tokens: response.usage?.total_tokens || 0
      },
      model: response.model || "",
      cost: response.cost || 0,
      provider,
      metadata: response.metadata || {}
    };
  }
  async validateCostLimits(request, _options, provider) {
    if (!this.config.costControls.preventOverage) {
      return;
    }
    try {
      const sourceProvider = this.detectSourceProvider(request);
      let universal;
      try {
        universal = toUniversal(sourceProvider, request);
        if (!universal) {
          universal = request;
        }
      } catch {
        universal = request;
      }
      const tokens = "provider" in universal ? countUniversalTokens(universal) : {
        inputTokens: 100,
        estimatedOutputTokens: 30,
        multimodalContentCount: 0,
        toolCallsCount: 0
      };
      const inputTokens = tokens.inputTokens || 0;
      const outputTokens = tokens.estimatedOutputTokens || Math.ceil(inputTokens * 0.3);
      let inputCostPer1K = 0.001;
      let outputCostPer1K = 0.002;
      if (provider === "openai") {
        inputCostPer1K = 0.0015;
        outputCostPer1K = 0.002;
      } else if (provider === "anthropic") {
        inputCostPer1K = 0.0008;
        outputCostPer1K = 0.024;
      } else if (provider === "google") {
        inputCostPer1K = 0.0005;
        outputCostPer1K = 0.0015;
      }
      const estimatedCost = inputTokens * inputCostPer1K / 1000 + outputTokens * outputCostPer1K / 1000;
      if (estimatedCost > this.config.costControls.maxCostPerRun) {
        throw new Error(`Estimated cost ($${estimatedCost.toFixed(4)}) exceeds per-run limit ($${this.config.costControls.maxCostPerRun})`);
      }
      const monthlyUsed = this.usageStats.monthlyUsage.cost;
      if (monthlyUsed + estimatedCost > this.config.costControls.maxCostPerMonth) {
        throw new Error(`Estimated cost would exceed monthly limit. Used: $${monthlyUsed.toFixed(4)}, Limit: $${this.config.costControls.maxCostPerMonth}`);
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("exceeds")) {
        throw error;
      }
      console.warn(`Cost validation failed: ${error}. Proceeding with request.`);
    }
  }
  buildEnhancementPrompt(request) {
    const systemPrompt = `You are an expert software engineer and technical issue analyst. Your role is to enhance bug reports and feature requests with detailed technical analysis.

Context:
- Feedback Type: ${request.feedbackType}
- You have access to codebase context and recent changes
- Provide actionable insights and technical recommendations

Response Format (JSON):
{
  "enhancedTitle": "Clear, technical title",
  "enhancedDescription": "Detailed technical description with context",
  "priority": "urgent|high|medium|low",
  "labels": ["bug", "crash", "ios", ...],
  "analysis": {
    "rootCause": "Technical analysis of the cause",
    "affectedComponents": ["component1", "component2"],
    "suggestedFix": "Specific technical recommendations",
    "confidence": 0.95
  }
}`;
    const userContent = [
      {
        type: "text",
        text: `## Original Issue
**Title**: ${request.title}
**Description**: ${request.description}`
      }
    ];
    if (request.crashData) {
      userContent.push({
        type: "text",
        text: `
## Crash Information
**Device**: ${request.crashData.device}
**OS Version**: ${request.crashData.osVersion}
**Stack Trace**:
\`\`\`
${request.crashData.trace.join(`
`)}
\`\`\``
      });
    }
    if (request.codebaseContext?.length) {
      const contextText = request.codebaseContext.sort((a, b) => b.relevance - a.relevance).slice(0, 5).map((ctx) => `**${ctx.file}** (relevance: ${ctx.relevance.toFixed(2)}):
\`\`\`
${ctx.content.slice(0, 1000)}${ctx.content.length > 1000 ? "..." : ""}
\`\`\``).join(`

`);
      userContent.push({
        type: "text",
        text: `
## Relevant Code Context
${contextText}`
      });
    }
    if (request.recentChanges?.length) {
      const changesText = request.recentChanges.slice(0, 3).map((change) => `**${change.file}** (${change.author}, ${change.timestamp}):
\`\`\`diff
${change.diff.slice(0, 500)}${change.diff.length > 500 ? "..." : ""}
\`\`\``).join(`

`);
      userContent.push({
        type: "text",
        text: `
## Recent Changes
${changesText}`
      });
    }
    return {
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userContent
        }
      ],
      temperature: 0.3,
      max_tokens: 2000
    };
  }
  parseEnhancementResponse(response, startTime) {
    try {
      const content = response.content.trim();
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          enhancedTitle: parsed.enhancedTitle || "Enhanced Issue",
          enhancedDescription: parsed.enhancedDescription || content,
          priority: parsed.priority || "medium",
          labels: Array.isArray(parsed.labels) ? parsed.labels : ["testflight"],
          analysis: {
            rootCause: parsed.analysis?.rootCause,
            affectedComponents: Array.isArray(parsed.analysis?.affectedComponents) ? parsed.analysis.affectedComponents : [],
            suggestedFix: parsed.analysis?.suggestedFix,
            confidence: parsed.analysis?.confidence || 0.6
          },
          metadata: {
            provider: response.provider,
            model: response.model,
            processingTime: Date.now() - startTime,
            cost: response.cost
          }
        };
      }
    } catch (error) {
      console.warn(`Failed to parse LLM response as JSON: ${error}`);
    }
    return this.parseUnstructuredResponse(response, startTime);
  }
  parseUnstructuredResponse(response, startTime) {
    const { content } = response;
    const lines = content.split(`
`);
    const title = lines.find((line) => line.trim() && !line.startsWith("#"))?.trim() || "TestFlight Issue";
    const labels = ["testflight"];
    if (content.toLowerCase().includes("crash")) {
      labels.push("crash", "bug");
    }
    if (content.toLowerCase().includes("ui")) {
      labels.push("ui");
    }
    if (content.toLowerCase().includes("performance")) {
      labels.push("performance");
    }
    let priority = "medium";
    if (content.toLowerCase().includes("critical") || content.toLowerCase().includes("urgent")) {
      priority = "urgent";
    } else if (content.toLowerCase().includes("high priority") || content.toLowerCase().includes("crash")) {
      priority = "high";
    }
    return {
      enhancedTitle: title.substring(0, 100),
      enhancedDescription: content,
      priority,
      labels,
      analysis: {
        rootCause: "Analysis requires structured LLM response",
        affectedComponents: [],
        suggestedFix: "Please review the enhanced description for recommendations",
        confidence: 0.6
      },
      metadata: {
        provider: response.provider,
        model: response.model,
        processingTime: Date.now() - startTime,
        cost: response.cost
      }
    };
  }
  createFallbackEnhancement(request, startTime) {
    const isCrash = request.feedbackType === "crash";
    const typeIcon = isCrash ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    const title = `${typeIcon} ${request.title}`;
    const description = `## ${typeIcon} TestFlight ${isCrash ? "Crash Report" : "User Feedback"}

${request.description}

### Analysis
- **Type**: ${request.feedbackType}
- **Enhanced by**: Fallback processing (LLM unavailable)

${request.crashData ? `### Crash Information
- **Device**: ${request.crashData.device}
- **OS Version**: ${request.crashData.osVersion}
- **Stack Trace**: ${request.crashData.trace.length} frames captured` : ""}

${request.codebaseContext?.length ? `### Codebase Context
${request.codebaseContext.length} relevant file(s) identified for analysis.` : ""}

*Note: This issue was created with fallback processing. Consider enabling LLM enhancement for deeper analysis.*`;
    return {
      enhancedTitle: title,
      enhancedDescription: description,
      priority: isCrash ? "high" : "medium",
      labels: isCrash ? ["crash", "bug", "testflight"] : ["feedback", "testflight"],
      analysis: {
        rootCause: "Requires LLM analysis for detailed root cause identification",
        affectedComponents: [],
        suggestedFix: "Enable LLM enhancement for automated analysis and suggestions",
        confidence: 0.3
      },
      metadata: {
        provider: "fallback",
        model: "fallback",
        processingTime: Date.now() - startTime,
        cost: 0
      }
    };
  }
  initializeUsageStats() {
    return {
      totalTokensUsed: 0,
      totalCostAccrued: 0,
      requestCount: 0,
      lastResetDate: new Date,
      monthlyUsage: {
        tokens: 0,
        cost: 0,
        requests: 0
      },
      providerUsage: {
        openai: { tokens: 0, cost: 0, requests: 0, successRate: 1 },
        anthropic: { tokens: 0, cost: 0, requests: 0, successRate: 1 },
        google: { tokens: 0, cost: 0, requests: 0, successRate: 1 }
      }
    };
  }
  updateUsageStats(response) {
    this.usageStats.totalTokensUsed += response.usage.total_tokens;
    this.usageStats.totalCostAccrued += response.cost;
    this.usageStats.requestCount += 1;
    this.usageStats.monthlyUsage.tokens += response.usage.total_tokens;
    this.usageStats.monthlyUsage.cost += response.cost;
    this.usageStats.monthlyUsage.requests += 1;
    const providerStats = this.usageStats.providerUsage[response.provider];
    if (providerStats) {
      providerStats.tokens += response.usage.total_tokens;
      providerStats.cost += response.cost;
      providerStats.requests += 1;
    }
  }
  getUsageStats() {
    return { ...this.usageStats };
  }
  async healthCheck() {
    const configValidation = validateLLMConfig2(this.config);
    if (!this.config.enabled) {
      return {
        status: "degraded",
        providers: {
          openai: { available: false, authenticated: false },
          anthropic: { available: false, authenticated: false },
          google: { available: false, authenticated: false }
        },
        config: configValidation,
        usage: this.usageStats,
        costStatus: {
          withinLimits: true,
          remainingBudget: {
            run: this.config.costControls.maxCostPerRun,
            month: this.config.costControls.maxCostPerMonth
          }
        }
      };
    }
    const costCheck = {
      withinLimits: true,
      exceededLimits: [],
      remainingBudget: {
        run: this.config.costControls.maxCostPerRun - this.usageStats.totalCostAccrued,
        month: this.config.costControls.maxCostPerMonth - this.usageStats.monthlyUsage.cost
      }
    };
    const providerChecks = await Promise.allSettled([
      this.testProvider("openai"),
      this.testProvider("anthropic"),
      this.testProvider("google")
    ]);
    const providers = {
      openai: { available: false, authenticated: false },
      anthropic: { available: false, authenticated: false },
      google: { available: false, authenticated: false }
    };
    providerChecks.forEach((result, index) => {
      const providerName = ["openai", "anthropic", "google"][index];
      if (result.status === "fulfilled") {
        providers[providerName] = result.value;
      } else {
        providers[providerName] = {
          available: false,
          authenticated: false,
          error: result.reason?.message || "Unknown error"
        };
      }
    });
    const healthyProviders = Object.values(providers).filter((p) => p.available && p.authenticated).length;
    const status = healthyProviders === 0 ? "unhealthy" : healthyProviders === 1 ? "degraded" : "healthy";
    return {
      status,
      providers,
      config: configValidation,
      usage: this.usageStats,
      costStatus: costCheck
    };
  }
  async testProvider(provider) {
    try {
      const startTime = Date.now();
      await this.makeRequest({
        messages: [{ role: "user", content: "Hello" }],
        max_tokens: 1
      }, {
        provider,
        skipCostCheck: true,
        enableFallback: false
      });
      return {
        available: true,
        authenticated: true,
        responseTime: Date.now() - startTime
      };
    } catch (error) {
      return {
        available: false,
        authenticated: false,
        error: error.message
      };
    }
  }
}
function getLLMClient() {
  if (!_llmClientInstance) {
    _llmClientInstance = new LLMClient;
  }
  return _llmClientInstance;
}
var _llmClientInstance = null;
var init_llm_client = __esm(() => {
  init_dist();
  init_llm_config();
  init_defaults();
});

// src/api/app-store-connect-auth.ts
class AppStoreConnectAuth {
  currentToken = null;
  tokenLifetimeMinutes = 20;
  refreshThresholdMinutes = 2;
  async getValidToken() {
    try {
      if (this.isTokenValid() && this.currentToken) {
        return this.currentToken.token;
      }
      return await this.generateNewToken();
    } catch (error) {
      throw new Error(`Failed to get valid authentication token: ${error}`);
    }
  }
  async refreshToken() {
    this.currentToken = null;
    return await this.generateNewToken();
  }
  isTokenValid() {
    if (!this.currentToken) {
      return false;
    }
    const now = new Date;
    const refreshThreshold = new Date(this.currentToken.expiresAt.getTime() - this.refreshThresholdMinutes * 60 * 1000);
    return now < refreshThreshold;
  }
  async generateNewToken() {
    try {
      const config = getConfiguration();
      const { issuerId, keyId, privateKey } = config.appStoreConnect;
      const now = Math.floor(Date.now() / 1000);
      const exp = now + this.tokenLifetimeMinutes * 60;
      const payload = {
        iss: issuerId,
        iat: now,
        exp,
        aud: "appstoreconnect-v1"
      };
      const token = await this.signJwt(payload, privateKey, keyId);
      this.currentToken = {
        token,
        issuedAt: new Date(now * 1000),
        expiresAt: new Date(exp * 1000)
      };
      return token;
    } catch (error) {
      throw new Error(`Failed to generate JWT token: ${error}`);
    }
  }
  async signJwt(payload, privateKey, keyId) {
    try {
      const header = {
        alg: "ES256",
        kid: keyId,
        typ: "JWT"
      };
      const encodedHeader = this.base64UrlEncode(JSON.stringify(header));
      const encodedPayload = this.base64UrlEncode(JSON.stringify(payload));
      const message = `${encodedHeader}.${encodedPayload}`;
      const key = await crypto.subtle.importKey("pkcs8", this.pemToArrayBuffer(privateKey), {
        name: "ECDSA",
        namedCurve: "P-256"
      }, false, ["sign"]);
      const signature = await crypto.subtle.sign({
        name: "ECDSA",
        hash: "SHA-256"
      }, key, new TextEncoder().encode(message));
      const encodedSignature = this.base64UrlEncode(new Uint8Array(signature));
      return `${message}.${encodedSignature}`;
    } catch (error) {
      throw new Error(`Failed to sign JWT: ${error}`);
    }
  }
  pemToArrayBuffer(pem) {
    try {
      const pemHeader = "-----BEGIN PRIVATE KEY-----";
      const pemFooter = "-----END PRIVATE KEY-----";
      const pemContents = pem.replace(pemHeader, "").replace(pemFooter, "").replace(/\s+/g, "");
      const binaryString = atob(pemContents);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0;i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      return bytes.buffer;
    } catch (error) {
      throw new Error(`Failed to parse private key: ${error}`);
    }
  }
  base64UrlEncode(data) {
    let base64;
    if (typeof data === "string") {
      base64 = btoa(unescape(encodeURIComponent(data)));
    } else {
      base64 = btoa(String.fromCharCode.apply(null, Array.from(data)));
    }
    return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
  }
  clearToken() {
    this.currentToken = null;
  }
  getTokenInfo() {
    if (!this.currentToken) {
      return { isValid: false };
    }
    return {
      isValid: this.isTokenValid(),
      expiresAt: this.currentToken.expiresAt,
      issuedAt: this.currentToken.issuedAt
    };
  }
}
function getAuthInstance() {
  if (!_authInstance) {
    _authInstance = new AppStoreConnectAuth;
  }
  return _authInstance;
}
var _authInstance = null;
var init_app_store_connect_auth = __esm(() => {
  init_config();
});

// src/api/testflight-client.ts
class TestFlightClient {
  baseUrl = API_ENDPOINTS.APP_STORE_CONNECT;
  defaultTimeout = DEFAULT_HTTP_CONFIG.timeout;
  defaultRetries = DEFAULT_HTTP_CONFIG.retries;
  defaultRetryDelay = DEFAULT_HTTP_CONFIG.retryDelay;
  rateLimitInfo = null;
  async getCrashReports(params) {
    const queryParams = {
      limit: DEFAULT_TESTFLIGHT_CONFIG.DEFAULT_LIMIT,
      sort: DEFAULT_TESTFLIGHT_CONFIG.DEFAULT_SORT,
      ...params
    };
    const response = await this.makeApiRequest("/betaFeedbackCrashSubmissions", queryParams);
    return response.data;
  }
  async getScreenshotFeedback(params) {
    const queryParams = {
      limit: DEFAULT_TESTFLIGHT_CONFIG.DEFAULT_LIMIT,
      sort: DEFAULT_TESTFLIGHT_CONFIG.DEFAULT_SORT,
      ...params
    };
    const response = await this.makeApiRequest("/betaFeedbackScreenshotSubmissions", queryParams);
    return response.data;
  }
  async getAllFeedback(params) {
    try {
      const [crashes, screenshots] = await Promise.all([
        this.getCrashReports(params),
        this.getScreenshotFeedback(params)
      ]);
      const processedData = [];
      for (const crash of crashes) {
        processedData.push(this.processCrashReport(crash));
      }
      for (const screenshot of screenshots) {
        processedData.push(this.processScreenshotFeedback(screenshot));
      }
      processedData.sort((a, b) => b.submittedAt.getTime() - a.submittedAt.getTime());
      return processedData;
    } catch (error) {
      throw new Error(`Failed to fetch all feedback: ${error}`);
    }
  }
  async getRecentFeedback(since) {
    const isoDate = since.toISOString();
    const params = {
      filter: {
        submittedAt: `>${isoDate}`
      },
      limit: 100
    };
    return await this.getAllFeedback(params);
  }
  async downloadCrashLogs(crashReport) {
    const logs = [];
    for (const logInfo of crashReport.attributes.crashLogs) {
      try {
        const expiresAt = new Date(logInfo.expiresAt);
        if (expiresAt <= new Date) {
          console.warn(`Crash log URL expired: ${logInfo.url}`);
          continue;
        }
        const response = await fetch(logInfo.url, {
          headers: {
            "User-Agent": "TestFlight-PM/1.0"
          },
          signal: AbortSignal.timeout(this.defaultTimeout)
        });
        if (!response.ok) {
          console.warn(`Failed to download crash log: ${response.status} ${response.statusText}`);
          continue;
        }
        const logContent = await response.text();
        logs.push(logContent);
      } catch (error) {
        console.warn(`Error downloading crash log from ${logInfo.url}:`, error);
      }
    }
    return logs;
  }
  async downloadScreenshots(screenshotFeedback) {
    const images = [];
    for (const imageInfo of screenshotFeedback.attributes.screenshots) {
      try {
        const expiresAt = new Date(imageInfo.expiresAt);
        if (expiresAt <= new Date) {
          console.warn(`Screenshot URL expired: ${imageInfo.url}`);
          continue;
        }
        const response = await fetch(imageInfo.url, {
          headers: {
            "User-Agent": "TestFlight-PM/1.0"
          },
          signal: AbortSignal.timeout(this.defaultTimeout)
        });
        if (!response.ok) {
          console.warn(`Failed to download screenshot: ${response.status} ${response.statusText}`);
          continue;
        }
        const imageData = new Uint8Array(await response.arrayBuffer());
        images.push(imageData);
      } catch (error) {
        console.warn(`Error downloading screenshot from ${imageInfo.url}:`, error);
      }
    }
    return images;
  }
  getRateLimitInfo() {
    return this.rateLimitInfo;
  }
  async makeApiRequest(endpoint, params, options) {
    const {
      retries = this.defaultRetries,
      retryDelay = this.defaultRetryDelay,
      timeout = this.defaultTimeout
    } = options || {};
    let lastError = null;
    for (let attempt = 0;attempt <= retries; attempt++) {
      try {
        await this.waitForRateLimit();
        const authInstance = getAuthInstance();
        const token = await authInstance.getValidToken();
        const url = this.buildUrl(endpoint, params);
        const response = await fetch(url, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
            "User-Agent": "TestFlight-PM/1.0"
          },
          signal: AbortSignal.timeout(timeout)
        });
        this.updateRateLimitInfo(response);
        if (!response.ok) {
          const errorText = await response.text();
          let errorData;
          try {
            errorData = JSON.parse(errorText);
          } catch {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          const errorMessage = errorData.errors.map((e) => `${e.title}: ${e.detail}`).join("; ");
          throw new Error(`API Error: ${errorMessage}`);
        }
        const data = await response.json();
        return data;
      } catch (error) {
        lastError = error;
        if (lastError.message.includes("authentication") || lastError.message.includes("unauthorized")) {
          throw lastError;
        }
        if (attempt === retries) {
          break;
        }
        const delay = retryDelay * 2 ** attempt;
        await this.sleep(delay);
      }
    }
    throw new Error(`Request failed after ${retries + 1} attempts: ${lastError?.message}`);
  }
  buildUrl(endpoint, params) {
    const url = new URL(endpoint, this.baseUrl);
    if (params) {
      if (params.limit) {
        url.searchParams.set("limit", params.limit.toString());
      }
      if (params.sort) {
        url.searchParams.set("sort", params.sort);
      }
      if (params.include) {
        url.searchParams.set("include", params.include);
      }
      if (params.filter) {
        for (const [key, value] of Object.entries(params.filter)) {
          url.searchParams.set(`filter[${key}]`, value);
        }
      }
      if (params.fields) {
        for (const [key, value] of Object.entries(params.fields)) {
          url.searchParams.set(`fields[${key}]`, value);
        }
      }
    }
    return url.toString();
  }
  updateRateLimitInfo(response) {
    const remaining = response.headers.get("X-RateLimit-Remaining");
    const reset = response.headers.get("X-RateLimit-Reset");
    const limit = response.headers.get("X-RateLimit-Limit");
    if (remaining && reset && limit) {
      this.rateLimitInfo = {
        remaining: Number.parseInt(remaining, 10),
        reset: new Date(Number.parseInt(reset, 10) * 1000),
        limit: Number.parseInt(limit, 10)
      };
    }
  }
  async waitForRateLimit() {
    if (!this.rateLimitInfo) {
      return;
    }
    if (this.rateLimitInfo.remaining <= 5) {
      const now = new Date;
      const waitTime = this.rateLimitInfo.reset.getTime() - now.getTime();
      if (waitTime > 0) {
        console.log(`Rate limit approaching. Waiting ${Math.ceil(waitTime / 1000)} seconds...`);
        await this.sleep(waitTime);
      }
    }
  }
  processCrashReport(crash) {
    return {
      id: crash.id,
      type: "crash",
      submittedAt: new Date(crash.attributes.submittedAt),
      appVersion: crash.attributes.appVersion,
      buildNumber: crash.attributes.buildNumber,
      deviceInfo: {
        family: crash.attributes.deviceFamily,
        model: crash.attributes.deviceModel,
        osVersion: crash.attributes.osVersion,
        locale: crash.attributes.locale
      },
      bundleId: crash.attributes.bundleId,
      crashData: {
        trace: crash.attributes.crashTrace,
        type: crash.attributes.crashType,
        exceptionType: crash.attributes.exceptionType,
        exceptionMessage: crash.attributes.exceptionMessage,
        logs: crash.attributes.crashLogs.map((log) => ({
          url: log.url,
          expiresAt: new Date(log.expiresAt)
        }))
      }
    };
  }
  processScreenshotFeedback(screenshot) {
    return {
      id: screenshot.id,
      type: "screenshot",
      submittedAt: new Date(screenshot.attributes.submittedAt),
      appVersion: screenshot.attributes.appVersion,
      buildNumber: screenshot.attributes.buildNumber,
      deviceInfo: {
        family: screenshot.attributes.deviceFamily,
        model: screenshot.attributes.deviceModel,
        osVersion: screenshot.attributes.osVersion,
        locale: screenshot.attributes.locale
      },
      bundleId: screenshot.attributes.bundleId,
      screenshotData: {
        text: screenshot.attributes.feedbackText,
        images: screenshot.attributes.screenshots.map((img) => ({
          url: img.url,
          fileName: img.fileName,
          fileSize: img.fileSize,
          expiresAt: new Date(img.expiresAt)
        })),
        annotations: screenshot.attributes.annotations
      }
    };
  }
  sleep(ms) {
    return new Promise((resolve2) => setTimeout(resolve2, ms));
  }
}
function getTestFlightClient() {
  if (!_clientInstance) {
    _clientInstance = new TestFlightClient;
  }
  return _clientInstance;
}
var _clientInstance = null;
var init_testflight_client = __esm(() => {
  init_config();
  init_app_store_connect_auth();
});

// src/api/github-client.ts
var exports_github_client = {};
__export(exports_github_client, {
  validateGitHubConfig: () => validateGitHubConfig2,
  getGitHubClient: () => getGitHubClient,
  clearGitHubClientInstance: () => clearGitHubClientInstance,
  GitHubClient: () => GitHubClient
});

class GitHubClient {
  config;
  baseUrl = API_ENDPOINTS.GITHUB;
  defaultTimeout = DEFAULT_HTTP_CONFIG.timeout;
  defaultRetries = DEFAULT_HTTP_CONFIG.retries;
  defaultRetryDelay = DEFAULT_HTTP_CONFIG.retryDelay;
  labelsCache = new Map;
  milestonesCache = new Map;
  rateLimitInfo = null;
  lastCacheUpdate = {};
  constructor() {
    const envConfig = getConfiguration();
    if (!envConfig.github) {
      throw new Error("GitHub configuration not found. Please set GTHB_TOKEN, GITHUB_OWNER, and GITHUB_REPO.");
    }
    this.config = {
      token: envConfig.github.token,
      owner: envConfig.github.owner,
      repo: envConfig.github.repo,
      defaultLabels: [...DEFAULT_LABEL_CONFIG.defaultLabels],
      crashLabels: [...DEFAULT_LABEL_CONFIG.crashLabels],
      feedbackLabels: [...DEFAULT_LABEL_CONFIG.feedbackLabels],
      enableDuplicateDetection: true,
      duplicateDetectionDays: 7,
      enableScreenshotUpload: true,
      maxScreenshotSize: 25 * 1024 * 1024,
      rateLimitBuffer: 100
    };
  }
  async createIssueFromTestFlight(feedback, options = {}) {
    try {
      if (options.enableDuplicateDetection !== false && this.config.enableDuplicateDetection) {
        const duplicateResult = await this.findDuplicateIssue(feedback);
        if (duplicateResult.isDuplicate && duplicateResult.existingIssue) {
          console.log(`Duplicate issue found: #${duplicateResult.existingIssue.number}. Adding comment instead.`);
          await this.addTestFlightCommentToIssue(duplicateResult.existingIssue.number, feedback);
          return {
            issue: duplicateResult.existingIssue,
            wasExisting: true,
            action: "comment_added",
            message: `Added comment to existing issue #${duplicateResult.existingIssue.number}`
          };
        }
      }
      const issueData = await this.prepareIssueFromTestFlight(feedback, options);
      let attachmentResults;
      if (options.attachScreenshots !== false && this.config.enableScreenshotUpload && issueData.attachments.length > 0) {
        attachmentResults = await this.uploadScreenshots(issueData.attachments, feedback);
        if (attachmentResults.uploaded > 0) {
          issueData.body += this.formatScreenshotLinks(attachmentResults);
        }
      }
      const createRequest = {
        title: issueData.title,
        body: issueData.body,
        labels: issueData.labels,
        assignee: options.assignee || issueData.assignee,
        assignees: options.assignees,
        milestone: options.milestone || issueData.milestone
      };
      const createdIssue = await this.createIssue(createRequest);
      console.log(`✅ Created GitHub issue: #${createdIssue.number} - ${createdIssue.title}`);
      return {
        issue: createdIssue,
        wasExisting: false,
        action: "created",
        message: `Created new issue #${createdIssue.number}`,
        attachments: attachmentResults
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to create GitHub issue from TestFlight feedback: ${errorMessage}`);
    }
  }
  async createIssue(request) {
    const response = await this.makeApiRequest("POST", `/repos/${this.config.owner}/${this.config.repo}/issues`, request);
    return response.data;
  }
  async updateIssue(issueNumber, request) {
    const response = await this.makeApiRequest("PATCH", `/repos/${this.config.owner}/${this.config.repo}/issues/${issueNumber}`, request);
    return response.data;
  }
  async addCommentToIssue(issueNumber, body) {
    const response = await this.makeApiRequest("POST", `/repos/${this.config.owner}/${this.config.repo}/issues/${issueNumber}/comments`, { body });
    return response.data;
  }
  async findDuplicateIssue(feedback) {
    const maxRetries = 3;
    const retryDelay = 1000;
    for (let attempt = 0;attempt <= maxRetries; attempt++) {
      try {
        const since = new Date;
        since.setDate(since.getDate() - this.config.duplicateDetectionDays);
        const feedbackHash = this.generateFeedbackHash(feedback);
        const searchStrategies = [
          {
            name: "exact_id",
            query: `repo:${this.config.owner}/${this.config.repo} is:issue "TestFlight ID: ${this.escapeSearchTerm(feedback.id)}"`,
            confidence: 1
          },
          {
            name: "feedback_hash",
            query: `repo:${this.config.owner}/${this.config.repo} is:issue "FEEDBACK_HASH:${feedbackHash}"`,
            confidence: 1
          },
          {
            name: "comment_search",
            query: `repo:${this.config.owner}/${this.config.repo} is:issue commenter:app/github-actions "TestFlight ID: ${this.escapeSearchTerm(feedback.id)}"`,
            confidence: 0.95
          }
        ];
        if (feedback.type === "crash" && feedback.crashData?.exceptionType) {
          const escapedExceptionType = this.escapeSearchTerm(feedback.crashData.exceptionType);
          searchStrategies.push({
            name: "exception_type",
            query: `repo:${this.config.owner}/${this.config.repo} is:issue "${escapedExceptionType}" ${feedback.appVersion}`,
            confidence: 0.8
          });
        }
        if (feedback.screenshotData?.text) {
          const cleanText = feedback.screenshotData.text.substring(0, 50);
          const escapedText = this.escapeSearchTerm(cleanText);
          searchStrategies.push({
            name: "screenshot_text",
            query: `repo:${this.config.owner}/${this.config.repo} is:issue "${escapedText}"`,
            confidence: 0.7
          });
        }
        for (const strategy of searchStrategies) {
          try {
            const searchParams = {
              q: strategy.query,
              sort: "created",
              order: "desc",
              per_page: 10
            };
            const searchResults = await this.searchIssues(searchParams);
            for (const issue of searchResults.items) {
              const matchResult = this.analyzeIssueMatch(issue, feedback, strategy);
              if (matchResult.isMatch && matchResult.confidence >= 0.7) {
                return {
                  isDuplicate: true,
                  existingIssue: issue,
                  confidence: matchResult.confidence,
                  reasons: [
                    `Match found via ${strategy.name} strategy`,
                    ...matchResult.reasons
                  ]
                };
              }
            }
          } catch (strategyError) {
            console.warn(`Search strategy ${strategy.name} failed: ${strategyError}`);
          }
        }
        return {
          isDuplicate: false,
          confidence: 0,
          reasons: ["No duplicates found after comprehensive search"]
        };
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (attempt === maxRetries) {
          console.error(`Duplicate detection failed after ${maxRetries + 1} attempts: ${errorMessage}`);
          return {
            isDuplicate: false,
            confidence: 0,
            reasons: [`Duplicate detection failed: ${errorMessage}`]
          };
        }
        console.warn(`Duplicate detection attempt ${attempt + 1} failed: ${errorMessage}. Retrying...`);
        await this.sleep(retryDelay * 2 ** attempt);
      }
    }
    throw new Error("Unexpected end of retry loop");
  }
  analyzeIssueMatch(issue, feedback, strategy) {
    const reasons = [];
    let baseConfidence = strategy.confidence;
    if (issue.body?.includes(`TestFlight ID: ${feedback.id}`)) {
      return {
        isMatch: true,
        confidence: 1,
        reasons: ["Exact TestFlight ID match in issue body"]
      };
    }
    const feedbackHash = this.generateFeedbackHash(feedback);
    if (issue.body?.includes(`FEEDBACK_HASH:${feedbackHash}`)) {
      return {
        isMatch: true,
        confidence: 1,
        reasons: ["Exact feedback hash match in issue body"]
      };
    }
    if (issue.body?.includes(`<!-- TESTFLIGHT_ID:${feedback.id} -->`)) {
      return {
        isMatch: true,
        confidence: 1,
        reasons: ["TestFlight ID found in issue metadata"]
      };
    }
    if (feedback.type === "crash" && feedback.crashData?.exceptionType) {
      const hasExceptionInTitle = issue.title.includes(feedback.crashData.exceptionType);
      const hasExceptionInBody = issue.body?.includes(feedback.crashData.exceptionType);
      if (hasExceptionInTitle || hasExceptionInBody) {
        reasons.push("Exception type match found");
        if (issue.body?.includes(feedback.appVersion)) {
          reasons.push("Same app version detected");
          baseConfidence += 0.1;
        }
        if (issue.body?.includes(feedback.deviceInfo.model)) {
          reasons.push("Same device model detected");
          baseConfidence += 0.05;
        }
        return {
          isMatch: baseConfidence >= 0.7,
          confidence: Math.min(baseConfidence, 0.95),
          reasons
        };
      }
    }
    if (feedback.screenshotData?.text && strategy.name === "screenshot_text") {
      const feedbackWords = feedback.screenshotData.text.toLowerCase().split(/\s+/);
      const issueText = `${issue.title} ${issue.body || ""}`.toLowerCase();
      const significantWords = feedbackWords.filter((word) => word.length > 3);
      const matchingWords = significantWords.filter((word) => issueText.includes(word));
      if (matchingWords.length >= Math.min(3, significantWords.length * 0.4)) {
        const confidence = Math.min(baseConfidence, 0.6 + matchingWords.length / significantWords.length * 0.3);
        return {
          isMatch: confidence >= 0.7,
          confidence,
          reasons: [
            `${matchingWords.length}/${significantWords.length} significant words match`
          ]
        };
      }
    }
    return {
      isMatch: false,
      confidence: 0,
      reasons: ["No significant matches found"]
    };
  }
  async searchIssues(params) {
    const queryParams = new URLSearchParams;
    for (const [key, value] of Object.entries(params)) {
      if (value !== undefined) {
        queryParams.append(key, value.toString());
      }
    }
    const response = await this.makeApiRequest("GET", `/search/issues?${queryParams.toString()}`);
    return response.data;
  }
  async getLabels() {
    const cacheAge = this.lastCacheUpdate.labels ? Date.now() - this.lastCacheUpdate.labels.getTime() : Number.POSITIVE_INFINITY;
    const cacheExpiryMs = 5 * 60 * 1000;
    if (this.labelsCache.size === 0 || cacheAge > cacheExpiryMs) {
      const response = await this.makeApiRequest("GET", `/repos/${this.config.owner}/${this.config.repo}/labels?per_page=100`);
      this.labelsCache.clear();
      for (const label of response.data) {
        this.labelsCache.set(label.name.toLowerCase(), label);
      }
      this.lastCacheUpdate.labels = new Date;
    }
    return Array.from(this.labelsCache.values());
  }
  async getMilestones() {
    const cacheAge = this.lastCacheUpdate.milestones ? Date.now() - this.lastCacheUpdate.milestones.getTime() : Number.POSITIVE_INFINITY;
    const cacheExpiryMs = 5 * 60 * 1000;
    if (this.milestonesCache.size === 0 || cacheAge > cacheExpiryMs) {
      const response = await this.makeApiRequest("GET", `/repos/${this.config.owner}/${this.config.repo}/milestones?state=open&per_page=100`);
      this.milestonesCache.clear();
      for (const milestone of response.data) {
        this.milestonesCache.set(milestone.title.toLowerCase(), milestone);
      }
      this.lastCacheUpdate.milestones = new Date;
    }
    return Array.from(this.milestonesCache.values());
  }
  async uploadScreenshots(screenshots, feedback) {
    const results = {
      uploaded: 0,
      failed: 0,
      details: []
    };
    if (!screenshots || screenshots.length === 0) {
      return results;
    }
    for (const screenshot of screenshots) {
      try {
        if (screenshot.size > this.config.maxScreenshotSize) {
          results.failed++;
          const sizeMB = (screenshot.size / (1024 * 1024)).toFixed(2);
          const limitMB = (this.config.maxScreenshotSize / (1024 * 1024)).toFixed(0);
          results.details.push({
            filename: screenshot.filename,
            success: false,
            error: `File size (${sizeMB}MB) exceeds limit (${limitMB}MB)`
          });
          continue;
        }
        if (!screenshot.contentType.startsWith("image/")) {
          results.failed++;
          results.details.push({
            filename: screenshot.filename,
            success: false,
            error: `Invalid content type: ${screenshot.contentType}. Only images are supported.`
          });
          continue;
        }
        const gistDescription = `TestFlight Screenshot - ${feedback.type} - ${feedback.id} - ${screenshot.filename}`;
        let content;
        if (screenshot.content instanceof Uint8Array) {
          content = Buffer.from(screenshot.content).toString("base64");
        } else {
          content = screenshot.content;
        }
        const gist = await this.createGist({
          description: gistDescription,
          public: false,
          files: {
            [screenshot.filename]: {
              content
            }
          }
        });
        results.uploaded++;
        results.details.push({
          filename: screenshot.filename,
          success: true,
          url: gist.html_url
        });
      } catch (error) {
        results.failed++;
        const errorMessage = error instanceof Error ? error.message : String(error);
        results.details.push({
          filename: screenshot.filename,
          success: false,
          error: errorMessage
        });
      }
    }
    return results;
  }
  async createGist(gistData) {
    const response = await this.makeApiRequest("POST", "/gists", gistData);
    return response.data;
  }
  async getRateLimit() {
    const response = await this.makeApiRequest("GET", "/rate_limit");
    return response.data.rate;
  }
  async healthCheck() {
    try {
      const rateLimit = await this.getRateLimit();
      const user = await this.getCurrentUser();
      return {
        status: "healthy",
        details: {
          repository: `${this.config.owner}/${this.config.repo}`,
          currentUser: user.login,
          rateLimit: {
            remaining: rateLimit.remaining,
            limit: rateLimit.limit,
            reset: new Date(rateLimit.reset * 1000).toISOString()
          },
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      return {
        status: "unhealthy",
        details: {
          error: errorMessage,
          repository: `${this.config.owner}/${this.config.repo}`,
          timestamp: new Date().toISOString()
        }
      };
    }
  }
  async getCurrentUser() {
    const response = await this.makeApiRequest("GET", "/user");
    return response.data;
  }
  async makeApiRequest(method, endpoint, body, options = {}) {
    const {
      retries = this.defaultRetries,
      retryDelay = this.defaultRetryDelay,
      timeout = this.defaultTimeout
    } = options;
    let lastError = null;
    for (let attempt = 0;attempt <= retries; attempt++) {
      try {
        await this.waitForRateLimit();
        const url = endpoint.startsWith("http") ? endpoint : `${this.baseUrl}${endpoint}`;
        const response = await fetch(url, {
          method,
          headers: {
            Authorization: `Bearer ${this.config.token}`,
            Accept: "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28",
            "User-Agent": "TestFlight-PM/1.0",
            ...body ? { "Content-Type": "application/json" } : {}
          },
          body: body ? JSON.stringify(body) : undefined,
          signal: AbortSignal.timeout(timeout)
        });
        this.updateRateLimitInfo(response);
        if (!response.ok) {
          const errorText = await response.text();
          let errorData;
          try {
            errorData = JSON.parse(errorText);
          } catch {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          if (response.status >= 400 && response.status < 500 && response.status !== 429) {
            throw new Error(`GitHub API Error (${response.status}): ${errorData.message || response.statusText}`);
          }
          throw new Error(`GitHub API Error: ${errorData.message || response.statusText}`);
        }
        const data = await response.json();
        return {
          data,
          status: response.status,
          headers: Object.fromEntries(response.headers.entries()),
          rateLimit: {
            limit: Number.parseInt(response.headers.get("x-ratelimit-limit") || "0", 10),
            remaining: Number.parseInt(response.headers.get("x-ratelimit-remaining") || "0", 10),
            reset: new Date(Number.parseInt(response.headers.get("x-ratelimit-reset") || "0", 10) * 1000)
          }
        };
      } catch (error) {
        lastError = error;
        if (lastError.message.includes("authentication") || lastError.message.includes("401") || lastError.message.includes("403") || lastError.message.includes("404")) {
          throw lastError;
        }
        if (attempt === retries) {
          break;
        }
        const delay = retryDelay * 2 ** attempt;
        await this.sleep(delay);
      }
    }
    const errorMessage = lastError?.message || "Unknown error";
    throw new Error(`Request failed after ${retries + 1} attempts: ${errorMessage}`);
  }
  updateRateLimitInfo(response) {
    const limit = response.headers.get("x-ratelimit-limit");
    const remaining = response.headers.get("x-ratelimit-remaining");
    const reset = response.headers.get("x-ratelimit-reset");
    if (limit && remaining && reset) {
      const resetTimestamp = Number.parseInt(reset, 10);
      if (!Number.isNaN(resetTimestamp) && resetTimestamp > 0) {
        this.rateLimitInfo = {
          limit: Number.parseInt(limit, 10),
          remaining: Number.parseInt(remaining, 10),
          reset: resetTimestamp,
          used: 0,
          resource: "core"
        };
      }
    }
  }
  async waitForRateLimit() {
    if (!this.rateLimitInfo) {
      return;
    }
    if (this.rateLimitInfo.remaining <= this.config.rateLimitBuffer) {
      const now = Math.floor(Date.now() / 1000);
      const waitTime = (this.rateLimitInfo.reset - now) * 1000;
      if (waitTime > 0 && waitTime <= 3600000) {
        console.log(`Rate limit approaching. Waiting ${Math.ceil(waitTime / 1000)} seconds...`);
        await this.sleep(waitTime);
      }
    }
  }
  async prepareIssueFromTestFlight(feedback, options) {
    const isCrash = feedback.type === "crash";
    const typeIcon = isCrash ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    const typeLabel = isCrash ? "Crash Report" : "User Feedback";
    let title = options.customTitle || `${typeIcon} ${typeLabel}: ${feedback.appVersion} (${feedback.buildNumber})`;
    if (isCrash && feedback.crashData?.exceptionType) {
      title += ` - ${feedback.crashData.exceptionType}`;
    } else if (feedback.screenshotData?.text) {
      const shortText = feedback.screenshotData.text.substring(0, 40);
      title += ` - ${shortText}${shortText.length < feedback.screenshotData.text.length ? "..." : ""}`;
    }
    const body = options.customBody || this.formatIssueBody(feedback);
    const baseLabels = isCrash ? this.config.crashLabels : this.config.feedbackLabels;
    const allLabels = [
      ...this.config.defaultLabels,
      ...baseLabels,
      ...options.additionalLabels || []
    ];
    const attachments = [];
    if (feedback.screenshotData?.images && this.config.enableScreenshotUpload && feedback.screenshotData.images.length > 0) {
      const testFlightClient = getTestFlightClient();
      try {
        const screenshots = await testFlightClient.downloadScreenshots({
          id: feedback.id,
          type: "betaFeedbackScreenshotSubmissions",
          attributes: {
            submittedAt: feedback.submittedAt.toISOString(),
            appVersion: feedback.appVersion,
            buildNumber: feedback.buildNumber,
            deviceFamily: feedback.deviceInfo.family,
            deviceModel: feedback.deviceInfo.model,
            osVersion: feedback.deviceInfo.osVersion,
            locale: feedback.deviceInfo.locale,
            bundleId: feedback.bundleId,
            feedbackText: feedback.screenshotData.text || "",
            screenshots: feedback.screenshotData.images.map((img, _index) => ({
              url: img.url,
              fileName: img.fileName,
              fileSize: img.fileSize,
              expiresAt: img.expiresAt.toISOString()
            })),
            annotations: feedback.screenshotData.annotations || []
          },
          relationships: {}
        });
        screenshots.forEach((screenshot, index) => {
          const imageInfo = feedback.screenshotData?.images?.[index];
          if (imageInfo) {
            attachments.push({
              filename: imageInfo.fileName,
              content: screenshot,
              contentType: "image/png",
              size: screenshot.length
            });
          }
        });
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.warn(`Failed to download screenshots for issue: ${errorMessage}`);
      }
    }
    return {
      title,
      body,
      labels: allLabels,
      assignee: this.config.defaultAssignee,
      milestone: this.config.defaultMilestone,
      attachments,
      metadata: {
        testflightFeedbackId: feedback.id,
        testflightFeedbackType: feedback.type,
        appVersion: feedback.appVersion,
        buildNumber: feedback.buildNumber,
        deviceModel: feedback.deviceInfo.model,
        osVersion: feedback.deviceInfo.osVersion,
        submittedAt: feedback.submittedAt.toISOString()
      }
    };
  }
  formatIssueBody(feedback) {
    const isCrash = feedback.type === "crash";
    const typeIcon = isCrash ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    const typeLabel = isCrash ? "Crash Report" : "User Feedback";
    let body = `## ${typeIcon} ${typeLabel} from TestFlight

`;
    body += `<!-- TESTFLIGHT_ID:${feedback.id} -->
`;
    body += `<!-- FEEDBACK_HASH:${this.generateFeedbackHash(feedback)} -->
`;
    body += `<!-- CREATION_TIMESTAMP:${Date.now()} -->

`;
    body += `| Field | Value |
`;
    body += `|-------|-------|
`;
    body += `| **TestFlight ID** | \`${feedback.id}\` |
`;
    body += `| **App Version** | ${feedback.appVersion} (Build ${feedback.buildNumber}) |
`;
    body += `| **Submitted** | ${feedback.submittedAt.toISOString()} |
`;
    body += `| **Device** | ${feedback.deviceInfo.model} |
`;
    body += `| **OS Version** | ${feedback.deviceInfo.osVersion} |
`;
    body += `| **Locale** | ${feedback.deviceInfo.locale} |

`;
    if (isCrash && feedback.crashData) {
      body += `### \uD83D\uDD0D Crash Details

`;
      body += `**Type:** ${feedback.crashData.type}

`;
      if (feedback.crashData.exceptionType) {
        body += `**Exception:** \`${feedback.crashData.exceptionType}\`

`;
      }
      if (feedback.crashData.exceptionMessage) {
        body += `**Message:**
\`\`\`
${feedback.crashData.exceptionMessage}
\`\`\`

`;
      }
      body += `### Stack Trace
\`\`\`
${feedback.crashData.trace}
\`\`\`

`;
      if (feedback.crashData.logs.length > 0) {
        body += `### Crash Logs
`;
        feedback.crashData.logs.forEach((log, index) => {
          body += `- [Crash Log ${index + 1}](${log.url}) (expires: ${log.expiresAt.toLocaleDateString()})
`;
        });
        body += `
`;
      }
    }
    if (feedback.screenshotData) {
      body += `### \uD83D\uDCDD User Feedback

`;
      if (feedback.screenshotData.text) {
        body += `**Feedback Text:**
> ${feedback.screenshotData.text.replace(/\n/g, `
> `)}

`;
      }
      if (feedback.screenshotData.images.length > 0) {
        body += `**Screenshots:** ${feedback.screenshotData.images.length} attached

`;
      }
      if (feedback.screenshotData.annotations && feedback.screenshotData.annotations.length > 0) {
        body += `**Annotations:** ${feedback.screenshotData.annotations.length} user annotation(s)

`;
      }
    }
    body += `### \uD83D\uDEE0️ Technical Information

`;
    body += `<details>
<summary>Device & Environment Details</summary>

`;
    body += `- **Device Family:** ${feedback.deviceInfo.family}
`;
    body += `- **Device Model:** ${feedback.deviceInfo.model}
`;
    body += `- **OS Version:** ${feedback.deviceInfo.osVersion}
`;
    body += `- **Locale:** ${feedback.deviceInfo.locale}
`;
    body += `- **Bundle ID:** ${feedback.bundleId}
`;
    body += `- **Submission Time:** ${feedback.submittedAt.toISOString()}
`;
    body += `
</details>

`;
    body += `---
*Automatically created from TestFlight feedback. ID: \`${feedback.id}\`*`;
    return body;
  }
  formatScreenshotLinks(attachmentResults) {
    let screenshotSection = `

### \uD83D\uDCF8 Screenshots

`;
    for (const detail of attachmentResults.details) {
      if (detail.success && detail.url) {
        screenshotSection += `- [${detail.filename}](${detail.url})
`;
      } else {
        screenshotSection += `- ❌ ${detail.filename} (failed to upload)
`;
      }
    }
    if (attachmentResults.failed > 0) {
      screenshotSection += `
*Note: ${attachmentResults.failed} screenshot(s) failed to upload*
`;
    }
    return screenshotSection;
  }
  async addTestFlightCommentToIssue(issueNumber, feedback) {
    const typeIcon = feedback.type === "crash" ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    let commentBody = `${typeIcon} **Additional TestFlight ${feedback.type} report**

`;
    commentBody += `**TestFlight ID:** ${feedback.id}
`;
    commentBody += `**Submitted:** ${feedback.submittedAt.toISOString()}
`;
    commentBody += `**Device:** ${feedback.deviceInfo.model} (${feedback.deviceInfo.osVersion})
`;
    if (feedback.screenshotData?.text) {
      commentBody += `
**User Feedback:**
> ${feedback.screenshotData.text}`;
    }
    return await this.addCommentToIssue(issueNumber, commentBody);
  }
  escapeSearchTerm(term) {
    return term.replace(/['"\\]/g, "\\$&");
  }
  generateFeedbackHash(feedback) {
    const hashInput = [
      feedback.id,
      feedback.type,
      feedback.appVersion,
      feedback.buildNumber,
      feedback.deviceInfo.model,
      feedback.deviceInfo.osVersion,
      feedback.crashData?.exceptionType || "",
      feedback.screenshotData?.text?.substring(0, 100) || ""
    ].join("|");
    let hash = 0;
    for (let i = 0;i < hashInput.length; i++) {
      const char = hashInput.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash &= hash;
    }
    return Math.abs(hash).toString(36);
  }
  sleep(ms) {
    return new Promise((resolve2) => setTimeout(resolve2, ms));
  }
}
function getGitHubClient() {
  if (!_githubClientInstance) {
    _githubClientInstance = new GitHubClient;
  }
  return _githubClientInstance;
}
function clearGitHubClientInstance() {
  _githubClientInstance = null;
}
function validateGitHubConfig2() {
  try {
    const config = getConfiguration();
    return !!(config.github?.token && config.github?.owner && config.github?.repo);
  } catch {
    return false;
  }
}
var _githubClientInstance = null;
var init_github_client = __esm(() => {
  init_config();
  init_testflight_client();
});

// node_modules/@linear/sdk/dist/index-cjs.min.js
var require_index_cjs_min = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var e = __require("stream");
  var i = __require("http");
  var n = __require("url");
  var a = __require("https");
  var t = __require("zlib");
  var d = __require("crypto");
  function l(e2) {
    return e2 && typeof e2 == "object" && "default" in e2 ? e2 : { default: e2 };
  }
  var o;
  var r;
  var m;
  var s;
  var u;
  var k;
  var v;
  var c;
  var p;
  var N;
  var h;
  var f;
  var y;
  var S;
  var b;
  var g;
  var F;
  var D;
  var _;
  var V;
  var A;
  var T;
  var I;
  var w;
  var C;
  var P;
  var q;
  var x;
  var j;
  var U;
  var O;
  var B;
  var R;
  var E;
  var M;
  var L;
  var z;
  var W;
  var H;
  var Q;
  var G;
  var J;
  var K;
  var $;
  var Z;
  var Y;
  var X;
  var ee;
  var ie;
  var ne;
  var ae;
  var te;
  var de;
  var le;
  var oe;
  var re;
  var me = l(e);
  var se = l(i);
  var ue = l(n);
  var ke = l(a);
  var ve = l(t);
  var ce = l(d);
  (function(e2) {
    e2.Action = "action", e2.Elicitation = "elicitation", e2.Error = "error", e2.Prompt = "prompt", e2.Response = "response", e2.Thought = "thought";
  })(o || (o = {})), function(e2) {
    e2.Active = "active", e2.AwaitingInput = "awaitingInput", e2.Complete = "complete", e2.Error = "error", e2.Pending = "pending", e2.Stale = "stale";
  }(r || (r = {})), function(e2) {
    e2.CommentThread = "commentThread";
  }(m || (m = {})), function(e2) {
    e2.Android = "android", e2.Desktop = "desktop", e2.Ios = "ios", e2.Web = "web";
  }(s || (s = {})), function(e2) {
    e2.ActiveCycle = "activeCycle", e2.ActiveIssues = "activeIssues", e2.Backlog = "backlog", e2.Triage = "triage", e2.UpcomingCycle = "upcomingCycle";
  }(u || (u = {})), function(e2) {
    e2.Active = "active", e2.Inactive = "inactive";
  }(k || (k = {})), function(e2) {
    e2.After = "after", e2.Before = "before", e2.During = "during";
  }(v || (v = {})), function(e2) {
    e2.HalfYear = "halfYear", e2.Month = "month", e2.Quarter = "quarter", e2.Year = "year";
  }(c || (c = {})), function(e2) {
    e2.Friday = "Friday", e2.Monday = "Monday", e2.Saturday = "Saturday", e2.Sunday = "Sunday", e2.Thursday = "Thursday", e2.Tuesday = "Tuesday", e2.Wednesday = "Wednesday";
  }(p || (p = {})), function(e2) {
    e2.Asks = "asks", e2.Team = "team", e2.Template = "template";
  }(N || (N = {})), function(e2) {
    e2.Github = "github", e2.Jira = "jira", e2.Slack = "slack";
  }(h || (h = {})), function(e2) {
    e2.Feed = "feed", e2.Projects = "projects", e2.TeamIssues = "teamIssues";
  }(f || (f = {})), function(e2) {
    e2.Daily = "daily", e2.Never = "never", e2.Weekly = "weekly";
  }(y || (y = {})), function(e2) {
    e2.Daily = "daily", e2.Weekly = "weekly";
  }(S || (S = {})), function(e2) {
    e2.Draft = "draft", e2.Merge = "merge", e2.Mergeable = "mergeable", e2.Review = "review", e2.Start = "start";
  }(b || (b = {})), function(e2) {
    e2.Closes = "closes", e2.Contributes = "contributes", e2.Links = "links";
  }(g || (g = {})), function(e2) {
    e2.Organization = "organization", e2.User = "user";
  }(F || (F = {})), function(e2) {
    e2.Active = "Active", e2.Completed = "Completed", e2.Planned = "Planned";
  }(D || (D = {})), function(e2) {
    e2.Overview = "overview", e2.Projects = "projects";
  }(_ || (_ = {})), function(e2) {
    e2.AtRisk = "atRisk", e2.OffTrack = "offTrack", e2.OnTrack = "onTrack";
  }(V || (V = {})), function(e2) {
    e2.Airbyte = "airbyte", e2.Discord = "discord", e2.Email = "email", e2.Figma = "figma", e2.FigmaPlugin = "figmaPlugin", e2.Front = "front", e2.Github = "github", e2.GithubCommit = "githubCommit", e2.GithubEnterpriseServer = "githubEnterpriseServer", e2.GithubImport = "githubImport", e2.GithubPersonal = "githubPersonal", e2.Gitlab = "gitlab", e2.GoogleCalendarPersonal = "googleCalendarPersonal", e2.GoogleSheets = "googleSheets", e2.Intercom = "intercom", e2.Jira = "jira", e2.JiraPersonal = "jiraPersonal", e2.LaunchDarkly = "launchDarkly", e2.LaunchDarklyPersonal = "launchDarklyPersonal", e2.Loom = "loom", e2.Notion = "notion", e2.Opsgenie = "opsgenie", e2.PagerDuty = "pagerDuty", e2.Salesforce = "salesforce", e2.Sentry = "sentry", e2.Slack = "slack", e2.SlackAsks = "slackAsks", e2.SlackCustomViewNotifications = "slackCustomViewNotifications", e2.SlackInitiativePost = "slackInitiativePost", e2.SlackOrgInitiativeUpdatesPost = "slackOrgInitiativeUpdatesPost", e2.SlackOrgProjectUpdatesPost = "slackOrgProjectUpdatesPost", e2.SlackPersonal = "slackPersonal", e2.SlackPost = "slackPost", e2.SlackProjectPost = "slackProjectPost", e2.SlackProjectUpdatesPost = "slackProjectUpdatesPost", e2.Zendesk = "zendesk";
  }(A || (A = {})), function(e2) {
    e2.Blocks = "blocks", e2.Duplicate = "duplicate", e2.Related = "related", e2.Similar = "similar";
  }(T || (T = {})), function(e2) {
    e2.Accepted = "accepted", e2.Active = "active", e2.Dismissed = "dismissed", e2.Stale = "stale";
  }(I || (I = {})), function(e2) {
    e2.Assignee = "assignee", e2.Label = "label", e2.Project = "project", e2.RelatedIssue = "relatedIssue", e2.SimilarIssue = "similarIssue", e2.Team = "team";
  }(w || (w = {})), function(e2) {
    e2.AppsAndIntegrations = "appsAndIntegrations", e2.Assignments = "assignments", e2.CommentsAndReplies = "commentsAndReplies", e2.Customers = "customers", e2.DocumentChanges = "documentChanges", e2.Feed = "feed", e2.Mentions = "mentions", e2.PostsAndUpdates = "postsAndUpdates", e2.Reactions = "reactions", e2.Reminders = "reminders", e2.Reviews = "reviews", e2.StatusChanges = "statusChanges", e2.Subscriptions = "subscriptions", e2.System = "system", e2.Triage = "triage";
  }(C || (C = {})), function(e2) {
    e2.Desktop = "desktop", e2.Email = "email", e2.Mobile = "mobile", e2.Slack = "slack";
  }(P || (P = {})), function(e2) {
    e2.Approved = "approved", e2.Denied = "denied", e2.Requested = "requested";
  }(q || (q = {})), function(e2) {
    e2.General = "general", e2.Saml = "saml";
  }(x || (x = {})), function(e2) {
    e2.Accepted = "accepted", e2.Expired = "expired", e2.Pending = "pending";
  }(j || (j = {})), function(e2) {
    e2.CustomerAddedAsOwner = "customerAddedAsOwner", e2.CustomerNeedCreated = "customerNeedCreated", e2.CustomerNeedMarkedAsImportant = "customerNeedMarkedAsImportant", e2.CustomerNeedResolved = "customerNeedResolved", e2.DocumentCommentMention = "documentCommentMention", e2.DocumentCommentReaction = "documentCommentReaction", e2.DocumentContentChange = "documentContentChange", e2.DocumentDeleted = "documentDeleted", e2.DocumentMention = "documentMention", e2.DocumentMoved = "documentMoved", e2.DocumentNewComment = "documentNewComment", e2.DocumentReminder = "documentReminder", e2.DocumentRestored = "documentRestored", e2.DocumentSubscribed = "documentSubscribed", e2.DocumentThreadResolved = "documentThreadResolved", e2.DocumentUnsubscribed = "documentUnsubscribed", e2.FeedSummaryGenerated = "feedSummaryGenerated", e2.InitiativeAddedAsOwner = "initiativeAddedAsOwner", e2.InitiativeCommentMention = "initiativeCommentMention", e2.InitiativeCommentReaction = "initiativeCommentReaction", e2.InitiativeDescriptionContentChange = "initiativeDescriptionContentChange", e2.InitiativeMention = "initiativeMention", e2.InitiativeNewComment = "initiativeNewComment", e2.InitiativeReminder = "initiativeReminder", e2.InitiativeThreadResolved = "initiativeThreadResolved", e2.InitiativeUpdateCommentMention = "initiativeUpdateCommentMention", e2.InitiativeUpdateCommentReaction = "initiativeUpdateCommentReaction", e2.InitiativeUpdateCreated = "initiativeUpdateCreated", e2.InitiativeUpdateMention = "initiativeUpdateMention", e2.InitiativeUpdateNewComment = "initiativeUpdateNewComment", e2.InitiativeUpdatePrompt = "initiativeUpdatePrompt", e2.InitiativeUpdateReaction = "initiativeUpdateReaction", e2.IssueAddedToTriage = "issueAddedToTriage", e2.IssueAddedToView = "issueAddedToView", e2.IssueBlocking = "issueBlocking", e2.IssueCreated = "issueCreated", e2.IssueDue = "issueDue", e2.IssuePriorityUrgent = "issuePriorityUrgent", e2.IssueReminder = "issueReminder", e2.IssueReopened = "issueReopened", e2.IssueSlaBreached = "issueSlaBreached", e2.IssueSlaHighRisk = "issueSlaHighRisk", e2.IssueStatusChangedAll = "issueStatusChangedAll", e2.IssueSubscribed = "issueSubscribed", e2.IssueThreadResolved = "issueThreadResolved", e2.IssueUnblocked = "issueUnblocked", e2.IssueUnsubscribed = "issueUnsubscribed", e2.OauthClientApprovalCreated = "oauthClientApprovalCreated", e2.ProjectAddedAsLead = "projectAddedAsLead", e2.ProjectAddedAsMember = "projectAddedAsMember", e2.ProjectCommentMention = "projectCommentMention", e2.ProjectCommentReaction = "projectCommentReaction", e2.ProjectDescriptionContentChange = "projectDescriptionContentChange", e2.ProjectMention = "projectMention", e2.ProjectMilestoneCommentMention = "projectMilestoneCommentMention", e2.ProjectMilestoneCommentReaction = "projectMilestoneCommentReaction", e2.ProjectMilestoneDescriptionContentChange = "projectMilestoneDescriptionContentChange", e2.ProjectMilestoneMention = "projectMilestoneMention", e2.ProjectMilestoneNewComment = "projectMilestoneNewComment", e2.ProjectMilestoneThreadResolved = "projectMilestoneThreadResolved", e2.ProjectNewComment = "projectNewComment", e2.ProjectReminder = "projectReminder", e2.ProjectThreadResolved = "projectThreadResolved", e2.ProjectUpdateCommentMention = "projectUpdateCommentMention", e2.ProjectUpdateCommentReaction = "projectUpdateCommentReaction", e2.ProjectUpdateCreated = "projectUpdateCreated", e2.ProjectUpdateMention = "projectUpdateMention", e2.ProjectUpdateNewComment = "projectUpdateNewComment", e2.ProjectUpdatePrompt = "projectUpdatePrompt", e2.ProjectUpdateReaction = "projectUpdateReaction", e2.PullRequestApproved = "pullRequestApproved", e2.PullRequestChangesRequested = "pullRequestChangesRequested", e2.PullRequestChecksFailed = "pullRequestChecksFailed", e2.PullRequestCommentMention = "pullRequestCommentMention", e2.PullRequestCommented = "pullRequestCommented", e2.PullRequestMention = "pullRequestMention", e2.PullRequestRemovedFromMergeQueue = "pullRequestRemovedFromMergeQueue", e2.PullRequestReviewRequested = "pullRequestReviewRequested", e2.PullRequestReviewRerequested = "pullRequestReviewRerequested", e2.System = "system", e2.TeamUpdateCommentMention = "teamUpdateCommentMention", e2.TeamUpdateCommentReaction = "teamUpdateCommentReaction", e2.TeamUpdateCreated = "teamUpdateCreated", e2.TeamUpdateMention = "teamUpdateMention", e2.TeamUpdateNewComment = "teamUpdateNewComment", e2.TeamUpdateReaction = "teamUpdateReaction", e2.TriageResponsibilityIssueAddedToTriage = "triageResponsibilityIssueAddedToTriage";
  }(U || (U = {})), function(e2) {
    e2.First = "first", e2.Last = "last";
  }(O || (O = {})), function(e2) {
    e2.CreatedAt = "createdAt", e2.UpdatedAt = "updatedAt";
  }(B || (B = {})), function(e2) {
    e2.Ascending = "Ascending", e2.Descending = "Descending";
  }(R || (R = {})), function(e2) {
    e2.Summary = "summary", e2.Update = "update";
  }(E || (E = {})), function(e2) {
    e2.None = "none", e2.Team = "team", e2.TeamHierarchy = "teamHierarchy", e2.Workspace = "workspace";
  }(M || (M = {})), function(e2) {
    e2.Done = "done", e2.Next = "next", e2.Overdue = "overdue", e2.Unstarted = "unstarted";
  }(L || (L = {})), function(e2) {
    e2.Backlog = "backlog", e2.Canceled = "canceled", e2.Completed = "completed", e2.Paused = "paused", e2.Planned = "planned", e2.Started = "started";
  }(z || (z = {})), function(e2) {
    e2.Customers = "customers", e2.Documents = "documents", e2.Issues = "issues";
  }(W || (W = {})), function(e2) {
    e2.AtRisk = "atRisk", e2.OffTrack = "offTrack", e2.OnTrack = "onTrack";
  }(H || (H = {})), function(e2) {
    e2.Month = "month", e2.Never = "never", e2.TwoWeeks = "twoWeeks", e2.Week = "week";
  }(Q || (Q = {})), function(e2) {
    e2.Graphite = "graphite", e2.Source = "source";
  }(G || (G = {})), function(e2) {
    e2.Approved = "approved", e2.Closed = "closed", e2.Draft = "draft", e2.InReview = "inReview", e2.Merged = "merged", e2.Open = "open";
  }(J || (J = {})), function(e2) {
    e2.Apple = "apple", e2.AppleDevelopment = "appleDevelopment", e2.Firebase = "firebase", e2.Web = "web";
  }(K || (K = {})), function(e2) {
    e2.Beta = "beta", e2.Development = "development", e2.Internal = "internal", e2.PreRelease = "preRelease", e2.Public = "public";
  }($ || ($ = {})), function(e2) {
    e2.All = "all", e2.OnlyBusinessDays = "onlyBusinessDays";
  }(Z || (Z = {})), function(e2) {
    e2.Document = "document", e2.Initiative = "initiative", e2.Issue = "issue", e2.Project = "project";
  }(Y || (Y = {})), function(e2) {
    e2.Desktop = "desktop", e2.DesktopAndPush = "desktopAndPush", e2.DesktopThenPush = "desktopThenPush", e2.Push = "push";
  }(X || (X = {})), function(e2) {
    e2.Breached = "Breached", e2.Completed = "Completed", e2.Failed = "Failed", e2.HighRisk = "HighRisk", e2.LowRisk = "LowRisk", e2.MediumRisk = "MediumRisk";
  }(ee || (ee = {})), function(e2) {
    e2.DirectMessage = "DirectMessage", e2.MultiPersonDirectMessage = "MultiPersonDirectMessage", e2.Private = "Private", e2.Public = "Public";
  }(ie || (ie = {})), function(e2) {
    e2.Assign = "assign", e2.Notify = "notify";
  }(ne || (ne = {})), function(e2) {
    e2.Assigned = "assigned";
  }(ae || (ae = {})), function(e2) {
    e2.All = "all", e2.AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed", e2.CanPlaySnake = "canPlaySnake", e2.CanPlayTetris = "canPlayTetris", e2.CommandMenuClearShortcutTip = "commandMenuClearShortcutTip", e2.CompletedOnboarding = "completedOnboarding", e2.CycleWelcomeDismissed = "cycleWelcomeDismissed", e2.DesktopDownloadToastDismissed = "desktopDownloadToastDismissed", e2.DesktopInstalled = "desktopInstalled", e2.DesktopTabsOnboardingDismissed = "desktopTabsOnboardingDismissed", e2.DueDateShortcutMigration = "dueDateShortcutMigration", e2.EditorSlashCommandUsed = "editorSlashCommandUsed", e2.EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed", e2.EmptyBacklogDismissed = "emptyBacklogDismissed", e2.EmptyCustomViewsDismissed = "emptyCustomViewsDismissed", e2.EmptyMyIssuesDismissed = "emptyMyIssuesDismissed", e2.EmptyParagraphSlashCommandTip = "emptyParagraphSlashCommandTip", e2.FigmaPluginBannerDismissed = "figmaPluginBannerDismissed", e2.FigmaPromptDismissed = "figmaPromptDismissed", e2.HelpIslandFeatureInsightsDismissed = "helpIslandFeatureInsightsDismissed", e2.ImportBannerDismissed = "importBannerDismissed", e2.InitiativesBannerDismissed = "initiativesBannerDismissed", e2.InsightsHelpDismissed = "insightsHelpDismissed", e2.InsightsWelcomeDismissed = "insightsWelcomeDismissed", e2.IssueLabelSuggestionUsed = "issueLabelSuggestionUsed", e2.IssueMovePromptCompleted = "issueMovePromptCompleted", e2.JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed", e2.ListSelectionTip = "listSelectionTip", e2.MigrateThemePreference = "migrateThemePreference", e2.MilestoneOnboardingIsSeenAndDismissed = "milestoneOnboardingIsSeenAndDismissed", e2.ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed", e2.ProjectBoardOnboardingIsSeenAndDismissed = "projectBoardOnboardingIsSeenAndDismissed", e2.ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed", e2.ProjectWelcomeDismissed = "projectWelcomeDismissed", e2.PulseWelcomeDismissed = "pulseWelcomeDismissed", e2.RewindBannerDismissed = "rewindBannerDismissed", e2.SlackCommentReactionTipShown = "slackCommentReactionTipShown", e2.TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed", e2.ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen", e2.TriageWelcomeDismissed = "triageWelcomeDismissed", e2.TryCyclesDismissed = "tryCyclesDismissed", e2.TryGithubDismissed = "tryGithubDismissed", e2.TryInvitePeopleDismissed = "tryInvitePeopleDismissed", e2.TryRoadmapsDismissed = "tryRoadmapsDismissed", e2.TryTriageDismissed = "tryTriageDismissed", e2.UpdatedSlackThreadSyncIntegration = "updatedSlackThreadSyncIntegration";
  }(te || (te = {})), function(e2) {
    e2.Clear = "clear", e2.Decr = "decr", e2.Incr = "incr", e2.Lock = "lock";
  }(de || (de = {})), function(e2) {
    e2.Admin = "admin", e2.App = "app", e2.Guest = "guest", e2.User = "user";
  }(le || (le = {})), function(e2) {
    e2.Organization = "organization", e2.User = "user";
  }(oe || (oe = {})), function(e2) {
    e2.ActiveIssues = "activeIssues", e2.AllIssues = "allIssues", e2.Archive = "archive", e2.Backlog = "backlog", e2.Board = "board", e2.CompletedCycle = "completedCycle", e2.CustomRoadmap = "customRoadmap", e2.CustomView = "customView", e2.CustomViews = "customViews", e2.Customer = "customer", e2.Customers = "customers", e2.Cycle = "cycle", e2.Dashboards = "dashboards", e2.EmbeddedCustomerNeeds = "embeddedCustomerNeeds", e2.FeedAll = "feedAll", e2.FeedCreated = "feedCreated", e2.FeedFollowing = "feedFollowing", e2.FeedPopular = "feedPopular", e2.Inbox = "inbox", e2.Initiative = "initiative", e2.InitiativeOverview = "initiativeOverview", e2.InitiativeOverviewSubInitiatives = "initiativeOverviewSubInitiatives", e2.Initiatives = "initiatives", e2.InitiativesCompleted = "initiativesCompleted", e2.InitiativesPlanned = "initiativesPlanned", e2.IssueIdentifiers = "issueIdentifiers", e2.Label = "label", e2.MyIssues = "myIssues", e2.MyIssuesActivity = "myIssuesActivity", e2.MyIssuesCreatedByMe = "myIssuesCreatedByMe", e2.MyIssuesSubscribedTo = "myIssuesSubscribedTo", e2.MyReviews = "myReviews", e2.Project = "project", e2.ProjectCustomerNeeds = "projectCustomerNeeds", e2.ProjectDocuments = "projectDocuments", e2.ProjectLabel = "projectLabel", e2.Projects = "projects", e2.ProjectsAll = "projectsAll", e2.ProjectsBacklog = "projectsBacklog", e2.ProjectsClosed = "projectsClosed", e2.QuickView = "quickView", e2.Reviews = "reviews", e2.Roadmap = "roadmap", e2.RoadmapAll = "roadmapAll", e2.RoadmapBacklog = "roadmapBacklog", e2.RoadmapClosed = "roadmapClosed", e2.Roadmaps = "roadmaps", e2.Search = "search", e2.SplitSearch = "splitSearch", e2.SubIssues = "subIssues", e2.Teams = "teams", e2.Triage = "triage", e2.UserProfile = "userProfile", e2.UserProfileCreatedByUser = "userProfileCreatedByUser", e2.WorkspaceMembers = "workspaceMembers";
  }(re || (re = {}));
  var pe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ne = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var he = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entityId" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var fe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ye = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Se = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var be = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ge = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ActorBot" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userDisplayName" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Fe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "customerNeedId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerNeed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "relatedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var De = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "customerId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var _e = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "documentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Ve = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Ae = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] };
  var Te = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Ie = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApproval" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requesterId" } }, { kind: "Field", name: { kind: "Name", value: "responderId" } }, { kind: "Field", name: { kind: "Name", value: "requestReason" } }, { kind: "Field", name: { kind: "Name", value: "denyReason" } }, { kind: "Field", name: { kind: "Name", value: "scopes" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }] } }] };
  var we = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApprovalNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApproval" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Ce = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PostNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "postId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Pe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var qe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PullRequestNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "pullRequestId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var xe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Notification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PostNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestNotification" } }] } }] } }] };
  var je = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ue = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Oe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Be = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Re = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ee = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Me = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Le = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "isVerified" } }] } }] };
  var ze = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SesDomainIdentity" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentity" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "dnsRecords" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } }] } }, { kind: "Field", name: { kind: "Name", value: "domain" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "canSendFromCustomDomain" } }] } }] };
  var We = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddress" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sesDomainIdentity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }] } }, { kind: "Field", name: { kind: "Name", value: "forwardingEmailAddress" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "senderName" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "address" } }, { kind: "Field", name: { kind: "Name", value: "repliesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "customerRequestsEnabled" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
  var He = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationIpRestriction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "range" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
  var Qe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatus" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "indefinite" } }] } }] };
  var Ge = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PaidSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "collectionMethod" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cancelAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } }, { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } }, { kind: "Field", name: { kind: "Name", value: "seats" } }, { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Je = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Organization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "customersConfiguration" } }, { kind: "Field", name: { kind: "Name", value: "defaultFeedSummarySchedule" } }, { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } }, { kind: "Field", name: { kind: "Name", value: "ipRestrictions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }] } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }, { kind: "Field", name: { kind: "Name", value: "customerCount" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "projectStatuses" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } }, { kind: "Field", name: { kind: "Name", value: "restrictTeamCreationToAdmins" } }, { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "feedEnabled" } }, { kind: "Field", name: { kind: "Name", value: "customersEnabled" } }, { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } }, { kind: "Field", name: { kind: "Name", value: "restrictLabelManagementToAdmins" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "slaDayCount" } }] } }] };
  var Ke = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthenticationSessionResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" } }, { kind: "Field", name: { kind: "Name", value: "countryCodes" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "operatingSystem" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var $e = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAuthorizedApplication" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } }, { kind: "Field", name: { kind: "Name", value: "createdByLinear" } }, { kind: "Field", name: { kind: "Name", value: "isAuthorized" } }] } }] };
  var Ze = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Application" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }] } }] };
  var Ye = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } }, { kind: "Field", name: { kind: "Name", value: "slackInitiativeUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } }] } }] };
  var Xe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ei = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ii = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "end" } }, { kind: "Field", name: { kind: "Name", value: "start" } }] } }] };
  var ni = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "disabled" } }] } }] };
  var ai = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } }] } }] };
  var ti = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] };
  var di = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationChannelPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannelPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "slack" } }, { kind: "Field", name: { kind: "Name", value: "desktop" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "mobile" } }] } }] };
  var li = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationCategoryPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategoryPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "feed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] };
  var oi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }, { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } }, { kind: "Field", name: { kind: "Name", value: "autoAssignToSelf" } }, { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } }] } }] };
  var ri = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportJqlCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "error" } }, { kind: "Field", name: { kind: "Name", value: "count" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var mi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportSyncCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "error" } }, { kind: "Field", name: { kind: "Name", value: "canSync" } }] } }] };
  var si = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityActionContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "parameter" } }, { kind: "Field", name: { kind: "Name", value: "result" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var ui = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityElicitationContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityElicitationContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var ki = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityErrorContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var vi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityPromptContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var ci = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityResponseContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var pi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityThoughtContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var Ni = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivity" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivity" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "agentContext" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "agentSession" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "content" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityActionContent" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityElicitationContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityElicitationContent" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityErrorContent" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPromptContent" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityResponseContent" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityThoughtContent" } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var hi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PageInfo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "startCursor" } }, { kind: "Field", name: { kind: "Name", value: "endCursor" } }, { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } }, { kind: "Field", name: { kind: "Name", value: "hasNextPage" } }] } }] };
  var fi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var yi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "agentActivity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Si = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLink" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var bi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentContext" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentContext" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }, { kind: "Field", name: { kind: "Name", value: "activities" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }] } }, { kind: "Field", name: { kind: "Name", value: "links" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "appUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "endedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var gi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentContextConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentContextConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentContext" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Fi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentContextPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentContextPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "agentContext" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Di = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentSession" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSession" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }, { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "externalLink" } }, { kind: "Field", name: { kind: "Name", value: "appUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "endedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var _i = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentSessionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Vi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentSessionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "agentSession" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ai = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requestedSyncGroups" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Ti = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Ii = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackAsksTeamSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } }] } }] };
  var wi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelNameMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } }, { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } }, { kind: "Field", name: { kind: "Name", value: "botAdded" } }, { kind: "Field", name: { kind: "Name", value: "isPrivate" } }, { kind: "Field", name: { kind: "Name", value: "isShared" } }, { kind: "Field", name: { kind: "Name", value: "aiTitles" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } }, { kind: "Field", name: { kind: "Name", value: "teams" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }] } }] } }] };
  var Ci = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AsksChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Pi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Attachment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sourceType" } }, { kind: "Field", name: { kind: "Name", value: "subtitle" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "groupBySource" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "originalIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var qi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var xi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ji = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "requestInformation" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "countryCode" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var Ui = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Oi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var Bi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "serviceId" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }] } }] };
  var Ri = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userAccountId" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Ei = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthResolverResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "token" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } }, { kind: "Field", name: { kind: "Name", value: "users" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "availableOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Mi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Reaction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Li = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "contentState" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "restoredAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var zi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "owner" } }, { kind: "Field", name: { kind: "Name", value: "repo" } }] } }] };
  var Wi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueTypeId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "issueKey" } }] } }] };
  var Hi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalEntitySlackMetadata" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "messageUrl" } }, { kind: "Field", name: { kind: "Name", value: "channelId" } }, { kind: "Field", name: { kind: "Name", value: "channelName" } }, { kind: "Field", name: { kind: "Name", value: "isFromSlack" } }] } }] };
  var Qi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalEntityInfo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "service" } }] } }] };
  var Gi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SyncedExternalThread" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncedExternalThread" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationRequired" } }, { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationConnected" } }, { kind: "Field", name: { kind: "Name", value: "isConnected" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Ji = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Comment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "resolvingComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "syncedWith" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalThread" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "quotedText" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "resolvedAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "resolvingUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Ki = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var $i = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Zi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ContactPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Yi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateCsvExportReportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Xi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }] } }] };
  var en = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesValues" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueGrouping" } }, { kind: "Field", name: { kind: "Name", value: "viewOrdering" } }, { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } }] } }] };
  var nn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "viewType" } }] } }] };
  var an = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomView" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "feedItemFilterData" } }, { kind: "Field", name: { kind: "Name", value: "filterData" } }, { kind: "Field", name: { kind: "Name", value: "projectFilterData" } }, { kind: "Field", name: { kind: "Name", value: "filters" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "modelName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "shared" } }] } }] };
  var tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var dn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } }] } }] };
  var ln = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var on = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Customer" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Customer" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "slackChannelId" } }, { kind: "Field", name: { kind: "Name", value: "mainSourceId" } }, { kind: "Field", name: { kind: "Name", value: "revenue" } }, { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "domains" } }, { kind: "Field", name: { kind: "Name", value: "externalIds" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "tier" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var mn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeed" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeed" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "originalIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] };
  var sn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "need" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var kn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "need" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "updatedRelatedNeeds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var cn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatus" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatus" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var pn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatusConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Nn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatusPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTier" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTier" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var fn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var yn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "tier" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Sn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Cycle" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "isActive" } }, { kind: "Field", name: { kind: "Name", value: "isFuture" } }, { kind: "Field", name: { kind: "Name", value: "isPast" } }, { kind: "Field", name: { kind: "Name", value: "isNext" } }, { kind: "Field", name: { kind: "Name", value: "isPrevious" } }] } }] };
  var bn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CyclePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Fn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Document" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Dn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var _n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorIds" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } }] } }] };
  var Vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "history" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var An = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchiveResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archive" } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "databaseVersion" } }, { kind: "Field", name: { kind: "Name", value: "includesDependencies" } }] } }] };
  var In = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Cn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Draft" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "data" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerNeed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } }] } }] };
  var Pn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DraftConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DraftConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Draft" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddressPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emailIntakeAddress" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUnsubscribePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Emoji" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var On = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Bn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var En = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Mn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Ln = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Favorite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "folderName" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeTab" } }, { kind: "Field", name: { kind: "Name", value: "projectTab" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "projectTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoriteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoritePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FrontAttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranch" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "isRegex" } }] } }] };
  var Jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "event" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }] } }] };
  var Kn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var $n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "gitAutomationState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Yn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "installUrl" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "setupUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ImageUploadFromUrlPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Initiative" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "parentInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entries" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var la = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relatedInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } }, { kind: "Field", name: { kind: "Name", value: "isStale" } }] } }] };
  var va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Integration" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationHasScopesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "missingScopes" } }, { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } }] } }] };
  var ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var _a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Issue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "delegate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "syncedWith" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "slaType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueBatchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }, { kind: "Field", name: { kind: "Name", value: "logId" } }] } }] };
  var Ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "User" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "disableReason" } }, { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } }, { kind: "Field", name: { kind: "Name", value: "statusEmoji" } }, { kind: "Field", name: { kind: "Name", value: "initials" } }, { kind: "Field", name: { kind: "Name", value: "statusLabel" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "gitHubUserId" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "guest" } }, { kind: "Field", name: { kind: "Name", value: "app" } }, { kind: "Field", name: { kind: "Name", value: "admin" } }, { kind: "Field", name: { kind: "Name", value: "isAssignable" } }, { kind: "Field", name: { kind: "Name", value: "isMentionable" } }, { kind: "Field", name: { kind: "Name", value: "isMe" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }] } }] };
  var Ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImport" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "errorMetadata" } }, { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } }, { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "mapping" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "error" } }] } }] };
  var Pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] };
  var qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relationChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "descriptionUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "actors" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromDelegate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toDelegate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "customerNeedId" } }, { kind: "Field", name: { kind: "Name", value: "toCycleId" } }, { kind: "Field", name: { kind: "Name", value: "toParentId" } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromCycleId" } }, { kind: "Field", name: { kind: "Name", value: "fromParentId" } }, { kind: "Field", name: { kind: "Name", value: "fromProjectId" } }, { kind: "Field", name: { kind: "Name", value: "fromStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromTeamId" } }, { kind: "Field", name: { kind: "Name", value: "toTeamId" } }, { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "removedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "toAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromDueDate" } }, { kind: "Field", name: { kind: "Name", value: "toDueDate" } }, { kind: "Field", name: { kind: "Name", value: "fromEstimate" } }, { kind: "Field", name: { kind: "Name", value: "toEstimate" } }, { kind: "Field", name: { kind: "Name", value: "fromPriority" } }, { kind: "Field", name: { kind: "Name", value: "toPriority" } }, { kind: "Field", name: { kind: "Name", value: "fromTitle" } }, { kind: "Field", name: { kind: "Name", value: "toTitle" } }, { kind: "Field", name: { kind: "Name", value: "archived" } }, { kind: "Field", name: { kind: "Name", value: "autoArchived" } }, { kind: "Field", name: { kind: "Name", value: "autoClosed" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "updatedDescription" } }] } }] };
  var xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePriorityValue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] };
  var La = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "relatedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "delegate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "syncedWith" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "slaType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] };
  var Ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LogoutResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationBatchActionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notifications" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var $a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notification" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var et = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationCancelDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var it = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationExistsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "exists" } }] } }] };
  var at = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "external" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "acceptedAt" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "inviter" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "invitee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvitePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "organizationInvite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var lt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var ot = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationStartTrialPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Project" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "startDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
  var mt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var st = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }, { kind: "Field", name: { kind: "Name", value: "logId" } }] } }] };
  var ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entries" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var kt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLabel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] };
  var ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLabelConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLabelPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestone" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var ht = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestonePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var yt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var St = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProjectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "anchorType" } }, { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var bt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var gt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "startDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
  var Dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var _t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var At = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } }, { kind: "Field", name: { kind: "Name", value: "isStale" } }] } }] };
  var Tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var It = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var wt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var qt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionTestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var xt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitResultPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "period" } }, { kind: "Field", name: { kind: "Name", value: "remainingAmount" } }, { kind: "Field", name: { kind: "Name", value: "requestedAmount" } }, { kind: "Field", name: { kind: "Name", value: "reset" } }, { kind: "Field", name: { kind: "Name", value: "allowedAmount" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
  var jt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "kind" } }, { kind: "Field", name: { kind: "Name", value: "limits" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }] } }] } }] };
  var Ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "reaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ot = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Roadmap" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Bt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Et = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Mt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Lt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var zt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Wt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SsoUrlFromEmailResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Ht = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SuccessPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Qt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Team" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } }, { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } }, { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } }, { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } }, { kind: "Field", name: { kind: "Name", value: "issueCount" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } }, { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "activeCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "scimGroupName" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } }, { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } }, { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultProjectTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycleDuration" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "mergeWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "draftWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "startWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mergeableWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviewWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "markedAsDuplicateWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } }, { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } }, { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } }, { kind: "Field", name: { kind: "Name", value: "scimManaged" } }, { kind: "Field", name: { kind: "Name", value: "private" } }, { kind: "Field", name: { kind: "Name", value: "inheritIssueEstimation" } }, { kind: "Field", name: { kind: "Name", value: "inheritWorkflowStatuses" } }, { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } }, { kind: "Field", name: { kind: "Name", value: "aiThreadSummariesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "triageEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } }, { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } }] } }] };
  var Gt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Jt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembership" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" } }] } }] };
  var Kt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var $t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "teamMembership" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Zt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Yt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Template" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "templateData" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var Xt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var ed = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var id = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "userEmail" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }] } }] };
  var nd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "externalUrl" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "entries" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var ad = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var td = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedulePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var dd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityManualSelection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userIds" } }] } }] };
  var ld = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibility" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "currentUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var od = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var rd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
  var md = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFileHeader" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "value" } }] } }] };
  var sd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFile" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "assetUrl" } }, { kind: "Field", name: { kind: "Name", value: "contentType" } }, { kind: "Field", name: { kind: "Name", value: "filename" } }, { kind: "Field", name: { kind: "Name", value: "uploadUrl" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "headers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }] } }, { kind: "Field", name: { kind: "Name", value: "metaData" } }] } }] };
  var ud = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "uploadFile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var kd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAdminPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var vd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var cd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var pd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "flag" } }, { kind: "Field", name: { kind: "Name", value: "value" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var Nd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var hd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var fd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var yd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Webhook" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "secret" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "resourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
  var Sd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var bd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var gd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
  var Fd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
  var Dd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "workflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
  var _d = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "administrableTeams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "administrableTeams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var Vd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentActivities" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentActivities" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }] } }] } }, ...fi.definitions, ...Ni.definitions, ...si.definitions, ...ui.definitions, ...ki.definitions, ...vi.definitions, ...ci.definitions, ...pi.definitions, ...hi.definitions] };
  var Ad = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentActivity" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentActivity" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }] } }] } }, ...Ni.definitions, ...si.definitions, ...ui.definitions, ...ki.definitions, ...vi.definitions, ...ci.definitions, ...pi.definitions] };
  var Td = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentContext" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentContext" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentContext" } }] } }] } }, ...bi.definitions, ...Ni.definitions, ...si.definitions, ...ui.definitions, ...ki.definitions, ...vi.definitions, ...ci.definitions, ...pi.definitions, ...Si.definitions] };
  var Id = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentContexts" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentContexts" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentContextConnection" } }] } }] } }, ...gi.definitions, ...bi.definitions, ...Ni.definitions, ...si.definitions, ...ui.definitions, ...ki.definitions, ...vi.definitions, ...ci.definitions, ...pi.definitions, ...Si.definitions, ...hi.definitions] };
  var wd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentSession" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }] } }] } }, ...Di.definitions] };
  var Cd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentSession_activities" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "activities" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }] } }] } }] } }, ...fi.definitions, ...Ni.definitions, ...si.definitions, ...ui.definitions, ...ki.definitions, ...vi.definitions, ...ci.definitions, ...pi.definitions, ...hi.definitions] };
  var Pd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "agentSessions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentSessions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionConnection" } }] } }] } }, ..._i.definitions, ...Di.definitions, ...hi.definitions] };
  var qd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "apiKeys" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeys" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...hi.definitions] };
  var xd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationInfo" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationInfo" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }] } }] } }, ...Ze.definitions] };
  var jd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationWithAuthorization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "actor" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationWithAuthorization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "actor" }, value: { kind: "Variable", name: { kind: "Name", value: "actor" } } }, { kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }] } }] } }, ...$e.definitions] };
  var Ud = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }] } }, ...Pi.definitions] };
  var Od = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions] };
  var Bd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var Rd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...ge.definitions] };
  var Ed = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Md = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var Ld = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_formerAttachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerAttachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var zd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_formerNeeds" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerNeeds" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var Wd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...xa.definitions, ...qa.definitions, ...Ia.definitions, ...wa.definitions, ...ge.definitions, ...Ca.definitions, ...Pa.definitions, ...hi.definitions] };
  var Hd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Qd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var Gd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var Jd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Kd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var $d = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var Zd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentsForURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentsForURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var Yd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntries" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntries" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }] } }] } }, ...Ui.definitions, ...ji.definitions, ...hi.definitions] };
  var Xd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }] } }] } }, ...Oi.definitions] };
  var el = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }] } }] } }, ...Ke.definitions] };
  var il = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Ei.definitions, ...Ri.definitions, ...Bi.definitions] };
  var nl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }] } }, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions] };
  var al = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...ge.definitions] };
  var tl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var dl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...Li.definitions] };
  var ll = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_externalThread" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalThread" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }] } }] } }] } }, ...Gi.definitions] };
  var ol = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var rl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }] } }, ...an.definitions, ...en.definitions, ...nn.definitions] };
  var ml = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var sl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...nn.definitions, ...en.definitions] };
  var ul = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...en.definitions] };
  var kl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var vl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...nn.definitions, ...en.definitions] };
  var cl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...en.definitions] };
  var pl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_viewPreferencesValues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }, ...en.definitions] };
  var Nl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViewHasSubscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewHasSubscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }] } }] } }, ...dn.definitions] };
  var hl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViews" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViews" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }] } }] } }, ...tn.definitions, ...an.definitions, ...en.definitions, ...nn.definitions, ...hi.definitions] };
  var fl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customer" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }] } }] } }, ...on.definitions] };
  var yl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeed" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }] } }] } }, ...mn.definitions] };
  var Sl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerNeeds" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeeds" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var bl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatus" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }] } }] } }, ...cn.definitions] };
  var gl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerStatuses" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatuses" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusConnection" } }] } }] } }, ...pn.definitions, ...cn.definitions, ...hi.definitions] };
  var Fl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTier" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }] } }] } }, ...hn.definitions] };
  var Dl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerTiers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTiers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierConnection" } }] } }] } }, ...fn.definitions, ...hn.definitions, ...hi.definitions] };
  var _l = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sorts" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sorts" }, value: { kind: "Variable", name: { kind: "Name", value: "sorts" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerConnection" } }] } }] } }, ...rn.definitions, ...on.definitions, ...hi.definitions] };
  var Vl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }] } }, ...Sn.definitions] };
  var Al = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Tl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponClose" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Il = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }, ...bn.definitions, ...Sn.definitions, ...hi.definitions] };
  var wl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }] } }, ...Fn.definitions] };
  var Cl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var Pl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documentContentHistory" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContentHistory" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }] } }] } }, ...Vn.definitions, ..._n.definitions] };
  var ql = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }, ...Dn.definitions, ...Fn.definitions, ...hi.definitions] };
  var xl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddress" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }] } }] } }, ...We.definitions, ...ze.definitions, ...Le.definitions] };
  var jl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emailIntakeAddress_sesDomainIdentity" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddress" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sesDomainIdentity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }] } }] } }] } }, ...ze.definitions, ...Le.definitions] };
  var Ul = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emoji" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }] } }, ...Un.definitions] };
  var Ol = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }] } }] } }, ...On.definitions, ...Un.definitions, ...hi.definitions] };
  var Bl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "entityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }] } }, ...Si.definitions] };
  var Rl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUser" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }] } }, ...Mn.definitions] };
  var El = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUsers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUsers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }] } }] } }, ...Ln.definitions, ...Mn.definitions, ...hi.definitions] };
  var Ml = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }] } }, ...zn.definitions] };
  var Ll = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }] } }, ...Wn.definitions, ...zn.definitions, ...hi.definitions] };
  var zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }, ...Wn.definitions, ...zn.definitions, ...hi.definitions] };
  var Wl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }] } }, ...aa.definitions, ...Li.definitions] };
  var Hl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...Li.definitions] };
  var Ql = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }] } }, ...Dn.definitions, ...Fn.definitions, ...hi.definitions] };
  var Gl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistoryConnection" } }] } }] } }] } }, ...la.definitions, ...da.definitions, ...hi.definitions] };
  var Jl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_links" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "links" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...Rn.definitions, ...Si.definitions, ...hi.definitions] };
  var Kl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubInitiatives" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var $l = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_subInitiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subInitiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }] } }, ...ta.definitions, ...aa.definitions, ...Li.definitions, ...hi.definitions] };
  var Zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }] } }, ...St.definitions] };
  var Yl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationConnection" } }] } }] } }, ...ra.definitions, ...oa.definitions, ...hi.definitions] };
  var Xl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }] } }, ...sa.definitions] };
  var eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }] } }] } }, ...ua.definitions, ...sa.definitions, ...hi.definitions] };
  var io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }] } }] } }, ...ka.definitions, ...Mi.definitions] };
  var no = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdate_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateConnection" } }] } }] } }, ...va.definitions, ...ka.definitions, ...Mi.definitions, ...hi.definitions] };
  var to = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }, ...ta.definitions, ...aa.definitions, ...Li.definitions, ...hi.definitions] };
  var lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }] } }, ...Na.definitions] };
  var oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationHasScopes" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationHasScopes" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationId" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } } }, { kind: "Argument", name: { kind: "Name", value: "scopes" }, value: { kind: "Variable", name: { kind: "Name", value: "scopes" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }] } }] } }, ...fa.definitions] };
  var ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }] } }, ...ba.definitions] };
  var mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }] } }] } }, ...ga.definitions, ...ba.definitions, ...hi.definitions] };
  var so = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }, ...ha.definitions, ...Na.definitions, ...hi.definitions] };
  var uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }] } }] } }, ...Ye.definitions] };
  var ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions] };
  var vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...ge.definitions] };
  var po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var No = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_formerAttachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerAttachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_formerNeeds" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerNeeds" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...xa.definitions, ...qa.definitions, ...Ia.definitions, ...wa.definitions, ...ge.definitions, ...Ca.definitions, ...Pa.definitions, ...hi.definitions] };
  var So = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var Fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Do = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var _o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "fileKey" }, value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }] } }] } }, ...Ta.definitions] };
  var Ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckCSV" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckCSV" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }] } }] } }, ...ja.definitions] };
  var To = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckSync" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckSync" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }] } }] } }, ...mi.definitions] };
  var Io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportJqlCheck" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jql" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportJqlCheck" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "jql" }, value: { kind: "Variable", name: { kind: "Name", value: "jql" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }] } }] } }, ...ri.definitions] };
  var wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }] } }, ...Pa.definitions] };
  var Co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var Po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }] } }] } }, ...Ma.definitions] };
  var jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }] } }, ...La.definitions] };
  var Uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "query" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "query" }, value: { kind: "Variable", name: { kind: "Name", value: "query" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "request" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "request" }, value: { kind: "Variable", name: { kind: "Name", value: "request" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" } }] } }] } }, ...Ga.definitions] };
  var Ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions] };
  var Eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var Mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...ge.definitions] };
  var Lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var Wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_formerAttachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerAttachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...qi.definitions, ...Pi.definitions, ...hi.definitions] };
  var Ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_formerNeeds" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "formerNeeds" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var Qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...xa.definitions, ...qa.definitions, ...Ia.definitions, ...wa.definitions, ...ge.definitions, ...Ca.definitions, ...Pa.definitions, ...hi.definitions] };
  var Go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var Ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var $o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...za.definitions, ...La.definitions, ...hi.definitions] };
  var Zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var Yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notification" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }] } }, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }] } }, ...Ae.definitions] };
  var ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscriptions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }] } }] } }, ...Ya.definitions, ...Ae.definitions, ...hi.definitions] };
  var nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }] } }] } }, ...$a.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions, ...hi.definitions] };
  var ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }] } }] } }, ...Je.definitions, ...He.definitions, ...Qe.definitions, ...Ge.definitions] };
  var tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }] } }, ...ha.definitions, ...Na.definitions, ...hi.definitions] };
  var dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_projectLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }] } }] } }] } }, ...ct.definitions, ...vt.definitions, ...hi.definitions] };
  var or = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }] } }] } }, ...Ge.definitions] };
  var rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...Xt.definitions, ...Yt.definitions, ...hi.definitions] };
  var sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationExists" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExists" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "urlKey" }, value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }] } }] } }, ...nt.definitions] };
  var kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }] } }, ...at.definitions] };
  var vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }] } }] } }, ...tt.definitions, ...at.definitions, ...hi.definitions] };
  var cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }] } }, ...rt.definitions, ...Li.definitions] };
  var pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var Nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...Li.definitions] };
  var hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }] } }, ...Dn.definitions, ...Fn.definitions, ...hi.definitions] };
  var fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_externalLinks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalLinks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...Rn.definitions, ...Si.definitions, ...hi.definitions] };
  var yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }] } }] } }] } }, ...kt.definitions, ...ut.definitions, ...hi.definitions] };
  var Sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }] } }, ...ta.definitions, ...aa.definitions, ...Li.definitions, ...hi.definitions] };
  var br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }] } }, ...bt.definitions, ...St.definitions, ...hi.definitions] };
  var gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }] } }] } }] } }, ...ct.definitions, ...vt.definitions, ...hi.definitions] };
  var Dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var _r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...sn.definitions, ...mn.definitions, ...hi.definitions] };
  var Vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }] } }, ...ht.definitions, ...Nt.definitions, ...Li.definitions, ...hi.definitions] };
  var Ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }] } }, ...Tt.definitions, ...At.definitions, ...Mi.definitions, ...hi.definitions] };
  var Tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }] } }, ...bt.definitions, ...St.definitions, ...hi.definitions] };
  var Ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }] } }] } }, ...st.definitions] };
  var Cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }] } }] } }, ...vt.definitions] };
  var Pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLabel_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }] } }] } }] } }, ...ct.definitions, ...vt.definitions, ...hi.definitions] };
  var qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLabel_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }] } }] } }, ...ct.definitions, ...vt.definitions, ...hi.definitions] };
  var jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }] } }, ...Nt.definitions, ...Li.definitions] };
  var Ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...Li.definitions] };
  var Or = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }, ...ht.definitions, ...Nt.definitions, ...Li.definitions, ...hi.definitions] };
  var Rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }] } }, ...St.definitions] };
  var Er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }, ...bt.definitions, ...St.definitions, ...hi.definitions] };
  var Mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatus" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }] } }, ...Qe.definitions] };
  var Lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectStatuses" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatuses" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusConnection" } }] } }] } }, ..._t.definitions, ...Qe.definitions, ...hi.definitions] };
  var zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }] } }, ...At.definitions, ...Mi.definitions] };
  var Wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Ki.definitions, ...Ji.definitions, ...Mi.definitions, ...ge.definitions, ...Li.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...Gi.definitions, ...hi.definitions] };
  var Hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }, ...Tt.definitions, ...At.definitions, ...Mi.definitions, ...hi.definitions] };
  var Qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var Gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "pushSubscriptionTest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionTest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sendStrategy" }, value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } } }, { kind: "Argument", name: { kind: "Name", value: "targetMobile" }, value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }] } }] } }, ...qt.definitions] };
  var Jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }] } }] } }, ...jt.definitions, ...xt.definitions] };
  var Kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }] } }, ...Ot.definitions] };
  var $r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var Zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }] } }, ...Et.definitions] };
  var Yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }] } }] } }, ...Mt.definitions, ...Et.definitions, ...hi.definitions] };
  var Xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmaps" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmaps" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }] } }] } }, ...Bt.definitions, ...Ot.definitions, ...hi.definitions] };
  var em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }] } }] } }, ...wn.definitions, ...Tn.definitions, ...In.definitions, ...hi.definitions] };
  var im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Tn.definitions] };
  var nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }] } }] } }, ...Qa.definitions, ...Tn.definitions, ...Ha.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Tn.definitions] };
  var tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }] } }] } }, ...Dt.definitions, ...Tn.definitions, ...Ft.definitions, ...Li.definitions, ...hi.definitions] };
  var dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...Tn.definitions] };
  var lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "ssoUrlFromEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "ssoUrlFromEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }, { kind: "Argument", name: { kind: "Name", value: "isDesktop" }, value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }] } }] } }, ...Wt.definitions] };
  var om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }] } }, ...Qt.definitions] };
  var rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }] } }, ...bn.definitions, ...Sn.definitions, ...hi.definitions] };
  var mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_gitAutomationStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } }] } }] } }] } }, ...Kn.definitions, ...Jn.definitions, ...Gn.definitions, ...hi.definitions] };
  var sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ba.definitions, ...Pa.definitions, ...hi.definitions] };
  var km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_memberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "memberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...Kt.definitions, ...Jt.definitions, ...hi.definitions] };
  var cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Li.definitions, ...hi.definitions] };
  var pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_states" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "states" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }] } }, ...Fd.definitions, ...gd.definitions, ...hi.definitions] };
  var Nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...Xt.definitions, ...Yt.definitions, ...hi.definitions] };
  var hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }] } }, ...Sd.definitions, ...yd.definitions, ...hi.definitions] };
  var fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembership" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }] } }, ...Jt.definitions] };
  var ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }, ...Kt.definitions, ...Jt.definitions, ...hi.definitions] };
  var Sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "template" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "template" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yt.definitions] };
  var gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yt.definitions] };
  var Fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templatesForIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templatesForIntegration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationType" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yt.definitions] };
  var Dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }] } }, ...nd.definitions, ...id.definitions] };
  var _m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedules" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedules" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }] } }] } }, ...ad.definitions, ...nd.definitions, ...id.definitions, ...hi.definitions] };
  var Vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibilities" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilities" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }] } }] } }, ...od.definitions, ...ld.definitions, ...dd.definitions, ...hi.definitions] };
  var Am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }] } }, ...ld.definitions, ...dd.definitions] };
  var Tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility_manualSelection" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }] } }] } }, ...dd.definitions] };
  var Im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...wa.definitions] };
  var wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_delegatedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "delegatedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_drafts" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "drafts" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }] } }] } }] } }, ...Pn.definitions, ...Cn.definitions, ...hi.definitions] };
  var xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...Kt.definitions, ...Jt.definitions, ...hi.definitions] };
  var jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var Um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }] } }] } }, ...oi.definitions, ...ti.definitions, ...ai.definitions, ...ni.definitions, ...ii.definitions, ...li.definitions, ...di.definitions] };
  var Om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } }] } }] } }] } }, ...li.definitions, ...di.definitions] };
  var Bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_feed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "feed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var $m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...di.definitions] };
  var Xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }, ...di.definitions] };
  var es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }] } }] } }, ...ti.definitions, ...ai.definitions, ...ni.definitions, ...ii.definitions] };
  var is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] } }] } }, ...ai.definitions, ...ni.definitions, ...ii.definitions] };
  var ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }] } }] } }] } }] } }, ...ni.definitions, ...ii.definitions] };
  var as = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...ii.definitions] };
  var ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }, ...vd.definitions, ...wa.definitions, ...hi.definitions] };
  var us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }] } }] } }, ...Xn.definitions] };
  var ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...wa.definitions] };
  var vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_delegatedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "delegatedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_drafts" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "drafts" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }] } }] } }] } }, ...Pn.definitions, ...Cn.definitions, ...hi.definitions] };
  var hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...Kt.definitions, ...Jt.definitions, ...hi.definitions] };
  var fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Gt.definitions, ...Qt.definitions, ...hi.definitions] };
  var ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhook" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }] } }, ...yd.definitions] };
  var Ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }, ...Sd.definitions, ...yd.definitions, ...hi.definitions] };
  var bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }] } }, ...gd.definitions] };
  var gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Aa.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions, ...hi.definitions] };
  var Fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }, ...Fd.definitions, ...gd.definitions, ...hi.definitions] };
  var Ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAgentActivity" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentActivityCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPayload" } }] } }] } }, ...yi.definitions] };
  var _s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAgentContext" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AgentContextCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentContextCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentContextPayload" } }] } }] } }, ...Fi.definitions] };
  var Vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateAgentContext" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AgentContextUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentContextUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentContextPayload" } }] } }] } }, ...Fi.definitions] };
  var As = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "agentSessionUpdateExternalUrl" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionUpdateExternalUrlInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "agentSessionUpdateExternalUrl" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionPayload" } }] } }] } }, ...Vi.definitions] };
  var Ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "airbyteIntegrationConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "airbyteIntegrationConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channelId" }, value: { kind: "Variable", name: { kind: "Name", value: "channelId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "messageId" }, value: { kind: "Variable", name: { kind: "Name", value: "messageId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }] } }] } }, ...Qn.definitions] };
  var qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "linkKind" } }, type: { kind: "NamedType", name: { kind: "Name", value: "GitLinkKind" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "linkKind" }, value: { kind: "Variable", name: { kind: "Name", value: "linkKind" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "projectPathWithNamespace" }, value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "partId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "partId" }, value: { kind: "Variable", name: { kind: "Name", value: "partId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraIssueId" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkSalesforce" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkSalesforce" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "syncToCommentThread" }, value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "ticketId" }, value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentSyncToSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentSyncToSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...xi.definitions] };
  var Ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...$i.definitions] };
  var Hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentResolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentResolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "resolvingCommentId" }, value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...$i.definitions] };
  var Gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentUnresolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUnresolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...$i.definitions] };
  var Js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...$i.definitions] };
  var Ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createContact" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "contactCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }] } }] } }, ...Zi.definitions] };
  var $s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCsvExportReport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCsvExportReport" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "includePrivateTeamIds" }, value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }] } }] } }, ...Yi.definitions] };
  var Zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createInitiativeUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "initiativeId" }, value: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } }] } }] } }, ...pa.definitions] };
  var Ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "survey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "survey" }, value: { kind: "Variable", name: { kind: "Name", value: "survey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Xi.definitions, ...Bi.definitions, ...Ri.definitions] };
  var Xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createProjectUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }] } }] } }, ...wt.definitions] };
  var eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...ln.definitions] };
  var iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...ln.definitions] };
  var au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...vn.definitions] };
  var tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerMerge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerMerge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sourceCustomerId" }, value: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } } }, { kind: "Argument", name: { kind: "Name", value: "targetCustomerId" }, value: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...vn.definitions] };
  var lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }] } }, ...pe.definitions] };
  var ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }] } }] } }, ...un.definitions] };
  var ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerNeedCreateFromAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateFromAttachmentInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedCreateFromAttachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }] } }] } }, ...un.definitions] };
  var mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "keepAttachment" }, value: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }] } }, ...pe.definitions] };
  var uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } }] } }] } }, ...kn.definitions, ...mn.definitions] };
  var ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomerStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatusCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }] } }] } }, ...Nn.definitions] };
  var vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomerStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatusDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomerStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatusUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }] } }] } }, ...Nn.definitions] };
  var pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }] } }] } }, ...yn.definitions] };
  var Nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }] } }] } }, ...yn.definitions] };
  var fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...vn.definitions] };
  var yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerUpsert" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpsertInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerUpsert" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...vn.definitions] };
  var Su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }] } }, ...Ne.definitions] };
  var bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...gn.definitions] };
  var gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleShiftAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleShiftAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...gn.definitions] };
  var Fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...gn.definitions] };
  var Du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...gn.definitions] };
  var _u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...An.definitions] };
  var Vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...fe.definitions] };
  var Au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...fe.definitions] };
  var Tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...An.definitions] };
  var Iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...qn.definitions] };
  var wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailIntakeAddressRotate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressRotate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...qn.definitions] };
  var Pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...qn.definitions] };
  var qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Ei.definitions, ...Ri.definitions, ...Bi.definitions] };
  var xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }] } }] } }, ...xn.definitions] };
  var ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }] } }] } }, ...jn.definitions] };
  var Uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }] } }] } }, ...Bn.definitions] };
  var Ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...En.definitions] };
  var Ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...En.definitions] };
  var Mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...Hn.definitions] };
  var Lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...Hn.definitions] };
  var Wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "fileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "fileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "makePublic" }, value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...ud.definitions, ...sd.definitions, ...md.definitions] };
  var Hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...$n.definitions, ...Jn.definitions, ...Gn.definitions] };
  var Qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...$n.definitions, ...Jn.definitions, ...Gn.definitions] };
  var Ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...Zn.definitions, ...Gn.definitions] };
  var Ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var $u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...Zn.definitions, ...Gn.definitions] };
  var Zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "googleUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "googleUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Ei.definitions, ...Ri.definitions, ...Bi.definitions] };
  var Yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "imageUploadFromUrl" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "imageUploadFromUrl" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }] } }] } }, ...na.definitions] };
  var Xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "importFileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "importFileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...ud.definitions, ...sd.definitions, ...md.definitions] };
  var ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...ye.definitions] };
  var ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...Xe.definitions] };
  var nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationPayload" } }] } }] } }, ...ma.definitions, ...oa.definitions] };
  var tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...ei.definitions] };
  var ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...ei.definitions] };
  var mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...ye.definitions] };
  var sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...Xe.definitions] };
  var uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }] } }, ...Se.definitions] };
  var kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }] } }] } }, ...ca.definitions] };
  var vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }] } }, ...Se.definitions] };
  var ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }] } }] } }, ...ca.definitions] };
  var pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationAsksConnectChannel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationAsksConnectChannel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }] } }] } }, ...Ci.definitions, ...wi.definitions, ...Ii.definitions] };
  var hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFigma" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFigma" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationName" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }] } }] } }, ...ea.definitions] };
  var gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationGithubCommit" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubCommitCreate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }] } }] } }, ...Yn.definitions] };
  var Dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var _k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubImportConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubImportConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubImportRefresh" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubImportRefresh" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitlabConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitlabConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "gitlabUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }] } }] } }, ...ia.definitions] };
  var Tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGoogleSheets" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGoogleSheets" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "domainUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationIntercom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationIntercomSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationJiraPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationJiraPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }] } }] } }, ...Sa.definitions] };
  var jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSalesforce" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSalesforce" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "subdomain" }, value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSentryConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSentryConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationSlug" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackAsks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackAsks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "customViewId" }, value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...zt.definitions] };
  var Ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackCustomerChannelLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackCustomerChannelLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "customerId" }, value: { kind: "Variable", name: { kind: "Name", value: "customerId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SuccessPayload" } }] } }] } }, ...Ht.definitions] };
  var Mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackImportEmojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackImportEmojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...zt.definitions] };
  var zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...zt.definitions] };
  var Hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackProjectPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackProjectPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...zt.definitions] };
  var Qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }] } }] } }, ...Fa.definitions] };
  var Gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }, { kind: "Argument", name: { kind: "Name", value: "subdomain" }, value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Da.definitions] };
  var $k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Da.definitions] };
  var Zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueAddLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueAddLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var Yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...be.definitions] };
  var Xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...Va.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions] };
  var ev = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ids" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "ids" }, value: { kind: "Variable", name: { kind: "Name", value: "ids" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...Va.definitions, ..._a.definitions, ...Mi.definitions, ...ge.definitions, ...Qi.definitions, ...zi.definitions, ...Wi.definitions, ...Hi.definitions] };
  var iv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var nv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "permanentlyDelete" }, value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...be.definitions] };
  var av = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateAsana" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateAsana" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "asanaTeamName" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } } }, { kind: "Argument", name: { kind: "Name", value: "asanaToken" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var tv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateCSVJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateCSVJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var dv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateClubhouse" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateClubhouse" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clubhouseGroupName" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } } }, { kind: "Argument", name: { kind: "Name", value: "clubhouseToken" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var lv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateGithub" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateGithub" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } } }, { kind: "Argument", name: { kind: "Name", value: "githubRepoIds" }, value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var ov = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jql" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "jql" }, value: { kind: "Variable", name: { kind: "Name", value: "jql" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var rv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }] } }] } }, ...Ua.definitions, ...Ca.definitions] };
  var mv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportProcess" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportProcess" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var sv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Oa.definitions, ...Ca.definitions] };
  var uv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Ra.definitions] };
  var kv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var vv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Ra.definitions] };
  var cv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "overrideCreatedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...Wa.definitions] };
  var pv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Nv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...Wa.definitions] };
  var hv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "reminderAt" }, value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var fv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueRemoveLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRemoveLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var yv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueSubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var Sv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...be.definitions] };
  var bv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var gv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ea.definitions] };
  var Fv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Xi.definitions, ...Bi.definitions, ...Ri.definitions] };
  var Dv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "leaveOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "leaveOrganization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Xi.definitions, ...Bi.definitions, ...Ri.definitions] };
  var _v = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logout" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logout" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...Ja.definitions] };
  var Vv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutAllSessions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutAllSessions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...Ja.definitions] };
  var Av = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutOtherSessions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutOtherSessions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...Ja.definitions] };
  var Tv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutSession" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sessionId" }, value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...Ja.definitions] };
  var Iv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...je.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var wv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationArchiveAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchiveAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Ka.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var Cv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationCategoryChannelSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "category" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategory" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channel" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannel" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subscribe" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryChannelSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "category" }, value: { kind: "Variable", name: { kind: "Name", value: "category" } } }, { kind: "Argument", name: { kind: "Name", value: "channel" }, value: { kind: "Variable", name: { kind: "Name", value: "channel" } } }, { kind: "Argument", name: { kind: "Name", value: "subscribe" }, value: { kind: "Variable", name: { kind: "Name", value: "subscribe" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...hd.definitions] };
  var Pv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkReadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkReadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "readAt" }, value: { kind: "Variable", name: { kind: "Name", value: "readAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Ka.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var qv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkUnreadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkUnreadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Ka.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var xv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationSnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "snoozedUntilAt" }, value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Ka.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var jv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...Xa.definitions, ...Ae.definitions] };
  var Uv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Ov = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...Xa.definitions, ...Ae.definitions] };
  var Bv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...je.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var Rv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationUnsnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnsnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "unsnoozedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Ka.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var Ev = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }] } }] } }, ...Za.definitions, ...xe.definitions, ...ge.definitions, ...Fe.definitions, ...De.definitions, ..._e.definitions, ...Ve.definitions, ...Te.definitions, ...Ae.definitions, ...we.definitions, ...Ie.definitions, ...Ce.definitions, ...Pe.definitions, ...qe.definitions] };
  var Mv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationCancel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationCancelDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }] } }] } }, ...et.definitions] };
  var Lv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...it.definitions] };
  var zv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...it.definitions] };
  var Wv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationDomain" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDomainDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Hv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...dt.definitions] };
  var Qv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Gv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...dt.definitions] };
  var Jv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }] } }] } }, ...ot.definitions] };
  var Kv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartTrialForPlan" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartTrialForPlan" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }] } }] } }, ...ot.definitions] };
  var $v = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }] } }] } }, ...lt.definitions] };
  var Zv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "projectAddLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectAddLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...yt.definitions] };
  var Yv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Ue.definitions] };
  var Xv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "connectSlackChannel" }, value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...yt.definitions] };
  var ec = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Ue.definitions] };
  var ic = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabelCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }] } }] } }, ...pt.definitions] };
  var nc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabelDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var ac = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLabelUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }] } }] } }, ...pt.definitions] };
  var tc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...ft.definitions] };
  var dc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var lc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...ft.definitions] };
  var oc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }] } }] } }, ...gt.definitions] };
  var rc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var mc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }] } }] } }, ...gt.definitions] };
  var sc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "projectRemoveLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRemoveLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...yt.definitions] };
  var uc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }] } }, ...Oe.definitions] };
  var kc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }] } }] } }, ...Vt.definitions] };
  var vc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }] } }, ...Oe.definitions] };
  var cc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }] } }] } }, ...Vt.definitions] };
  var pc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...Ue.definitions] };
  var Nc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...yt.definitions] };
  var hc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }] } }, ...Be.definitions] };
  var fc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...It.definitions] };
  var yc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Sc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }] } }, ...Be.definitions] };
  var bc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...It.definitions] };
  var gc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createPushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...Pt.definitions, ...Ct.definitions] };
  var Fc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deletePushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...Pt.definitions, ...Ct.definitions] };
  var Dc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }] } }] } }, ...Ut.definitions, ...Mi.definitions] };
  var _c = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Vc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "refreshGoogleSheetsData" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "type" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "refreshGoogleSheetsData" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "type" }, value: { kind: "Variable", name: { kind: "Name", value: "type" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...ya.definitions] };
  var Ac = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Tc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInviteByEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInviteByEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Ic = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Re.definitions] };
  var wc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Rt.definitions] };
  var Cc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Pc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...Lt.definitions] };
  var qc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var xc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...Lt.definitions] };
  var jc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Re.definitions] };
  var Uc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Rt.definitions] };
  var Oc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...Ei.definitions, ...Ri.definitions, ...Bi.definitions] };
  var Bc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "copySettingsFromTeamId" }, value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...Zt.definitions] };
  var Rc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamCycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCyclesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...Zt.definitions] };
  var Ec = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Mc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamKeyDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Lc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...$t.definitions] };
  var zc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "alsoLeaveParentTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Wc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...$t.definitions] };
  var Hc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }] } }, ...Ee.definitions] };
  var Qc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InheritanceEntityMapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...Zt.definitions] };
  var Gc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...ed.definitions] };
  var Jc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Kc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...ed.definitions] };
  var $c = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...td.definitions] };
  var Zc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var Yc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...td.definitions] };
  var Xc = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...td.definitions] };
  var ep = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "externalId" }, value: { kind: "Variable", name: { kind: "Name", value: "externalId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...td.definitions] };
  var ip = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...rd.definitions] };
  var np = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var ap = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...rd.definitions] };
  var tp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var dp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var lp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDiscordConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDiscordConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...cd.definitions] };
  var op = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userExternalUserDisconnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userExternalUserDisconnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...cd.definitions] };
  var rp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserFlag" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flag" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "operation" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userFlagUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flag" }, value: { kind: "Variable", name: { kind: "Name", value: "flag" } } }, { kind: "Argument", name: { kind: "Name", value: "operation" }, value: { kind: "Variable", name: { kind: "Name", value: "operation" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }] } }] } }, ...pd.definitions] };
  var mp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var sp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var up = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userSettingsFlagsReset" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flags" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsFlagsReset" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flags" }, value: { kind: "Variable", name: { kind: "Name", value: "flags" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }] } }] } }, ...Nd.definitions] };
  var kp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...hd.definitions] };
  var vp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "suspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var cp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unsuspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUnsuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...kd.definitions] };
  var pp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...cd.definitions] };
  var Np = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...fd.definitions, ...nn.definitions, ...en.definitions] };
  var hp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var fp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...fd.definitions, ...nn.definitions, ...en.definitions] };
  var yp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...bd.definitions] };
  var Sp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...he.definitions] };
  var bp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...bd.definitions] };
  var gp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }, ...Me.definitions] };
  var Fp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Dd.definitions] };
  var Dp = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Dd.definitions] };
  var _p;
  var Vp = Object.freeze({ __proto__: null, get AgentActivityType() {
    return o;
  }, get AgentSessionStatus() {
    return r;
  }, get AgentSessionType() {
    return m;
  }, get AuthenticationSessionType() {
    return s;
  }, get ContextViewType() {
    return u;
  }, get CustomerStatusType() {
    return k;
  }, get CyclePeriod() {
    return v;
  }, get DateResolutionType() {
    return c;
  }, get Day() {
    return p;
  }, get EmailIntakeAddressType() {
    return N;
  }, get ExternalSyncService() {
    return h;
  }, get FacetPageSource() {
    return f;
  }, get FeedSummarySchedule() {
    return y;
  }, get FrequencyResolutionType() {
    return S;
  }, get GitAutomationStates() {
    return b;
  }, get GitLinkKind() {
    return g;
  }, get GithubOrgType() {
    return F;
  }, get InitiativeStatus() {
    return D;
  }, get InitiativeTab() {
    return _;
  }, get InitiativeUpdateHealthType() {
    return V;
  }, get IntegrationService() {
    return A;
  }, get IssueRelationType() {
    return T;
  }, get IssueSuggestionState() {
    return I;
  }, get IssueSuggestionType() {
    return w;
  }, get NotificationCategory() {
    return C;
  }, get NotificationChannel() {
    return P;
  }, get OAuthClientApprovalStatus() {
    return q;
  }, get OrganizationDomainAuthType() {
    return x;
  }, get OrganizationInviteStatus() {
    return j;
  }, get OtherNotificationType() {
    return U;
  }, get PaginationNulls() {
    return O;
  }, get PaginationOrderBy() {
    return B;
  }, get PaginationSortOrder() {
    return R;
  }, get PostType() {
    return E;
  }, get ProductIntelligenceScope() {
    return M;
  }, get ProjectMilestoneStatus() {
    return L;
  }, get ProjectStatusType() {
    return z;
  }, get ProjectTab() {
    return W;
  }, get ProjectUpdateHealthType() {
    return H;
  }, get ProjectUpdateReminderFrequency() {
    return Q;
  }, get PullRequestReviewTool() {
    return G;
  }, get PullRequestStatus() {
    return J;
  }, get PushSubscriptionType() {
    return K;
  }, get ReleaseChannel() {
    return $;
  }, get SLADayCountType() {
    return Z;
  }, get SemanticSearchResultType() {
    return Y;
  }, get SendStrategy() {
    return X;
  }, get SlaStatus() {
    return ee;
  }, get SlackChannelType() {
    return ie;
  }, get TriageResponsibilityAction() {
    return ne;
  }, get UserContextViewType() {
    return ae;
  }, get UserFlagType() {
    return te;
  }, get UserFlagUpdateOperation() {
    return de;
  }, get UserRoleType() {
    return le;
  }, get ViewPreferencesType() {
    return oe;
  }, get ViewType() {
    return re;
  }, EntityFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Entity" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, CustomViewNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, CustomerNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, CycleNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, FacetFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Facet" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sourceFeedUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourcePage" } }, { kind: "Field", name: { kind: "Name", value: "sourceProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetCustomView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, CustomerNeedArchivePayloadFragmentDoc: pe, CycleArchivePayloadFragmentDoc: Ne, DeletePayloadFragmentDoc: he, DocumentArchivePayloadFragmentDoc: fe, InitiativeArchivePayloadFragmentDoc: ye, InitiativeUpdateArchivePayloadFragmentDoc: Se, IssueArchivePayloadFragmentDoc: be, ActorBotFragmentDoc: ge, CustomerNeedNotificationFragmentDoc: Fe, CustomerNotificationFragmentDoc: De, DocumentNotificationFragmentDoc: _e, InitiativeNotificationFragmentDoc: Ve, NotificationSubscriptionFragmentDoc: Ae, IssueNotificationFragmentDoc: Te, OauthClientApprovalFragmentDoc: Ie, OauthClientApprovalNotificationFragmentDoc: we, PostNotificationFragmentDoc: Ce, ProjectNotificationFragmentDoc: Pe, PullRequestNotificationFragmentDoc: qe, NotificationFragmentDoc: xe, NotificationArchivePayloadFragmentDoc: je, ProjectArchivePayloadFragmentDoc: Ue, ProjectStatusArchivePayloadFragmentDoc: Oe, ProjectUpdateArchivePayloadFragmentDoc: Be, RoadmapArchivePayloadFragmentDoc: Re, TeamArchivePayloadFragmentDoc: Ee, WorkflowStateArchivePayloadFragmentDoc: Me, ArchivePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }] }, LabelNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LabelNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, ProjectNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, TeamNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, UserNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, SesDomainIdentityDnsRecordFragmentDoc: Le, SesDomainIdentityFragmentDoc: ze, EmailIntakeAddressFragmentDoc: We, InitiativeNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, OrganizationIpRestrictionFragmentDoc: He, ProjectStatusFragmentDoc: Qe, PaidSubscriptionFragmentDoc: Ge, OrganizationFragmentDoc: Je, AuthenticationSessionResponseFragmentDoc: Ke, BaseWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "BaseWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BaseWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }] } }] }, CustomerNeedChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "customerId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }] } }] }, OauthClientChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, IntegrationChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "service" } }] } }] }, IdentityProviderFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IdentityProvider" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IdentityProvider" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "ssoBinding" } }, { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } }, { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } }] } }] }, OrganizationDomainFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDomain" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "verificationEmail" } }, { kind: "Field", name: { kind: "Name", value: "verified" } }, { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } }, { kind: "Field", name: { kind: "Name", value: "identityProvider" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IdentityProvider" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "claimed" } }] } }] }, AuthorizingUserFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthorizingUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizingUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, WebhookFailureEventFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookFailureEvent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "responseOrError" } }, { kind: "Field", name: { kind: "Name", value: "httpStatus" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "executionId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, UserChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CommentChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "body" } }] } }] }, InitiativeChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, ProjectChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, DocumentChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] }, TeamChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, IssueWithDescriptionChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] }, ProjectUpdateChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }] } }] }, OtherNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OtherNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OtherNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "documentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, OAuthAppWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OAuthAppWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OAuthAppWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, DocumentContentChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }] } }] }, ExternalUserChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, InitiativeUpdateChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "health" } }] } }] }, IssueChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] }, CommentWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "resolvingCommentId" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentId" } }, { kind: "Field", name: { kind: "Name", value: "postId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "resolvingUserId" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "botActor" } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "syncedWith" } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "quotedText" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "resolvedAt" } }] } }] }, AttachmentWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "subtitle" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "originalIssueId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "sourceType" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "groupBySource" } }] } }] }, CustomerChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "domains" } }, { kind: "Field", name: { kind: "Name", value: "externalIds" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CustomerNeedWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "customerId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "projectAttachmentId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "originalIssueId" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, CustomerStatusChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, CustomerTierChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CustomerWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "slackChannelId" } }, { kind: "Field", name: { kind: "Name", value: "statusId" } }, { kind: "Field", name: { kind: "Name", value: "tierId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "mainSourceId" } }, { kind: "Field", name: { kind: "Name", value: "ownerId" } }, { kind: "Field", name: { kind: "Name", value: "revenue" } }, { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "tier" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "domains" } }, { kind: "Field", name: { kind: "Name", value: "externalIds" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, CycleWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponCloseIds" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }] } }] }, DocumentWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "resourceFolderId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedById" } }, { kind: "Field", name: { kind: "Name", value: "subscriberIds" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] }, ProjectUpdateWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, ProjectMilestoneChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }] } }] }, ProjectStatusChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, ProjectWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "memberIds" } }, { kind: "Field", name: { kind: "Name", value: "teamIds" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssueId" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "leadId" } }, { kind: "Field", name: { kind: "Name", value: "statusId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "initiatives" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "milestones" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "startDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }] } }] }, ReactionWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "postId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, IssueStatusChangedNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, UserWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "disableReason" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "guest" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "admin" } }, { kind: "Field", name: { kind: "Name", value: "app" } }] } }] }, AgentActivityWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentActivityWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "agentSessionId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, AgentSessionWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentSessionWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }, { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "appUserId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "endedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, AgentSessionEventWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentSessionEventWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionEventWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }, { kind: "Field", name: { kind: "Name", value: "appUserId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "agentActivity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "agentSession" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, AgentContextWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AgentContextWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentContextWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }, { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "appUserId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "endedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, AuditEntryWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "requestInformation" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "countryCode" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, InitiativeUpdateWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, InitiativeWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "ownerId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "parentInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "projects" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subInitiatives" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }] } }] }, IssueAssignedToYouNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueCommentMentionNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueCommentReactionNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueEmojiReactionNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueLabelWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } }, { kind: "Field", name: { kind: "Name", value: "parentId" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] }, IssueMentionNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueNewCommentNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, IssueUnassignedFromYouNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }] } }] }, AppUserNotificationWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AppUserNotificationWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserNotificationWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }, { kind: "Field", name: { kind: "Name", value: "appUserId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, AppUserTeamAccessChangedWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }, { kind: "Field", name: { kind: "Name", value: "appUserId" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "addedTeamIds" } }, { kind: "Field", name: { kind: "Name", value: "removedTeamIds" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "canAccessAllPublicTeams" } }] } }] }, CustomResourceWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomResourceWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomResourceWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, EntityWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "updatedFrom" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "url" } }] } }] }, CycleChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }] } }] }, WorkflowStateChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, IssueLabelChildWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "parentId" } }] } }] }, IssueWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "delegateId" } }, { kind: "Field", name: { kind: "Name", value: "cycleId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } }, { kind: "Field", name: { kind: "Name", value: "stateId" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "parentId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "sourceCommentId" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "assigneeId" } }, { kind: "Field", name: { kind: "Name", value: "subscriberIds" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "delegate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "descriptionData" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "syncedWith" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "labels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "slaType" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }] } }] } }] }, IssueSlaWebhookPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSlaWebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSlaWebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "issueData" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWebhookPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "url" } }] } }] }, UserAuthorizedApplicationFragmentDoc: $e, ApplicationFragmentDoc: Ze, IntegrationsSettingsFragmentDoc: Ye, InitiativePayloadFragmentDoc: Xe, InitiativeToProjectPayloadFragmentDoc: ei, NotificationDeliveryPreferencesDayFragmentDoc: ii, NotificationDeliveryPreferencesScheduleFragmentDoc: ni, NotificationDeliveryPreferencesChannelFragmentDoc: ai, NotificationDeliveryPreferencesFragmentDoc: ti, NotificationChannelPreferencesFragmentDoc: di, NotificationCategoryPreferencesFragmentDoc: li, UserSettingsFragmentDoc: oi, IssueImportJqlCheckPayloadFragmentDoc: ri, IssueImportSyncCheckPayloadFragmentDoc: mi, AgentActivityActionContentFragmentDoc: si, AgentActivityElicitationContentFragmentDoc: ui, AgentActivityErrorContentFragmentDoc: ki, AgentActivityPromptContentFragmentDoc: vi, AgentActivityResponseContentFragmentDoc: ci, AgentActivityThoughtContentFragmentDoc: pi, AgentActivityFragmentDoc: Ni, PageInfoFragmentDoc: hi, AgentActivityConnectionFragmentDoc: fi, AgentActivityPayloadFragmentDoc: yi, EntityExternalLinkFragmentDoc: Si, AgentContextFragmentDoc: bi, AgentContextConnectionFragmentDoc: gi, AgentContextPayloadFragmentDoc: Fi, AgentSessionFragmentDoc: Di, AgentSessionConnectionFragmentDoc: _i, AgentSessionPayloadFragmentDoc: Vi, ApiKeyFragmentDoc: Ai, ApiKeyConnectionFragmentDoc: Ti, ApiKeyPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiKey" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, SlackAsksTeamSettingsFragmentDoc: Ii, SlackChannelNameMappingFragmentDoc: wi, AsksChannelConnectPayloadFragmentDoc: Ci, AttachmentFragmentDoc: Pi, AttachmentConnectionFragmentDoc: qi, AttachmentPayloadFragmentDoc: xi, AttachmentSourcesPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentSourcesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sources" } }] } }] }, AuditEntryFragmentDoc: ji, AuditEntryConnectionFragmentDoc: Ui, AuditEntryTypeFragmentDoc: Oi, AuthOrganizationFragmentDoc: Bi, AuthUserFragmentDoc: Ri, AuthResolverResponseFragmentDoc: Ei, ReactionFragmentDoc: Mi, DocumentContentFragmentDoc: Li, ExternalEntityInfoGithubMetadataFragmentDoc: zi, ExternalEntityInfoJiraMetadataFragmentDoc: Wi, ExternalEntitySlackMetadataFragmentDoc: Hi, ExternalEntityInfoFragmentDoc: Qi, SyncedExternalThreadFragmentDoc: Gi, CommentFragmentDoc: Ji, CommentConnectionFragmentDoc: Ki, CommentPayloadFragmentDoc: $i, ContactPayloadFragmentDoc: Zi, CreateCsvExportReportPayloadFragmentDoc: Yi, CreateOrJoinOrganizationResponseFragmentDoc: Xi, ViewPreferencesValuesFragmentDoc: en, ViewPreferencesFragmentDoc: nn, CustomViewFragmentDoc: an, CustomViewConnectionFragmentDoc: tn, CustomViewHasSubscribersPayloadFragmentDoc: dn, CustomViewPayloadFragmentDoc: ln, CustomViewSuggestionPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CustomerFragmentDoc: on, CustomerConnectionFragmentDoc: rn, CustomerNeedFragmentDoc: mn, CustomerNeedConnectionFragmentDoc: sn, CustomerNeedPayloadFragmentDoc: un, CustomerNeedUpdatePayloadFragmentDoc: kn, CustomerPayloadFragmentDoc: vn, CustomerStatusFragmentDoc: cn, CustomerStatusConnectionFragmentDoc: pn, CustomerStatusPayloadFragmentDoc: Nn, CustomerTierFragmentDoc: hn, CustomerTierConnectionFragmentDoc: fn, CustomerTierPayloadFragmentDoc: yn, CycleFragmentDoc: Sn, CycleConnectionFragmentDoc: bn, CyclePayloadFragmentDoc: gn, DocumentFragmentDoc: Fn, DocumentConnectionFragmentDoc: Dn, DocumentContentHistoryTypeFragmentDoc: _n, DocumentContentHistoryPayloadFragmentDoc: Vn, DocumentPayloadFragmentDoc: An, ArchiveResponseFragmentDoc: Tn, DocumentSearchResultFragmentDoc: In, DocumentSearchPayloadFragmentDoc: wn, DraftFragmentDoc: Cn, DraftConnectionFragmentDoc: Pn, EmailIntakeAddressPayloadFragmentDoc: qn, EmailUnsubscribePayloadFragmentDoc: xn, EmailUserAccountAuthChallengeResponseFragmentDoc: jn, EmojiFragmentDoc: Un, EmojiConnectionFragmentDoc: On, EmojiPayloadFragmentDoc: Bn, EntityExternalLinkConnectionFragmentDoc: Rn, EntityExternalLinkPayloadFragmentDoc: En, ExternalUserFragmentDoc: Mn, ExternalUserConnectionFragmentDoc: Ln, FavoriteFragmentDoc: zn, FavoriteConnectionFragmentDoc: Wn, FavoritePayloadFragmentDoc: Hn, FetchDataPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FetchDataPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FetchDataPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "data" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, FrontAttachmentPayloadFragmentDoc: Qn, GitAutomationTargetBranchFragmentDoc: Gn, GitAutomationStateFragmentDoc: Jn, GitAutomationStateConnectionFragmentDoc: Kn, GitAutomationStatePayloadFragmentDoc: $n, GitAutomationTargetBranchPayloadFragmentDoc: Zn, GitHubCommitIntegrationPayloadFragmentDoc: Yn, GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc: Xn, GitHubEnterpriseServerPayloadFragmentDoc: ea, GitLabIntegrationCreatePayloadFragmentDoc: ia, ImageUploadFromUrlPayloadFragmentDoc: na, InitiativeFragmentDoc: aa, InitiativeConnectionFragmentDoc: ta, InitiativeHistoryFragmentDoc: da, InitiativeHistoryConnectionFragmentDoc: la, InitiativeRelationFragmentDoc: oa, InitiativeRelationConnectionFragmentDoc: ra, InitiativeRelationPayloadFragmentDoc: ma, InitiativeToProjectFragmentDoc: sa, InitiativeToProjectConnectionFragmentDoc: ua, InitiativeUpdateFragmentDoc: ka, InitiativeUpdateConnectionFragmentDoc: va, InitiativeUpdatePayloadFragmentDoc: ca, InitiativeUpdateReminderPayloadFragmentDoc: pa, IntegrationFragmentDoc: Na, IntegrationConnectionFragmentDoc: ha, IntegrationHasScopesPayloadFragmentDoc: fa, IntegrationPayloadFragmentDoc: ya, IntegrationRequestPayloadFragmentDoc: Sa, IntegrationTemplateFragmentDoc: ba, IntegrationTemplateConnectionFragmentDoc: ga, IntegrationTemplatePayloadFragmentDoc: Fa, IntegrationsSettingsPayloadFragmentDoc: Da, IssueFragmentDoc: _a, IssueBatchPayloadFragmentDoc: Va, IssueConnectionFragmentDoc: Aa, IssueFilterSuggestionPayloadFragmentDoc: Ta, IssueRelationHistoryPayloadFragmentDoc: Ia, UserFragmentDoc: wa, IssueImportFragmentDoc: Ca, IssueLabelFragmentDoc: Pa, IssueHistoryFragmentDoc: qa, IssueHistoryConnectionFragmentDoc: xa, IssueImportCheckPayloadFragmentDoc: ja, IssueImportDeletePayloadFragmentDoc: Ua, IssueImportPayloadFragmentDoc: Oa, IssueLabelConnectionFragmentDoc: Ba, IssueLabelPayloadFragmentDoc: Ra, IssuePayloadFragmentDoc: Ea, IssuePriorityValueFragmentDoc: Ma, IssueRelationFragmentDoc: La, IssueRelationConnectionFragmentDoc: za, IssueRelationPayloadFragmentDoc: Wa, IssueSearchResultFragmentDoc: Ha, IssueSearchPayloadFragmentDoc: Qa, IssueSuggestionMetadataFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSuggestionMetadata" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionMetadata" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "classification" } }, { kind: "Field", name: { kind: "Name", value: "evalLogId" } }, { kind: "Field", name: { kind: "Name", value: "reasons" } }, { kind: "Field", name: { kind: "Name", value: "score" } }] } }] }, IssueSuggestionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSuggestion" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestion" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "metadata" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestionMetadata" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" } }, { kind: "Field", name: { kind: "Name", value: "stateChangedAt" } }, { kind: "Field", name: { kind: "Name", value: "suggestedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "suggestedIssueId" } }, { kind: "Field", name: { kind: "Name", value: "suggestedLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "suggestedLabelId" } }, { kind: "Field", name: { kind: "Name", value: "suggestedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "suggestedTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "suggestedUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "suggestedUserId" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, IssueSuggestionConnectionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSuggestionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestion" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc: Ga, LogoutResponseFragmentDoc: Ja, NodeFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Node" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, NotificationBatchActionPayloadFragmentDoc: Ka, NotificationConnectionFragmentDoc: $a, NotificationPayloadFragmentDoc: Za, NotificationSubscriptionConnectionFragmentDoc: Ya, NotificationSubscriptionPayloadFragmentDoc: Xa, OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "status" } }] } }] }, OrganizationCancelDeletePayloadFragmentDoc: et, OrganizationDeletePayloadFragmentDoc: it, OrganizationExistsPayloadFragmentDoc: nt, OrganizationInviteFragmentDoc: at, OrganizationInviteConnectionFragmentDoc: tt, OrganizationInviteFullDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "organizationName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "inviter" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "accepted" } }, { kind: "Field", name: { kind: "Name", value: "expired" } }] } }] }, OrganizationInvitePayloadFragmentDoc: dt, OrganizationMetaFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationMeta" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "region" } }] } }] }, OrganizationPayloadFragmentDoc: lt, OrganizationStartTrialPayloadFragmentDoc: ot, PasskeyLoginStartResponseFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PasskeyLoginStartResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "options" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectFragmentDoc: rt, ProjectConnectionFragmentDoc: mt, ProjectFilterSuggestionPayloadFragmentDoc: st, ProjectHistoryFragmentDoc: ut, ProjectHistoryConnectionFragmentDoc: kt, ProjectLabelFragmentDoc: vt, ProjectLabelConnectionFragmentDoc: ct, ProjectLabelPayloadFragmentDoc: pt, ProjectMilestoneFragmentDoc: Nt, ProjectMilestoneConnectionFragmentDoc: ht, ProjectMilestoneMoveIssueToTeamFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }] } }] }, ProjectMilestoneMoveProjectTeamsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "teamIds" } }] } }] }, ProjectMilestoneMovePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMovePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "previousIssueTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }] } }, { kind: "Field", name: { kind: "Name", value: "previousProjectTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectMilestonePayloadFragmentDoc: ft, ProjectPayloadFragmentDoc: yt, ProjectRelationFragmentDoc: St, ProjectRelationConnectionFragmentDoc: bt, ProjectRelationPayloadFragmentDoc: gt, ProjectSearchResultFragmentDoc: Ft, ProjectSearchPayloadFragmentDoc: Dt, ProjectStatusConnectionFragmentDoc: _t, ProjectStatusCountPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusCountPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCountPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "privateCount" } }, { kind: "Field", name: { kind: "Name", value: "archivedTeamCount" } }, { kind: "Field", name: { kind: "Name", value: "count" } }] } }] }, ProjectStatusPayloadFragmentDoc: Vt, ProjectUpdateFragmentDoc: At, ProjectUpdateConnectionFragmentDoc: Tt, ProjectUpdatePayloadFragmentDoc: It, ProjectUpdateReminderPayloadFragmentDoc: wt, PushSubscriptionFragmentDoc: Ct, PushSubscriptionPayloadFragmentDoc: Pt, PushSubscriptionTestPayloadFragmentDoc: qt, RateLimitResultPayloadFragmentDoc: xt, RateLimitPayloadFragmentDoc: jt, ReactionPayloadFragmentDoc: Ut, RoadmapFragmentDoc: Ot, RoadmapConnectionFragmentDoc: Bt, RoadmapPayloadFragmentDoc: Rt, RoadmapToProjectFragmentDoc: Et, RoadmapToProjectConnectionFragmentDoc: Mt, RoadmapToProjectPayloadFragmentDoc: Lt, SlackChannelConnectPayloadFragmentDoc: zt, SsoUrlFromEmailResponseFragmentDoc: Wt, SuccessPayloadFragmentDoc: Ht, SummaryPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SummaryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }] } }] }, TeamFragmentDoc: Qt, TeamConnectionFragmentDoc: Gt, TeamMembershipFragmentDoc: Jt, TeamMembershipConnectionFragmentDoc: Kt, TeamMembershipPayloadFragmentDoc: $t, TeamPayloadFragmentDoc: Zt, TemplateFragmentDoc: Yt, TemplateConnectionFragmentDoc: Xt, TemplatePayloadFragmentDoc: ed, TimeScheduleEntryFragmentDoc: id, TimeScheduleFragmentDoc: nd, TimeScheduleConnectionFragmentDoc: ad, TimeSchedulePayloadFragmentDoc: td, TriageResponsibilityManualSelectionFragmentDoc: dd, TriageResponsibilityFragmentDoc: ld, TriageResponsibilityConnectionFragmentDoc: od, TriageResponsibilityPayloadFragmentDoc: rd, UploadFileHeaderFragmentDoc: md, UploadFileFragmentDoc: sd, UploadPayloadFragmentDoc: ud, UserAdminPayloadFragmentDoc: kd, UserConnectionFragmentDoc: vd, UserPayloadFragmentDoc: cd, UserSettingsFlagPayloadFragmentDoc: pd, UserSettingsFlagsResetPayloadFragmentDoc: Nd, UserSettingsPayloadFragmentDoc: hd, ViewPreferencesPayloadFragmentDoc: fd, WebhookFragmentDoc: yd, WebhookConnectionFragmentDoc: Sd, WebhookPayloadFragmentDoc: bd, WorkflowStateFragmentDoc: gd, WorkflowStateConnectionFragmentDoc: Fd, WorkflowStatePayloadFragmentDoc: Dd, AdministrableTeamsDocument: _d, AgentActivitiesDocument: Vd, AgentActivityDocument: Ad, AgentContextDocument: Td, AgentContextsDocument: Id, AgentSessionDocument: wd, AgentSession_ActivitiesDocument: Cd, AgentSessionsDocument: Pd, ApiKeysDocument: qd, ApplicationInfoDocument: xd, ApplicationWithAuthorizationDocument: jd, AttachmentDocument: Ud, AttachmentIssueDocument: Od, AttachmentIssue_AttachmentsDocument: Bd, AttachmentIssue_BotActorDocument: Rd, AttachmentIssue_ChildrenDocument: Ed, AttachmentIssue_CommentsDocument: Md, AttachmentIssue_FormerAttachmentsDocument: Ld, AttachmentIssue_FormerNeedsDocument: zd, AttachmentIssue_HistoryDocument: Wd, AttachmentIssue_InverseRelationsDocument: Hd, AttachmentIssue_LabelsDocument: Qd, AttachmentIssue_NeedsDocument: Gd, AttachmentIssue_RelationsDocument: Jd, AttachmentIssue_SubscribersDocument: Kd, AttachmentsDocument: $d, AttachmentsForUrlDocument: Zd, AuditEntriesDocument: Yd, AuditEntryTypesDocument: Xd, AuthenticationSessionsDocument: el, AvailableUsersDocument: il, CommentDocument: nl, Comment_BotActorDocument: al, Comment_ChildrenDocument: tl, Comment_DocumentContentDocument: dl, Comment_ExternalThreadDocument: ll, CommentsDocument: ol, CustomViewDocument: rl, CustomView_IssuesDocument: ml, CustomView_OrganizationViewPreferencesDocument: sl, CustomView_OrganizationViewPreferences_PreferencesDocument: ul, CustomView_ProjectsDocument: kl, CustomView_UserViewPreferencesDocument: vl, CustomView_UserViewPreferences_PreferencesDocument: cl, CustomView_ViewPreferencesValuesDocument: pl, CustomViewHasSubscribersDocument: Nl, CustomViewsDocument: hl, CustomerDocument: fl, CustomerNeedDocument: yl, CustomerNeedsDocument: Sl, CustomerStatusDocument: bl, CustomerStatusesDocument: gl, CustomerTierDocument: Fl, CustomerTiersDocument: Dl, CustomersDocument: _l, CycleDocument: Vl, Cycle_IssuesDocument: Al, Cycle_UncompletedIssuesUponCloseDocument: Tl, CyclesDocument: Il, DocumentDocument: wl, Document_CommentsDocument: Cl, DocumentContentHistoryDocument: Pl, DocumentsDocument: ql, EmailIntakeAddressDocument: xl, EmailIntakeAddress_SesDomainIdentityDocument: jl, EmojiDocument: Ul, EmojisDocument: Ol, EntityExternalLinkDocument: Bl, ExternalUserDocument: Rl, ExternalUsersDocument: El, FavoriteDocument: Ml, Favorite_ChildrenDocument: Ll, FavoritesDocument: zl, InitiativeDocument: Wl, Initiative_DocumentContentDocument: Hl, Initiative_DocumentsDocument: Ql, Initiative_HistoryDocument: Gl, Initiative_LinksDocument: Jl, Initiative_ProjectsDocument: Kl, Initiative_SubInitiativesDocument: $l, InitiativeRelationDocument: Zl, InitiativeRelationsDocument: Yl, InitiativeToProjectDocument: Xl, InitiativeToProjectsDocument: eo, InitiativeUpdateDocument: io, InitiativeUpdate_CommentsDocument: no, InitiativeUpdatesDocument: ao, InitiativesDocument: to, IntegrationDocument: lo, IntegrationHasScopesDocument: oo, IntegrationTemplateDocument: ro, IntegrationTemplatesDocument: mo, IntegrationsDocument: so, IntegrationsSettingsDocument: uo, IssueDocument: ko, Issue_AttachmentsDocument: vo, Issue_BotActorDocument: co, Issue_ChildrenDocument: po, Issue_CommentsDocument: No, Issue_FormerAttachmentsDocument: ho, Issue_FormerNeedsDocument: fo, Issue_HistoryDocument: yo, Issue_InverseRelationsDocument: So, Issue_LabelsDocument: bo, Issue_NeedsDocument: go, Issue_RelationsDocument: Fo, Issue_SubscribersDocument: Do, IssueFigmaFileKeySearchDocument: _o, IssueFilterSuggestionDocument: Vo, IssueImportCheckCsvDocument: Ao, IssueImportCheckSyncDocument: To, IssueImportJqlCheckDocument: Io, IssueLabelDocument: wo, IssueLabel_ChildrenDocument: Co, IssueLabel_IssuesDocument: Po, IssueLabelsDocument: qo, IssuePriorityValuesDocument: xo, IssueRelationDocument: jo, IssueRelationsDocument: Uo, IssueSearchDocument: Oo, IssueTitleSuggestionFromCustomerRequestDocument: Bo, IssueVcsBranchSearchDocument: Ro, IssueVcsBranchSearch_AttachmentsDocument: Eo, IssueVcsBranchSearch_BotActorDocument: Mo, IssueVcsBranchSearch_ChildrenDocument: Lo, IssueVcsBranchSearch_CommentsDocument: zo, IssueVcsBranchSearch_FormerAttachmentsDocument: Wo, IssueVcsBranchSearch_FormerNeedsDocument: Ho, IssueVcsBranchSearch_HistoryDocument: Qo, IssueVcsBranchSearch_InverseRelationsDocument: Go, IssueVcsBranchSearch_LabelsDocument: Jo, IssueVcsBranchSearch_NeedsDocument: Ko, IssueVcsBranchSearch_RelationsDocument: $o, IssueVcsBranchSearch_SubscribersDocument: Zo, IssuesDocument: Yo, NotificationDocument: Xo, NotificationSubscriptionDocument: er, NotificationSubscriptionsDocument: ir, NotificationsDocument: nr, OrganizationDocument: ar, Organization_IntegrationsDocument: tr, Organization_LabelsDocument: dr, Organization_ProjectLabelsDocument: lr, Organization_SubscriptionDocument: or, Organization_TeamsDocument: rr, Organization_TemplatesDocument: mr, Organization_UsersDocument: sr, OrganizationExistsDocument: ur, OrganizationInviteDocument: kr, OrganizationInvitesDocument: vr, ProjectDocument: cr, Project_CommentsDocument: pr, Project_DocumentContentDocument: Nr, Project_DocumentsDocument: hr, Project_ExternalLinksDocument: fr, Project_HistoryDocument: yr, Project_InitiativesDocument: Sr, Project_InverseRelationsDocument: br, Project_IssuesDocument: gr, Project_LabelsDocument: Fr, Project_MembersDocument: Dr, Project_NeedsDocument: _r, Project_ProjectMilestonesDocument: Vr, Project_ProjectUpdatesDocument: Ar, Project_RelationsDocument: Tr, Project_TeamsDocument: Ir, ProjectFilterSuggestionDocument: wr, ProjectLabelDocument: Cr, ProjectLabel_ChildrenDocument: Pr, ProjectLabel_ProjectsDocument: qr, ProjectLabelsDocument: xr, ProjectMilestoneDocument: jr, ProjectMilestone_DocumentContentDocument: Ur, ProjectMilestone_IssuesDocument: Or, ProjectMilestonesDocument: Br, ProjectRelationDocument: Rr, ProjectRelationsDocument: Er, ProjectStatusDocument: Mr, ProjectStatusesDocument: Lr, ProjectUpdateDocument: zr, ProjectUpdate_CommentsDocument: Wr, ProjectUpdatesDocument: Hr, ProjectsDocument: Qr, PushSubscriptionTestDocument: Gr, RateLimitStatusDocument: Jr, RoadmapDocument: Kr, Roadmap_ProjectsDocument: $r, RoadmapToProjectDocument: Zr, RoadmapToProjectsDocument: Yr, RoadmapsDocument: Xr, SearchDocumentsDocument: em, SearchDocuments_ArchivePayloadDocument: im, SearchIssuesDocument: nm, SearchIssues_ArchivePayloadDocument: am, SearchProjectsDocument: tm, SearchProjects_ArchivePayloadDocument: dm, SsoUrlFromEmailDocument: lm, TeamDocument: om, Team_CyclesDocument: rm, Team_GitAutomationStatesDocument: mm, Team_IssuesDocument: sm, Team_LabelsDocument: um, Team_MembersDocument: km, Team_MembershipsDocument: vm, Team_ProjectsDocument: cm, Team_StatesDocument: pm, Team_TemplatesDocument: Nm, Team_WebhooksDocument: hm, TeamMembershipDocument: fm, TeamMembershipsDocument: ym, TeamsDocument: Sm, TemplateDocument: bm, TemplatesDocument: gm, TemplatesForIntegrationDocument: Fm, TimeScheduleDocument: Dm, TimeSchedulesDocument: _m, TriageResponsibilitiesDocument: Vm, TriageResponsibilityDocument: Am, TriageResponsibility_ManualSelectionDocument: Tm, UserDocument: Im, User_AssignedIssuesDocument: wm, User_CreatedIssuesDocument: Cm, User_DelegatedIssuesDocument: Pm, User_DraftsDocument: qm, User_TeamMembershipsDocument: xm, User_TeamsDocument: jm, UserSettingsDocument: Um, UserSettings_NotificationCategoryPreferencesDocument: Om, UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument: Bm, UserSettings_NotificationCategoryPreferences_AssignmentsDocument: Rm, UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument: Em, UserSettings_NotificationCategoryPreferences_CustomersDocument: Mm, UserSettings_NotificationCategoryPreferences_DocumentChangesDocument: Lm, UserSettings_NotificationCategoryPreferences_FeedDocument: zm, UserSettings_NotificationCategoryPreferences_MentionsDocument: Wm, UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument: Hm, UserSettings_NotificationCategoryPreferences_ReactionsDocument: Qm, UserSettings_NotificationCategoryPreferences_RemindersDocument: Gm, UserSettings_NotificationCategoryPreferences_ReviewsDocument: Jm, UserSettings_NotificationCategoryPreferences_StatusChangesDocument: Km, UserSettings_NotificationCategoryPreferences_SubscriptionsDocument: $m, UserSettings_NotificationCategoryPreferences_SystemDocument: Zm, UserSettings_NotificationCategoryPreferences_TriageDocument: Ym, UserSettings_NotificationChannelPreferencesDocument: Xm, UserSettings_NotificationDeliveryPreferencesDocument: es, UserSettings_NotificationDeliveryPreferences_MobileDocument: is, UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument: ns, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument: as, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument: ts, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument: ds, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument: ls, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument: os, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument: rs, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument: ms, UsersDocument: ss, VerifyGitHubEnterpriseServerInstallationDocument: us, ViewerDocument: ks, Viewer_AssignedIssuesDocument: vs, Viewer_CreatedIssuesDocument: cs, Viewer_DelegatedIssuesDocument: ps, Viewer_DraftsDocument: Ns, Viewer_TeamMembershipsDocument: hs, Viewer_TeamsDocument: fs, WebhookDocument: ys, WebhooksDocument: Ss, WorkflowStateDocument: bs, WorkflowState_IssuesDocument: gs, WorkflowStatesDocument: Fs, CreateAgentActivityDocument: Ds, CreateAgentContextDocument: _s, UpdateAgentContextDocument: Vs, AgentSessionUpdateExternalUrlDocument: As, AirbyteIntegrationConnectDocument: Ts, CreateAttachmentDocument: Is, DeleteAttachmentDocument: ws, AttachmentLinkDiscordDocument: Cs, AttachmentLinkFrontDocument: Ps, AttachmentLinkGitHubIssueDocument: qs, AttachmentLinkGitHubPrDocument: xs, AttachmentLinkGitLabMrDocument: js, AttachmentLinkIntercomDocument: Us, AttachmentLinkJiraIssueDocument: Os, AttachmentLinkSalesforceDocument: Bs, AttachmentLinkSlackDocument: Rs, AttachmentLinkUrlDocument: Es, AttachmentLinkZendeskDocument: Ms, AttachmentSyncToSlackDocument: Ls, UpdateAttachmentDocument: zs, CreateCommentDocument: Ws, DeleteCommentDocument: Hs, CommentResolveDocument: Qs, CommentUnresolveDocument: Gs, UpdateCommentDocument: Js, CreateContactDocument: Ks, CreateCsvExportReportDocument: $s, CreateInitiativeUpdateReminderDocument: Zs, CreateOrganizationFromOnboardingDocument: Ys, CreateProjectUpdateReminderDocument: Xs, CreateCustomViewDocument: eu, DeleteCustomViewDocument: iu, UpdateCustomViewDocument: nu, CreateCustomerDocument: au, DeleteCustomerDocument: tu, CustomerMergeDocument: du, ArchiveCustomerNeedDocument: lu, CreateCustomerNeedDocument: ou, CustomerNeedCreateFromAttachmentDocument: ru, DeleteCustomerNeedDocument: mu, UnarchiveCustomerNeedDocument: su, UpdateCustomerNeedDocument: uu, CreateCustomerStatusDocument: ku, DeleteCustomerStatusDocument: vu, UpdateCustomerStatusDocument: cu, CreateCustomerTierDocument: pu, DeleteCustomerTierDocument: Nu, UpdateCustomerTierDocument: hu, UpdateCustomerDocument: fu, CustomerUpsertDocument: yu, ArchiveCycleDocument: Su, CreateCycleDocument: bu, CycleShiftAllDocument: gu, CycleStartUpcomingCycleTodayDocument: Fu, UpdateCycleDocument: Du, CreateDocumentDocument: _u, DeleteDocumentDocument: Vu, UnarchiveDocumentDocument: Au, UpdateDocumentDocument: Tu, CreateEmailIntakeAddressDocument: Iu, DeleteEmailIntakeAddressDocument: wu, EmailIntakeAddressRotateDocument: Cu, UpdateEmailIntakeAddressDocument: Pu, EmailTokenUserAccountAuthDocument: qu, EmailUnsubscribeDocument: xu, EmailUserAccountAuthChallengeDocument: ju, CreateEmojiDocument: Uu, DeleteEmojiDocument: Ou, CreateEntityExternalLinkDocument: Bu, DeleteEntityExternalLinkDocument: Ru, UpdateEntityExternalLinkDocument: Eu, CreateFavoriteDocument: Mu, DeleteFavoriteDocument: Lu, UpdateFavoriteDocument: zu, FileUploadDocument: Wu, CreateGitAutomationStateDocument: Hu, DeleteGitAutomationStateDocument: Qu, UpdateGitAutomationStateDocument: Gu, CreateGitAutomationTargetBranchDocument: Ju, DeleteGitAutomationTargetBranchDocument: Ku, UpdateGitAutomationTargetBranchDocument: $u, GoogleUserAccountAuthDocument: Zu, ImageUploadFromUrlDocument: Yu, ImportFileUploadDocument: Xu, ArchiveInitiativeDocument: ek, CreateInitiativeDocument: ik, DeleteInitiativeDocument: nk, CreateInitiativeRelationDocument: ak, DeleteInitiativeRelationDocument: tk, UpdateInitiativeRelationDocument: dk, CreateInitiativeToProjectDocument: lk, DeleteInitiativeToProjectDocument: ok, UpdateInitiativeToProjectDocument: rk, UnarchiveInitiativeDocument: mk, UpdateInitiativeDocument: sk, ArchiveInitiativeUpdateDocument: uk, CreateInitiativeUpdateDocument: kk, UnarchiveInitiativeUpdateDocument: vk, UpdateInitiativeUpdateDocument: ck, ArchiveIntegrationDocument: pk, IntegrationAsksConnectChannelDocument: Nk, DeleteIntegrationDocument: hk, IntegrationDiscordDocument: fk, IntegrationFigmaDocument: yk, IntegrationFrontDocument: Sk, IntegrationGitHubEnterpriseServerConnectDocument: bk, IntegrationGitHubPersonalDocument: gk, CreateIntegrationGithubCommitDocument: Fk, IntegrationGithubConnectDocument: Dk, IntegrationGithubImportConnectDocument: _k, IntegrationGithubImportRefreshDocument: Vk, IntegrationGitlabConnectDocument: Ak, IntegrationGoogleSheetsDocument: Tk, IntegrationIntercomDocument: Ik, DeleteIntegrationIntercomDocument: wk, UpdateIntegrationIntercomSettingsDocument: Ck, IntegrationJiraPersonalDocument: Pk, IntegrationLoomDocument: qk, IntegrationRequestDocument: xk, IntegrationSalesforceDocument: jk, IntegrationSentryConnectDocument: Uk, IntegrationSlackDocument: Ok, IntegrationSlackAsksDocument: Bk, IntegrationSlackCustomViewNotificationsDocument: Rk, IntegrationSlackCustomerChannelLinkDocument: Ek, IntegrationSlackImportEmojisDocument: Mk, IntegrationSlackOrgProjectUpdatesPostDocument: Lk, IntegrationSlackPersonalDocument: zk, IntegrationSlackPostDocument: Wk, IntegrationSlackProjectPostDocument: Hk, CreateIntegrationTemplateDocument: Qk, DeleteIntegrationTemplateDocument: Gk, IntegrationZendeskDocument: Jk, CreateIntegrationsSettingsDocument: Kk, UpdateIntegrationsSettingsDocument: $k, IssueAddLabelDocument: Zk, ArchiveIssueDocument: Yk, CreateIssueBatchDocument: Xk, UpdateIssueBatchDocument: ev, CreateIssueDocument: iv, DeleteIssueDocument: nv, IssueImportCreateAsanaDocument: av, IssueImportCreateCsvJiraDocument: tv, IssueImportCreateClubhouseDocument: dv, IssueImportCreateGithubDocument: lv, IssueImportCreateJiraDocument: ov, DeleteIssueImportDocument: rv, IssueImportProcessDocument: mv, UpdateIssueImportDocument: sv, CreateIssueLabelDocument: uv, DeleteIssueLabelDocument: kv, UpdateIssueLabelDocument: vv, CreateIssueRelationDocument: cv, DeleteIssueRelationDocument: pv, UpdateIssueRelationDocument: Nv, IssueReminderDocument: hv, IssueRemoveLabelDocument: fv, IssueSubscribeDocument: yv, UnarchiveIssueDocument: Sv, IssueUnsubscribeDocument: bv, UpdateIssueDocument: gv, JoinOrganizationFromOnboardingDocument: Fv, LeaveOrganizationDocument: Dv, LogoutDocument: _v, LogoutAllSessionsDocument: Vv, LogoutOtherSessionsDocument: Av, LogoutSessionDocument: Tv, ArchiveNotificationDocument: Iv, NotificationArchiveAllDocument: wv, UpdateNotificationCategoryChannelSubscriptionDocument: Cv, NotificationMarkReadAllDocument: Pv, NotificationMarkUnreadAllDocument: qv, NotificationSnoozeAllDocument: xv, CreateNotificationSubscriptionDocument: jv, DeleteNotificationSubscriptionDocument: Uv, UpdateNotificationSubscriptionDocument: Ov, UnarchiveNotificationDocument: Bv, NotificationUnsnoozeAllDocument: Rv, UpdateNotificationDocument: Ev, DeleteOrganizationCancelDocument: Mv, DeleteOrganizationDocument: Lv, OrganizationDeleteChallengeDocument: zv, DeleteOrganizationDomainDocument: Wv, CreateOrganizationInviteDocument: Hv, DeleteOrganizationInviteDocument: Qv, UpdateOrganizationInviteDocument: Gv, OrganizationStartTrialDocument: Jv, OrganizationStartTrialForPlanDocument: Kv, UpdateOrganizationDocument: $v, ProjectAddLabelDocument: Zv, ArchiveProjectDocument: Yv, CreateProjectDocument: Xv, DeleteProjectDocument: ec, CreateProjectLabelDocument: ic, DeleteProjectLabelDocument: nc, UpdateProjectLabelDocument: ac, CreateProjectMilestoneDocument: tc, DeleteProjectMilestoneDocument: dc, UpdateProjectMilestoneDocument: lc, CreateProjectRelationDocument: oc, DeleteProjectRelationDocument: rc, UpdateProjectRelationDocument: mc, ProjectRemoveLabelDocument: sc, ArchiveProjectStatusDocument: uc, CreateProjectStatusDocument: kc, UnarchiveProjectStatusDocument: vc, UpdateProjectStatusDocument: cc, UnarchiveProjectDocument: pc, UpdateProjectDocument: Nc, ArchiveProjectUpdateDocument: hc, CreateProjectUpdateDocument: fc, DeleteProjectUpdateDocument: yc, UnarchiveProjectUpdateDocument: Sc, UpdateProjectUpdateDocument: bc, CreatePushSubscriptionDocument: gc, DeletePushSubscriptionDocument: Fc, CreateReactionDocument: Dc, DeleteReactionDocument: _c, RefreshGoogleSheetsDataDocument: Vc, ResendOrganizationInviteDocument: Ac, ResendOrganizationInviteByEmailDocument: Tc, ArchiveRoadmapDocument: Ic, CreateRoadmapDocument: wc, DeleteRoadmapDocument: Cc, CreateRoadmapToProjectDocument: Pc, DeleteRoadmapToProjectDocument: qc, UpdateRoadmapToProjectDocument: xc, UnarchiveRoadmapDocument: jc, UpdateRoadmapDocument: Uc, SamlTokenUserAccountAuthDocument: Oc, CreateTeamDocument: Bc, DeleteTeamCyclesDocument: Rc, DeleteTeamDocument: Ec, DeleteTeamKeyDocument: Mc, CreateTeamMembershipDocument: Lc, DeleteTeamMembershipDocument: zc, UpdateTeamMembershipDocument: Wc, UnarchiveTeamDocument: Hc, UpdateTeamDocument: Qc, CreateTemplateDocument: Gc, DeleteTemplateDocument: Jc, UpdateTemplateDocument: Kc, CreateTimeScheduleDocument: $c, DeleteTimeScheduleDocument: Zc, TimeScheduleRefreshIntegrationScheduleDocument: Yc, UpdateTimeScheduleDocument: Xc, TimeScheduleUpsertExternalDocument: ep, CreateTriageResponsibilityDocument: ip, DeleteTriageResponsibilityDocument: np, UpdateTriageResponsibilityDocument: ap, UserDemoteAdminDocument: tp, UserDemoteMemberDocument: dp, UserDiscordConnectDocument: lp, UserExternalUserDisconnectDocument: op, UpdateUserFlagDocument: rp, UserPromoteAdminDocument: mp, UserPromoteMemberDocument: sp, UserSettingsFlagsResetDocument: up, UpdateUserSettingsDocument: kp, SuspendUserDocument: vp, UnsuspendUserDocument: cp, UpdateUserDocument: pp, CreateViewPreferencesDocument: Np, DeleteViewPreferencesDocument: hp, UpdateViewPreferencesDocument: fp, CreateWebhookDocument: yp, DeleteWebhookDocument: Sp, UpdateWebhookDocument: bp, ArchiveWorkflowStateDocument: gp, CreateWorkflowStateDocument: Fp, UpdateWorkflowStateDocument: Dp });
  function Ap(e2, i2) {
    var n2 = {};
    for (var a2 in e2)
      Object.prototype.hasOwnProperty.call(e2, a2) && i2.indexOf(a2) < 0 && (n2[a2] = e2[a2]);
    if (e2 != null && typeof Object.getOwnPropertySymbols == "function") {
      var t2 = 0;
      for (a2 = Object.getOwnPropertySymbols(e2);t2 < a2.length; t2++)
        i2.indexOf(a2[t2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, a2[t2]) && (n2[a2[t2]] = e2[a2[t2]]);
    }
    return n2;
  }
  function Tp(e2, i2, n2, a2) {
    return new (n2 || (n2 = Promise))(function(t2, d2) {
      function l2(e3) {
        try {
          r2(a2.next(e3));
        } catch (e4) {
          d2(e4);
        }
      }
      function o2(e3) {
        try {
          r2(a2.throw(e3));
        } catch (e4) {
          d2(e4);
        }
      }
      function r2(e3) {
        var i3;
        e3.done ? t2(e3.value) : (i3 = e3.value, i3 instanceof n2 ? i3 : new n2(function(e4) {
          e4(i3);
        })).then(l2, o2);
      }
      r2((a2 = a2.apply(e2, i2 || [])).next());
    });
  }

  class Ip {
    constructor(e2) {
      this._request = e2;
    }
    paginate(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = e2.bind(this);
        let a2 = yield n2(i2);
        const t2 = a2.nodes;
        for (;a2.pageInfo.hasNextPage; )
          a2 = yield n2(Object.assign(Object.assign({ first: 50 }, i2), { after: a2.pageInfo.endCursor })), t2.push(...a2.nodes);
        return t2;
      });
    }
  }
  function wp(e2) {
    var i2, n2;
    return Object.assign(Object.assign({}, e2), { first: (i2 = e2.first) !== null && i2 !== undefined ? i2 : e2.after ? 50 : undefined, last: (n2 = e2.last) !== null && n2 !== undefined ? n2 : e2.before ? 50 : undefined });
  }

  class Cp extends Ip {
    constructor(e2) {
      super(e2), this.pageInfo = new by(e2, { hasNextPage: false, hasPreviousPage: false, __typename: "PageInfo" }), this.nodes = [];
    }
  }

  class Pp extends Cp {
    constructor(e2, i2, n2, a2) {
      super(e2), this._fetch = i2, this.nodes = n2, this.pageInfo = a2;
    }
    _appendNodes(e2) {
      var i2;
      this.nodes = e2 ? [...(i2 = this.nodes) !== null && i2 !== undefined ? i2 : [], ...e2] : this.nodes;
    }
    _prependNodes(e2) {
      var i2;
      this.nodes = e2 ? [...e2, ...(i2 = this.nodes) !== null && i2 !== undefined ? i2 : []] : this.nodes;
    }
    _appendPageInfo(e2) {
      var i2, n2;
      this.pageInfo && (this.pageInfo.endCursor = (i2 = e2 == null ? undefined : e2.endCursor) !== null && i2 !== undefined ? i2 : this.pageInfo.startCursor, this.pageInfo.hasNextPage = (n2 = e2 == null ? undefined : e2.hasNextPage) !== null && n2 !== undefined ? n2 : this.pageInfo.hasNextPage);
    }
    _prependPageInfo(e2) {
      var i2, n2;
      this.pageInfo && (this.pageInfo.startCursor = (i2 = e2 == null ? undefined : e2.startCursor) !== null && i2 !== undefined ? i2 : this.pageInfo.startCursor, this.pageInfo.hasPreviousPage = (n2 = e2 == null ? undefined : e2.hasPreviousPage) !== null && n2 !== undefined ? n2 : this.pageInfo.hasPreviousPage);
    }
    fetchNext() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        if ((e2 = this.pageInfo) === null || e2 === undefined ? undefined : e2.hasNextPage) {
          const e3 = yield this._fetch({ after: (i2 = this.pageInfo) === null || i2 === undefined ? undefined : i2.endCursor });
          this._appendNodes(e3 == null ? undefined : e3.nodes), this._appendPageInfo(e3 == null ? undefined : e3.pageInfo);
        }
        return Promise.resolve(this);
      });
    }
    fetchPrevious() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        if ((e2 = this.pageInfo) === null || e2 === undefined ? undefined : e2.hasPreviousPage) {
          const e3 = yield this._fetch({ before: (i2 = this.pageInfo) === null || i2 === undefined ? undefined : i2.startCursor });
          this._prependNodes(e3 == null ? undefined : e3.nodes), this._prependPageInfo(e3 == null ? undefined : e3.pageInfo);
        }
        return Promise.resolve(this);
      });
    }
  }
  function qp(e2) {
    try {
      return e2 ? new Date(e2) : undefined;
    } catch (e3) {
      return;
    }
  }
  function xp(e2) {
    try {
      return e2 ? JSON.parse(e2) : undefined;
    } catch (e3) {
      return;
    }
  }

  class jp extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.avatarUrl = (n2 = i2.avatarUrl) !== null && n2 !== undefined ? n2 : undefined, this.id = (a2 = i2.id) !== null && a2 !== undefined ? a2 : undefined, this.name = (t2 = i2.name) !== null && t2 !== undefined ? t2 : undefined, this.subType = (d2 = i2.subType) !== null && d2 !== undefined ? d2 : undefined, this.type = i2.type, this.userDisplayName = (l2 = i2.userDisplayName) !== null && l2 !== undefined ? l2 : undefined;
    }
  }

  class Up extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.content = i2.content, this._agentContext = (d2 = i2.agentContext) !== null && d2 !== undefined ? d2 : undefined, this._agentSession = i2.agentSession, this._sourceComment = (l2 = i2.sourceComment) !== null && l2 !== undefined ? l2 : undefined;
    }
    get agentContext() {
      var e2, i2;
      return ((e2 = this._agentContext) === null || e2 === undefined ? undefined : e2.id) ? new gb(this._request).fetch((i2 = this._agentContext) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get agentContextId() {
      var e2;
      return (e2 = this._agentContext) === null || e2 === undefined ? undefined : e2.id;
    }
    get agentSession() {
      return new Db(this._request).fetch(this._agentSession.id);
    }
    get agentSessionId() {
      var e2;
      return (e2 = this._agentSession) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceComment() {
      var e2, i2;
      return ((e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._sourceComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get sourceCommentId() {
      var e2;
      return (e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new jF(this._request).fetch(e2);
    }
  }

  class Op extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Up(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Bp extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._agentActivity = i2.agentActivity;
    }
    get agentActivity() {
      return new bb(this._request).fetch(this._agentActivity.id);
    }
    get agentActivityId() {
      var e2;
      return (e2 = this._agentActivity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Rp {
    constructor(e2) {
      var i2;
      this.agentSessionId = e2.agentSessionId, this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.content = e2.content, this.createdAt = e2.createdAt, this.id = e2.id, this.updatedAt = e2.updatedAt;
    }
  }

  class Ep extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.endedAt = (t2 = qp(i2.endedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.sourceMetadata = (d2 = xp(i2.sourceMetadata)) !== null && d2 !== undefined ? d2 : undefined, this.startedAt = (l2 = qp(i2.startedAt)) !== null && l2 !== undefined ? l2 : undefined, this.summary = (o2 = i2.summary) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.activities = i2.activities.map((i3) => new Up(e2, i3)), this.links = i2.links.map((i3) => new ph(e2, i3)), this.status = i2.status, this.type = i2.type, this._appUser = i2.appUser, this._comment = (m2 = i2.comment) !== null && m2 !== undefined ? m2 : undefined, this._creator = (s2 = i2.creator) !== null && s2 !== undefined ? s2 : undefined, this._issue = (u2 = i2.issue) !== null && u2 !== undefined ? u2 : undefined;
    }
    get appUser() {
      return new VF(this._request).fetch(this._appUser.id);
    }
    get appUserId() {
      var e2;
      return (e2 = this._appUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get commentId() {
      var e2;
      return (e2 = this._comment) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new UF(this._request).fetch(e2);
    }
    update(e2) {
      return new OF(this._request).fetch(this.id, e2);
    }
  }

  class Mp extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Ep(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Lp extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._agentContext = i2.agentContext;
    }
    get agentContext() {
      return new gb(this._request).fetch(this._agentContext.id);
    }
    get agentContextId() {
      var e2;
      return (e2 = this._agentContext) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class zp extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.endedAt = (t2 = qp(i2.endedAt)) !== null && t2 !== undefined ? t2 : undefined, this.externalLink = (d2 = i2.externalLink) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.sourceMetadata = (l2 = xp(i2.sourceMetadata)) !== null && l2 !== undefined ? l2 : undefined, this.startedAt = (o2 = qp(i2.startedAt)) !== null && o2 !== undefined ? o2 : undefined, this.summary = (r2 = i2.summary) !== null && r2 !== undefined ? r2 : undefined, this.updatedAt = (m2 = qp(i2.updatedAt)) !== null && m2 !== undefined ? m2 : new Date, this.status = i2.status, this.type = i2.type, this._appUser = i2.appUser, this._comment = (s2 = i2.comment) !== null && s2 !== undefined ? s2 : undefined, this._creator = (u2 = i2.creator) !== null && u2 !== undefined ? u2 : undefined, this._issue = (k2 = i2.issue) !== null && k2 !== undefined ? k2 : undefined;
    }
    get appUser() {
      return new VF(this._request).fetch(this._appUser.id);
    }
    get appUserId() {
      var e2;
      return (e2 = this._appUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get commentId() {
      var e2;
      return (e2 = this._comment) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    activities(e2) {
      return new UT(this._request, this.id, e2).fetch(e2);
    }
  }

  class Wp extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new zp(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Hp extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._agentSession = i2.agentSession;
    }
    get agentSession() {
      return new Db(this._request).fetch(this._agentSession.id);
    }
    get agentSessionId() {
      var e2;
      return (e2 = this._agentSession) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Qp {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2;
      this.appUserId = e2.appUserId, this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.commentId = (n2 = e2.commentId) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.creatorId = e2.creatorId, this.endedAt = (a2 = e2.endedAt) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = (t2 = e2.issueId) !== null && t2 !== undefined ? t2 : undefined, this.organizationId = e2.organizationId, this.sourceMetadata = (d2 = e2.sourceMetadata) !== null && d2 !== undefined ? d2 : undefined, this.startedAt = (l2 = e2.startedAt) !== null && l2 !== undefined ? l2 : undefined, this.status = e2.status, this.summary = (o2 = e2.summary) !== null && o2 !== undefined ? o2 : undefined, this.type = e2.type, this.updatedAt = e2.updatedAt, this.comment = e2.comment ? new sN(e2.comment) : undefined, this.creator = new eb(e2.creator), this.issue = e2.issue ? new Qf(e2.issue) : undefined;
    }
  }

  class Gp extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.label = i2.label, this.requestedSyncGroups = (t2 = i2.requestedSyncGroups) !== null && t2 !== undefined ? t2 : undefined, this.scope = (d2 = i2.scope) !== null && d2 !== undefined ? d2 : undefined, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class Jp extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Gp(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Kp extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.clientId = i2.clientId, this.description = (n2 = i2.description) !== null && n2 !== undefined ? n2 : undefined, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = (a2 = i2.imageUrl) !== null && a2 !== undefined ? a2 : undefined, this.name = i2.name;
    }
  }

  class $p extends Ip {
    constructor(e2, i2) {
      super(e2), this.archive = i2.archive, this.databaseVersion = i2.databaseVersion, this.includesDependencies = i2.includesDependencies, this.totalCount = i2.totalCount;
    }
  }

  class Zp extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.mapping = new DS(e2, i2.mapping), this._integration = (n2 = i2.integration) !== null && n2 !== undefined ? n2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Yp extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.bodyData = (a2 = i2.bodyData) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.groupBySource = i2.groupBySource, this.id = i2.id, this.metadata = i2.metadata, this.source = (d2 = i2.source) !== null && d2 !== undefined ? d2 : undefined, this.sourceType = (l2 = i2.sourceType) !== null && l2 !== undefined ? l2 : undefined, this.subtitle = (o2 = i2.subtitle) !== null && o2 !== undefined ? o2 : undefined, this.title = i2.title, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.url = i2.url, this._creator = (m2 = i2.creator) !== null && m2 !== undefined ? m2 : undefined, this._externalUserCreator = (s2 = i2.externalUserCreator) !== null && s2 !== undefined ? s2 : undefined, this._issue = i2.issue, this._originalIssue = (u2 = i2.originalIssue) !== null && u2 !== undefined ? u2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserCreator() {
      var e2, i2;
      return ((e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserCreator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserCreatorId() {
      var e2;
      return (e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      return new Fg(this._request).fetch(this._issue.id);
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get originalIssue() {
      var e2, i2;
      return ((e2 = this._originalIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._originalIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get originalIssueId() {
      var e2;
      return (e2 = this._originalIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new EF(this._request).fetch(e2);
    }
    delete() {
      return new MF(this._request).fetch(this.id);
    }
    update(e2) {
      return new eD(this._request).fetch(this.id, e2);
    }
  }

  class Xp extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Yp(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class eN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._attachment = i2.attachment;
    }
    get attachment() {
      return new Ib(this._request).fetch(this._attachment.id);
    }
    get attachmentId() {
      var e2;
      return (e2 = this._attachment) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class iN {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (n2 = e2.creatorId) !== null && n2 !== undefined ? n2 : undefined, this.externalUserCreatorId = (a2 = e2.externalUserCreatorId) !== null && a2 !== undefined ? a2 : undefined, this.groupBySource = e2.groupBySource, this.id = e2.id, this.issueId = e2.issueId, this.metadata = e2.metadata, this.originalIssueId = (t2 = e2.originalIssueId) !== null && t2 !== undefined ? t2 : undefined, this.source = (d2 = e2.source) !== null && d2 !== undefined ? d2 : undefined, this.sourceType = (l2 = e2.sourceType) !== null && l2 !== undefined ? l2 : undefined, this.subtitle = (o2 = e2.subtitle) !== null && o2 !== undefined ? o2 : undefined, this.title = e2.title, this.updatedAt = e2.updatedAt, this.url = e2.url;
    }
  }

  class nN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.actorId = (n2 = i2.actorId) !== null && n2 !== undefined ? n2 : undefined, this.archivedAt = (a2 = qp(i2.archivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.countryCode = (t2 = i2.countryCode) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.id = i2.id, this.ip = (l2 = i2.ip) !== null && l2 !== undefined ? l2 : undefined, this.metadata = (o2 = i2.metadata) !== null && o2 !== undefined ? o2 : undefined, this.requestInformation = (r2 = i2.requestInformation) !== null && r2 !== undefined ? r2 : undefined, this.type = i2.type, this.updatedAt = (m2 = qp(i2.updatedAt)) !== null && m2 !== undefined ? m2 : new Date, this._actor = (s2 = i2.actor) !== null && s2 !== undefined ? s2 : undefined;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class aN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new nN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class tN extends Ip {
    constructor(e2, i2) {
      super(e2), this.description = i2.description, this.type = i2.type;
    }
  }

  class dN extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.deletionRequestedAt = (n2 = qp(i2.deletionRequestedAt)) !== null && n2 !== undefined ? n2 : undefined, this.enabled = i2.enabled, this.id = i2.id, this.logoUrl = (a2 = i2.logoUrl) !== null && a2 !== undefined ? a2 : undefined, this.name = i2.name, this.previousUrlKeys = i2.previousUrlKeys, this.region = i2.region, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.serviceId = i2.serviceId, this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.releaseChannel = i2.releaseChannel;
    }
  }

  class lN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.allowDomainAccess = (n2 = i2.allowDomainAccess) !== null && n2 !== undefined ? n2 : undefined, this.email = i2.email, this.id = i2.id, this.lastUsedOrganizationId = (a2 = i2.lastUsedOrganizationId) !== null && a2 !== undefined ? a2 : undefined, this.token = (t2 = i2.token) !== null && t2 !== undefined ? t2 : undefined, this.availableOrganizations = i2.availableOrganizations ? i2.availableOrganizations.map((i3) => new dN(e2, i3)) : undefined, this.lockedOrganizations = i2.lockedOrganizations ? i2.lockedOrganizations.map((i3) => new dN(e2, i3)) : undefined, this.lockedUsers = i2.lockedUsers.map((i3) => new oN(e2, i3)), this.users = i2.users.map((i3) => new oN(e2, i3));
    }
  }

  class oN extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.active = i2.active, this.avatarUrl = (n2 = i2.avatarUrl) !== null && n2 !== undefined ? n2 : undefined, this.displayName = i2.displayName, this.email = i2.email, this.id = i2.id, this.name = i2.name, this.userAccountId = i2.userAccountId, this.organization = new dN(e2, i2.organization), this.role = i2.role;
    }
  }

  class rN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2;
      super(e2), this.browserType = (n2 = i2.browserType) !== null && n2 !== undefined ? n2 : undefined, this.client = (a2 = i2.client) !== null && a2 !== undefined ? a2 : undefined, this.countryCodes = i2.countryCodes, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.id = i2.id, this.ip = (d2 = i2.ip) !== null && d2 !== undefined ? d2 : undefined, this.isCurrentSession = i2.isCurrentSession, this.lastActiveAt = (l2 = qp(i2.lastActiveAt)) !== null && l2 !== undefined ? l2 : undefined, this.location = (o2 = i2.location) !== null && o2 !== undefined ? o2 : undefined, this.locationCity = (r2 = i2.locationCity) !== null && r2 !== undefined ? r2 : undefined, this.locationCountry = (m2 = i2.locationCountry) !== null && m2 !== undefined ? m2 : undefined, this.locationCountryCode = (s2 = i2.locationCountryCode) !== null && s2 !== undefined ? s2 : undefined, this.locationRegionCode = (u2 = i2.locationRegionCode) !== null && u2 !== undefined ? u2 : undefined, this.name = i2.name, this.operatingSystem = (k2 = i2.operatingSystem) !== null && k2 !== undefined ? k2 : undefined, this.service = (v2 = i2.service) !== null && v2 !== undefined ? v2 : undefined, this.updatedAt = (c2 = qp(i2.updatedAt)) !== null && c2 !== undefined ? c2 : new Date, this.userAgent = (p2 = i2.userAgent) !== null && p2 !== undefined ? p2 : undefined, this.type = i2.type;
    }
  }

  class mN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.body = i2.body, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.editedAt = (t2 = qp(i2.editedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.quotedText = (d2 = i2.quotedText) !== null && d2 !== undefined ? d2 : undefined, this.reactionData = i2.reactionData, this.resolvedAt = (l2 = qp(i2.resolvedAt)) !== null && l2 !== undefined ? l2 : undefined, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this.url = i2.url, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.documentContent = i2.documentContent ? new YN(e2, i2.documentContent) : undefined, this.externalThread = i2.externalThread ? new AS(e2, i2.externalThread) : undefined, this.reactions = i2.reactions.map((i3) => new uS(e2, i3)), this.syncedWith = i2.syncedWith ? i2.syncedWith.map((i3) => new fh(e2, i3)) : undefined, this._externalUser = (r2 = i2.externalUser) !== null && r2 !== undefined ? r2 : undefined, this._initiativeUpdate = (m2 = i2.initiativeUpdate) !== null && m2 !== undefined ? m2 : undefined, this._issue = (s2 = i2.issue) !== null && s2 !== undefined ? s2 : undefined, this._parent = (u2 = i2.parent) !== null && u2 !== undefined ? u2 : undefined, this._projectUpdate = (k2 = i2.projectUpdate) !== null && k2 !== undefined ? k2 : undefined, this._resolvingComment = (v2 = i2.resolvingComment) !== null && v2 !== undefined ? v2 : undefined, this._resolvingUser = (c2 = i2.resolvingUser) !== null && c2 !== undefined ? c2 : undefined, this._user = (p2 = i2.user) !== null && p2 !== undefined ? p2 : undefined;
    }
    get externalUser() {
      var e2, i2;
      return ((e2 = this._externalUser) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserId() {
      var e2;
      return (e2 = this._externalUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiativeUpdate() {
      var e2, i2;
      return ((e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._initiativeUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeUpdateId() {
      var e2;
      return (e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._parent) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectUpdate() {
      var e2, i2;
      return ((e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._projectUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectUpdateId() {
      var e2;
      return (e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get resolvingComment() {
      var e2, i2;
      return ((e2 = this._resolvingComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._resolvingComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get resolvingCommentId() {
      var e2;
      return (e2 = this._resolvingComment) === null || e2 === undefined ? undefined : e2.id;
    }
    get resolvingUser() {
      var e2, i2;
      return ((e2 = this._resolvingUser) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._resolvingUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get resolvingUserId() {
      var e2;
      return (e2 = this._resolvingUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    children(e2) {
      return new OT(this._request, e2).fetch(e2);
    }
    create(e2) {
      return new iD(this._request).fetch(e2);
    }
    delete() {
      return new nD(this._request).fetch(this.id);
    }
    update(e2) {
      return new dD(this._request).fetch(this.id, e2);
    }
  }

  class sN {
    constructor(e2) {
      var i2, n2, a2, t2, d2;
      this.body = e2.body, this.documentContentId = (i2 = e2.documentContentId) !== null && i2 !== undefined ? i2 : undefined, this.id = e2.id, this.initiativeUpdateId = (n2 = e2.initiativeUpdateId) !== null && n2 !== undefined ? n2 : undefined, this.issueId = (a2 = e2.issueId) !== null && a2 !== undefined ? a2 : undefined, this.projectUpdateId = (t2 = e2.projectUpdateId) !== null && t2 !== undefined ? t2 : undefined, this.userId = (d2 = e2.userId) !== null && d2 !== undefined ? d2 : undefined;
    }
  }

  class uN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new mN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class kN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._comment = i2.comment;
    }
    get comment() {
      return new Ob(this._request).fetch({ id: this._comment.id });
    }
    get commentId() {
      var e2;
      return (e2 = this._comment) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class vN extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class cN extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class pN extends Ip {
    constructor(e2, i2) {
      super(e2), this.organization = new dN(e2, i2.organization), this.user = new oN(e2, i2.user);
    }
  }

  class NN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = (a2 = i2.color) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.description = (d2 = i2.description) !== null && d2 !== undefined ? d2 : undefined, this.feedItemFilterData = (l2 = i2.feedItemFilterData) !== null && l2 !== undefined ? l2 : undefined, this.filterData = i2.filterData, this.filters = i2.filters, this.icon = (o2 = i2.icon) !== null && o2 !== undefined ? o2 : undefined, this.id = i2.id, this.modelName = i2.modelName, this.name = i2.name, this.projectFilterData = (r2 = i2.projectFilterData) !== null && r2 !== undefined ? r2 : undefined, this.shared = i2.shared, this.slugId = (m2 = i2.slugId) !== null && m2 !== undefined ? m2 : undefined, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date, this.organizationViewPreferences = i2.organizationViewPreferences ? new rb(e2, i2.organizationViewPreferences) : undefined, this.userViewPreferences = i2.userViewPreferences ? new rb(e2, i2.userViewPreferences) : undefined, this.viewPreferencesValues = i2.viewPreferencesValues ? new sb(e2, i2.viewPreferencesValues) : undefined, this._creator = i2.creator, this._owner = i2.owner, this._team = (u2 = i2.team) !== null && u2 !== undefined ? u2 : undefined, this._updatedBy = (k2 = i2.updatedBy) !== null && k2 !== undefined ? k2 : undefined;
    }
    get creator() {
      return new VF(this._request).fetch(this._creator.id);
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get owner() {
      return new VF(this._request).fetch(this._owner.id);
    }
    get ownerId() {
      var e2;
      return (e2 = this._owner) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get updatedBy() {
      var e2, i2;
      return ((e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._updatedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get updatedById() {
      var e2;
      return (e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id;
    }
    issues(e2) {
      return new BT(this._request, this.id, e2).fetch(e2);
    }
    projects(e2) {
      return new RT(this._request, this.id, e2).fetch(e2);
    }
    create(e2) {
      return new uD(this._request).fetch(e2);
    }
    delete() {
      return new kD(this._request).fetch(this.id);
    }
    update(e2) {
      return new vD(this._request).fetch(this.id, e2);
    }
  }

  class hN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new NN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class fN extends Ip {
    constructor(e2, i2) {
      super(e2), this.hasSubscribers = i2.hasSubscribers;
    }
  }

  class yN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = i2.customView, this._customer = (o2 = i2.customer) !== null && o2 !== undefined ? o2 : undefined, this._cycle = (r2 = i2.cycle) !== null && r2 !== undefined ? r2 : undefined, this._initiative = (m2 = i2.initiative) !== null && m2 !== undefined ? m2 : undefined, this._label = (s2 = i2.label) !== null && s2 !== undefined ? s2 : undefined, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      return new Rb(this._request).fetch(this._customView.id);
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class SN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._customView = i2.customView;
    }
    get customView() {
      return new Rb(this._request).fetch(this._customView.id);
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class bN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.approximateNeedCount = i2.approximateNeedCount, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.domains = i2.domains, this.externalIds = i2.externalIds, this.id = i2.id, this.logoUrl = (t2 = i2.logoUrl) !== null && t2 !== undefined ? t2 : undefined, this.mainSourceId = (d2 = i2.mainSourceId) !== null && d2 !== undefined ? d2 : undefined, this.name = i2.name, this.revenue = (l2 = i2.revenue) !== null && l2 !== undefined ? l2 : undefined, this.size = (o2 = i2.size) !== null && o2 !== undefined ? o2 : undefined, this.slackChannelId = (r2 = i2.slackChannelId) !== null && r2 !== undefined ? r2 : undefined, this.slugId = i2.slugId, this.updatedAt = (m2 = qp(i2.updatedAt)) !== null && m2 !== undefined ? m2 : new Date, this._integration = (s2 = i2.integration) !== null && s2 !== undefined ? s2 : undefined, this._owner = (u2 = i2.owner) !== null && u2 !== undefined ? u2 : undefined, this._status = i2.status, this._tier = (k2 = i2.tier) !== null && k2 !== undefined ? k2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
    get owner() {
      var e2, i2;
      return ((e2 = this._owner) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._owner) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get ownerId() {
      var e2;
      return (e2 = this._owner) === null || e2 === undefined ? undefined : e2.id;
    }
    get status() {
      return new Hb(this._request).fetch(this._status.id);
    }
    get statusId() {
      var e2;
      return (e2 = this._status) === null || e2 === undefined ? undefined : e2.id;
    }
    get tier() {
      var e2, i2;
      return ((e2 = this._tier) === null || e2 === undefined ? undefined : e2.id) ? new Gb(this._request).fetch((i2 = this._tier) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get tierId() {
      var e2;
      return (e2 = this._tier) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new cD(this._request).fetch(e2);
    }
    delete() {
      return new pD(this._request).fetch(this.id);
    }
    update(e2) {
      return new ID(this._request).fetch(this.id, e2);
    }
  }

  class gN {
    constructor(e2) {
      this.domains = e2.domains, this.externalIds = e2.externalIds, this.id = e2.id, this.name = e2.name;
    }
  }

  class FN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new bN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class DN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.body = (a2 = i2.body) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.id = i2.id, this.priority = i2.priority, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this.url = (l2 = i2.url) !== null && l2 !== undefined ? l2 : undefined, this._attachment = (o2 = i2.attachment) !== null && o2 !== undefined ? o2 : undefined, this._comment = (r2 = i2.comment) !== null && r2 !== undefined ? r2 : undefined, this._creator = (m2 = i2.creator) !== null && m2 !== undefined ? m2 : undefined, this._customer = (s2 = i2.customer) !== null && s2 !== undefined ? s2 : undefined, this._issue = (u2 = i2.issue) !== null && u2 !== undefined ? u2 : undefined, this._originalIssue = (k2 = i2.originalIssue) !== null && k2 !== undefined ? k2 : undefined, this._project = (v2 = i2.project) !== null && v2 !== undefined ? v2 : undefined;
    }
    get attachment() {
      var e2, i2;
      return ((e2 = this._attachment) === null || e2 === undefined ? undefined : e2.id) ? new Ib(this._request).fetch((i2 = this._attachment) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get attachmentId() {
      var e2;
      return (e2 = this._attachment) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get commentId() {
      var e2;
      return (e2 = this._comment) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get originalIssue() {
      var e2, i2;
      return ((e2 = this._originalIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._originalIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get originalIssueId() {
      var e2;
      return (e2 = this._originalIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    archive() {
      return new hD(this._request).fetch(this.id);
    }
    create(e2) {
      return new fD(this._request).fetch(e2);
    }
    delete(e2) {
      return new SD(this._request).fetch(this.id, e2);
    }
    unarchive() {
      return new bD(this._request).fetch(this.id);
    }
    update(e2) {
      return new gD(this._request).fetch(this.id, e2);
    }
  }

  class _N extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new zb(this._request).fetch({ id: (i2 = this._entity) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class VN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new DN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class AN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.customerNeedId = i2.customerNeedId, this.emailedAt = (t2 = qp(i2.emailedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.readAt = (d2 = qp(i2.readAt)) !== null && d2 !== undefined ? d2 : undefined, this.snoozedUntilAt = (l2 = qp(i2.snoozedUntilAt)) !== null && l2 !== undefined ? l2 : undefined, this.type = i2.type, this.unsnoozedAt = (o2 = qp(i2.unsnoozedAt)) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (m2 = i2.actor) !== null && m2 !== undefined ? m2 : undefined, this._customerNeed = i2.customerNeed, this._externalUserActor = (s2 = i2.externalUserActor) !== null && s2 !== undefined ? s2 : undefined, this._relatedIssue = (u2 = i2.relatedIssue) !== null && u2 !== undefined ? u2 : undefined, this._relatedProject = (k2 = i2.relatedProject) !== null && k2 !== undefined ? k2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get customerNeed() {
      return new zb(this._request).fetch({ id: this._customerNeed.id });
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedIssue() {
      var e2, i2;
      return ((e2 = this._relatedIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._relatedIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get relatedIssueId() {
      var e2;
      return (e2 = this._relatedIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedProject() {
      var e2, i2;
      return ((e2 = this._relatedProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._relatedProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get relatedProjectId() {
      var e2;
      return (e2 = this._relatedProject) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class TN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._need = i2.need;
    }
    get need() {
      return new zb(this._request).fetch({ id: this._need.id });
    }
    get needId() {
      var e2;
      return (e2 = this._need) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class IN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.updatedRelatedNeeds = i2.updatedRelatedNeeds.map((i3) => new DN(e2, i3)), this._need = i2.need;
    }
    get need() {
      return new zb(this._request).fetch({ id: this._need.id });
    }
    get needId() {
      var e2;
      return (e2 = this._need) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class wN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.customerId = i2.customerId, this.emailedAt = (t2 = qp(i2.emailedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.readAt = (d2 = qp(i2.readAt)) !== null && d2 !== undefined ? d2 : undefined, this.snoozedUntilAt = (l2 = qp(i2.snoozedUntilAt)) !== null && l2 !== undefined ? l2 : undefined, this.type = i2.type, this.unsnoozedAt = (o2 = qp(i2.unsnoozedAt)) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (m2 = i2.actor) !== null && m2 !== undefined ? m2 : undefined, this._customer = i2.customer, this._externalUserActor = (s2 = i2.externalUserActor) !== null && s2 !== undefined ? s2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      return new Lb(this._request).fetch(this._customer.id);
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class CN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = i2.customer, this._cycle = (r2 = i2.cycle) !== null && r2 !== undefined ? r2 : undefined, this._initiative = (m2 = i2.initiative) !== null && m2 !== undefined ? m2 : undefined, this._label = (s2 = i2.label) !== null && s2 !== undefined ? s2 : undefined, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      return new Lb(this._request).fetch(this._customer.id);
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class PN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._customer = i2.customer;
    }
    get customer() {
      return new Lb(this._request).fetch(this._customer.id);
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class qN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.displayName = i2.displayName, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this.type = (l2 = i2.type) !== null && l2 !== undefined ? l2 : undefined;
    }
    create(e2) {
      return new FD(this._request).fetch(e2);
    }
    delete() {
      return new DD(this._request).fetch(this.id);
    }
    update(e2) {
      return new _D(this._request).fetch(this.id, e2);
    }
  }

  class xN {
    constructor(e2) {
      var i2, n2;
      this.color = e2.color, this.description = (i2 = e2.description) !== null && i2 !== undefined ? i2 : undefined, this.displayName = e2.displayName, this.id = e2.id, this.name = e2.name, this.type = (n2 = e2.type) !== null && n2 !== undefined ? n2 : undefined;
    }
  }

  class jN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new qN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class UN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._status = i2.status;
    }
    get status() {
      return new Hb(this._request).fetch(this._status.id);
    }
    get statusId() {
      var e2;
      return (e2 = this._status) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ON extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.displayName = i2.displayName, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date;
    }
    create(e2) {
      return new VD(this._request).fetch(e2);
    }
    delete() {
      return new AD(this._request).fetch(this.id);
    }
    update(e2) {
      return new TD(this._request).fetch(this.id, e2);
    }
  }

  class BN {
    constructor(e2) {
      var i2;
      this.color = e2.color, this.description = (i2 = e2.description) !== null && i2 !== undefined ? i2 : undefined, this.displayName = e2.displayName, this.id = e2.id, this.name = e2.name;
    }
  }

  class RN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new ON(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class EN extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._tier = i2.tier;
    }
    get tier() {
      return new Gb(this._request).fetch(this._tier.id);
    }
    get tierId() {
      var e2;
      return (e2 = this._tier) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class MN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.autoArchivedAt = (a2 = qp(i2.autoArchivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.completedAt = (t2 = qp(i2.completedAt)) !== null && t2 !== undefined ? t2 : undefined, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.description = (l2 = i2.description) !== null && l2 !== undefined ? l2 : undefined, this.endsAt = (o2 = qp(i2.endsAt)) !== null && o2 !== undefined ? o2 : new Date, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.isActive = i2.isActive, this.isFuture = i2.isFuture, this.isNext = i2.isNext, this.isPast = i2.isPast, this.isPrevious = i2.isPrevious, this.issueCountHistory = i2.issueCountHistory, this.name = (r2 = i2.name) !== null && r2 !== undefined ? r2 : undefined, this.number = i2.number, this.progress = i2.progress, this.scopeHistory = i2.scopeHistory, this.startsAt = (m2 = qp(i2.startsAt)) !== null && m2 !== undefined ? m2 : new Date, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date, this._inheritedFrom = (u2 = i2.inheritedFrom) !== null && u2 !== undefined ? u2 : undefined, this._team = i2.team;
    }
    get inheritedFrom() {
      var e2, i2;
      return ((e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._inheritedFrom) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get inheritedFromId() {
      var e2;
      return (e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    issues(e2) {
      return new ET(this._request, this.id, e2).fetch(e2);
    }
    uncompletedIssuesUponClose(e2) {
      return new MT(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new CD(this._request).fetch(this.id);
    }
    create(e2) {
      return new PD(this._request).fetch(e2);
    }
    update(e2) {
      return new jD(this._request).fetch(this.id, e2);
    }
  }

  class LN extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class zN {
    constructor(e2) {
      var i2;
      this.endsAt = e2.endsAt, this.id = e2.id, this.name = (i2 = e2.name) !== null && i2 !== undefined ? i2 : undefined, this.number = e2.number, this.startsAt = e2.startsAt;
    }
  }

  class WN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new MN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class HN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = i2.cycle, this._initiative = (m2 = i2.initiative) !== null && m2 !== undefined ? m2 : undefined, this._label = (s2 = i2.label) !== null && s2 !== undefined ? s2 : undefined, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      return new $b(this._request).fetch(this._cycle.id);
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class QN extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._cycle = (n2 = i2.cycle) !== null && n2 !== undefined ? n2 : undefined;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class GN extends Ip {
    constructor(e2, i2) {
      super(e2), this.entityId = i2.entityId, this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class JN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = (a2 = i2.color) !== null && a2 !== undefined ? a2 : undefined, this.content = (t2 = i2.content) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.documentContentId = (l2 = i2.documentContentId) !== null && l2 !== undefined ? l2 : undefined, this.hiddenAt = (o2 = qp(i2.hiddenAt)) !== null && o2 !== undefined ? o2 : undefined, this.icon = (r2 = i2.icon) !== null && r2 !== undefined ? r2 : undefined, this.id = i2.id, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = (m2 = i2.trashed) !== null && m2 !== undefined ? m2 : undefined, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date, this.url = i2.url, this._creator = (u2 = i2.creator) !== null && u2 !== undefined ? u2 : undefined, this._initiative = (k2 = i2.initiative) !== null && k2 !== undefined ? k2 : undefined, this._lastAppliedTemplate = (v2 = i2.lastAppliedTemplate) !== null && v2 !== undefined ? v2 : undefined, this._project = (c2 = i2.project) !== null && c2 !== undefined ? c2 : undefined, this._updatedBy = (p2 = i2.updatedBy) !== null && p2 !== undefined ? p2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get updatedBy() {
      var e2, i2;
      return ((e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._updatedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get updatedById() {
      var e2;
      return (e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id;
    }
    comments(e2) {
      return new LT(this._request, this.id, e2).fetch(e2);
    }
    create(e2) {
      return new UD(this._request).fetch(e2);
    }
    delete() {
      return new OD(this._request).fetch(this.id);
    }
    unarchive() {
      return new BD(this._request).fetch(this.id);
    }
    update(e2) {
      return new RD(this._request).fetch(this.id, e2);
    }
  }

  class KN extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new Yb(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class $N {
    constructor(e2) {
      var i2, n2;
      this.id = e2.id, this.initiativeId = (i2 = e2.initiativeId) !== null && i2 !== undefined ? i2 : undefined, this.projectId = (n2 = e2.projectId) !== null && n2 !== undefined ? n2 : undefined, this.title = e2.title, this.initiative = e2.initiative ? new Rh(e2.initiative) : undefined, this.project = e2.project ? new Vy(e2.project) : undefined;
    }
  }

  class ZN extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new JN(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class YN extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.content = (a2 = i2.content) !== null && a2 !== undefined ? a2 : undefined, this.contentState = (t2 = i2.contentState) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.id = i2.id, this.restoredAt = (l2 = qp(i2.restoredAt)) !== null && l2 !== undefined ? l2 : undefined, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this._document = (r2 = i2.document) !== null && r2 !== undefined ? r2 : undefined, this._initiative = (m2 = i2.initiative) !== null && m2 !== undefined ? m2 : undefined, this._issue = (s2 = i2.issue) !== null && s2 !== undefined ? s2 : undefined, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._projectMilestone = (k2 = i2.projectMilestone) !== null && k2 !== undefined ? k2 : undefined;
    }
    get document() {
      var e2, i2;
      return ((e2 = this._document) === null || e2 === undefined ? undefined : e2.id) ? new Yb(this._request).fetch((i2 = this._document) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get documentId() {
      var e2;
      return (e2 = this._document) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectMilestone() {
      var e2, i2;
      return ((e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id) ? new $g(this._request).fetch((i2 = this._projectMilestone) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class XN {
    constructor(e2) {
      this.document = e2.document ? new $N(e2.document) : undefined, this.project = e2.project ? new Vy(e2.project) : undefined;
    }
  }

  class eh extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success, this.history = i2.history.map((i3) => new ih(e2, i3));
    }
  }

  class ih extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.actorIds = (n2 = i2.actorIds) !== null && n2 !== undefined ? n2 : undefined, this.contentDataSnapshotAt = (a2 = qp(i2.contentDataSnapshotAt)) !== null && a2 !== undefined ? a2 : new Date, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.id = i2.id;
    }
  }

  class nh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.documentId = i2.documentId, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.parentCommentId = (l2 = i2.parentCommentId) !== null && l2 !== undefined ? l2 : undefined, this.reactionEmoji = (o2 = i2.reactionEmoji) !== null && o2 !== undefined ? o2 : undefined, this.readAt = (r2 = qp(i2.readAt)) !== null && r2 !== undefined ? r2 : undefined, this.snoozedUntilAt = (m2 = qp(i2.snoozedUntilAt)) !== null && m2 !== undefined ? m2 : undefined, this.type = i2.type, this.unsnoozedAt = (s2 = qp(i2.unsnoozedAt)) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = (u2 = qp(i2.updatedAt)) !== null && u2 !== undefined ? u2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (k2 = i2.actor) !== null && k2 !== undefined ? k2 : undefined, this._externalUserActor = (v2 = i2.externalUserActor) !== null && v2 !== undefined ? v2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ah extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._document = i2.document;
    }
    get document() {
      return new Yb(this._request).fetch(this._document.id);
    }
    get documentId() {
      var e2;
      return (e2 = this._document) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class th extends Ip {
    constructor(e2, i2) {
      super(e2), this.totalCount = i2.totalCount, this.archivePayload = new $p(e2, i2.archivePayload), this.pageInfo = new by(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new dh(e2, i3));
    }
  }

  class dh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = (a2 = i2.color) !== null && a2 !== undefined ? a2 : undefined, this.content = (t2 = i2.content) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.documentContentId = (l2 = i2.documentContentId) !== null && l2 !== undefined ? l2 : undefined, this.hiddenAt = (o2 = qp(i2.hiddenAt)) !== null && o2 !== undefined ? o2 : undefined, this.icon = (r2 = i2.icon) !== null && r2 !== undefined ? r2 : undefined, this.id = i2.id, this.metadata = i2.metadata, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = (m2 = i2.trashed) !== null && m2 !== undefined ? m2 : undefined, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date, this.url = i2.url, this._creator = (u2 = i2.creator) !== null && u2 !== undefined ? u2 : undefined, this._initiative = (k2 = i2.initiative) !== null && k2 !== undefined ? k2 : undefined, this._lastAppliedTemplate = (v2 = i2.lastAppliedTemplate) !== null && v2 !== undefined ? v2 : undefined, this._project = (c2 = i2.project) !== null && c2 !== undefined ? c2 : undefined, this._updatedBy = (p2 = i2.updatedBy) !== null && p2 !== undefined ? p2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get updatedBy() {
      var e2, i2;
      return ((e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._updatedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get updatedById() {
      var e2;
      return (e2 = this._updatedBy) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class lh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.bodyData = (a2 = xp(i2.bodyData)) !== null && a2 !== undefined ? a2 : {}, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.data = (d2 = i2.data) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.isAutogenerated = i2.isAutogenerated, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this._customerNeed = (o2 = i2.customerNeed) !== null && o2 !== undefined ? o2 : undefined, this._initiative = (r2 = i2.initiative) !== null && r2 !== undefined ? r2 : undefined, this._initiativeUpdate = (m2 = i2.initiativeUpdate) !== null && m2 !== undefined ? m2 : undefined, this._issue = (s2 = i2.issue) !== null && s2 !== undefined ? s2 : undefined, this._parentComment = (u2 = i2.parentComment) !== null && u2 !== undefined ? u2 : undefined, this._project = (k2 = i2.project) !== null && k2 !== undefined ? k2 : undefined, this._projectUpdate = (v2 = i2.projectUpdate) !== null && v2 !== undefined ? v2 : undefined, this._user = i2.user;
    }
    get customerNeed() {
      var e2, i2;
      return ((e2 = this._customerNeed) === null || e2 === undefined ? undefined : e2.id) ? new zb(this._request).fetch({ id: (i2 = this._customerNeed) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get customerNeedId() {
      var e2;
      return (e2 = this._customerNeed) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiativeUpdate() {
      var e2, i2;
      return ((e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._initiativeUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeUpdateId() {
      var e2;
      return (e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get parentComment() {
      var e2, i2;
      return ((e2 = this._parentComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._parentComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get parentCommentId() {
      var e2;
      return (e2 = this._parentComment) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectUpdate() {
      var e2, i2;
      return ((e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._projectUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectUpdateId() {
      var e2;
      return (e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class oh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new lh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class rh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2;
      super(e2), this.address = i2.address, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.customerRequestsEnabled = i2.customerRequestsEnabled, this.enabled = i2.enabled, this.forwardingEmailAddress = (t2 = i2.forwardingEmailAddress) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.repliesEnabled = i2.repliesEnabled, this.senderName = (d2 = i2.senderName) !== null && d2 !== undefined ? d2 : undefined, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.sesDomainIdentity = i2.sesDomainIdentity ? new SS(e2, i2.sesDomainIdentity) : undefined, this.type = i2.type, this._creator = (o2 = i2.creator) !== null && o2 !== undefined ? o2 : undefined, this._team = (r2 = i2.team) !== null && r2 !== undefined ? r2 : undefined, this._template = (m2 = i2.template) !== null && m2 !== undefined ? m2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get template() {
      var e2, i2;
      return ((e2 = this._template) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._template) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get templateId() {
      var e2;
      return (e2 = this._template) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new ED(this._request).fetch(e2);
    }
    delete() {
      return new MD(this._request).fetch(this.id);
    }
    update(e2) {
      return new zD(this._request).fetch(this.id, e2);
    }
  }

  class mh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._emailIntakeAddress = i2.emailIntakeAddress;
    }
    get emailIntakeAddress() {
      return new ig(this._request).fetch(this._emailIntakeAddress.id);
    }
    get emailIntakeAddressId() {
      var e2;
      return (e2 = this._emailIntakeAddress) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class sh extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class uh extends Ip {
    constructor(e2, i2) {
      super(e2), this.authType = i2.authType, this.success = i2.success;
    }
  }

  class kh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.name = i2.name, this.source = i2.source, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.url = i2.url, this._creator = (d2 = i2.creator) !== null && d2 !== undefined ? d2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    create(e2) {
      return new GD(this._request).fetch(e2);
    }
    delete() {
      return new JD(this._request).fetch(this.id);
    }
  }

  class vh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new kh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class ch extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._emoji = i2.emoji;
    }
    get emoji() {
      return new ng(this._request).fetch(this._emoji.id);
    }
    get emojiId() {
      var e2;
      return (e2 = this._emoji) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ph extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.label = i2.label, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.url = i2.url, this._creator = i2.creator, this._initiative = (d2 = i2.initiative) !== null && d2 !== undefined ? d2 : undefined;
    }
    get creator() {
      return new VF(this._request).fetch(this._creator.id);
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new KD(this._request).fetch(e2);
    }
    delete() {
      return new $D(this._request).fetch(this.id);
    }
    update(e2) {
      return new ZD(this._request).fetch(this.id, e2);
    }
  }

  class Nh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new ph(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class hh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entityExternalLink = i2.entityExternalLink;
    }
    get entityExternalLink() {
      return new tg(this._request).fetch(this._entityExternalLink.id);
    }
    get entityExternalLinkId() {
      var e2;
      return (e2 = this._entityExternalLink) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class fh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.id = i2.id, this.service = i2.service, this.metadata = (n2 = i2.metadata) !== null && n2 !== undefined ? n2 : undefined;
    }
  }

  class yh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.avatarUrl = (a2 = i2.avatarUrl) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.displayName = i2.displayName, this.email = (d2 = i2.email) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.lastSeen = (l2 = qp(i2.lastSeen)) !== null && l2 !== undefined ? l2 : undefined, this.name = i2.name, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class Sh {
    constructor(e2) {
      this.email = e2.email, this.id = e2.id, this.name = e2.name;
    }
  }

  class bh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new yh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class gh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.folderName = (t2 = i2.folderName) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.predefinedViewType = (d2 = i2.predefinedViewType) !== null && d2 !== undefined ? d2 : undefined, this.sortOrder = i2.sortOrder, this.type = i2.type, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.url = (o2 = i2.url) !== null && o2 !== undefined ? o2 : undefined, this.initiativeTab = (r2 = i2.initiativeTab) !== null && r2 !== undefined ? r2 : undefined, this.projectTab = (m2 = i2.projectTab) !== null && m2 !== undefined ? m2 : undefined, this._customView = (s2 = i2.customView) !== null && s2 !== undefined ? s2 : undefined, this._customer = (u2 = i2.customer) !== null && u2 !== undefined ? u2 : undefined, this._cycle = (k2 = i2.cycle) !== null && k2 !== undefined ? k2 : undefined, this._document = (v2 = i2.document) !== null && v2 !== undefined ? v2 : undefined, this._initiative = (c2 = i2.initiative) !== null && c2 !== undefined ? c2 : undefined, this._issue = (p2 = i2.issue) !== null && p2 !== undefined ? p2 : undefined, this._label = (N2 = i2.label) !== null && N2 !== undefined ? N2 : undefined, this._owner = i2.owner, this._parent = (h2 = i2.parent) !== null && h2 !== undefined ? h2 : undefined, this._predefinedViewTeam = (f2 = i2.predefinedViewTeam) !== null && f2 !== undefined ? f2 : undefined, this._project = (y2 = i2.project) !== null && y2 !== undefined ? y2 : undefined, this._projectLabel = (S2 = i2.projectLabel) !== null && S2 !== undefined ? S2 : undefined, this._projectTeam = (b2 = i2.projectTeam) !== null && b2 !== undefined ? b2 : undefined, this._roadmap = (g2 = i2.roadmap) !== null && g2 !== undefined ? g2 : undefined, this._user = (F2 = i2.user) !== null && F2 !== undefined ? F2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get document() {
      var e2, i2;
      return ((e2 = this._document) === null || e2 === undefined ? undefined : e2.id) ? new Yb(this._request).fetch((i2 = this._document) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get documentId() {
      var e2;
      return (e2 = this._document) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get owner() {
      return new VF(this._request).fetch(this._owner.id);
    }
    get ownerId() {
      var e2;
      return (e2 = this._owner) === null || e2 === undefined ? undefined : e2.id;
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new og(this._request).fetch((i2 = this._parent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    get predefinedViewTeam() {
      var e2, i2;
      return ((e2 = this._predefinedViewTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._predefinedViewTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get predefinedViewTeamId() {
      var e2;
      return (e2 = this._predefinedViewTeam) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectLabel() {
      var e2, i2;
      return ((e2 = this._projectLabel) === null || e2 === undefined ? undefined : e2.id) ? new Jg(this._request).fetch((i2 = this._projectLabel) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectLabelId() {
      var e2;
      return (e2 = this._projectLabel) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectTeam() {
      var e2, i2;
      return ((e2 = this._projectTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._projectTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectTeamId() {
      var e2;
      return (e2 = this._projectTeam) === null || e2 === undefined ? undefined : e2.id;
    }
    get roadmap() {
      var e2, i2;
      return ((e2 = this._roadmap) === null || e2 === undefined ? undefined : e2.id) ? new oF(this._request).fetch((i2 = this._roadmap) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get roadmapId() {
      var e2;
      return (e2 = this._roadmap) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    children(e2) {
      return new zT(this._request, this.id, e2).fetch(e2);
    }
    create(e2) {
      return new YD(this._request).fetch(e2);
    }
    delete() {
      return new XD(this._request).fetch(this.id);
    }
    update(e2) {
      return new e_(this._request).fetch(this.id, e2);
    }
  }

  class Fh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new gh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Dh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._favorite = i2.favorite;
    }
    get favorite() {
      return new og(this._request).fetch(this._favorite.id);
    }
    get favoriteId() {
      var e2;
      return (e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class _h extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._attachment = i2.attachment;
    }
    get attachment() {
      return new Ib(this._request).fetch(this._attachment.id);
    }
    get attachmentId() {
      var e2;
      return (e2 = this._attachment) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Vh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.branchPattern = (a2 = i2.branchPattern) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.id = i2.id, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this.targetBranch = i2.targetBranch ? new Ih(e2, i2.targetBranch) : undefined, this.event = i2.event, this._state = (l2 = i2.state) !== null && l2 !== undefined ? l2 : undefined, this._team = i2.team;
    }
    get state() {
      var e2, i2;
      return ((e2 = this._state) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._state) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get stateId() {
      var e2;
      return (e2 = this._state) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new n_(this._request).fetch(e2);
    }
    delete() {
      return new a_(this._request).fetch(this.id);
    }
    update(e2) {
      return new t_(this._request).fetch(this.id, e2);
    }
  }

  class Ah extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Vh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Th extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.gitAutomationState = new Vh(e2, i2.gitAutomationState);
    }
  }

  class Ih extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.branchPattern = i2.branchPattern, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.isRegex = i2.isRegex, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._team = i2.team;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new d_(this._request).fetch(e2);
    }
    delete() {
      return new l_(this._request).fetch(this.id);
    }
    update(e2) {
      return new o_(this._request).fetch(this.id, e2);
    }
  }

  class wh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.targetBranch = new Ih(e2, i2.targetBranch);
    }
  }

  class Ch extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = (n2 = i2.integration) !== null && n2 !== undefined ? n2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Ph extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class qh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.installUrl = i2.installUrl, this.lastSyncId = i2.lastSyncId, this.setupUrl = i2.setupUrl, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = (n2 = i2.integration) !== null && n2 !== undefined ? n2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class xh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = (n2 = i2.integration) !== null && n2 !== undefined ? n2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class jh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.issuerEntityId = (t2 = i2.issuerEntityId) !== null && t2 !== undefined ? t2 : undefined, this.priority = (d2 = i2.priority) !== null && d2 !== undefined ? d2 : undefined, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.ssoBinding = (l2 = i2.ssoBinding) !== null && l2 !== undefined ? l2 : undefined, this.ssoEndpoint = (o2 = i2.ssoEndpoint) !== null && o2 !== undefined ? o2 : undefined, this.ssoSignAlgo = (r2 = i2.ssoSignAlgo) !== null && r2 !== undefined ? r2 : undefined, this.ssoSigningCert = (m2 = i2.ssoSigningCert) !== null && m2 !== undefined ? m2 : undefined, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date;
    }
  }

  class Uh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.url = (n2 = i2.url) !== null && n2 !== undefined ? n2 : undefined;
    }
  }

  class Oh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = (a2 = i2.color) !== null && a2 !== undefined ? a2 : undefined, this.completedAt = (t2 = qp(i2.completedAt)) !== null && t2 !== undefined ? t2 : undefined, this.content = (d2 = i2.content) !== null && d2 !== undefined ? d2 : undefined, this.createdAt = (l2 = qp(i2.createdAt)) !== null && l2 !== undefined ? l2 : new Date, this.description = (o2 = i2.description) !== null && o2 !== undefined ? o2 : undefined, this.healthUpdatedAt = (r2 = qp(i2.healthUpdatedAt)) !== null && r2 !== undefined ? r2 : undefined, this.icon = (m2 = i2.icon) !== null && m2 !== undefined ? m2 : undefined, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startedAt = (s2 = qp(i2.startedAt)) !== null && s2 !== undefined ? s2 : undefined, this.targetDate = (u2 = i2.targetDate) !== null && u2 !== undefined ? u2 : undefined, this.trashed = (k2 = i2.trashed) !== null && k2 !== undefined ? k2 : undefined, this.updateReminderFrequency = (v2 = i2.updateReminderFrequency) !== null && v2 !== undefined ? v2 : undefined, this.updateReminderFrequencyInWeeks = (c2 = i2.updateReminderFrequencyInWeeks) !== null && c2 !== undefined ? c2 : undefined, this.updateRemindersHour = (p2 = i2.updateRemindersHour) !== null && p2 !== undefined ? p2 : undefined, this.updatedAt = (N2 = qp(i2.updatedAt)) !== null && N2 !== undefined ? N2 : new Date, this.url = i2.url, this.documentContent = i2.documentContent ? new YN(e2, i2.documentContent) : undefined, this.frequencyResolution = i2.frequencyResolution, this.health = (h2 = i2.health) !== null && h2 !== undefined ? h2 : undefined, this.status = i2.status, this.targetDateResolution = (f2 = i2.targetDateResolution) !== null && f2 !== undefined ? f2 : undefined, this.updateRemindersDay = (y2 = i2.updateRemindersDay) !== null && y2 !== undefined ? y2 : undefined, this._creator = (S2 = i2.creator) !== null && S2 !== undefined ? S2 : undefined, this._integrationsSettings = (b2 = i2.integrationsSettings) !== null && b2 !== undefined ? b2 : undefined, this._lastUpdate = (g2 = i2.lastUpdate) !== null && g2 !== undefined ? g2 : undefined, this._owner = (F2 = i2.owner) !== null && F2 !== undefined ? F2 : undefined, this._parentInitiative = (D2 = i2.parentInitiative) !== null && D2 !== undefined ? D2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get integrationsSettings() {
      var e2, i2;
      return ((e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id) ? new gg(this._request).fetch((i2 = this._integrationsSettings) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationsSettingsId() {
      var e2;
      return (e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastUpdate() {
      var e2, i2;
      return ((e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._lastUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastUpdateId() {
      var e2;
      return (e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get owner() {
      var e2, i2;
      return ((e2 = this._owner) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._owner) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get ownerId() {
      var e2;
      return (e2 = this._owner) === null || e2 === undefined ? undefined : e2.id;
    }
    get parentInitiative() {
      var e2, i2;
      return ((e2 = this._parentInitiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._parentInitiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentInitiativeId() {
      var e2;
      return (e2 = this._parentInitiative) === null || e2 === undefined ? undefined : e2.id;
    }
    documents(e2) {
      return new WT(this._request, this.id, e2).fetch(e2);
    }
    history(e2) {
      return new HT(this._request, this.id, e2).fetch(e2);
    }
    links(e2) {
      return new QT(this._request, this.id, e2).fetch(e2);
    }
    projects(e2) {
      return new GT(this._request, this.id, e2).fetch(e2);
    }
    subInitiatives(e2) {
      return new JT(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new u_(this._request).fetch(this.id);
    }
    create(e2) {
      return new k_(this._request).fetch(e2);
    }
    delete() {
      return new v_(this._request).fetch(this.id);
    }
    unarchive() {
      return new S_(this._request).fetch(this.id);
    }
    update() {
      return new cg(this._request).fetch(this.id);
    }
  }

  class Bh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Rh {
    constructor(e2) {
      this.id = e2.id, this.name = e2.name, this.url = e2.url;
    }
  }

  class Eh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Oh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Mh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.entries = i2.entries, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._initiative = i2.initiative;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Lh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Mh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class zh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.initiativeId = i2.initiativeId, this.initiativeUpdateId = (l2 = i2.initiativeUpdateId) !== null && l2 !== undefined ? l2 : undefined, this.parentCommentId = (o2 = i2.parentCommentId) !== null && o2 !== undefined ? o2 : undefined, this.reactionEmoji = (r2 = i2.reactionEmoji) !== null && r2 !== undefined ? r2 : undefined, this.readAt = (m2 = qp(i2.readAt)) !== null && m2 !== undefined ? m2 : undefined, this.snoozedUntilAt = (s2 = qp(i2.snoozedUntilAt)) !== null && s2 !== undefined ? s2 : undefined, this.type = i2.type, this.unsnoozedAt = (u2 = qp(i2.unsnoozedAt)) !== null && u2 !== undefined ? u2 : undefined, this.updatedAt = (k2 = qp(i2.updatedAt)) !== null && k2 !== undefined ? k2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (v2 = i2.actor) !== null && v2 !== undefined ? v2 : undefined, this._comment = (c2 = i2.comment) !== null && c2 !== undefined ? c2 : undefined, this._document = (p2 = i2.document) !== null && p2 !== undefined ? p2 : undefined, this._externalUserActor = (N2 = i2.externalUserActor) !== null && N2 !== undefined ? N2 : undefined, this._initiative = (h2 = i2.initiative) !== null && h2 !== undefined ? h2 : undefined, this._initiativeUpdate = (f2 = i2.initiativeUpdate) !== null && f2 !== undefined ? f2 : undefined, this._parentComment = (y2 = i2.parentComment) !== null && y2 !== undefined ? y2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get document() {
      var e2, i2;
      return ((e2 = this._document) === null || e2 === undefined ? undefined : e2.id) ? new Yb(this._request).fetch((i2 = this._document) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get documentId() {
      var e2;
      return (e2 = this._document) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeUpdate() {
      var e2, i2;
      return ((e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._initiativeUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentComment() {
      var e2, i2;
      return ((e2 = this._parentComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._parentComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Wh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = i2.initiative, this._label = (s2 = i2.label) !== null && s2 !== undefined ? s2 : undefined, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Hh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiative = i2.initiative;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Qh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._initiative = i2.initiative, this._relatedInitiative = i2.relatedInitiative, this._user = (d2 = i2.user) !== null && d2 !== undefined ? d2 : undefined;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedInitiative() {
      return new mg(this._request).fetch(this._relatedInitiative.id);
    }
    get relatedInitiativeId() {
      var e2;
      return (e2 = this._relatedInitiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new c_(this._request).fetch(e2);
    }
    delete() {
      return new p_(this._request).fetch(this.id);
    }
    update(e2) {
      return new N_(this._request).fetch(this.id, e2);
    }
  }

  class Gh extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Qh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Jh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.initiativeRelation = new Qh(e2, i2.initiativeRelation);
    }
  }

  class Kh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._initiative = i2.initiative, this._project = i2.project;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new h_(this._request).fetch(e2);
    }
    delete() {
      return new f_(this._request).fetch(this.id);
    }
    update(e2) {
      return new y_(this._request).fetch(this.id, e2);
    }
  }

  class $h extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Kh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Zh extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiativeToProject = i2.initiativeToProject;
    }
    get initiativeToProject() {
      return new kg(this._request).fetch(this._initiativeToProject.id);
    }
    get initiativeToProjectId() {
      var e2;
      return (e2 = this._initiativeToProject) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Yh extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.body = i2.body, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.diff = (t2 = i2.diff) !== null && t2 !== undefined ? t2 : undefined, this.diffMarkdown = (d2 = i2.diffMarkdown) !== null && d2 !== undefined ? d2 : undefined, this.editedAt = (l2 = qp(i2.editedAt)) !== null && l2 !== undefined ? l2 : undefined, this.id = i2.id, this.isDiffHidden = i2.isDiffHidden, this.isStale = i2.isStale, this.reactionData = i2.reactionData, this.slugId = i2.slugId, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this.url = i2.url, this.reactions = i2.reactions.map((i3) => new uS(e2, i3)), this.health = i2.health, this._initiative = i2.initiative, this._user = i2.user;
    }
    get initiative() {
      return new mg(this._request).fetch(this._initiative.id);
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    comments(e2) {
      return new KT(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new g_(this._request).fetch(this.id);
    }
    create(e2) {
      return new F_(this._request).fetch(e2);
    }
    unarchive() {
      return new D_(this._request).fetch(this.id);
    }
    update(e2) {
      return new __(this._request).fetch(this.id, e2);
    }
  }

  class Xh extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ef {
    constructor(e2) {
      this.bodyData = e2.bodyData, this.editedAt = e2.editedAt, this.health = e2.health, this.id = e2.id;
    }
  }

  class nf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Yh(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class af extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiativeUpdate = i2.initiativeUpdate;
    }
    get initiativeUpdate() {
      return new cg(this._request).fetch(this._initiativeUpdate.id);
    }
    get initiativeUpdateId() {
      var e2;
      return (e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class tf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class df extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.service = i2.service, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._creator = i2.creator, this._team = (d2 = i2.team) !== null && d2 !== undefined ? d2 : undefined;
    }
    get creator() {
      return new VF(this._request).fetch(this._creator.id);
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    archive() {
      return new V_(this._request).fetch(this.id);
    }
    delete() {
      return new T_(this._request).fetch(this.id);
    }
  }

  class lf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new df(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class of extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.hasAllScopes = i2.hasAllScopes, this.missingScopes = (n2 = i2.missingScopes) !== null && n2 !== undefined ? n2 : undefined;
    }
  }

  class rf extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integration = (n2 = i2.integration) !== null && n2 !== undefined ? n2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class mf extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class sf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.foreignEntityId = (t2 = i2.foreignEntityId) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this._integration = i2.integration, this._template = i2.template;
    }
    get integration() {
      return new hg(this._request).fetch(this._integration.id);
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
    get template() {
      return new yF(this._request).fetch(this._template.id);
    }
    get templateId() {
      var e2;
      return (e2 = this._template) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new aV(this._request).fetch(e2);
    }
    delete() {
      return new tV(this._request).fetch(this.id);
    }
  }

  class uf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new sf(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class kf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationTemplate = i2.integrationTemplate;
    }
    get integrationTemplate() {
      return new yg(this._request).fetch(this._integrationTemplate.id);
    }
    get integrationTemplateId() {
      var e2;
      return (e2 = this._integrationTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class vf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.slackInitiativeUpdateCreated = (t2 = i2.slackInitiativeUpdateCreated) !== null && t2 !== undefined ? t2 : undefined, this.slackIssueAddedToTriage = (d2 = i2.slackIssueAddedToTriage) !== null && d2 !== undefined ? d2 : undefined, this.slackIssueAddedToView = (l2 = i2.slackIssueAddedToView) !== null && l2 !== undefined ? l2 : undefined, this.slackIssueCreated = (o2 = i2.slackIssueCreated) !== null && o2 !== undefined ? o2 : undefined, this.slackIssueNewComment = (r2 = i2.slackIssueNewComment) !== null && r2 !== undefined ? r2 : undefined, this.slackIssueSlaBreached = (m2 = i2.slackIssueSlaBreached) !== null && m2 !== undefined ? m2 : undefined, this.slackIssueSlaHighRisk = (s2 = i2.slackIssueSlaHighRisk) !== null && s2 !== undefined ? s2 : undefined, this.slackIssueStatusChangedAll = (u2 = i2.slackIssueStatusChangedAll) !== null && u2 !== undefined ? u2 : undefined, this.slackIssueStatusChangedDone = (k2 = i2.slackIssueStatusChangedDone) !== null && k2 !== undefined ? k2 : undefined, this.slackProjectUpdateCreated = (v2 = i2.slackProjectUpdateCreated) !== null && v2 !== undefined ? v2 : undefined, this.slackProjectUpdateCreatedToTeam = (c2 = i2.slackProjectUpdateCreatedToTeam) !== null && c2 !== undefined ? c2 : undefined, this.slackProjectUpdateCreatedToWorkspace = (p2 = i2.slackProjectUpdateCreatedToWorkspace) !== null && p2 !== undefined ? p2 : undefined, this.updatedAt = (N2 = qp(i2.updatedAt)) !== null && N2 !== undefined ? N2 : new Date, this.contextViewType = (h2 = i2.contextViewType) !== null && h2 !== undefined ? h2 : undefined, this._initiative = (f2 = i2.initiative) !== null && f2 !== undefined ? f2 : undefined, this._project = (y2 = i2.project) !== null && y2 !== undefined ? y2 : undefined, this._team = (S2 = i2.team) !== null && S2 !== undefined ? S2 : undefined;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new lV(this._request).fetch(e2);
    }
    update(e2) {
      return new oV(this._request).fetch(this.id, e2);
    }
  }

  class cf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationsSettings = i2.integrationsSettings;
    }
    get integrationsSettings() {
      return new gg(this._request).fetch(this._integrationsSettings.id);
    }
    get integrationsSettingsId() {
      var e2;
      return (e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class pf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2, w2, C2, P2, q2, x2, j2, U2, O2, B2, R2;
      super(e2), this.addedToCycleAt = (n2 = qp(i2.addedToCycleAt)) !== null && n2 !== undefined ? n2 : undefined, this.addedToProjectAt = (a2 = qp(i2.addedToProjectAt)) !== null && a2 !== undefined ? a2 : undefined, this.addedToTeamAt = (t2 = qp(i2.addedToTeamAt)) !== null && t2 !== undefined ? t2 : undefined, this.archivedAt = (d2 = qp(i2.archivedAt)) !== null && d2 !== undefined ? d2 : undefined, this.autoArchivedAt = (l2 = qp(i2.autoArchivedAt)) !== null && l2 !== undefined ? l2 : undefined, this.autoClosedAt = (o2 = qp(i2.autoClosedAt)) !== null && o2 !== undefined ? o2 : undefined, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = (r2 = qp(i2.canceledAt)) !== null && r2 !== undefined ? r2 : undefined, this.completedAt = (m2 = qp(i2.completedAt)) !== null && m2 !== undefined ? m2 : undefined, this.createdAt = (s2 = qp(i2.createdAt)) !== null && s2 !== undefined ? s2 : new Date, this.customerTicketCount = i2.customerTicketCount, this.description = (u2 = i2.description) !== null && u2 !== undefined ? u2 : undefined, this.dueDate = (k2 = i2.dueDate) !== null && k2 !== undefined ? k2 : undefined, this.estimate = (v2 = i2.estimate) !== null && v2 !== undefined ? v2 : undefined, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.reactionData = i2.reactionData, this.slaBreachesAt = (c2 = qp(i2.slaBreachesAt)) !== null && c2 !== undefined ? c2 : undefined, this.slaHighRiskAt = (p2 = qp(i2.slaHighRiskAt)) !== null && p2 !== undefined ? p2 : undefined, this.slaMediumRiskAt = (N2 = qp(i2.slaMediumRiskAt)) !== null && N2 !== undefined ? N2 : undefined, this.slaStartedAt = (h2 = qp(i2.slaStartedAt)) !== null && h2 !== undefined ? h2 : undefined, this.slaType = (f2 = i2.slaType) !== null && f2 !== undefined ? f2 : undefined, this.snoozedUntilAt = (y2 = qp(i2.snoozedUntilAt)) !== null && y2 !== undefined ? y2 : undefined, this.sortOrder = i2.sortOrder, this.startedAt = (S2 = qp(i2.startedAt)) !== null && S2 !== undefined ? S2 : undefined, this.startedTriageAt = (b2 = qp(i2.startedTriageAt)) !== null && b2 !== undefined ? b2 : undefined, this.subIssueSortOrder = (g2 = i2.subIssueSortOrder) !== null && g2 !== undefined ? g2 : undefined, this.title = i2.title, this.trashed = (F2 = i2.trashed) !== null && F2 !== undefined ? F2 : undefined, this.triagedAt = (D2 = qp(i2.triagedAt)) !== null && D2 !== undefined ? D2 : undefined, this.updatedAt = (_2 = qp(i2.updatedAt)) !== null && _2 !== undefined ? _2 : new Date, this.url = i2.url, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.reactions = i2.reactions.map((i3) => new uS(e2, i3)), this.syncedWith = i2.syncedWith ? i2.syncedWith.map((i3) => new fh(e2, i3)) : undefined, this.integrationSourceType = (V2 = i2.integrationSourceType) !== null && V2 !== undefined ? V2 : undefined, this._assignee = (A2 = i2.assignee) !== null && A2 !== undefined ? A2 : undefined, this._creator = (T2 = i2.creator) !== null && T2 !== undefined ? T2 : undefined, this._cycle = (I2 = i2.cycle) !== null && I2 !== undefined ? I2 : undefined, this._delegate = (w2 = i2.delegate) !== null && w2 !== undefined ? w2 : undefined, this._externalUserCreator = (C2 = i2.externalUserCreator) !== null && C2 !== undefined ? C2 : undefined, this._favorite = (P2 = i2.favorite) !== null && P2 !== undefined ? P2 : undefined, this._lastAppliedTemplate = (q2 = i2.lastAppliedTemplate) !== null && q2 !== undefined ? q2 : undefined, this._parent = (x2 = i2.parent) !== null && x2 !== undefined ? x2 : undefined, this._project = (j2 = i2.project) !== null && j2 !== undefined ? j2 : undefined, this._projectMilestone = (U2 = i2.projectMilestone) !== null && U2 !== undefined ? U2 : undefined, this._recurringIssueTemplate = (O2 = i2.recurringIssueTemplate) !== null && O2 !== undefined ? O2 : undefined, this._snoozedBy = (B2 = i2.snoozedBy) !== null && B2 !== undefined ? B2 : undefined, this._sourceComment = (R2 = i2.sourceComment) !== null && R2 !== undefined ? R2 : undefined, this._state = i2.state, this._team = i2.team;
    }
    get assignee() {
      var e2, i2;
      return ((e2 = this._assignee) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._assignee) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get assigneeId() {
      var e2;
      return (e2 = this._assignee) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get delegate() {
      var e2, i2;
      return ((e2 = this._delegate) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._delegate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get delegateId() {
      var e2;
      return (e2 = this._delegate) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserCreator() {
      var e2, i2;
      return ((e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserCreator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserCreatorId() {
      var e2;
      return (e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id;
    }
    get favorite() {
      var e2, i2;
      return ((e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id) ? new og(this._request).fetch((i2 = this._favorite) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get favoriteId() {
      var e2;
      return (e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._parent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectMilestone() {
      var e2, i2;
      return ((e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id) ? new $g(this._request).fetch((i2 = this._projectMilestone) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
    get recurringIssueTemplate() {
      var e2, i2;
      return ((e2 = this._recurringIssueTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._recurringIssueTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get recurringIssueTemplateId() {
      var e2;
      return (e2 = this._recurringIssueTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get snoozedBy() {
      var e2, i2;
      return ((e2 = this._snoozedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._snoozedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get snoozedById() {
      var e2;
      return (e2 = this._snoozedBy) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceComment() {
      var e2, i2;
      return ((e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._sourceComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get sourceCommentId() {
      var e2;
      return (e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id;
    }
    get state() {
      return new qF(this._request).fetch(this._state.id);
    }
    get stateId() {
      var e2;
      return (e2 = this._state) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    attachments(e2) {
      return new $T(this._request, this.id, e2).fetch(e2);
    }
    children(e2) {
      return new ZT(this._request, this.id, e2).fetch(e2);
    }
    comments(e2) {
      return new YT(this._request, this.id, e2).fetch(e2);
    }
    formerAttachments(e2) {
      return new XT(this._request, this.id, e2).fetch(e2);
    }
    formerNeeds(e2) {
      return new eI(this._request, this.id, e2).fetch(e2);
    }
    history(e2) {
      return new iI(this._request, this.id, e2).fetch(e2);
    }
    inverseRelations(e2) {
      return new nI(this._request, this.id, e2).fetch(e2);
    }
    labels(e2) {
      return new aI(this._request, this.id, e2).fetch(e2);
    }
    needs(e2) {
      return new tI(this._request, this.id, e2).fetch(e2);
    }
    relations(e2) {
      return new dI(this._request, this.id, e2).fetch(e2);
    }
    subscribers(e2) {
      return new lI(this._request, this.id, e2).fetch(e2);
    }
    archive(e2) {
      return new mV(this._request).fetch(this.id, e2);
    }
    create(e2) {
      return new kV(this._request).fetch(e2);
    }
    delete(e2) {
      return new vV(this._request).fetch(this.id, e2);
    }
    unarchive() {
      return new CV(this._request).fetch(this.id);
    }
    update(e2) {
      return new qV(this._request).fetch(this.id, e2);
    }
  }

  class Nf extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class hf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issues = i2.issues.map((i3) => new pf(e2, i3));
    }
  }

  class ff {
    constructor(e2) {
      this.id = e2.id, this.identifier = e2.identifier, this.teamId = e2.teamId, this.title = e2.title, this.url = e2.url, this.team = new wS(e2.team);
    }
  }

  class yf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new pf(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Sf extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.filter = (n2 = i2.filter) !== null && n2 !== undefined ? n2 : undefined, this.logId = (a2 = i2.logId) !== null && a2 !== undefined ? a2 : undefined;
    }
  }

  class bf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2, w2, C2, P2, q2, x2, j2, U2, O2, B2, R2, E2, M2, L2, z2, W2, H2, Q2, G2, J2, K2, $2, Z2, Y2;
      super(e2), this.actorId = (n2 = i2.actorId) !== null && n2 !== undefined ? n2 : undefined, this.addedLabelIds = (a2 = i2.addedLabelIds) !== null && a2 !== undefined ? a2 : undefined, this.archived = (t2 = i2.archived) !== null && t2 !== undefined ? t2 : undefined, this.archivedAt = (d2 = qp(i2.archivedAt)) !== null && d2 !== undefined ? d2 : undefined, this.attachmentId = (l2 = i2.attachmentId) !== null && l2 !== undefined ? l2 : undefined, this.autoArchived = (o2 = i2.autoArchived) !== null && o2 !== undefined ? o2 : undefined, this.autoClosed = (r2 = i2.autoClosed) !== null && r2 !== undefined ? r2 : undefined, this.createdAt = (m2 = qp(i2.createdAt)) !== null && m2 !== undefined ? m2 : new Date, this.customerNeedId = (s2 = i2.customerNeedId) !== null && s2 !== undefined ? s2 : undefined, this.fromAssigneeId = (u2 = i2.fromAssigneeId) !== null && u2 !== undefined ? u2 : undefined, this.fromCycleId = (k2 = i2.fromCycleId) !== null && k2 !== undefined ? k2 : undefined, this.fromDueDate = (v2 = i2.fromDueDate) !== null && v2 !== undefined ? v2 : undefined, this.fromEstimate = (c2 = i2.fromEstimate) !== null && c2 !== undefined ? c2 : undefined, this.fromParentId = (p2 = i2.fromParentId) !== null && p2 !== undefined ? p2 : undefined, this.fromPriority = (N2 = i2.fromPriority) !== null && N2 !== undefined ? N2 : undefined, this.fromProjectId = (h2 = i2.fromProjectId) !== null && h2 !== undefined ? h2 : undefined, this.fromStateId = (f2 = i2.fromStateId) !== null && f2 !== undefined ? f2 : undefined, this.fromTeamId = (y2 = i2.fromTeamId) !== null && y2 !== undefined ? y2 : undefined, this.fromTitle = (S2 = i2.fromTitle) !== null && S2 !== undefined ? S2 : undefined, this.id = i2.id, this.removedLabelIds = (b2 = i2.removedLabelIds) !== null && b2 !== undefined ? b2 : undefined, this.toAssigneeId = (g2 = i2.toAssigneeId) !== null && g2 !== undefined ? g2 : undefined, this.toConvertedProjectId = (F2 = i2.toConvertedProjectId) !== null && F2 !== undefined ? F2 : undefined, this.toCycleId = (D2 = i2.toCycleId) !== null && D2 !== undefined ? D2 : undefined, this.toDueDate = (_2 = i2.toDueDate) !== null && _2 !== undefined ? _2 : undefined, this.toEstimate = (V2 = i2.toEstimate) !== null && V2 !== undefined ? V2 : undefined, this.toParentId = (A2 = i2.toParentId) !== null && A2 !== undefined ? A2 : undefined, this.toPriority = (T2 = i2.toPriority) !== null && T2 !== undefined ? T2 : undefined, this.toProjectId = (I2 = i2.toProjectId) !== null && I2 !== undefined ? I2 : undefined, this.toStateId = (w2 = i2.toStateId) !== null && w2 !== undefined ? w2 : undefined, this.toTeamId = (C2 = i2.toTeamId) !== null && C2 !== undefined ? C2 : undefined, this.toTitle = (P2 = i2.toTitle) !== null && P2 !== undefined ? P2 : undefined, this.trashed = (q2 = i2.trashed) !== null && q2 !== undefined ? q2 : undefined, this.updatedAt = (x2 = qp(i2.updatedAt)) !== null && x2 !== undefined ? x2 : new Date, this.updatedDescription = (j2 = i2.updatedDescription) !== null && j2 !== undefined ? j2 : undefined, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.issueImport = i2.issueImport ? new Ff(e2, i2.issueImport) : undefined, this.actors = i2.actors ? i2.actors.map((i3) => new ZS(e2, i3)) : undefined, this.addedLabels = i2.addedLabels ? i2.addedLabels.map((i3) => new If(e2, i3)) : undefined, this.descriptionUpdatedBy = i2.descriptionUpdatedBy ? i2.descriptionUpdatedBy.map((i3) => new ZS(e2, i3)) : undefined, this.relationChanges = i2.relationChanges ? i2.relationChanges.map((i3) => new Bf(e2, i3)) : undefined, this.removedLabels = i2.removedLabels ? i2.removedLabels.map((i3) => new If(e2, i3)) : undefined, this.triageResponsibilityNotifiedUsers = i2.triageResponsibilityNotifiedUsers ? i2.triageResponsibilityNotifiedUsers.map((i3) => new ZS(e2, i3)) : undefined, this._actor = (U2 = i2.actor) !== null && U2 !== undefined ? U2 : undefined, this._attachment = (O2 = i2.attachment) !== null && O2 !== undefined ? O2 : undefined, this._fromAssignee = (B2 = i2.fromAssignee) !== null && B2 !== undefined ? B2 : undefined, this._fromCycle = (R2 = i2.fromCycle) !== null && R2 !== undefined ? R2 : undefined, this._fromDelegate = (E2 = i2.fromDelegate) !== null && E2 !== undefined ? E2 : undefined, this._fromParent = (M2 = i2.fromParent) !== null && M2 !== undefined ? M2 : undefined, this._fromProject = (L2 = i2.fromProject) !== null && L2 !== undefined ? L2 : undefined, this._fromState = (z2 = i2.fromState) !== null && z2 !== undefined ? z2 : undefined, this._fromTeam = (W2 = i2.fromTeam) !== null && W2 !== undefined ? W2 : undefined, this._issue = i2.issue, this._toAssignee = (H2 = i2.toAssignee) !== null && H2 !== undefined ? H2 : undefined, this._toConvertedProject = (Q2 = i2.toConvertedProject) !== null && Q2 !== undefined ? Q2 : undefined, this._toCycle = (G2 = i2.toCycle) !== null && G2 !== undefined ? G2 : undefined, this._toDelegate = (J2 = i2.toDelegate) !== null && J2 !== undefined ? J2 : undefined, this._toParent = (K2 = i2.toParent) !== null && K2 !== undefined ? K2 : undefined, this._toProject = ($2 = i2.toProject) !== null && $2 !== undefined ? $2 : undefined, this._toState = (Z2 = i2.toState) !== null && Z2 !== undefined ? Z2 : undefined, this._toTeam = (Y2 = i2.toTeam) !== null && Y2 !== undefined ? Y2 : undefined;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get attachment() {
      var e2, i2;
      return ((e2 = this._attachment) === null || e2 === undefined ? undefined : e2.id) ? new Ib(this._request).fetch((i2 = this._attachment) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromAssignee() {
      var e2, i2;
      return ((e2 = this._fromAssignee) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._fromAssignee) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromCycle() {
      var e2, i2;
      return ((e2 = this._fromCycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._fromCycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromDelegate() {
      var e2, i2;
      return ((e2 = this._fromDelegate) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._fromDelegate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromDelegateId() {
      var e2;
      return (e2 = this._fromDelegate) === null || e2 === undefined ? undefined : e2.id;
    }
    get fromParent() {
      var e2, i2;
      return ((e2 = this._fromParent) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._fromParent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromProject() {
      var e2, i2;
      return ((e2 = this._fromProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._fromProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromState() {
      var e2, i2;
      return ((e2 = this._fromState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._fromState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get fromTeam() {
      var e2, i2;
      return ((e2 = this._fromTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._fromTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issue() {
      return new Fg(this._request).fetch(this._issue.id);
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get toAssignee() {
      var e2, i2;
      return ((e2 = this._toAssignee) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._toAssignee) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toConvertedProject() {
      var e2, i2;
      return ((e2 = this._toConvertedProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._toConvertedProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toCycle() {
      var e2, i2;
      return ((e2 = this._toCycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._toCycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toDelegate() {
      var e2, i2;
      return ((e2 = this._toDelegate) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._toDelegate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toDelegateId() {
      var e2;
      return (e2 = this._toDelegate) === null || e2 === undefined ? undefined : e2.id;
    }
    get toParent() {
      var e2, i2;
      return ((e2 = this._toParent) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._toParent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toProject() {
      var e2, i2;
      return ((e2 = this._toProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._toProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toState() {
      var e2, i2;
      return ((e2 = this._toState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._toState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get toTeam() {
      var e2, i2;
      return ((e2 = this._toTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._toTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
  }

  class gf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new bf(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Ff extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.creatorId = (t2 = i2.creatorId) !== null && t2 !== undefined ? t2 : undefined, this.csvFileUrl = (d2 = i2.csvFileUrl) !== null && d2 !== undefined ? d2 : undefined, this.displayName = i2.displayName, this.error = (l2 = i2.error) !== null && l2 !== undefined ? l2 : undefined, this.errorMetadata = (o2 = i2.errorMetadata) !== null && o2 !== undefined ? o2 : undefined, this.id = i2.id, this.mapping = (r2 = i2.mapping) !== null && r2 !== undefined ? r2 : undefined, this.progress = (m2 = i2.progress) !== null && m2 !== undefined ? m2 : undefined, this.service = i2.service, this.serviceMetadata = (s2 = i2.serviceMetadata) !== null && s2 !== undefined ? s2 : undefined, this.status = i2.status, this.teamName = (u2 = i2.teamName) !== null && u2 !== undefined ? u2 : undefined, this.updatedAt = (k2 = qp(i2.updatedAt)) !== null && k2 !== undefined ? k2 : new Date;
    }
    delete(e2) {
      return new yV(this._request).fetch(e2);
    }
    update(e2) {
      return new bV(this._request).fetch(this.id, e2);
    }
  }

  class Df extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class _f extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new Ff(e2, i2.issueImport) : undefined;
    }
  }

  class Vf extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.count = (n2 = i2.count) !== null && n2 !== undefined ? n2 : undefined, this.error = (a2 = i2.error) !== null && a2 !== undefined ? a2 : undefined, this.success = i2.success;
    }
  }

  class Af extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new Ff(e2, i2.issueImport) : undefined;
    }
  }

  class Tf extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.canSync = i2.canSync, this.error = (n2 = i2.error) !== null && n2 !== undefined ? n2 : undefined;
    }
  }

  class If extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.isGroup = i2.isGroup, this.lastAppliedAt = (d2 = qp(i2.lastAppliedAt)) !== null && d2 !== undefined ? d2 : undefined, this.name = i2.name, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this._creator = (o2 = i2.creator) !== null && o2 !== undefined ? o2 : undefined, this._inheritedFrom = (r2 = i2.inheritedFrom) !== null && r2 !== undefined ? r2 : undefined, this._parent = (m2 = i2.parent) !== null && m2 !== undefined ? m2 : undefined, this._team = (s2 = i2.team) !== null && s2 !== undefined ? s2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get inheritedFrom() {
      var e2, i2;
      return ((e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._inheritedFrom) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get inheritedFromId() {
      var e2;
      return (e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._parent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    children(e2) {
      return new oI(this._request, this.id, e2).fetch(e2);
    }
    issues(e2) {
      return new rI(this._request, this.id, e2).fetch(e2);
    }
    create(e2, i2) {
      return new gV(this._request).fetch(e2, i2);
    }
    delete() {
      return new FV(this._request).fetch(this.id);
    }
    update(e2, i2) {
      return new DV(this._request).fetch(this.id, e2, i2);
    }
  }

  class wf {
    constructor(e2) {
      var i2;
      this.color = e2.color, this.id = e2.id, this.name = e2.name, this.parentId = (i2 = e2.parentId) !== null && i2 !== undefined ? i2 : undefined;
    }
  }

  class Cf extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new If(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Pf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueLabel = i2.issueLabel;
    }
    get issueLabel() {
      return new Ig(this._request).fetch(this._issueLabel.id);
    }
    get issueLabelId() {
      var e2;
      return (e2 = this._issueLabel) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class qf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.issueId = i2.issueId, this.parentCommentId = (l2 = i2.parentCommentId) !== null && l2 !== undefined ? l2 : undefined, this.reactionEmoji = (o2 = i2.reactionEmoji) !== null && o2 !== undefined ? o2 : undefined, this.readAt = (r2 = qp(i2.readAt)) !== null && r2 !== undefined ? r2 : undefined, this.snoozedUntilAt = (m2 = qp(i2.snoozedUntilAt)) !== null && m2 !== undefined ? m2 : undefined, this.type = i2.type, this.unsnoozedAt = (s2 = qp(i2.unsnoozedAt)) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = (u2 = qp(i2.updatedAt)) !== null && u2 !== undefined ? u2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.subscriptions = i2.subscriptions ? i2.subscriptions.map((i3) => new ly(e2, i3)) : undefined, this._actor = (k2 = i2.actor) !== null && k2 !== undefined ? k2 : undefined, this._comment = (v2 = i2.comment) !== null && v2 !== undefined ? v2 : undefined, this._externalUserActor = (c2 = i2.externalUserActor) !== null && c2 !== undefined ? c2 : undefined, this._issue = i2.issue, this._parentComment = (p2 = i2.parentComment) !== null && p2 !== undefined ? p2 : undefined, this._team = i2.team, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      return new Fg(this._request).fetch(this._issue.id);
    }
    get parentComment() {
      var e2, i2;
      return ((e2 = this._parentComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._parentComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class xf extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issue = (n2 = i2.issue) !== null && n2 !== undefined ? n2 : undefined;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class jf extends Ip {
    constructor(e2, i2) {
      super(e2), this.label = i2.label, this.priority = i2.priority;
    }
  }

  class Uf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.type = i2.type, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._issue = i2.issue, this._relatedIssue = i2.relatedIssue;
    }
    get issue() {
      return new Fg(this._request).fetch(this._issue.id);
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedIssue() {
      return new Fg(this._request).fetch(this._relatedIssue.id);
    }
    get relatedIssueId() {
      var e2;
      return (e2 = this._relatedIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2, i2) {
      return new _V(this._request).fetch(e2, i2);
    }
    delete() {
      return new VV(this._request).fetch(this.id);
    }
    update(e2) {
      return new AV(this._request).fetch(this.id, e2);
    }
  }

  class Of extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Uf(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Bf extends Ip {
    constructor(e2, i2) {
      super(e2), this.identifier = i2.identifier, this.type = i2.type;
    }
  }

  class Rf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueRelation = i2.issueRelation;
    }
    get issueRelation() {
      return new Pg(this._request).fetch(this._issueRelation.id);
    }
    get issueRelationId() {
      var e2;
      return (e2 = this._issueRelation) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Ef extends Ip {
    constructor(e2, i2) {
      super(e2), this.totalCount = i2.totalCount, this.archivePayload = new $p(e2, i2.archivePayload), this.pageInfo = new by(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new Mf(e2, i3));
    }
  }

  class Mf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2, w2, C2, P2, q2, x2, j2, U2, O2, B2, R2;
      super(e2), this.addedToCycleAt = (n2 = qp(i2.addedToCycleAt)) !== null && n2 !== undefined ? n2 : undefined, this.addedToProjectAt = (a2 = qp(i2.addedToProjectAt)) !== null && a2 !== undefined ? a2 : undefined, this.addedToTeamAt = (t2 = qp(i2.addedToTeamAt)) !== null && t2 !== undefined ? t2 : undefined, this.archivedAt = (d2 = qp(i2.archivedAt)) !== null && d2 !== undefined ? d2 : undefined, this.autoArchivedAt = (l2 = qp(i2.autoArchivedAt)) !== null && l2 !== undefined ? l2 : undefined, this.autoClosedAt = (o2 = qp(i2.autoClosedAt)) !== null && o2 !== undefined ? o2 : undefined, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = (r2 = qp(i2.canceledAt)) !== null && r2 !== undefined ? r2 : undefined, this.completedAt = (m2 = qp(i2.completedAt)) !== null && m2 !== undefined ? m2 : undefined, this.createdAt = (s2 = qp(i2.createdAt)) !== null && s2 !== undefined ? s2 : new Date, this.customerTicketCount = i2.customerTicketCount, this.description = (u2 = i2.description) !== null && u2 !== undefined ? u2 : undefined, this.dueDate = (k2 = i2.dueDate) !== null && k2 !== undefined ? k2 : undefined, this.estimate = (v2 = i2.estimate) !== null && v2 !== undefined ? v2 : undefined, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.metadata = i2.metadata, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.reactionData = i2.reactionData, this.slaBreachesAt = (c2 = qp(i2.slaBreachesAt)) !== null && c2 !== undefined ? c2 : undefined, this.slaHighRiskAt = (p2 = qp(i2.slaHighRiskAt)) !== null && p2 !== undefined ? p2 : undefined, this.slaMediumRiskAt = (N2 = qp(i2.slaMediumRiskAt)) !== null && N2 !== undefined ? N2 : undefined, this.slaStartedAt = (h2 = qp(i2.slaStartedAt)) !== null && h2 !== undefined ? h2 : undefined, this.slaType = (f2 = i2.slaType) !== null && f2 !== undefined ? f2 : undefined, this.snoozedUntilAt = (y2 = qp(i2.snoozedUntilAt)) !== null && y2 !== undefined ? y2 : undefined, this.sortOrder = i2.sortOrder, this.startedAt = (S2 = qp(i2.startedAt)) !== null && S2 !== undefined ? S2 : undefined, this.startedTriageAt = (b2 = qp(i2.startedTriageAt)) !== null && b2 !== undefined ? b2 : undefined, this.subIssueSortOrder = (g2 = i2.subIssueSortOrder) !== null && g2 !== undefined ? g2 : undefined, this.title = i2.title, this.trashed = (F2 = i2.trashed) !== null && F2 !== undefined ? F2 : undefined, this.triagedAt = (D2 = qp(i2.triagedAt)) !== null && D2 !== undefined ? D2 : undefined, this.updatedAt = (_2 = qp(i2.updatedAt)) !== null && _2 !== undefined ? _2 : new Date, this.url = i2.url, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.reactions = i2.reactions.map((i3) => new uS(e2, i3)), this.syncedWith = i2.syncedWith ? i2.syncedWith.map((i3) => new fh(e2, i3)) : undefined, this.integrationSourceType = (V2 = i2.integrationSourceType) !== null && V2 !== undefined ? V2 : undefined, this._assignee = (A2 = i2.assignee) !== null && A2 !== undefined ? A2 : undefined, this._creator = (T2 = i2.creator) !== null && T2 !== undefined ? T2 : undefined, this._cycle = (I2 = i2.cycle) !== null && I2 !== undefined ? I2 : undefined, this._delegate = (w2 = i2.delegate) !== null && w2 !== undefined ? w2 : undefined, this._externalUserCreator = (C2 = i2.externalUserCreator) !== null && C2 !== undefined ? C2 : undefined, this._favorite = (P2 = i2.favorite) !== null && P2 !== undefined ? P2 : undefined, this._lastAppliedTemplate = (q2 = i2.lastAppliedTemplate) !== null && q2 !== undefined ? q2 : undefined, this._parent = (x2 = i2.parent) !== null && x2 !== undefined ? x2 : undefined, this._project = (j2 = i2.project) !== null && j2 !== undefined ? j2 : undefined, this._projectMilestone = (U2 = i2.projectMilestone) !== null && U2 !== undefined ? U2 : undefined, this._recurringIssueTemplate = (O2 = i2.recurringIssueTemplate) !== null && O2 !== undefined ? O2 : undefined, this._snoozedBy = (B2 = i2.snoozedBy) !== null && B2 !== undefined ? B2 : undefined, this._sourceComment = (R2 = i2.sourceComment) !== null && R2 !== undefined ? R2 : undefined, this._state = i2.state, this._team = i2.team;
    }
    get assignee() {
      var e2, i2;
      return ((e2 = this._assignee) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._assignee) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get assigneeId() {
      var e2;
      return (e2 = this._assignee) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get delegate() {
      var e2, i2;
      return ((e2 = this._delegate) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._delegate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get delegateId() {
      var e2;
      return (e2 = this._delegate) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserCreator() {
      var e2, i2;
      return ((e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserCreator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserCreatorId() {
      var e2;
      return (e2 = this._externalUserCreator) === null || e2 === undefined ? undefined : e2.id;
    }
    get favorite() {
      var e2, i2;
      return ((e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id) ? new og(this._request).fetch((i2 = this._favorite) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get favoriteId() {
      var e2;
      return (e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._parent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectMilestone() {
      var e2, i2;
      return ((e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id) ? new $g(this._request).fetch((i2 = this._projectMilestone) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
    get recurringIssueTemplate() {
      var e2, i2;
      return ((e2 = this._recurringIssueTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._recurringIssueTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get recurringIssueTemplateId() {
      var e2;
      return (e2 = this._recurringIssueTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get snoozedBy() {
      var e2, i2;
      return ((e2 = this._snoozedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._snoozedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get snoozedById() {
      var e2;
      return (e2 = this._snoozedBy) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceComment() {
      var e2, i2;
      return ((e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._sourceComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get sourceCommentId() {
      var e2;
      return (e2 = this._sourceComment) === null || e2 === undefined ? undefined : e2.id;
    }
    get state() {
      return new qF(this._request).fetch(this._state.id);
    }
    get stateId() {
      var e2;
      return (e2 = this._state) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Lf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.issueId = i2.issueId, this.stateChangedAt = (t2 = qp(i2.stateChangedAt)) !== null && t2 !== undefined ? t2 : new Date, this.suggestedIssueId = (d2 = i2.suggestedIssueId) !== null && d2 !== undefined ? d2 : undefined, this.suggestedLabelId = (l2 = i2.suggestedLabelId) !== null && l2 !== undefined ? l2 : undefined, this.suggestedUserId = (o2 = i2.suggestedUserId) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.metadata = i2.metadata ? new zf(e2, i2.metadata) : undefined, this.state = i2.state, this.type = i2.type, this._issue = i2.issue, this._suggestedIssue = (m2 = i2.suggestedIssue) !== null && m2 !== undefined ? m2 : undefined, this._suggestedLabel = (s2 = i2.suggestedLabel) !== null && s2 !== undefined ? s2 : undefined, this._suggestedProject = (u2 = i2.suggestedProject) !== null && u2 !== undefined ? u2 : undefined, this._suggestedTeam = (k2 = i2.suggestedTeam) !== null && k2 !== undefined ? k2 : undefined, this._suggestedUser = (v2 = i2.suggestedUser) !== null && v2 !== undefined ? v2 : undefined;
    }
    get issue() {
      return new Fg(this._request).fetch(this._issue.id);
    }
    get suggestedIssue() {
      var e2, i2;
      return ((e2 = this._suggestedIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._suggestedIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get suggestedLabel() {
      var e2, i2;
      return ((e2 = this._suggestedLabel) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._suggestedLabel) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get suggestedProject() {
      var e2, i2;
      return ((e2 = this._suggestedProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._suggestedProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get suggestedProjectId() {
      var e2;
      return (e2 = this._suggestedProject) === null || e2 === undefined ? undefined : e2.id;
    }
    get suggestedTeam() {
      var e2, i2;
      return ((e2 = this._suggestedTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._suggestedTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get suggestedTeamId() {
      var e2;
      return (e2 = this._suggestedTeam) === null || e2 === undefined ? undefined : e2.id;
    }
    get suggestedUser() {
      var e2, i2;
      return ((e2 = this._suggestedUser) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._suggestedUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
  }

  class zf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.classification = (n2 = i2.classification) !== null && n2 !== undefined ? n2 : undefined, this.evalLogId = (a2 = i2.evalLogId) !== null && a2 !== undefined ? a2 : undefined, this.reasons = (t2 = i2.reasons) !== null && t2 !== undefined ? t2 : undefined, this.score = (d2 = i2.score) !== null && d2 !== undefined ? d2 : undefined;
    }
  }

  class Wf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.title = i2.title;
    }
  }

  class Hf {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2, w2, C2, P2, q2, x2, j2, U2, O2;
      this.addedToCycleAt = (i2 = e2.addedToCycleAt) !== null && i2 !== undefined ? i2 : undefined, this.addedToProjectAt = (n2 = e2.addedToProjectAt) !== null && n2 !== undefined ? n2 : undefined, this.addedToTeamAt = (a2 = e2.addedToTeamAt) !== null && a2 !== undefined ? a2 : undefined, this.archivedAt = (t2 = e2.archivedAt) !== null && t2 !== undefined ? t2 : undefined, this.assigneeId = (d2 = e2.assigneeId) !== null && d2 !== undefined ? d2 : undefined, this.autoArchivedAt = (l2 = e2.autoArchivedAt) !== null && l2 !== undefined ? l2 : undefined, this.autoClosedAt = (o2 = e2.autoClosedAt) !== null && o2 !== undefined ? o2 : undefined, this.botActor = (r2 = e2.botActor) !== null && r2 !== undefined ? r2 : undefined, this.canceledAt = (m2 = e2.canceledAt) !== null && m2 !== undefined ? m2 : undefined, this.completedAt = (s2 = e2.completedAt) !== null && s2 !== undefined ? s2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (u2 = e2.creatorId) !== null && u2 !== undefined ? u2 : undefined, this.cycleId = (k2 = e2.cycleId) !== null && k2 !== undefined ? k2 : undefined, this.delegateId = (v2 = e2.delegateId) !== null && v2 !== undefined ? v2 : undefined, this.description = (c2 = e2.description) !== null && c2 !== undefined ? c2 : undefined, this.descriptionData = (p2 = e2.descriptionData) !== null && p2 !== undefined ? p2 : undefined, this.dueDate = (N2 = e2.dueDate) !== null && N2 !== undefined ? N2 : undefined, this.estimate = (h2 = e2.estimate) !== null && h2 !== undefined ? h2 : undefined, this.externalUserCreatorId = (f2 = e2.externalUserCreatorId) !== null && f2 !== undefined ? f2 : undefined, this.id = e2.id, this.identifier = e2.identifier, this.integrationSourceType = (y2 = e2.integrationSourceType) !== null && y2 !== undefined ? y2 : undefined, this.labelIds = e2.labelIds, this.lastAppliedTemplateId = (S2 = e2.lastAppliedTemplateId) !== null && S2 !== undefined ? S2 : undefined, this.number = e2.number, this.parentId = (b2 = e2.parentId) !== null && b2 !== undefined ? b2 : undefined, this.previousIdentifiers = e2.previousIdentifiers, this.priority = e2.priority, this.priorityLabel = e2.priorityLabel, this.prioritySortOrder = e2.prioritySortOrder, this.projectId = (g2 = e2.projectId) !== null && g2 !== undefined ? g2 : undefined, this.projectMilestoneId = (F2 = e2.projectMilestoneId) !== null && F2 !== undefined ? F2 : undefined, this.reactionData = e2.reactionData, this.recurringIssueTemplateId = (D2 = e2.recurringIssueTemplateId) !== null && D2 !== undefined ? D2 : undefined, this.slaBreachesAt = (_2 = e2.slaBreachesAt) !== null && _2 !== undefined ? _2 : undefined, this.slaHighRiskAt = (V2 = e2.slaHighRiskAt) !== null && V2 !== undefined ? V2 : undefined, this.slaMediumRiskAt = (A2 = e2.slaMediumRiskAt) !== null && A2 !== undefined ? A2 : undefined, this.slaStartedAt = (T2 = e2.slaStartedAt) !== null && T2 !== undefined ? T2 : undefined, this.slaType = (I2 = e2.slaType) !== null && I2 !== undefined ? I2 : undefined, this.snoozedUntilAt = (w2 = e2.snoozedUntilAt) !== null && w2 !== undefined ? w2 : undefined, this.sortOrder = e2.sortOrder, this.sourceCommentId = (C2 = e2.sourceCommentId) !== null && C2 !== undefined ? C2 : undefined, this.startedAt = (P2 = e2.startedAt) !== null && P2 !== undefined ? P2 : undefined, this.startedTriageAt = (q2 = e2.startedTriageAt) !== null && q2 !== undefined ? q2 : undefined, this.stateId = e2.stateId, this.subIssueSortOrder = (x2 = e2.subIssueSortOrder) !== null && x2 !== undefined ? x2 : undefined, this.subscriberIds = e2.subscriberIds, this.syncedWith = (j2 = e2.syncedWith) !== null && j2 !== undefined ? j2 : undefined, this.teamId = e2.teamId, this.title = e2.title, this.trashed = (U2 = e2.trashed) !== null && U2 !== undefined ? U2 : undefined, this.triagedAt = (O2 = e2.triagedAt) !== null && O2 !== undefined ? O2 : undefined, this.updatedAt = e2.updatedAt, this.url = e2.url, this.assignee = e2.assignee ? new eb(e2.assignee) : undefined, this.creator = e2.creator ? new eb(e2.creator) : undefined, this.cycle = e2.cycle ? new zN(e2.cycle) : undefined, this.delegate = e2.delegate ? new eb(e2.delegate) : undefined, this.externalUserCreator = e2.externalUserCreator ? new Sh(e2.externalUserCreator) : undefined, this.project = e2.project ? new Vy(e2.project) : undefined, this.projectMilestone = e2.projectMilestone ? new jy(e2.projectMilestone) : undefined, this.state = new Nb(e2.state), this.team = e2.team ? new wS(e2.team) : undefined, this.labels = e2.labels.map((e3) => new wf(e3));
    }
  }

  class Qf {
    constructor(e2) {
      var i2;
      this.description = (i2 = e2.description) !== null && i2 !== undefined ? i2 : undefined, this.id = e2.id, this.identifier = e2.identifier, this.teamId = e2.teamId, this.title = e2.title, this.url = e2.url, this.team = new wS(e2.team);
    }
  }

  class Gf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = (s2 = i2.initiative) !== null && s2 !== undefined ? s2 : undefined, this._label = i2.label, this._project = (u2 = i2.project) !== null && u2 !== undefined ? u2 : undefined, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      return new Ig(this._request).fetch(this._label.id);
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Jf extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class Kf extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.emailedAt = (t2 = qp(i2.emailedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.readAt = (d2 = qp(i2.readAt)) !== null && d2 !== undefined ? d2 : undefined, this.snoozedUntilAt = (l2 = qp(i2.snoozedUntilAt)) !== null && l2 !== undefined ? l2 : undefined, this.type = i2.type, this.unsnoozedAt = (o2 = qp(i2.unsnoozedAt)) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (m2 = i2.actor) !== null && m2 !== undefined ? m2 : undefined, this._externalUserActor = (s2 = i2.externalUserActor) !== null && s2 !== undefined ? s2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    archive() {
      return new EV(this._request).fetch(this.id);
    }
    unarchive() {
      return new KV(this._request).fetch(this.id);
    }
    update(e2) {
      return new ZV(this._request).fetch(this.id, e2);
    }
  }

  class $f extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class Zf extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.notifications = i2.notifications.map((i3) => new Kf(e2, i3));
    }
  }

  class Yf extends Ip {
    constructor(e2, i2) {
      super(e2), this.appsAndIntegrations = new Xf(e2, i2.appsAndIntegrations), this.assignments = new Xf(e2, i2.assignments), this.commentsAndReplies = new Xf(e2, i2.commentsAndReplies), this.customers = new Xf(e2, i2.customers), this.documentChanges = new Xf(e2, i2.documentChanges), this.feed = new Xf(e2, i2.feed), this.mentions = new Xf(e2, i2.mentions), this.postsAndUpdates = new Xf(e2, i2.postsAndUpdates), this.reactions = new Xf(e2, i2.reactions), this.reminders = new Xf(e2, i2.reminders), this.reviews = new Xf(e2, i2.reviews), this.statusChanges = new Xf(e2, i2.statusChanges), this.subscriptions = new Xf(e2, i2.subscriptions), this.system = new Xf(e2, i2.system), this.triage = new Xf(e2, i2.triage);
    }
  }

  class Xf extends Ip {
    constructor(e2, i2) {
      super(e2), this.desktop = i2.desktop, this.email = i2.email, this.mobile = i2.mobile, this.slack = i2.slack;
    }
  }

  class ey extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => {
        switch (i3.__typename) {
          case "CustomerNeedNotification":
            return new AN(e2, i3);
          case "CustomerNotification":
            return new wN(e2, i3);
          case "DocumentNotification":
            return new nh(e2, i3);
          case "InitiativeNotification":
            return new zh(e2, i3);
          case "IssueNotification":
            return new qf(e2, i3);
          case "OauthClientApprovalNotification":
            return new sy(e2, i3);
          case "PostNotification":
            return new Fy(e2, i3);
          case "ProjectNotification":
            return new Ey(e2, i3);
          case "PullRequestNotification":
            return new dS(e2, i3);
          default:
            return new Kf(e2, i3);
        }
      }), new by(e2, n2.pageInfo));
    }
  }

  class iy extends Ip {
    constructor(e2, i2) {
      super(e2), this.mobile = i2.mobile ? new ny(e2, i2.mobile) : undefined;
    }
  }

  class ny extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.notificationsDisabled = (n2 = i2.notificationsDisabled) !== null && n2 !== undefined ? n2 : undefined, this.schedule = i2.schedule ? new ty(e2, i2.schedule) : undefined;
    }
  }

  class ay extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.end = (n2 = i2.end) !== null && n2 !== undefined ? n2 : undefined, this.start = (a2 = i2.start) !== null && a2 !== undefined ? a2 : undefined;
    }
  }

  class ty extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.disabled = (n2 = i2.disabled) !== null && n2 !== undefined ? n2 : undefined, this.friday = new ay(e2, i2.friday), this.monday = new ay(e2, i2.monday), this.saturday = new ay(e2, i2.saturday), this.sunday = new ay(e2, i2.sunday), this.thursday = new ay(e2, i2.thursday), this.tuesday = new ay(e2, i2.tuesday), this.wednesday = new ay(e2, i2.wednesday);
    }
  }

  class dy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class ly extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = (s2 = i2.initiative) !== null && s2 !== undefined ? s2 : undefined, this._label = (u2 = i2.label) !== null && u2 !== undefined ? u2 : undefined, this._project = (k2 = i2.project) !== null && k2 !== undefined ? k2 : undefined, this._subscriber = i2.subscriber, this._team = (v2 = i2.team) !== null && v2 !== undefined ? v2 : undefined, this._user = (c2 = i2.user) !== null && c2 !== undefined ? c2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new QV(this._request).fetch(e2);
    }
    delete() {
      return new GV(this._request).fetch(this.id);
    }
    update(e2) {
      return new JV(this._request).fetch(this.id, e2);
    }
  }

  class oy extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => {
        switch (i3.__typename) {
          case "CustomViewNotificationSubscription":
            return new yN(e2, i3);
          case "CustomerNotificationSubscription":
            return new CN(e2, i3);
          case "CycleNotificationSubscription":
            return new HN(e2, i3);
          case "InitiativeNotificationSubscription":
            return new Wh(e2, i3);
          case "LabelNotificationSubscription":
            return new Gf(e2, i3);
          case "ProjectNotificationSubscription":
            return new My(e2, i3);
          case "TeamNotificationSubscription":
            return new jS(e2, i3);
          case "UserNotificationSubscription":
            return new nb(e2, i3);
          default:
            return new ly(e2, i3);
        }
      }), new by(e2, n2.pageInfo));
    }
  }

  class ry extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class my extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.denyReason = (t2 = i2.denyReason) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.oauthClientId = i2.oauthClientId, this.requestReason = (d2 = i2.requestReason) !== null && d2 !== undefined ? d2 : undefined, this.requesterId = i2.requesterId, this.responderId = (l2 = i2.responderId) !== null && l2 !== undefined ? l2 : undefined, this.scopes = i2.scopes, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this.status = i2.status;
    }
  }

  class sy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.emailedAt = (t2 = qp(i2.emailedAt)) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.oauthClientApprovalId = i2.oauthClientApprovalId, this.readAt = (d2 = qp(i2.readAt)) !== null && d2 !== undefined ? d2 : undefined, this.snoozedUntilAt = (l2 = qp(i2.snoozedUntilAt)) !== null && l2 !== undefined ? l2 : undefined, this.type = i2.type, this.unsnoozedAt = (o2 = qp(i2.unsnoozedAt)) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = (r2 = qp(i2.updatedAt)) !== null && r2 !== undefined ? r2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this.oauthClientApproval = new my(e2, i2.oauthClientApproval), this._actor = (m2 = i2.actor) !== null && m2 !== undefined ? m2 : undefined, this._externalUserActor = (s2 = i2.externalUserActor) !== null && s2 !== undefined ? s2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class uy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2;
      super(e2), this.allowMembersToInvite = (n2 = i2.allowMembersToInvite) !== null && n2 !== undefined ? n2 : undefined, this.allowedAuthServices = i2.allowedAuthServices, this.archivedAt = (a2 = qp(i2.archivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.createdIssueCount = i2.createdIssueCount, this.customerCount = i2.customerCount, this.customersConfiguration = i2.customersConfiguration, this.customersEnabled = i2.customersEnabled, this.deletionRequestedAt = (d2 = qp(i2.deletionRequestedAt)) !== null && d2 !== undefined ? d2 : undefined, this.feedEnabled = i2.feedEnabled, this.fiscalYearStartMonth = i2.fiscalYearStartMonth, this.gitBranchFormat = (l2 = i2.gitBranchFormat) !== null && l2 !== undefined ? l2 : undefined, this.gitLinkbackMessagesEnabled = i2.gitLinkbackMessagesEnabled, this.gitPublicLinkbackMessagesEnabled = i2.gitPublicLinkbackMessagesEnabled, this.id = i2.id, this.initiativeUpdateReminderFrequencyInWeeks = (o2 = i2.initiativeUpdateReminderFrequencyInWeeks) !== null && o2 !== undefined ? o2 : undefined, this.initiativeUpdateRemindersHour = i2.initiativeUpdateRemindersHour, this.logoUrl = (r2 = i2.logoUrl) !== null && r2 !== undefined ? r2 : undefined, this.name = i2.name, this.periodUploadVolume = i2.periodUploadVolume, this.previousUrlKeys = i2.previousUrlKeys, this.projectUpdateReminderFrequencyInWeeks = (m2 = i2.projectUpdateReminderFrequencyInWeeks) !== null && m2 !== undefined ? m2 : undefined, this.projectUpdateRemindersHour = i2.projectUpdateRemindersHour, this.restrictLabelManagementToAdmins = (s2 = i2.restrictLabelManagementToAdmins) !== null && s2 !== undefined ? s2 : undefined, this.restrictTeamCreationToAdmins = (u2 = i2.restrictTeamCreationToAdmins) !== null && u2 !== undefined ? u2 : undefined, this.roadmapEnabled = i2.roadmapEnabled, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.trialEndsAt = (k2 = qp(i2.trialEndsAt)) !== null && k2 !== undefined ? k2 : undefined, this.updatedAt = (v2 = qp(i2.updatedAt)) !== null && v2 !== undefined ? v2 : new Date, this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.subscription = i2.subscription ? new gy(e2, i2.subscription) : undefined, this.ipRestrictions = i2.ipRestrictions ? i2.ipRestrictions.map((i3) => new fy(e2, i3)) : undefined, this.projectStatuses = i2.projectStatuses.map((i3) => new Jy(e2, i3)), this.defaultFeedSummarySchedule = (c2 = i2.defaultFeedSummarySchedule) !== null && c2 !== undefined ? c2 : undefined, this.initiativeUpdateRemindersDay = i2.initiativeUpdateRemindersDay, this.projectUpdateRemindersDay = i2.projectUpdateRemindersDay, this.projectUpdatesReminderFrequency = i2.projectUpdatesReminderFrequency, this.releaseChannel = i2.releaseChannel, this.slaDayCount = i2.slaDayCount;
    }
    integrations(e2) {
      return new mI(this._request, e2).fetch(e2);
    }
    labels(e2) {
      return new sI(this._request, e2).fetch(e2);
    }
    projectLabels(e2) {
      return new uI(this._request, e2).fetch(e2);
    }
    teams(e2) {
      return new kI(this._request, e2).fetch(e2);
    }
    templates(e2) {
      return new vI(this._request, e2).fetch(e2);
    }
    users(e2) {
      return new cI(this._request, e2).fetch(e2);
    }
    delete(e2) {
      return new XV(this._request).fetch(e2);
    }
    update(e2) {
      return new oA(this._request).fetch(e2);
    }
  }

  class ky extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class vy extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class cy extends Ip {
    constructor(e2, i2) {
      super(e2), this.exists = i2.exists, this.success = i2.success;
    }
  }

  class py extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2;
      super(e2), this.acceptedAt = (n2 = qp(i2.acceptedAt)) !== null && n2 !== undefined ? n2 : undefined, this.archivedAt = (a2 = qp(i2.archivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.email = i2.email, this.expiresAt = (d2 = qp(i2.expiresAt)) !== null && d2 !== undefined ? d2 : undefined, this.external = i2.external, this.id = i2.id, this.metadata = (l2 = i2.metadata) !== null && l2 !== undefined ? l2 : undefined, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this.role = i2.role, this._invitee = (r2 = i2.invitee) !== null && r2 !== undefined ? r2 : undefined, this._inviter = i2.inviter;
    }
    get invitee() {
      var e2, i2;
      return ((e2 = this._invitee) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._invitee) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get inviteeId() {
      var e2;
      return (e2 = this._invitee) === null || e2 === undefined ? undefined : e2.id;
    }
    get inviter() {
      return new VF(this._request).fetch(this._inviter.id);
    }
    get inviterId() {
      var e2;
      return (e2 = this._inviter) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    create(e2) {
      return new nA(this._request).fetch(e2);
    }
    delete() {
      return new aA(this._request).fetch(this.id);
    }
    update(e2) {
      return new tA(this._request).fetch(this.id, e2);
    }
  }

  class Ny extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new py(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class hy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._organizationInvite = i2.organizationInvite;
    }
    get organizationInvite() {
      return new Wg(this._request).fetch(this._organizationInvite.id);
    }
    get organizationInviteId() {
      var e2;
      return (e2 = this._organizationInvite) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class fy extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.description = (n2 = i2.description) !== null && n2 !== undefined ? n2 : undefined, this.enabled = i2.enabled, this.range = i2.range, this.type = i2.type;
    }
  }

  class yy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class Sy extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class by extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.endCursor = (n2 = i2.endCursor) !== null && n2 !== undefined ? n2 : undefined, this.hasNextPage = i2.hasNextPage, this.hasPreviousPage = i2.hasPreviousPage, this.startCursor = (a2 = i2.startCursor) !== null && a2 !== undefined ? a2 : undefined;
    }
  }

  class gy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.cancelAt = (a2 = qp(i2.cancelAt)) !== null && a2 !== undefined ? a2 : undefined, this.canceledAt = (t2 = qp(i2.canceledAt)) !== null && t2 !== undefined ? t2 : undefined, this.collectionMethod = i2.collectionMethod, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.id = i2.id, this.nextBillingAt = (l2 = qp(i2.nextBillingAt)) !== null && l2 !== undefined ? l2 : undefined, this.pendingChangeType = (o2 = i2.pendingChangeType) !== null && o2 !== undefined ? o2 : undefined, this.seats = i2.seats, this.seatsMaximum = (r2 = i2.seatsMaximum) !== null && r2 !== undefined ? r2 : undefined, this.seatsMinimum = (m2 = i2.seatsMinimum) !== null && m2 !== undefined ? m2 : undefined, this.type = i2.type, this.updatedAt = (s2 = qp(i2.updatedAt)) !== null && s2 !== undefined ? s2 : new Date, this._creator = (u2 = i2.creator) !== null && u2 !== undefined ? u2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class Fy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.parentCommentId = (l2 = i2.parentCommentId) !== null && l2 !== undefined ? l2 : undefined, this.postId = i2.postId, this.reactionEmoji = (o2 = i2.reactionEmoji) !== null && o2 !== undefined ? o2 : undefined, this.readAt = (r2 = qp(i2.readAt)) !== null && r2 !== undefined ? r2 : undefined, this.snoozedUntilAt = (m2 = qp(i2.snoozedUntilAt)) !== null && m2 !== undefined ? m2 : undefined, this.type = i2.type, this.unsnoozedAt = (s2 = qp(i2.unsnoozedAt)) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = (u2 = qp(i2.updatedAt)) !== null && u2 !== undefined ? u2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (k2 = i2.actor) !== null && k2 !== undefined ? k2 : undefined, this._externalUserActor = (v2 = i2.externalUserActor) !== null && v2 !== undefined ? v2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Dy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.autoArchivedAt = (a2 = qp(i2.autoArchivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.canceledAt = (t2 = qp(i2.canceledAt)) !== null && t2 !== undefined ? t2 : undefined, this.color = i2.color, this.completedAt = (d2 = qp(i2.completedAt)) !== null && d2 !== undefined ? d2 : undefined, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = (l2 = i2.content) !== null && l2 !== undefined ? l2 : undefined, this.createdAt = (o2 = qp(i2.createdAt)) !== null && o2 !== undefined ? o2 : new Date, this.description = i2.description, this.healthUpdatedAt = (r2 = qp(i2.healthUpdatedAt)) !== null && r2 !== undefined ? r2 : undefined, this.icon = (m2 = i2.icon) !== null && m2 !== undefined ? m2 : undefined, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.labelIds = i2.labelIds, this.name = i2.name, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = (s2 = qp(i2.projectUpdateRemindersPausedUntilAt)) !== null && s2 !== undefined ? s2 : undefined, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = (u2 = i2.startDate) !== null && u2 !== undefined ? u2 : undefined, this.startedAt = (k2 = qp(i2.startedAt)) !== null && k2 !== undefined ? k2 : undefined, this.state = i2.state, this.targetDate = (v2 = i2.targetDate) !== null && v2 !== undefined ? v2 : undefined, this.trashed = (c2 = i2.trashed) !== null && c2 !== undefined ? c2 : undefined, this.updateReminderFrequency = (p2 = i2.updateReminderFrequency) !== null && p2 !== undefined ? p2 : undefined, this.updateReminderFrequencyInWeeks = (N2 = i2.updateReminderFrequencyInWeeks) !== null && N2 !== undefined ? N2 : undefined, this.updateRemindersHour = (h2 = i2.updateRemindersHour) !== null && h2 !== undefined ? h2 : undefined, this.updatedAt = (f2 = qp(i2.updatedAt)) !== null && f2 !== undefined ? f2 : new Date, this.url = i2.url, this.documentContent = i2.documentContent ? new YN(e2, i2.documentContent) : undefined, this.frequencyResolution = i2.frequencyResolution, this.health = (y2 = i2.health) !== null && y2 !== undefined ? y2 : undefined, this.startDateResolution = (S2 = i2.startDateResolution) !== null && S2 !== undefined ? S2 : undefined, this.targetDateResolution = (b2 = i2.targetDateResolution) !== null && b2 !== undefined ? b2 : undefined, this.updateRemindersDay = (g2 = i2.updateRemindersDay) !== null && g2 !== undefined ? g2 : undefined, this._convertedFromIssue = (F2 = i2.convertedFromIssue) !== null && F2 !== undefined ? F2 : undefined, this._creator = (D2 = i2.creator) !== null && D2 !== undefined ? D2 : undefined, this._favorite = (_2 = i2.favorite) !== null && _2 !== undefined ? _2 : undefined, this._integrationsSettings = (V2 = i2.integrationsSettings) !== null && V2 !== undefined ? V2 : undefined, this._lastAppliedTemplate = (A2 = i2.lastAppliedTemplate) !== null && A2 !== undefined ? A2 : undefined, this._lastUpdate = (T2 = i2.lastUpdate) !== null && T2 !== undefined ? T2 : undefined, this._lead = (I2 = i2.lead) !== null && I2 !== undefined ? I2 : undefined, this._status = i2.status;
    }
    get convertedFromIssue() {
      var e2, i2;
      return ((e2 = this._convertedFromIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._convertedFromIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get convertedFromIssueId() {
      var e2;
      return (e2 = this._convertedFromIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get favorite() {
      var e2, i2;
      return ((e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id) ? new og(this._request).fetch((i2 = this._favorite) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get favoriteId() {
      var e2;
      return (e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id;
    }
    get integrationsSettings() {
      var e2, i2;
      return ((e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id) ? new gg(this._request).fetch((i2 = this._integrationsSettings) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationsSettingsId() {
      var e2;
      return (e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastUpdate() {
      var e2, i2;
      return ((e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._lastUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastUpdateId() {
      var e2;
      return (e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get lead() {
      var e2, i2;
      return ((e2 = this._lead) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._lead) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get leadId() {
      var e2;
      return (e2 = this._lead) === null || e2 === undefined ? undefined : e2.id;
    }
    get status() {
      return new eF(this._request).fetch(this._status.id);
    }
    get statusId() {
      var e2;
      return (e2 = this._status) === null || e2 === undefined ? undefined : e2.id;
    }
    comments(e2) {
      return new pI(this._request, this.id, e2).fetch(e2);
    }
    documents(e2) {
      return new NI(this._request, this.id, e2).fetch(e2);
    }
    externalLinks(e2) {
      return new hI(this._request, this.id, e2).fetch(e2);
    }
    history(e2) {
      return new fI(this._request, this.id, e2).fetch(e2);
    }
    initiatives(e2) {
      return new yI(this._request, this.id, e2).fetch(e2);
    }
    inverseRelations(e2) {
      return new SI(this._request, this.id, e2).fetch(e2);
    }
    issues(e2) {
      return new bI(this._request, this.id, e2).fetch(e2);
    }
    labels(e2) {
      return new gI(this._request, this.id, e2).fetch(e2);
    }
    members(e2) {
      return new FI(this._request, this.id, e2).fetch(e2);
    }
    needs(e2) {
      return new DI(this._request, this.id, e2).fetch(e2);
    }
    projectMilestones(e2) {
      return new _I(this._request, this.id, e2).fetch(e2);
    }
    projectUpdates(e2) {
      return new VI(this._request, this.id, e2).fetch(e2);
    }
    relations(e2) {
      return new AI(this._request, this.id, e2).fetch(e2);
    }
    teams(e2) {
      return new TI(this._request, this.id, e2).fetch(e2);
    }
    archive(e2) {
      return new mA(this._request).fetch(this.id, e2);
    }
    create(e2, i2) {
      return new sA(this._request).fetch(e2, i2);
    }
    delete() {
      return new uA(this._request).fetch(this.id);
    }
    unarchive() {
      return new VA(this._request).fetch(this.id);
    }
    update() {
      return new nF(this._request).fetch(this.id);
    }
  }

  class _y extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Vy {
    constructor(e2) {
      this.id = e2.id, this.name = e2.name, this.url = e2.url;
    }
  }

  class Ay extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Dy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Ty extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.filter = (n2 = i2.filter) !== null && n2 !== undefined ? n2 : undefined, this.logId = (a2 = i2.logId) !== null && a2 !== undefined ? a2 : undefined;
    }
  }

  class Iy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.entries = i2.entries, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._project = i2.project;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class wy extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Iy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Cy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.isGroup = i2.isGroup, this.lastAppliedAt = (d2 = qp(i2.lastAppliedAt)) !== null && d2 !== undefined ? d2 : undefined, this.name = i2.name, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this._creator = (o2 = i2.creator) !== null && o2 !== undefined ? o2 : undefined, this._parent = (r2 = i2.parent) !== null && r2 !== undefined ? r2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get parent() {
      var e2, i2;
      return ((e2 = this._parent) === null || e2 === undefined ? undefined : e2.id) ? new Jg(this._request).fetch((i2 = this._parent) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get parentId() {
      var e2;
      return (e2 = this._parent) === null || e2 === undefined ? undefined : e2.id;
    }
    children(e2) {
      return new II(this._request, this.id, e2).fetch(e2);
    }
    projects(e2) {
      return new wI(this._request, this.id, e2).fetch(e2);
    }
    create(e2) {
      return new kA(this._request).fetch(e2);
    }
    delete() {
      return new vA(this._request).fetch(this.id);
    }
    update(e2) {
      return new cA(this._request).fetch(this.id, e2);
    }
  }

  class Py extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Cy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class qy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectLabel = i2.projectLabel;
    }
    get projectLabel() {
      return new Jg(this._request).fetch(this._projectLabel.id);
    }
    get projectLabelId() {
      var e2;
      return (e2 = this._projectLabel) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class xy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.name = i2.name, this.progress = i2.progress, this.sortOrder = i2.sortOrder, this.targetDate = (d2 = i2.targetDate) !== null && d2 !== undefined ? d2 : undefined, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.documentContent = i2.documentContent ? new YN(e2, i2.documentContent) : undefined, this.status = i2.status, this._project = i2.project;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    issues(e2) {
      return new CI(this._request, this.id, e2).fetch(e2);
    }
    create(e2) {
      return new pA(this._request).fetch(e2);
    }
    delete() {
      return new NA(this._request).fetch(this.id);
    }
    update(e2) {
      return new hA(this._request).fetch(this.id, e2);
    }
  }

  class jy {
    constructor(e2) {
      this.id = e2.id, this.name = e2.name, this.targetDate = e2.targetDate;
    }
  }

  class Uy extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new xy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Oy extends Ip {
    constructor(e2, i2) {
      super(e2), this.issueId = i2.issueId, this.teamId = i2.teamId;
    }
  }

  class By extends Ip {
    constructor(e2, i2) {
      super(e2), this.projectId = i2.projectId, this.teamIds = i2.teamIds;
    }
  }

  class Ry extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectMilestone = i2.projectMilestone;
    }
    get projectMilestone() {
      return new $g(this._request).fetch(this._projectMilestone.id);
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Ey extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.parentCommentId = (l2 = i2.parentCommentId) !== null && l2 !== undefined ? l2 : undefined, this.projectId = i2.projectId, this.projectMilestoneId = (o2 = i2.projectMilestoneId) !== null && o2 !== undefined ? o2 : undefined, this.projectUpdateId = (r2 = i2.projectUpdateId) !== null && r2 !== undefined ? r2 : undefined, this.reactionEmoji = (m2 = i2.reactionEmoji) !== null && m2 !== undefined ? m2 : undefined, this.readAt = (s2 = qp(i2.readAt)) !== null && s2 !== undefined ? s2 : undefined, this.snoozedUntilAt = (u2 = qp(i2.snoozedUntilAt)) !== null && u2 !== undefined ? u2 : undefined, this.type = i2.type, this.unsnoozedAt = (k2 = qp(i2.unsnoozedAt)) !== null && k2 !== undefined ? k2 : undefined, this.updatedAt = (v2 = qp(i2.updatedAt)) !== null && v2 !== undefined ? v2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (c2 = i2.actor) !== null && c2 !== undefined ? c2 : undefined, this._comment = (p2 = i2.comment) !== null && p2 !== undefined ? p2 : undefined, this._document = (N2 = i2.document) !== null && N2 !== undefined ? N2 : undefined, this._externalUserActor = (h2 = i2.externalUserActor) !== null && h2 !== undefined ? h2 : undefined, this._parentComment = (f2 = i2.parentComment) !== null && f2 !== undefined ? f2 : undefined, this._project = i2.project, this._projectUpdate = (y2 = i2.projectUpdate) !== null && y2 !== undefined ? y2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get document() {
      var e2, i2;
      return ((e2 = this._document) === null || e2 === undefined ? undefined : e2.id) ? new Yb(this._request).fetch((i2 = this._document) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get documentId() {
      var e2;
      return (e2 = this._document) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get parentComment() {
      var e2, i2;
      return ((e2 = this._parentComment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._parentComment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectUpdate() {
      var e2, i2;
      return ((e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._projectUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class My extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = (s2 = i2.initiative) !== null && s2 !== undefined ? s2 : undefined, this._label = (u2 = i2.label) !== null && u2 !== undefined ? u2 : undefined, this._project = i2.project, this._subscriber = i2.subscriber, this._team = (k2 = i2.team) !== null && k2 !== undefined ? k2 : undefined, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Ly extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._project = (n2 = i2.project) !== null && n2 !== undefined ? n2 : undefined;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class zy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.anchorType = i2.anchorType, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.relatedAnchorType = i2.relatedAnchorType, this.type = i2.type, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._project = i2.project, this._projectMilestone = (d2 = i2.projectMilestone) !== null && d2 !== undefined ? d2 : undefined, this._relatedProject = i2.relatedProject, this._relatedProjectMilestone = (l2 = i2.relatedProjectMilestone) !== null && l2 !== undefined ? l2 : undefined, this._user = (o2 = i2.user) !== null && o2 !== undefined ? o2 : undefined;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectMilestone() {
      var e2, i2;
      return ((e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id) ? new $g(this._request).fetch((i2 = this._projectMilestone) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedProject() {
      return new Qg(this._request).fetch(this._relatedProject.id);
    }
    get relatedProjectId() {
      var e2;
      return (e2 = this._relatedProject) === null || e2 === undefined ? undefined : e2.id;
    }
    get relatedProjectMilestone() {
      var e2, i2;
      return ((e2 = this._relatedProjectMilestone) === null || e2 === undefined ? undefined : e2.id) ? new $g(this._request).fetch((i2 = this._relatedProjectMilestone) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get relatedProjectMilestoneId() {
      var e2;
      return (e2 = this._relatedProjectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new fA(this._request).fetch(e2);
    }
    delete() {
      return new yA(this._request).fetch(this.id);
    }
    update(e2) {
      return new SA(this._request).fetch(this.id, e2);
    }
  }

  class Wy extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new zy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Hy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectRelation = i2.projectRelation;
    }
    get projectRelation() {
      return new Yg(this._request).fetch(this._projectRelation.id);
    }
    get projectRelationId() {
      var e2;
      return (e2 = this._projectRelation) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Qy extends Ip {
    constructor(e2, i2) {
      super(e2), this.totalCount = i2.totalCount, this.archivePayload = new $p(e2, i2.archivePayload), this.pageInfo = new by(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new Gy(e2, i3));
    }
  }

  class Gy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2, I2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.autoArchivedAt = (a2 = qp(i2.autoArchivedAt)) !== null && a2 !== undefined ? a2 : undefined, this.canceledAt = (t2 = qp(i2.canceledAt)) !== null && t2 !== undefined ? t2 : undefined, this.color = i2.color, this.completedAt = (d2 = qp(i2.completedAt)) !== null && d2 !== undefined ? d2 : undefined, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = (l2 = i2.content) !== null && l2 !== undefined ? l2 : undefined, this.createdAt = (o2 = qp(i2.createdAt)) !== null && o2 !== undefined ? o2 : new Date, this.description = i2.description, this.healthUpdatedAt = (r2 = qp(i2.healthUpdatedAt)) !== null && r2 !== undefined ? r2 : undefined, this.icon = (m2 = i2.icon) !== null && m2 !== undefined ? m2 : undefined, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.labelIds = i2.labelIds, this.metadata = i2.metadata, this.name = i2.name, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = (s2 = qp(i2.projectUpdateRemindersPausedUntilAt)) !== null && s2 !== undefined ? s2 : undefined, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = (u2 = i2.startDate) !== null && u2 !== undefined ? u2 : undefined, this.startedAt = (k2 = qp(i2.startedAt)) !== null && k2 !== undefined ? k2 : undefined, this.state = i2.state, this.targetDate = (v2 = i2.targetDate) !== null && v2 !== undefined ? v2 : undefined, this.trashed = (c2 = i2.trashed) !== null && c2 !== undefined ? c2 : undefined, this.updateReminderFrequency = (p2 = i2.updateReminderFrequency) !== null && p2 !== undefined ? p2 : undefined, this.updateReminderFrequencyInWeeks = (N2 = i2.updateReminderFrequencyInWeeks) !== null && N2 !== undefined ? N2 : undefined, this.updateRemindersHour = (h2 = i2.updateRemindersHour) !== null && h2 !== undefined ? h2 : undefined, this.updatedAt = (f2 = qp(i2.updatedAt)) !== null && f2 !== undefined ? f2 : new Date, this.url = i2.url, this.documentContent = i2.documentContent ? new YN(e2, i2.documentContent) : undefined, this.frequencyResolution = i2.frequencyResolution, this.health = (y2 = i2.health) !== null && y2 !== undefined ? y2 : undefined, this.startDateResolution = (S2 = i2.startDateResolution) !== null && S2 !== undefined ? S2 : undefined, this.targetDateResolution = (b2 = i2.targetDateResolution) !== null && b2 !== undefined ? b2 : undefined, this.updateRemindersDay = (g2 = i2.updateRemindersDay) !== null && g2 !== undefined ? g2 : undefined, this._convertedFromIssue = (F2 = i2.convertedFromIssue) !== null && F2 !== undefined ? F2 : undefined, this._creator = (D2 = i2.creator) !== null && D2 !== undefined ? D2 : undefined, this._favorite = (_2 = i2.favorite) !== null && _2 !== undefined ? _2 : undefined, this._integrationsSettings = (V2 = i2.integrationsSettings) !== null && V2 !== undefined ? V2 : undefined, this._lastAppliedTemplate = (A2 = i2.lastAppliedTemplate) !== null && A2 !== undefined ? A2 : undefined, this._lastUpdate = (T2 = i2.lastUpdate) !== null && T2 !== undefined ? T2 : undefined, this._lead = (I2 = i2.lead) !== null && I2 !== undefined ? I2 : undefined, this._status = i2.status;
    }
    get convertedFromIssue() {
      var e2, i2;
      return ((e2 = this._convertedFromIssue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._convertedFromIssue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get convertedFromIssueId() {
      var e2;
      return (e2 = this._convertedFromIssue) === null || e2 === undefined ? undefined : e2.id;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get favorite() {
      var e2, i2;
      return ((e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id) ? new og(this._request).fetch((i2 = this._favorite) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get favoriteId() {
      var e2;
      return (e2 = this._favorite) === null || e2 === undefined ? undefined : e2.id;
    }
    get integrationsSettings() {
      var e2, i2;
      return ((e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id) ? new gg(this._request).fetch((i2 = this._integrationsSettings) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationsSettingsId() {
      var e2;
      return (e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastAppliedTemplate() {
      var e2, i2;
      return ((e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._lastAppliedTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastAppliedTemplateId() {
      var e2;
      return (e2 = this._lastAppliedTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastUpdate() {
      var e2, i2;
      return ((e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._lastUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastUpdateId() {
      var e2;
      return (e2 = this._lastUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get lead() {
      var e2, i2;
      return ((e2 = this._lead) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._lead) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get leadId() {
      var e2;
      return (e2 = this._lead) === null || e2 === undefined ? undefined : e2.id;
    }
    get status() {
      return new eF(this._request).fetch(this._status.id);
    }
    get statusId() {
      var e2;
      return (e2 = this._status) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Jy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.indefinite = i2.indefinite, this.name = i2.name, this.position = i2.position, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this.type = i2.type;
    }
    archive() {
      return new gA(this._request).fetch(this.id);
    }
    create(e2) {
      return new FA(this._request).fetch(e2);
    }
    unarchive() {
      return new DA(this._request).fetch(this.id);
    }
    update(e2) {
      return new _A(this._request).fetch(this.id, e2);
    }
  }

  class Ky extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new eF(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class $y {
    constructor(e2) {
      this.color = e2.color, this.id = e2.id, this.name = e2.name, this.type = e2.type;
    }
  }

  class Zy extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Jy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class Yy extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._status = i2.status;
    }
    get status() {
      return new eF(this._request).fetch(this._status.id);
    }
    get statusId() {
      var e2;
      return (e2 = this._status) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Xy extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.body = i2.body, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.diff = (t2 = i2.diff) !== null && t2 !== undefined ? t2 : undefined, this.diffMarkdown = (d2 = i2.diffMarkdown) !== null && d2 !== undefined ? d2 : undefined, this.editedAt = (l2 = qp(i2.editedAt)) !== null && l2 !== undefined ? l2 : undefined, this.id = i2.id, this.isDiffHidden = i2.isDiffHidden, this.isStale = i2.isStale, this.reactionData = i2.reactionData, this.slugId = i2.slugId, this.updatedAt = (o2 = qp(i2.updatedAt)) !== null && o2 !== undefined ? o2 : new Date, this.url = i2.url, this.reactions = i2.reactions.map((i3) => new uS(e2, i3)), this.health = i2.health, this._project = i2.project, this._user = i2.user;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    comments(e2) {
      return new PI(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new TA(this._request).fetch(this.id);
    }
    create(e2) {
      return new IA(this._request).fetch(e2);
    }
    delete() {
      return new wA(this._request).fetch(this.id);
    }
    unarchive() {
      return new CA(this._request).fetch(this.id);
    }
    update(e2) {
      return new PA(this._request).fetch(this.id, e2);
    }
  }

  class eS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class iS {
    constructor(e2) {
      this.body = e2.body, this.id = e2.id, this.userId = e2.userId, this.project = new Vy(e2.project);
    }
  }

  class nS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Xy(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class aS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectUpdate = i2.projectUpdate;
    }
    get projectUpdate() {
      return new nF(this._request).fetch(this._projectUpdate.id);
    }
    get projectUpdateId() {
      var e2;
      return (e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class tS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class dS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = i2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.emailedAt = (d2 = qp(i2.emailedAt)) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.parentCommentId = (l2 = i2.parentCommentId) !== null && l2 !== undefined ? l2 : undefined, this.pullRequestId = i2.pullRequestId, this.reactionEmoji = (o2 = i2.reactionEmoji) !== null && o2 !== undefined ? o2 : undefined, this.readAt = (r2 = qp(i2.readAt)) !== null && r2 !== undefined ? r2 : undefined, this.snoozedUntilAt = (m2 = qp(i2.snoozedUntilAt)) !== null && m2 !== undefined ? m2 : undefined, this.type = i2.type, this.unsnoozedAt = (s2 = qp(i2.unsnoozedAt)) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = (u2 = qp(i2.updatedAt)) !== null && u2 !== undefined ? u2 : new Date, this.botActor = i2.botActor ? new jp(e2, i2.botActor) : undefined, this._actor = (k2 = i2.actor) !== null && k2 !== undefined ? k2 : undefined, this._externalUserActor = (v2 = i2.externalUserActor) !== null && v2 !== undefined ? v2 : undefined, this._user = i2.user;
    }
    get actor() {
      var e2, i2;
      return ((e2 = this._actor) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._actor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get actorId() {
      var e2;
      return (e2 = this._actor) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUserActor() {
      var e2, i2;
      return ((e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUserActor) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserActorId() {
      var e2;
      return (e2 = this._externalUserActor) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class lS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date;
    }
    create(e2) {
      return new qA(this._request).fetch(e2);
    }
    delete() {
      return new xA(this._request).fetch(this.id);
    }
  }

  class oS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.entity = new lS(e2, i2.entity);
    }
  }

  class rS extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class mS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.identifier = (n2 = i2.identifier) !== null && n2 !== undefined ? n2 : undefined, this.kind = i2.kind, this.limits = i2.limits.map((i3) => new sS(e2, i3));
    }
  }

  class sS extends Ip {
    constructor(e2, i2) {
      super(e2), this.allowedAmount = i2.allowedAmount, this.period = i2.period, this.remainingAmount = i2.remainingAmount, this.requestedAmount = i2.requestedAmount, this.reset = i2.reset, this.type = i2.type;
    }
  }

  class uS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.emoji = i2.emoji, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._comment = (d2 = i2.comment) !== null && d2 !== undefined ? d2 : undefined, this._externalUser = (l2 = i2.externalUser) !== null && l2 !== undefined ? l2 : undefined, this._initiativeUpdate = (o2 = i2.initiativeUpdate) !== null && o2 !== undefined ? o2 : undefined, this._issue = (r2 = i2.issue) !== null && r2 !== undefined ? r2 : undefined, this._projectUpdate = (m2 = i2.projectUpdate) !== null && m2 !== undefined ? m2 : undefined, this._user = (s2 = i2.user) !== null && s2 !== undefined ? s2 : undefined;
    }
    get comment() {
      var e2, i2;
      return ((e2 = this._comment) === null || e2 === undefined ? undefined : e2.id) ? new Ob(this._request).fetch({ id: (i2 = this._comment) === null || i2 === undefined ? undefined : i2.id }) : undefined;
    }
    get commentId() {
      var e2;
      return (e2 = this._comment) === null || e2 === undefined ? undefined : e2.id;
    }
    get externalUser() {
      var e2, i2;
      return ((e2 = this._externalUser) === null || e2 === undefined ? undefined : e2.id) ? new dg(this._request).fetch((i2 = this._externalUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get externalUserId() {
      var e2;
      return (e2 = this._externalUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiativeUpdate() {
      var e2, i2;
      return ((e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id) ? new cg(this._request).fetch((i2 = this._initiativeUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeUpdateId() {
      var e2;
      return (e2 = this._initiativeUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get issue() {
      var e2, i2;
      return ((e2 = this._issue) === null || e2 === undefined ? undefined : e2.id) ? new Fg(this._request).fetch((i2 = this._issue) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get issueId() {
      var e2;
      return (e2 = this._issue) === null || e2 === undefined ? undefined : e2.id;
    }
    get projectUpdate() {
      var e2, i2;
      return ((e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id) ? new nF(this._request).fetch((i2 = this._projectUpdate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectUpdateId() {
      var e2;
      return (e2 = this._projectUpdate) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new jA(this._request).fetch(e2);
    }
    delete() {
      return new UA(this._request).fetch(this.id);
    }
  }

  class kS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.reaction = new uS(e2, i2.reaction);
    }
  }

  class vS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = (a2 = i2.color) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.description = (d2 = i2.description) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.url = i2.url, this._creator = i2.creator, this._owner = (o2 = i2.owner) !== null && o2 !== undefined ? o2 : undefined;
    }
    get creator() {
      return new VF(this._request).fetch(this._creator.id);
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get owner() {
      var e2, i2;
      return ((e2 = this._owner) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._owner) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get ownerId() {
      var e2;
      return (e2 = this._owner) === null || e2 === undefined ? undefined : e2.id;
    }
    projects(e2) {
      return new qI(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new EA(this._request).fetch(this.id);
    }
    create(e2) {
      return new MA(this._request).fetch(e2);
    }
    delete() {
      return new LA(this._request).fetch(this.id);
    }
    unarchive() {
      return new QA(this._request).fetch(this.id);
    }
    update(e2) {
      return new GA(this._request).fetch(this.id, e2);
    }
  }

  class cS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new oF(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class pS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new vS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class NS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmap = i2.roadmap;
    }
    get roadmap() {
      return new oF(this._request).fetch(this._roadmap.id);
    }
    get roadmapId() {
      var e2;
      return (e2 = this._roadmap) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class hS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._project = i2.project, this._roadmap = i2.roadmap;
    }
    get project() {
      return new Qg(this._request).fetch(this._project.id);
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get roadmap() {
      return new oF(this._request).fetch(this._roadmap.id);
    }
    get roadmapId() {
      var e2;
      return (e2 = this._roadmap) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new zA(this._request).fetch(e2);
    }
    delete() {
      return new WA(this._request).fetch(this.id);
    }
    update(e2) {
      return new HA(this._request).fetch(this.id, e2);
    }
  }

  class fS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new hS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class yS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmapToProject = i2.roadmapToProject;
    }
    get roadmapToProject() {
      return new rF(this._request).fetch(this._roadmapToProject.id);
    }
    get roadmapToProjectId() {
      var e2;
      return (e2 = this._roadmapToProject) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class SS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.canSendFromCustomDomain = i2.canSendFromCustomDomain, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.domain = i2.domain, this.id = i2.id, this.region = i2.region, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.dnsRecords = i2.dnsRecords.map((i3) => new bS(e2, i3)), this._creator = (d2 = i2.creator) !== null && d2 !== undefined ? d2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
  }

  class bS extends Ip {
    constructor(e2, i2) {
      super(e2), this.content = i2.content, this.isVerified = i2.isVerified, this.name = i2.name, this.type = i2.type;
    }
  }

  class gS extends Ip {
    constructor(e2, i2) {
      super(e2), this.hasDefaultAsk = i2.hasDefaultAsk, this.id = i2.id;
    }
  }

  class FS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.nudgeToConnectMainSlackIntegration = (n2 = i2.nudgeToConnectMainSlackIntegration) !== null && n2 !== undefined ? n2 : undefined, this.nudgeToUpdateMainSlackIntegration = (a2 = i2.nudgeToUpdateMainSlackIntegration) !== null && a2 !== undefined ? a2 : undefined, this.success = i2.success, this._integration = (t2 = i2.integration) !== null && t2 !== undefined ? t2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class DS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super(e2), this.aiTitles = (n2 = i2.aiTitles) !== null && n2 !== undefined ? n2 : undefined, this.autoCreateOnBotMention = (a2 = i2.autoCreateOnBotMention) !== null && a2 !== undefined ? a2 : undefined, this.autoCreateOnEmoji = (t2 = i2.autoCreateOnEmoji) !== null && t2 !== undefined ? t2 : undefined, this.autoCreateOnMessage = (d2 = i2.autoCreateOnMessage) !== null && d2 !== undefined ? d2 : undefined, this.autoCreateTemplateId = (l2 = i2.autoCreateTemplateId) !== null && l2 !== undefined ? l2 : undefined, this.botAdded = (o2 = i2.botAdded) !== null && o2 !== undefined ? o2 : undefined, this.id = i2.id, this.isPrivate = (r2 = i2.isPrivate) !== null && r2 !== undefined ? r2 : undefined, this.isShared = (m2 = i2.isShared) !== null && m2 !== undefined ? m2 : undefined, this.name = i2.name, this.postAcceptedFromTriageUpdates = (s2 = i2.postAcceptedFromTriageUpdates) !== null && s2 !== undefined ? s2 : undefined, this.postCancellationUpdates = (u2 = i2.postCancellationUpdates) !== null && u2 !== undefined ? u2 : undefined, this.postCompletionUpdates = (k2 = i2.postCompletionUpdates) !== null && k2 !== undefined ? k2 : undefined, this.teams = i2.teams.map((i3) => new gS(e2, i3));
    }
  }

  class _S extends Ip {
    constructor(e2, i2) {
      super(e2), this.samlSsoUrl = i2.samlSsoUrl, this.success = i2.success;
    }
  }

  class VS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class AS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.displayName = (n2 = i2.displayName) !== null && n2 !== undefined ? n2 : undefined, this.id = (a2 = i2.id) !== null && a2 !== undefined ? a2 : undefined, this.isConnected = i2.isConnected, this.isPersonalIntegrationConnected = i2.isPersonalIntegrationConnected, this.isPersonalIntegrationRequired = i2.isPersonalIntegrationRequired, this.name = (t2 = i2.name) !== null && t2 !== undefined ? t2 : undefined, this.subType = (d2 = i2.subType) !== null && d2 !== undefined ? d2 : undefined, this.type = i2.type, this.url = (l2 = i2.url) !== null && l2 !== undefined ? l2 : undefined;
    }
  }

  class TS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2, g2, F2, D2, _2, V2, A2, T2;
      super(e2), this.aiThreadSummariesEnabled = i2.aiThreadSummariesEnabled, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.autoArchivePeriod = i2.autoArchivePeriod, this.autoCloseChildIssues = (a2 = i2.autoCloseChildIssues) !== null && a2 !== undefined ? a2 : undefined, this.autoCloseParentIssues = (t2 = i2.autoCloseParentIssues) !== null && t2 !== undefined ? t2 : undefined, this.autoClosePeriod = (d2 = i2.autoClosePeriod) !== null && d2 !== undefined ? d2 : undefined, this.autoCloseStateId = (l2 = i2.autoCloseStateId) !== null && l2 !== undefined ? l2 : undefined, this.color = (o2 = i2.color) !== null && o2 !== undefined ? o2 : undefined, this.createdAt = (r2 = qp(i2.createdAt)) !== null && r2 !== undefined ? r2 : new Date, this.cycleCalenderUrl = i2.cycleCalenderUrl, this.cycleCooldownTime = i2.cycleCooldownTime, this.cycleDuration = i2.cycleDuration, this.cycleIssueAutoAssignCompleted = i2.cycleIssueAutoAssignCompleted, this.cycleIssueAutoAssignStarted = i2.cycleIssueAutoAssignStarted, this.cycleLockToActive = i2.cycleLockToActive, this.cycleStartDay = i2.cycleStartDay, this.cyclesEnabled = i2.cyclesEnabled, this.defaultIssueEstimate = i2.defaultIssueEstimate, this.defaultTemplateForMembersId = (m2 = i2.defaultTemplateForMembersId) !== null && m2 !== undefined ? m2 : undefined, this.defaultTemplateForNonMembersId = (s2 = i2.defaultTemplateForNonMembersId) !== null && s2 !== undefined ? s2 : undefined, this.description = (u2 = i2.description) !== null && u2 !== undefined ? u2 : undefined, this.displayName = i2.displayName, this.groupIssueHistory = i2.groupIssueHistory, this.icon = (k2 = i2.icon) !== null && k2 !== undefined ? k2 : undefined, this.id = i2.id, this.inheritIssueEstimation = i2.inheritIssueEstimation, this.inheritWorkflowStatuses = i2.inheritWorkflowStatuses, this.inviteHash = i2.inviteHash, this.issueCount = i2.issueCount, this.issueEstimationAllowZero = i2.issueEstimationAllowZero, this.issueEstimationExtended = i2.issueEstimationExtended, this.issueEstimationType = i2.issueEstimationType, this.issueOrderingNoPriorityFirst = i2.issueOrderingNoPriorityFirst, this.issueSortOrderDefaultToBottom = i2.issueSortOrderDefaultToBottom, this.key = i2.key, this.name = i2.name, this.private = i2.private, this.requirePriorityToLeaveTriage = i2.requirePriorityToLeaveTriage, this.scimGroupName = (v2 = i2.scimGroupName) !== null && v2 !== undefined ? v2 : undefined, this.scimManaged = i2.scimManaged, this.setIssueSortOrderOnStateChange = i2.setIssueSortOrderOnStateChange, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.timezone = i2.timezone, this.triageEnabled = i2.triageEnabled, this.upcomingCycleCount = i2.upcomingCycleCount, this.updatedAt = (c2 = qp(i2.updatedAt)) !== null && c2 !== undefined ? c2 : new Date, this._activeCycle = (p2 = i2.activeCycle) !== null && p2 !== undefined ? p2 : undefined, this._defaultIssueState = (N2 = i2.defaultIssueState) !== null && N2 !== undefined ? N2 : undefined, this._defaultProjectTemplate = (h2 = i2.defaultProjectTemplate) !== null && h2 !== undefined ? h2 : undefined, this._defaultTemplateForMembers = (f2 = i2.defaultTemplateForMembers) !== null && f2 !== undefined ? f2 : undefined, this._defaultTemplateForNonMembers = (y2 = i2.defaultTemplateForNonMembers) !== null && y2 !== undefined ? y2 : undefined, this._draftWorkflowState = (S2 = i2.draftWorkflowState) !== null && S2 !== undefined ? S2 : undefined, this._integrationsSettings = (b2 = i2.integrationsSettings) !== null && b2 !== undefined ? b2 : undefined, this._markedAsDuplicateWorkflowState = (g2 = i2.markedAsDuplicateWorkflowState) !== null && g2 !== undefined ? g2 : undefined, this._mergeWorkflowState = (F2 = i2.mergeWorkflowState) !== null && F2 !== undefined ? F2 : undefined, this._mergeableWorkflowState = (D2 = i2.mergeableWorkflowState) !== null && D2 !== undefined ? D2 : undefined, this._reviewWorkflowState = (_2 = i2.reviewWorkflowState) !== null && _2 !== undefined ? _2 : undefined, this._startWorkflowState = (V2 = i2.startWorkflowState) !== null && V2 !== undefined ? V2 : undefined, this._triageIssueState = (A2 = i2.triageIssueState) !== null && A2 !== undefined ? A2 : undefined, this._triageResponsibility = (T2 = i2.triageResponsibility) !== null && T2 !== undefined ? T2 : undefined;
    }
    get activeCycle() {
      var e2, i2;
      return ((e2 = this._activeCycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._activeCycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get activeCycleId() {
      var e2;
      return (e2 = this._activeCycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get defaultIssueState() {
      var e2, i2;
      return ((e2 = this._defaultIssueState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._defaultIssueState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get defaultIssueStateId() {
      var e2;
      return (e2 = this._defaultIssueState) === null || e2 === undefined ? undefined : e2.id;
    }
    get defaultProjectTemplate() {
      var e2, i2;
      return ((e2 = this._defaultProjectTemplate) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._defaultProjectTemplate) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get defaultProjectTemplateId() {
      var e2;
      return (e2 = this._defaultProjectTemplate) === null || e2 === undefined ? undefined : e2.id;
    }
    get defaultTemplateForMembers() {
      var e2, i2;
      return ((e2 = this._defaultTemplateForMembers) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._defaultTemplateForMembers) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get defaultTemplateForNonMembers() {
      var e2, i2;
      return ((e2 = this._defaultTemplateForNonMembers) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._defaultTemplateForNonMembers) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get draftWorkflowState() {
      var e2, i2;
      return ((e2 = this._draftWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._draftWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get draftWorkflowStateId() {
      var e2;
      return (e2 = this._draftWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get integrationsSettings() {
      var e2, i2;
      return ((e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id) ? new gg(this._request).fetch((i2 = this._integrationsSettings) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationsSettingsId() {
      var e2;
      return (e2 = this._integrationsSettings) === null || e2 === undefined ? undefined : e2.id;
    }
    get markedAsDuplicateWorkflowState() {
      var e2, i2;
      return ((e2 = this._markedAsDuplicateWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._markedAsDuplicateWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get markedAsDuplicateWorkflowStateId() {
      var e2;
      return (e2 = this._markedAsDuplicateWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get mergeWorkflowState() {
      var e2, i2;
      return ((e2 = this._mergeWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._mergeWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get mergeWorkflowStateId() {
      var e2;
      return (e2 = this._mergeWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get mergeableWorkflowState() {
      var e2, i2;
      return ((e2 = this._mergeableWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._mergeableWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get mergeableWorkflowStateId() {
      var e2;
      return (e2 = this._mergeableWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get reviewWorkflowState() {
      var e2, i2;
      return ((e2 = this._reviewWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._reviewWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get reviewWorkflowStateId() {
      var e2;
      return (e2 = this._reviewWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get startWorkflowState() {
      var e2, i2;
      return ((e2 = this._startWorkflowState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._startWorkflowState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get startWorkflowStateId() {
      var e2;
      return (e2 = this._startWorkflowState) === null || e2 === undefined ? undefined : e2.id;
    }
    get triageIssueState() {
      var e2, i2;
      return ((e2 = this._triageIssueState) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._triageIssueState) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get triageIssueStateId() {
      var e2;
      return (e2 = this._triageIssueState) === null || e2 === undefined ? undefined : e2.id;
    }
    get triageResponsibility() {
      var e2, i2;
      return ((e2 = this._triageResponsibility) === null || e2 === undefined ? undefined : e2.id) ? new _F(this._request).fetch((i2 = this._triageResponsibility) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get triageResponsibilityId() {
      var e2;
      return (e2 = this._triageResponsibility) === null || e2 === undefined ? undefined : e2.id;
    }
    cycles(e2) {
      return new xI(this._request, this.id, e2).fetch(e2);
    }
    gitAutomationStates(e2) {
      return new jI(this._request, this.id, e2).fetch(e2);
    }
    issues(e2) {
      return new UI(this._request, this.id, e2).fetch(e2);
    }
    labels(e2) {
      return new OI(this._request, this.id, e2).fetch(e2);
    }
    members(e2) {
      return new BI(this._request, this.id, e2).fetch(e2);
    }
    memberships(e2) {
      return new RI(this._request, this.id, e2).fetch(e2);
    }
    projects(e2) {
      return new EI(this._request, this.id, e2).fetch(e2);
    }
    states(e2) {
      return new MI(this._request, this.id, e2).fetch(e2);
    }
    templates(e2) {
      return new LI(this._request, this.id, e2).fetch(e2);
    }
    webhooks(e2) {
      return new zI(this._request, this.id, e2).fetch(e2);
    }
    create(e2, i2) {
      return new KA(this._request).fetch(e2, i2);
    }
    delete() {
      return new ZA(this._request).fetch(this.id);
    }
    unarchive() {
      return new nT(this._request).fetch(this.id);
    }
    update(e2, i2) {
      return new aT(this._request).fetch(this.id, e2, i2);
    }
  }

  class IS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class wS {
    constructor(e2) {
      this.id = e2.id, this.key = e2.key, this.name = e2.name;
    }
  }

  class CS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new TS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class PS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.owner = i2.owner, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this._team = i2.team, this._user = i2.user;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new XA(this._request).fetch(e2);
    }
    delete(e2) {
      return new eT(this._request).fetch(this.id, e2);
    }
    update(e2) {
      return new iT(this._request).fetch(this.id, e2);
    }
  }

  class qS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new PS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class xS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._teamMembership = (n2 = i2.teamMembership) !== null && n2 !== undefined ? n2 : undefined;
    }
    get teamMembership() {
      var e2, i2;
      return ((e2 = this._teamMembership) === null || e2 === undefined ? undefined : e2.id) ? new NF(this._request).fetch((i2 = this._teamMembership) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamMembershipId() {
      var e2;
      return (e2 = this._teamMembership) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class jS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = (s2 = i2.initiative) !== null && s2 !== undefined ? s2 : undefined, this._label = (u2 = i2.label) !== null && u2 !== undefined ? u2 : undefined, this._project = (k2 = i2.project) !== null && k2 !== undefined ? k2 : undefined, this._subscriber = i2.subscriber, this._team = i2.team, this._user = (v2 = i2.user) !== null && v2 !== undefined ? v2 : undefined;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class US extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._team = (n2 = i2.team) !== null && n2 !== undefined ? n2 : undefined;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class OS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.name = i2.name, this.sortOrder = i2.sortOrder, this.templateData = (d2 = xp(i2.templateData)) !== null && d2 !== undefined ? d2 : {}, this.type = i2.type, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this._creator = (o2 = i2.creator) !== null && o2 !== undefined ? o2 : undefined, this._inheritedFrom = (r2 = i2.inheritedFrom) !== null && r2 !== undefined ? r2 : undefined, this._lastUpdatedBy = (m2 = i2.lastUpdatedBy) !== null && m2 !== undefined ? m2 : undefined, this._team = (s2 = i2.team) !== null && s2 !== undefined ? s2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get inheritedFrom() {
      var e2, i2;
      return ((e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id) ? new yF(this._request).fetch((i2 = this._inheritedFrom) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get inheritedFromId() {
      var e2;
      return (e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id;
    }
    get lastUpdatedBy() {
      var e2, i2;
      return ((e2 = this._lastUpdatedBy) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._lastUpdatedBy) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get lastUpdatedById() {
      var e2;
      return (e2 = this._lastUpdatedBy) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new tT(this._request).fetch(e2);
    }
    delete() {
      return new dT(this._request).fetch(this.id);
    }
    update(e2) {
      return new lT(this._request).fetch(this.id, e2);
    }
  }

  class BS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new OS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class RS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._template = i2.template;
    }
    get template() {
      return new yF(this._request).fetch(this._template.id);
    }
    get templateId() {
      var e2;
      return (e2 = this._template) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ES extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.externalId = (t2 = i2.externalId) !== null && t2 !== undefined ? t2 : undefined, this.externalUrl = (d2 = i2.externalUrl) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.name = i2.name, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.entries = i2.entries ? i2.entries.map((i3) => new LS(e2, i3)) : undefined, this._integration = (o2 = i2.integration) !== null && o2 !== undefined ? o2 : undefined;
    }
    get integration() {
      var e2, i2;
      return ((e2 = this._integration) === null || e2 === undefined ? undefined : e2.id) ? new hg(this._request).fetch((i2 = this._integration) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get integrationId() {
      var e2;
      return (e2 = this._integration) === null || e2 === undefined ? undefined : e2.id;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    create(e2) {
      return new oT(this._request).fetch(e2);
    }
    delete() {
      return new rT(this._request).fetch(this.id);
    }
    update(e2) {
      return new sT(this._request).fetch(this.id, e2);
    }
  }

  class MS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new ES(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class LS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.endsAt = (n2 = qp(i2.endsAt)) !== null && n2 !== undefined ? n2 : new Date, this.startsAt = (a2 = qp(i2.startsAt)) !== null && a2 !== undefined ? a2 : new Date, this.userEmail = (t2 = i2.userEmail) !== null && t2 !== undefined ? t2 : undefined, this.userId = (d2 = i2.userId) !== null && d2 !== undefined ? d2 : undefined;
    }
  }

  class zS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._timeSchedule = i2.timeSchedule;
    }
    get timeSchedule() {
      return new gF(this._request).fetch(this._timeSchedule.id);
    }
    get timeScheduleId() {
      var e2;
      return (e2 = this._timeSchedule) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class WS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.manualSelection = i2.manualSelection ? new QS(e2, i2.manualSelection) : undefined, this.action = i2.action, this._currentUser = (d2 = i2.currentUser) !== null && d2 !== undefined ? d2 : undefined, this._team = i2.team, this._timeSchedule = (l2 = i2.timeSchedule) !== null && l2 !== undefined ? l2 : undefined;
    }
    get currentUser() {
      var e2, i2;
      return ((e2 = this._currentUser) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._currentUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get currentUserId() {
      var e2;
      return (e2 = this._currentUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get timeSchedule() {
      var e2, i2;
      return ((e2 = this._timeSchedule) === null || e2 === undefined ? undefined : e2.id) ? new gF(this._request).fetch((i2 = this._timeSchedule) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get timeScheduleId() {
      var e2;
      return (e2 = this._timeSchedule) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new kT(this._request).fetch(e2);
    }
    delete() {
      return new vT(this._request).fetch(this.id);
    }
    update(e2) {
      return new cT(this._request).fetch(this.id, e2);
    }
  }

  class HS extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new WS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class QS extends Ip {
    constructor(e2, i2) {
      super(e2), this.userIds = i2.userIds;
    }
  }

  class GS extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._triageResponsibility = i2.triageResponsibility;
    }
    get triageResponsibility() {
      return new _F(this._request).fetch(this._triageResponsibility.id);
    }
    get triageResponsibilityId() {
      var e2;
      return (e2 = this._triageResponsibility) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class JS extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.assetUrl = i2.assetUrl, this.contentType = i2.contentType, this.filename = i2.filename, this.metaData = (n2 = i2.metaData) !== null && n2 !== undefined ? n2 : undefined, this.size = i2.size, this.uploadUrl = i2.uploadUrl, this.headers = i2.headers.map((i3) => new KS(e2, i3));
    }
  }

  class KS extends Ip {
    constructor(e2, i2) {
      super(e2), this.key = i2.key, this.value = i2.value;
    }
  }

  class $S extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.uploadFile = i2.uploadFile ? new JS(e2, i2.uploadFile) : undefined;
    }
  }

  class ZS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2;
      super(e2), this.active = i2.active, this.admin = i2.admin, this.app = i2.app, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.avatarBackgroundColor = i2.avatarBackgroundColor, this.avatarUrl = (a2 = i2.avatarUrl) !== null && a2 !== undefined ? a2 : undefined, this.calendarHash = (t2 = i2.calendarHash) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = (d2 = qp(i2.createdAt)) !== null && d2 !== undefined ? d2 : new Date, this.createdIssueCount = i2.createdIssueCount, this.description = (l2 = i2.description) !== null && l2 !== undefined ? l2 : undefined, this.disableReason = (o2 = i2.disableReason) !== null && o2 !== undefined ? o2 : undefined, this.displayName = i2.displayName, this.email = i2.email, this.gitHubUserId = (r2 = i2.gitHubUserId) !== null && r2 !== undefined ? r2 : undefined, this.guest = i2.guest, this.id = i2.id, this.initials = i2.initials, this.inviteHash = i2.inviteHash, this.isAssignable = i2.isAssignable, this.isMe = i2.isMe, this.isMentionable = i2.isMentionable, this.lastSeen = (m2 = qp(i2.lastSeen)) !== null && m2 !== undefined ? m2 : undefined, this.name = i2.name, this.statusEmoji = (s2 = i2.statusEmoji) !== null && s2 !== undefined ? s2 : undefined, this.statusLabel = (u2 = i2.statusLabel) !== null && u2 !== undefined ? u2 : undefined, this.statusUntilAt = (k2 = qp(i2.statusUntilAt)) !== null && k2 !== undefined ? k2 : undefined, this.timezone = (v2 = i2.timezone) !== null && v2 !== undefined ? v2 : undefined, this.updatedAt = (c2 = qp(i2.updatedAt)) !== null && c2 !== undefined ? c2 : new Date, this.url = i2.url;
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    assignedIssues(e2) {
      return new WI(this._request, this.id, e2).fetch(e2);
    }
    createdIssues(e2) {
      return new HI(this._request, this.id, e2).fetch(e2);
    }
    delegatedIssues(e2) {
      return new QI(this._request, this.id, e2).fetch(e2);
    }
    drafts(e2) {
      return new GI(this._request, this.id, e2).fetch(e2);
    }
    teamMemberships(e2) {
      return new JI(this._request, this.id, e2).fetch(e2);
    }
    teams(e2) {
      return new KI(this._request, this.id, e2).fetch(e2);
    }
    suspend() {
      return new DT(this._request).fetch(this.id);
    }
    unsuspend() {
      return new _T(this._request).fetch(this.id);
    }
    update(e2) {
      return new VT(this._request).fetch(this.id, e2);
    }
  }

  class YS extends Ip {
    constructor(e2, i2) {
      super(e2), this.success = i2.success;
    }
  }

  class XS extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.approvalErrorCode = (n2 = i2.approvalErrorCode) !== null && n2 !== undefined ? n2 : undefined, this.clientId = i2.clientId, this.createdByLinear = i2.createdByLinear, this.description = (a2 = i2.description) !== null && a2 !== undefined ? a2 : undefined, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = (t2 = i2.imageUrl) !== null && t2 !== undefined ? t2 : undefined, this.isAuthorized = i2.isAuthorized, this.name = i2.name, this.webhooksEnabled = i2.webhooksEnabled;
    }
  }

  class eb {
    constructor(e2) {
      var i2;
      this.avatarUrl = (i2 = e2.avatarUrl) !== null && i2 !== undefined ? i2 : undefined, this.email = e2.email, this.id = e2.id, this.name = e2.name, this.url = e2.url;
    }
  }

  class ib extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new ZS(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class nb extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2;
      super(e2), this.active = i2.active, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.contextViewType = (d2 = i2.contextViewType) !== null && d2 !== undefined ? d2 : undefined, this.userContextViewType = (l2 = i2.userContextViewType) !== null && l2 !== undefined ? l2 : undefined, this._customView = (o2 = i2.customView) !== null && o2 !== undefined ? o2 : undefined, this._customer = (r2 = i2.customer) !== null && r2 !== undefined ? r2 : undefined, this._cycle = (m2 = i2.cycle) !== null && m2 !== undefined ? m2 : undefined, this._initiative = (s2 = i2.initiative) !== null && s2 !== undefined ? s2 : undefined, this._label = (u2 = i2.label) !== null && u2 !== undefined ? u2 : undefined, this._project = (k2 = i2.project) !== null && k2 !== undefined ? k2 : undefined, this._subscriber = i2.subscriber, this._team = (v2 = i2.team) !== null && v2 !== undefined ? v2 : undefined, this._user = i2.user;
    }
    get customView() {
      var e2, i2;
      return ((e2 = this._customView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._customView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customViewId() {
      var e2;
      return (e2 = this._customView) === null || e2 === undefined ? undefined : e2.id;
    }
    get customer() {
      var e2, i2;
      return ((e2 = this._customer) === null || e2 === undefined ? undefined : e2.id) ? new Lb(this._request).fetch((i2 = this._customer) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get customerId() {
      var e2;
      return (e2 = this._customer) === null || e2 === undefined ? undefined : e2.id;
    }
    get cycle() {
      var e2, i2;
      return ((e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id) ? new $b(this._request).fetch((i2 = this._cycle) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get cycleId() {
      var e2;
      return (e2 = this._cycle) === null || e2 === undefined ? undefined : e2.id;
    }
    get initiative() {
      var e2, i2;
      return ((e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._initiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get initiativeId() {
      var e2;
      return (e2 = this._initiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get label() {
      var e2, i2;
      return ((e2 = this._label) === null || e2 === undefined ? undefined : e2.id) ? new Ig(this._request).fetch((i2 = this._label) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get labelId() {
      var e2;
      return (e2 = this._label) === null || e2 === undefined ? undefined : e2.id;
    }
    get project() {
      var e2, i2;
      return ((e2 = this._project) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._project) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get projectId() {
      var e2;
      return (e2 = this._project) === null || e2 === undefined ? undefined : e2.id;
    }
    get subscriber() {
      return new VF(this._request).fetch(this._subscriber.id);
    }
    get subscriberId() {
      var e2;
      return (e2 = this._subscriber) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class ab extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._user = (n2 = i2.user) !== null && n2 !== undefined ? n2 : undefined;
    }
    get user() {
      var e2, i2;
      return ((e2 = this._user) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._user) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class tb extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.autoAssignToSelf = i2.autoAssignToSelf, this.calendarHash = (a2 = i2.calendarHash) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.id = i2.id, this.showFullUserNames = i2.showFullUserNames, this.subscribedToChangelog = i2.subscribedToChangelog, this.subscribedToDPA = i2.subscribedToDPA, this.subscribedToInviteAccepted = i2.subscribedToInviteAccepted, this.subscribedToPrivacyLegalUpdates = i2.subscribedToPrivacyLegalUpdates, this.unsubscribedFrom = i2.unsubscribedFrom, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this.notificationCategoryPreferences = new Yf(e2, i2.notificationCategoryPreferences), this.notificationChannelPreferences = new Xf(e2, i2.notificationChannelPreferences), this.notificationDeliveryPreferences = new iy(e2, i2.notificationDeliveryPreferences), this._user = i2.user;
    }
    get user() {
      return new VF(this._request).fetch(this._user.id);
    }
    get userId() {
      var e2;
      return (e2 = this._user) === null || e2 === undefined ? undefined : e2.id;
    }
    update(e2) {
      return new FT(this._request).fetch(this.id, e2);
    }
  }

  class db extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.flag = (n2 = i2.flag) !== null && n2 !== undefined ? n2 : undefined, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.value = (a2 = i2.value) !== null && a2 !== undefined ? a2 : undefined;
    }
  }

  class lb extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }

  class ob extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
    get userSettings() {
      return new AF(this._request).fetch();
    }
  }

  class rb extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.type = i2.type, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.viewType = i2.viewType, this.preferences = new sb(e2, i2.preferences);
    }
    create(e2) {
      return new AT(this._request).fetch(e2);
    }
    delete() {
      return new TT(this._request).fetch(this.id);
    }
    update(e2) {
      return new IT(this._request).fetch(this.id, e2);
    }
  }

  class mb extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.viewPreferences = new rb(e2, i2.viewPreferences);
    }
  }

  class sb extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.issueGrouping = (n2 = i2.issueGrouping) !== null && n2 !== undefined ? n2 : undefined, this.showCompletedIssues = (a2 = i2.showCompletedIssues) !== null && a2 !== undefined ? a2 : undefined, this.viewOrdering = (t2 = i2.viewOrdering) !== null && t2 !== undefined ? t2 : undefined;
    }
  }

  class ub extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2;
      super(e2), this.allPublicTeams = i2.allPublicTeams, this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.enabled = i2.enabled, this.id = i2.id, this.label = (t2 = i2.label) !== null && t2 !== undefined ? t2 : undefined, this.resourceTypes = i2.resourceTypes, this.secret = (d2 = i2.secret) !== null && d2 !== undefined ? d2 : undefined, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.url = (o2 = i2.url) !== null && o2 !== undefined ? o2 : undefined, this._creator = (r2 = i2.creator) !== null && r2 !== undefined ? r2 : undefined, this._team = (m2 = i2.team) !== null && m2 !== undefined ? m2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      var e2, i2;
      return ((e2 = this._team) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._team) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    create(e2) {
      return new wT(this._request).fetch(e2);
    }
    delete() {
      return new CT(this._request).fetch(this.id);
    }
    update(e2) {
      return new PT(this._request).fetch(this.id, e2);
    }
  }

  class kb extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new ub(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class vb extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._webhook = i2.webhook;
    }
    get webhook() {
      return new CF(this._request).fetch(this._webhook.id);
    }
    get webhookId() {
      var e2;
      return (e2 = this._webhook) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class cb extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.color = i2.color, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.description = (t2 = i2.description) !== null && t2 !== undefined ? t2 : undefined, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.type = i2.type, this.updatedAt = (d2 = qp(i2.updatedAt)) !== null && d2 !== undefined ? d2 : new Date, this._inheritedFrom = (l2 = i2.inheritedFrom) !== null && l2 !== undefined ? l2 : undefined, this._team = i2.team;
    }
    get inheritedFrom() {
      var e2, i2;
      return ((e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._inheritedFrom) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get inheritedFromId() {
      var e2;
      return (e2 = this._inheritedFrom) === null || e2 === undefined ? undefined : e2.id;
    }
    get team() {
      return new pF(this._request).fetch(this._team.id);
    }
    get teamId() {
      var e2;
      return (e2 = this._team) === null || e2 === undefined ? undefined : e2.id;
    }
    issues(e2) {
      return new $I(this._request, this.id, e2).fetch(e2);
    }
    archive() {
      return new qT(this._request).fetch(this.id);
    }
    create(e2) {
      return new xT(this._request).fetch(e2);
    }
    update(e2) {
      return new jT(this._request).fetch(this.id, e2);
    }
  }

  class pb extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = (n2 = i2.entity) !== null && n2 !== undefined ? n2 : undefined;
    }
    get entity() {
      var e2, i2;
      return ((e2 = this._entity) === null || e2 === undefined ? undefined : e2.id) ? new qF(this._request).fetch((i2 = this._entity) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get entityId() {
      var e2;
      return (e2 = this._entity) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class Nb {
    constructor(e2) {
      this.color = e2.color, this.id = e2.id, this.name = e2.name, this.type = e2.type;
    }
  }

  class hb extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new cb(e2, i3)), new by(e2, n2.pageInfo));
    }
  }

  class fb extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._workflowState = i2.workflowState;
    }
    get workflowState() {
      return new qF(this._request).fetch(this._workflowState.id);
    }
    get workflowStateId() {
      var e2;
      return (e2 = this._workflowState) === null || e2 === undefined ? undefined : e2.id;
    }
  }

  class yb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_d, e2)).administrableTeams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Sb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vd, e2)).agentActivities;
        return new Op(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class bb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ad, { id: e2 })).agentActivity;
        return new Up(this._request, i2);
      });
    }
  }

  class gb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Td, { id: e2 })).agentContext;
        return new Ep(this._request, i2);
      });
    }
  }

  class Fb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Id, e2)).agentContexts;
        return new Mp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Db extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wd, { id: e2 })).agentSession;
        return new zp(this._request, i2);
      });
    }
  }

  class _b extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pd, e2)).agentSessions;
        return new Wp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Vb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qd, e2)).apiKeys;
        return new Jp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Ab extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xd, { clientId: e2 })).applicationInfo;
        return new Kp(this._request, i2);
      });
    }
  }

  class Tb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(jd, Object.assign({ clientId: e2, scope: i2 }, n2))).applicationWithAuthorization;
        return new XS(this._request, a2);
      });
    }
  }

  class Ib extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ud, { id: e2 })).attachment;
        return new Yp(this._request, i2);
      });
    }
  }

  class wb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Od, { id: e2 })).attachmentIssue;
        return new pf(this._request, i2);
      });
    }
  }

  class Cb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($d, e2)).attachments;
        return new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Pb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Zd, Object.assign({ url: e2 }, i2))).attachmentsForURL;
        return new Xp(this._request, (n3) => this.fetch(e2, wp(Object.assign(Object.assign({}, i2), n3))), n2);
      });
    }
  }

  class qb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yd, e2)).auditEntries;
        return new aN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class xb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        return (yield this._request(Xd, {})).auditEntryTypes.map((e2) => new tN(this._request, e2));
      });
    }
  }

  class jb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        return (yield this._request(el, {})).authenticationSessions.map((e2) => new rN(this._request, e2));
      });
    }
  }

  class Ub extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(il, {})).availableUsers;
        return new lN(this._request, e2);
      });
    }
  }

  class Ob extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(nl, e2)).comment;
        return new mN(this._request, i2);
      });
    }
  }

  class Bb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ol, e2)).comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Rb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(rl, { id: e2 })).customView;
        return new NN(this._request, i2);
      });
    }
  }

  class Eb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Nl, { id: e2 })).customViewHasSubscribers;
        return new fN(this._request, i2);
      });
    }
  }

  class Mb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hl, e2)).customViews;
        return new hN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Lb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fl, { id: e2 })).customer;
        return new bN(this._request, i2);
      });
    }
  }

  class zb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yl, e2)).customerNeed;
        return new DN(this._request, i2);
      });
    }
  }

  class Wb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sl, e2)).customerNeeds;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Hb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(bl, { id: e2 })).customerStatus;
        return new qN(this._request, i2);
      });
    }
  }

  class Qb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gl, e2)).customerStatuses;
        return new jN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Gb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fl, { id: e2 })).customerTier;
        return new ON(this._request, i2);
      });
    }
  }

  class Jb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Dl, e2)).customerTiers;
        return new RN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Kb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_l, e2)).customers;
        return new FN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class $b extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vl, { id: e2 })).cycle;
        return new MN(this._request, i2);
      });
    }
  }

  class Zb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Il, e2)).cycles;
        return new WN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Yb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wl, { id: e2 })).document;
        return new JN(this._request, i2);
      });
    }
  }

  class Xb extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pl, { id: e2 })).documentContentHistory;
        return new eh(this._request, i2);
      });
    }
  }

  class eg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ql, e2)).documents;
        return new ZN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class ig extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xl, { id: e2 })).emailIntakeAddress;
        return new rh(this._request, i2);
      });
    }
  }

  class ng extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ul, { id: e2 })).emoji;
        return new kh(this._request, i2);
      });
    }
  }

  class ag extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ol, e2)).emojis;
        return new vh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class tg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Bl, { id: e2 })).entityExternalLink;
        return new ph(this._request, i2);
      });
    }
  }

  class dg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Rl, { id: e2 })).externalUser;
        return new yh(this._request, i2);
      });
    }
  }

  class lg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(El, e2)).externalUsers;
        return new bh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class og extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ml, { id: e2 })).favorite;
        return new gh(this._request, i2);
      });
    }
  }

  class rg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(zl, e2)).favorites;
        return new Fh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class mg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Wl, { id: e2 })).initiative;
        return new Oh(this._request, i2);
      });
    }
  }

  class sg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Zl, { id: e2 })).initiativeRelation;
        return new zy(this._request, i2);
      });
    }
  }

  class ug extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yl, e2)).initiativeRelations;
        return new Gh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class kg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Xl, { id: e2 })).initiativeToProject;
        return new Kh(this._request, i2);
      });
    }
  }

  class vg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(eo, e2)).initiativeToProjects;
        return new $h(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class cg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(io, { id: e2 })).initiativeUpdate;
        return new Yh(this._request, i2);
      });
    }
  }

  class pg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ao, e2)).initiativeUpdates;
        return new nf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Ng extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(to, e2)).initiatives;
        return new Eh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class hg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(lo, { id: e2 })).integration;
        return new df(this._request, i2);
      });
    }
  }

  class fg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(oo, { integrationId: e2, scopes: i2 })).integrationHasScopes;
        return new of(this._request, n2);
      });
    }
  }

  class yg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ro, { id: e2 })).integrationTemplate;
        return new sf(this._request, i2);
      });
    }
  }

  class Sg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(mo, e2)).integrationTemplates;
        return new uf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class bg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(so, e2)).integrations;
        return new lf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class gg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(uo, { id: e2 })).integrationsSettings;
        return new vf(this._request, i2);
      });
    }
  }

  class Fg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ko, { id: e2 })).issue;
        return new pf(this._request, i2);
      });
    }
  }

  class Dg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(_o, Object.assign({ fileKey: e2 }, i2))).issueFigmaFileKeySearch;
        return new yf(this._request, (n3) => this.fetch(e2, wp(Object.assign(Object.assign({}, i2), n3))), n2);
      });
    }
  }

  class _g extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Vo, Object.assign({ prompt: e2 }, i2))).issueFilterSuggestion;
        return new Sf(this._request, n2);
      });
    }
  }

  class Vg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Ao, { csvUrl: e2, service: i2 })).issueImportCheckCSV;
        return new Df(this._request, n2);
      });
    }
  }

  class Ag extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(To, { issueImportId: e2 })).issueImportCheckSync;
        return new Tf(this._request, i2);
      });
    }
  }

  class Tg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2, t2) {
      return Tp(this, undefined, undefined, function* () {
        const d2 = (yield this._request(Io, { jiraEmail: e2, jiraHostname: i2, jiraProject: n2, jiraToken: a2, jql: t2 })).issueImportJqlCheck;
        return new Vf(this._request, d2);
      });
    }
  }

  class Ig extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wo, { id: e2 })).issueLabel;
        return new If(this._request, i2);
      });
    }
  }

  class wg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qo, e2)).issueLabels;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Cg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        return (yield this._request(xo, {})).issuePriorityValues.map((e2) => new jf(this._request, e2));
      });
    }
  }

  class Pg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(jo, { id: e2 })).issueRelation;
        return new Uf(this._request, i2);
      });
    }
  }

  class qg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Uo, e2)).issueRelations;
        return new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class xg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Oo, e2)).issueSearch;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class jg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Bo, { request: e2 })).issueTitleSuggestionFromCustomerRequest;
        return new Wf(this._request, i2);
      });
    }
  }

  class Ug extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ro, { branchName: e2 })).issueVcsBranchSearch;
        return i2 ? new pf(this._request, i2) : undefined;
      });
    }
  }

  class Og extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yo, e2)).issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Bg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Xo, { id: e2 })).notification;
        switch (i2.__typename) {
          case "CustomerNeedNotification":
            return new AN(this._request, i2);
          case "CustomerNotification":
            return new wN(this._request, i2);
          case "DocumentNotification":
            return new nh(this._request, i2);
          case "InitiativeNotification":
            return new zh(this._request, i2);
          case "IssueNotification":
            return new qf(this._request, i2);
          case "OauthClientApprovalNotification":
            return new sy(this._request, i2);
          case "PostNotification":
            return new Fy(this._request, i2);
          case "ProjectNotification":
            return new Ey(this._request, i2);
          case "PullRequestNotification":
            return new dS(this._request, i2);
          default:
            return new Kf(this._request, i2);
        }
      });
    }
  }

  class Rg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(er, { id: e2 })).notificationSubscription;
        switch (i2.__typename) {
          case "CustomViewNotificationSubscription":
            return new yN(this._request, i2);
          case "CustomerNotificationSubscription":
            return new CN(this._request, i2);
          case "CycleNotificationSubscription":
            return new HN(this._request, i2);
          case "InitiativeNotificationSubscription":
            return new Wh(this._request, i2);
          case "LabelNotificationSubscription":
            return new Gf(this._request, i2);
          case "ProjectNotificationSubscription":
            return new My(this._request, i2);
          case "TeamNotificationSubscription":
            return new jS(this._request, i2);
          case "UserNotificationSubscription":
            return new nb(this._request, i2);
          default:
            return new ly(this._request, i2);
        }
      });
    }
  }

  class Eg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ir, e2)).notificationSubscriptions;
        return new oy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Mg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(nr, e2)).notifications;
        return new ey(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Lg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(ar, {})).organization;
        return new uy(this._request, e2);
      });
    }
  }

  class zg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ur, { urlKey: e2 })).organizationExists;
        return new cy(this._request, i2);
      });
    }
  }

  class Wg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(kr, { id: e2 })).organizationInvite;
        return new py(this._request, i2);
      });
    }
  }

  class Hg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vr, e2)).organizationInvites;
        return new Ny(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Qg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(cr, { id: e2 })).project;
        return new Dy(this._request, i2);
      });
    }
  }

  class Gg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wr, { prompt: e2 })).projectFilterSuggestion;
        return new Ty(this._request, i2);
      });
    }
  }

  class Jg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cr, { id: e2 })).projectLabel;
        return new Cy(this._request, i2);
      });
    }
  }

  class Kg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xr, e2)).projectLabels;
        return new Py(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class $g extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(jr, { id: e2 })).projectMilestone;
        return new xy(this._request, i2);
      });
    }
  }

  class Zg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Br, e2)).projectMilestones;
        return new Uy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class Yg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Rr, { id: e2 })).projectRelation;
        return new zy(this._request, i2);
      });
    }
  }

  class Xg extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Er, e2)).projectRelations;
        return new Wy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class eF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Mr, { id: e2 })).projectStatus;
        return new Jy(this._request, i2);
      });
    }
  }

  class iF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Lr, e2)).projectStatuses;
        return new Zy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class nF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(zr, { id: e2 })).projectUpdate;
        return new Xy(this._request, i2);
      });
    }
  }

  class aF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hr, e2)).projectUpdates;
        return new nS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class tF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Qr, e2)).projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class dF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gr, e2)).pushSubscriptionTest;
        return new rS(this._request, i2);
      });
    }
  }

  class lF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Jr, {})).rateLimitStatus;
        return new mS(this._request, e2);
      });
    }
  }

  class oF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Kr, { id: e2 })).roadmap;
        return new vS(this._request, i2);
      });
    }
  }

  class rF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Zr, { id: e2 })).roadmapToProject;
        return new hS(this._request, i2);
      });
    }
  }

  class mF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yr, e2)).roadmapToProjects;
        return new fS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class sF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Xr, e2)).roadmaps;
        return new pS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class uF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(em, Object.assign({ term: e2 }, i2))).searchDocuments;
        return new th(this._request, n2);
      });
    }
  }

  class kF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(nm, Object.assign({ term: e2 }, i2))).searchIssues;
        return new Ef(this._request, n2);
      });
    }
  }

  class vF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(tm, Object.assign({ term: e2 }, i2))).searchProjects;
        return new Qy(this._request, n2);
      });
    }
  }

  class cF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(lm, Object.assign({ email: e2 }, i2))).ssoUrlFromEmail;
        return new _S(this._request, n2);
      });
    }
  }

  class pF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(om, { id: e2 })).team;
        return new TS(this._request, i2);
      });
    }
  }

  class NF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fm, { id: e2 })).teamMembership;
        return new PS(this._request, i2);
      });
    }
  }

  class hF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ym, e2)).teamMemberships;
        return new qS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class fF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sm, e2)).teams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class yF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(bm, { id: e2 })).template;
        return new OS(this._request, i2);
      });
    }
  }

  class SF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        return (yield this._request(gm, {})).templates.map((e2) => new OS(this._request, e2));
      });
    }
  }

  class bF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        return (yield this._request(Fm, { integrationType: e2 })).templatesForIntegration.map((e3) => new OS(this._request, e3));
      });
    }
  }

  class gF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Dm, { id: e2 })).timeSchedule;
        return new ES(this._request, i2);
      });
    }
  }

  class FF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_m, e2)).timeSchedules;
        return new MS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class DF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vm, e2)).triageResponsibilities;
        return new HS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class _F extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Am, { id: e2 })).triageResponsibility;
        return new WS(this._request, i2);
      });
    }
  }

  class VF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Im, { id: e2 })).user;
        return new ZS(this._request, i2);
      });
    }
  }

  class AF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Um, {})).userSettings;
        return new tb(this._request, e2);
      });
    }
  }

  class TF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ss, e2)).users;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class IF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(us, {})).verifyGitHubEnterpriseServerInstallation;
        return new Ph(this._request, e2);
      });
    }
  }

  class wF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(ks, {})).viewer;
        return new ZS(this._request, e2);
      });
    }
  }

  class CF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ys, { id: e2 })).webhook;
        return new ub(this._request, i2);
      });
    }
  }

  class PF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ss, e2)).webhooks;
        return new kb(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class qF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(bs, { id: e2 })).workflowState;
        return new cb(this._request, i2);
      });
    }
  }

  class xF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fs, e2)).workflowStates;
        return new hb(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign({}, e2), i3))), i2);
      });
    }
  }

  class jF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ds, { input: e2 })).agentActivityCreate;
        return new Bp(this._request, i2);
      });
    }
  }

  class UF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_s, { input: e2 })).agentContextCreate;
        return new Lp(this._request, i2);
      });
    }
  }

  class OF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Vs, { id: e2, input: i2 })).agentContextUpdate;
        return new Lp(this._request, n2);
      });
    }
  }

  class BF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(As, { id: e2, input: i2 })).agentSessionUpdateExternalUrl;
        return new Hp(this._request, n2);
      });
    }
  }

  class RF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ts, { input: e2 })).airbyteIntegrationConnect;
        return new rf(this._request, i2);
      });
    }
  }

  class EF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Is, { input: e2 })).attachmentCreate;
        return new eN(this._request, i2);
      });
    }
  }

  class MF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ws, { id: e2 })).attachmentDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class LF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2, t2) {
      return Tp(this, undefined, undefined, function* () {
        const d2 = (yield this._request(Cs, Object.assign({ channelId: e2, issueId: i2, messageId: n2, url: a2 }, t2))).attachmentLinkDiscord;
        return new eN(this._request, d2);
      });
    }
  }

  class zF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Ps, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkFront;
        return new _h(this._request, a2);
      });
    }
  }

  class WF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(qs, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubIssue;
        return new eN(this._request, a2);
      });
    }
  }

  class HF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(xs, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubPR;
        return new eN(this._request, a2);
      });
    }
  }

  class QF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2, t2) {
      return Tp(this, undefined, undefined, function* () {
        const d2 = (yield this._request(js, Object.assign({ issueId: e2, number: i2, projectPathWithNamespace: n2, url: a2 }, t2))).attachmentLinkGitLabMR;
        return new eN(this._request, d2);
      });
    }
  }

  class GF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Us, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkIntercom;
        return new eN(this._request, a2);
      });
    }
  }

  class JF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Os, Object.assign({ issueId: e2, jiraIssueId: i2 }, n2))).attachmentLinkJiraIssue;
        return new eN(this._request, a2);
      });
    }
  }

  class KF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Bs, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkSalesforce;
        return new eN(this._request, a2);
      });
    }
  }

  class $F extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Rs, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkSlack;
        return new eN(this._request, a2);
      });
    }
  }

  class ZF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Es, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkURL;
        return new eN(this._request, a2);
      });
    }
  }

  class YF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Ms, Object.assign({ issueId: e2, ticketId: i2 }, n2))).attachmentLinkZendesk;
        return new eN(this._request, a2);
      });
    }
  }

  class XF extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ls, { id: e2 })).attachmentSyncToSlack;
        return new eN(this._request, i2);
      });
    }
  }

  class eD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(zs, { id: e2, input: i2 })).attachmentUpdate;
        return new eN(this._request, n2);
      });
    }
  }

  class iD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ws, { input: e2 })).commentCreate;
        return new kN(this._request, i2);
      });
    }
  }

  class nD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hs, { id: e2 })).commentDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class aD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Qs, Object.assign({ id: e2 }, i2))).commentResolve;
        return new kN(this._request, n2);
      });
    }
  }

  class tD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gs, { id: e2 })).commentUnresolve;
        return new kN(this._request, i2);
      });
    }
  }

  class dD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Js, { id: e2, input: i2 })).commentUpdate;
        return new kN(this._request, n2);
      });
    }
  }

  class lD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ks, { input: e2 })).contactCreate;
        return new vN(this._request, i2);
      });
    }
  }

  class oD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($s, e2)).createCsvExportReport;
        return new cN(this._request, i2);
      });
    }
  }

  class rD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Zs, Object.assign({ initiativeId: e2 }, i2))).createInitiativeUpdateReminder;
        return new tf(this._request, n2);
      });
    }
  }

  class mD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Ys, Object.assign({ input: e2 }, i2))).createOrganizationFromOnboarding;
        return new pN(this._request, n2);
      });
    }
  }

  class sD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Xs, Object.assign({ projectId: e2 }, i2))).createProjectUpdateReminder;
        return new tS(this._request, n2);
      });
    }
  }

  class uD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(eu, { input: e2 })).customViewCreate;
        return new SN(this._request, i2);
      });
    }
  }

  class kD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(iu, { id: e2 })).customViewDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class vD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(nu, { id: e2, input: i2 })).customViewUpdate;
        return new SN(this._request, n2);
      });
    }
  }

  class cD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(au, { input: e2 })).customerCreate;
        return new PN(this._request, i2);
      });
    }
  }

  class pD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tu, { id: e2 })).customerDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class ND extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(du, { sourceCustomerId: e2, targetCustomerId: i2 })).customerMerge;
        return new PN(this._request, n2);
      });
    }
  }

  class hD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(lu, { id: e2 })).customerNeedArchive;
        return new _N(this._request, i2);
      });
    }
  }

  class fD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ou, { input: e2 })).customerNeedCreate;
        return new TN(this._request, i2);
      });
    }
  }

  class yD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ru, { input: e2 })).customerNeedCreateFromAttachment;
        return new TN(this._request, i2);
      });
    }
  }

  class SD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(mu, Object.assign({ id: e2 }, i2))).customerNeedDelete;
        return new GN(this._request, n2);
      });
    }
  }

  class bD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(su, { id: e2 })).customerNeedUnarchive;
        return new _N(this._request, i2);
      });
    }
  }

  class gD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(uu, { id: e2, input: i2 })).customerNeedUpdate;
        return new IN(this._request, n2);
      });
    }
  }

  class FD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ku, { input: e2 })).customerStatusCreate;
        return new UN(this._request, i2);
      });
    }
  }

  class DD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vu, { id: e2 })).customerStatusDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class _D extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(cu, { id: e2, input: i2 })).customerStatusUpdate;
        return new UN(this._request, n2);
      });
    }
  }

  class VD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pu, { input: e2 })).customerTierCreate;
        return new EN(this._request, i2);
      });
    }
  }

  class AD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Nu, { id: e2 })).customerTierDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class TD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(hu, { id: e2, input: i2 })).customerTierUpdate;
        return new EN(this._request, n2);
      });
    }
  }

  class ID extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(fu, { id: e2, input: i2 })).customerUpdate;
        return new PN(this._request, n2);
      });
    }
  }

  class wD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yu, { input: e2 })).customerUpsert;
        return new PN(this._request, i2);
      });
    }
  }

  class CD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Su, { id: e2 })).cycleArchive;
        return new LN(this._request, i2);
      });
    }
  }

  class PD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(bu, { input: e2 })).cycleCreate;
        return new QN(this._request, i2);
      });
    }
  }

  class qD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gu, { input: e2 })).cycleShiftAll;
        return new QN(this._request, i2);
      });
    }
  }

  class xD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fu, { id: e2 })).cycleStartUpcomingCycleToday;
        return new QN(this._request, i2);
      });
    }
  }

  class jD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Du, { id: e2, input: i2 })).cycleUpdate;
        return new QN(this._request, n2);
      });
    }
  }

  class UD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_u, { input: e2 })).documentCreate;
        return new ah(this._request, i2);
      });
    }
  }

  class OD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vu, { id: e2 })).documentDelete;
        return new KN(this._request, i2);
      });
    }
  }

  class BD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Au, { id: e2 })).documentUnarchive;
        return new KN(this._request, i2);
      });
    }
  }

  class RD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Tu, { id: e2, input: i2 })).documentUpdate;
        return new ah(this._request, n2);
      });
    }
  }

  class ED extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Iu, { input: e2 })).emailIntakeAddressCreate;
        return new mh(this._request, i2);
      });
    }
  }

  class MD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wu, { id: e2 })).emailIntakeAddressDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class LD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cu, { id: e2 })).emailIntakeAddressRotate;
        return new mh(this._request, i2);
      });
    }
  }

  class zD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Pu, { id: e2, input: i2 })).emailIntakeAddressUpdate;
        return new mh(this._request, n2);
      });
    }
  }

  class WD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qu, { input: e2 })).emailTokenUserAccountAuth;
        return new lN(this._request, i2);
      });
    }
  }

  class HD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xu, { input: e2 })).emailUnsubscribe;
        return new sh(this._request, i2);
      });
    }
  }

  class QD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ju, { input: e2 })).emailUserAccountAuthChallenge;
        return new uh(this._request, i2);
      });
    }
  }

  class GD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Uu, { input: e2 })).emojiCreate;
        return new ch(this._request, i2);
      });
    }
  }

  class JD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ou, { id: e2 })).emojiDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class KD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Bu, { input: e2 })).entityExternalLinkCreate;
        return new hh(this._request, i2);
      });
    }
  }

  class $D extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ru, { id: e2 })).entityExternalLinkDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class ZD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Eu, { id: e2, input: i2 })).entityExternalLinkUpdate;
        return new hh(this._request, n2);
      });
    }
  }

  class YD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Mu, { input: e2 })).favoriteCreate;
        return new Dh(this._request, i2);
      });
    }
  }

  class XD extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Lu, { id: e2 })).favoriteDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class e_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(zu, { id: e2, input: i2 })).favoriteUpdate;
        return new Dh(this._request, n2);
      });
    }
  }

  class i_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2) {
      return Tp(this, undefined, undefined, function* () {
        const t2 = (yield this._request(Wu, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).fileUpload;
        return new $S(this._request, t2);
      });
    }
  }

  class n_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hu, { input: e2 })).gitAutomationStateCreate;
        return new Th(this._request, i2);
      });
    }
  }

  class a_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Qu, { id: e2 })).gitAutomationStateDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class t_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Gu, { id: e2, input: i2 })).gitAutomationStateUpdate;
        return new Th(this._request, n2);
      });
    }
  }

  class d_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ju, { input: e2 })).gitAutomationTargetBranchCreate;
        return new wh(this._request, i2);
      });
    }
  }

  class l_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ku, { id: e2 })).gitAutomationTargetBranchDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class o_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request($u, { id: e2, input: i2 })).gitAutomationTargetBranchUpdate;
        return new wh(this._request, n2);
      });
    }
  }

  class r_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Zu, { input: e2 })).googleUserAccountAuth;
        return new lN(this._request, i2);
      });
    }
  }

  class m_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yu, { url: e2 })).imageUploadFromUrl;
        return new Uh(this._request, i2);
      });
    }
  }

  class s_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2) {
      return Tp(this, undefined, undefined, function* () {
        const t2 = (yield this._request(Xu, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).importFileUpload;
        return new $S(this._request, t2);
      });
    }
  }

  class u_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ek, { id: e2 })).initiativeArchive;
        return new Bh(this._request, i2);
      });
    }
  }

  class k_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ik, { input: e2 })).initiativeCreate;
        return new Hh(this._request, i2);
      });
    }
  }

  class v_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(nk, { id: e2 })).initiativeDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class c_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ak, { input: e2 })).initiativeRelationCreate;
        return new Jh(this._request, i2);
      });
    }
  }

  class p_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tk, { id: e2 })).initiativeRelationDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class N_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(dk, { id: e2, input: i2 })).initiativeRelationUpdate;
        return new GN(this._request, n2);
      });
    }
  }

  class h_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(lk, { input: e2 })).initiativeToProjectCreate;
        return new Zh(this._request, i2);
      });
    }
  }

  class f_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ok, { id: e2 })).initiativeToProjectDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class y_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(rk, { id: e2, input: i2 })).initiativeToProjectUpdate;
        return new Zh(this._request, n2);
      });
    }
  }

  class S_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(mk, { id: e2 })).initiativeUnarchive;
        return new Bh(this._request, i2);
      });
    }
  }

  class b_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(sk, { id: e2, input: i2 })).initiativeUpdate;
        return new Hh(this._request, n2);
      });
    }
  }

  class g_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(uk, { id: e2 })).initiativeUpdateArchive;
        return new Xh(this._request, i2);
      });
    }
  }

  class F_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(kk, { input: e2 })).initiativeUpdateCreate;
        return new af(this._request, i2);
      });
    }
  }

  class D_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vk, { id: e2 })).initiativeUpdateUnarchive;
        return new Xh(this._request, i2);
      });
    }
  }

  class __ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(ck, { id: e2, input: i2 })).initiativeUpdateUpdate;
        return new af(this._request, n2);
      });
    }
  }

  class V_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pk, { id: e2 })).integrationArchive;
        return new GN(this._request, i2);
      });
    }
  }

  class A_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Nk, { code: e2, redirectUri: i2 })).integrationAsksConnectChannel;
        return new Zp(this._request, n2);
      });
    }
  }

  class T_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hk, { id: e2 })).integrationDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class I_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(fk, { code: e2, redirectUri: i2 })).integrationDiscord;
        return new rf(this._request, n2);
      });
    }
  }

  class w_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(yk, { code: e2, redirectUri: i2 })).integrationFigma;
        return new rf(this._request, n2);
      });
    }
  }

  class C_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Sk, { code: e2, redirectUri: i2 })).integrationFront;
        return new rf(this._request, n2);
      });
    }
  }

  class P_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(bk, Object.assign({ githubUrl: e2 }, i2))).integrationGitHubEnterpriseServerConnect;
        return new qh(this._request, n2);
      });
    }
  }

  class q_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gk, { code: e2 })).integrationGitHubPersonal;
        return new rf(this._request, i2);
      });
    }
  }

  class x_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Fk, {})).integrationGithubCommitCreate;
        return new Ch(this._request, e2);
      });
    }
  }

  class j_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Dk, { code: e2, installationId: i2 })).integrationGithubConnect;
        return new rf(this._request, n2);
      });
    }
  }

  class U_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(_k, { code: e2, installationId: i2 })).integrationGithubImportConnect;
        return new rf(this._request, n2);
      });
    }
  }

  class O_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vk, { id: e2 })).integrationGithubImportRefresh;
        return new rf(this._request, i2);
      });
    }
  }

  class B_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Ak, { accessToken: e2, gitlabUrl: i2 })).integrationGitlabConnect;
        return new xh(this._request, n2);
      });
    }
  }

  class R_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Tk, { code: e2 })).integrationGoogleSheets;
        return new rf(this._request, i2);
      });
    }
  }

  class E_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Ik, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationIntercom;
        return new rf(this._request, a2);
      });
    }
  }

  class M_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(wk, {})).integrationIntercomDelete;
        return new rf(this._request, e2);
      });
    }
  }

  class L_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ck, { input: e2 })).integrationIntercomSettingsUpdate;
        return new rf(this._request, i2);
      });
    }
  }

  class z_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pk, e2)).integrationJiraPersonal;
        return new rf(this._request, i2);
      });
    }
  }

  class W_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(qk, {})).integrationLoom;
        return new rf(this._request, e2);
      });
    }
  }

  class H_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xk, { input: e2 })).integrationRequest;
        return new mf(this._request, i2);
      });
    }
  }

  class Q_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(jk, { code: e2, redirectUri: i2, subdomain: n2 })).integrationSalesforce;
        return new rf(this._request, a2);
      });
    }
  }

  class G_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Uk, { code: e2, installationId: i2, organizationSlug: n2 })).integrationSentryConnect;
        return new rf(this._request, a2);
      });
    }
  }

  class J_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Ok, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationSlack;
        return new rf(this._request, a2);
      });
    }
  }

  class K_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Bk, { code: e2, redirectUri: i2 })).integrationSlackAsks;
        return new rf(this._request, n2);
      });
    }
  }

  class $_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Rk, { code: e2, customViewId: i2, redirectUri: n2 })).integrationSlackCustomViewNotifications;
        return new FS(this._request, a2);
      });
    }
  }

  class Z_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Ek, { code: e2, customerId: i2, redirectUri: n2 })).integrationSlackCustomerChannelLink;
        return new VS(this._request, a2);
      });
    }
  }

  class Y_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Mk, { code: e2, redirectUri: i2 })).integrationSlackImportEmojis;
        return new rf(this._request, n2);
      });
    }
  }

  class X_ extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Lk, { code: e2, redirectUri: i2 })).integrationSlackOrgProjectUpdatesPost;
        return new FS(this._request, n2);
      });
    }
  }

  class eV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(zk, { code: e2, redirectUri: i2 })).integrationSlackPersonal;
        return new rf(this._request, n2);
      });
    }
  }

  class iV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2) {
      return Tp(this, undefined, undefined, function* () {
        const t2 = (yield this._request(Wk, Object.assign({ code: e2, redirectUri: i2, teamId: n2 }, a2))).integrationSlackPost;
        return new FS(this._request, t2);
      });
    }
  }

  class nV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2) {
      return Tp(this, undefined, undefined, function* () {
        const t2 = (yield this._request(Hk, { code: e2, projectId: i2, redirectUri: n2, service: a2 })).integrationSlackProjectPost;
        return new FS(this._request, t2);
      });
    }
  }

  class aV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Qk, { input: e2 })).integrationTemplateCreate;
        return new kf(this._request, i2);
      });
    }
  }

  class tV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gk, { id: e2 })).integrationTemplateDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class dV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2) {
      return Tp(this, undefined, undefined, function* () {
        const t2 = (yield this._request(Jk, { code: e2, redirectUri: i2, scope: n2, subdomain: a2 })).integrationZendesk;
        return new rf(this._request, t2);
      });
    }
  }

  class lV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Kk, { input: e2 })).integrationsSettingsCreate;
        return new cf(this._request, i2);
      });
    }
  }

  class oV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request($k, { id: e2, input: i2 })).integrationsSettingsUpdate;
        return new cf(this._request, n2);
      });
    }
  }

  class rV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Zk, { id: e2, labelId: i2 })).issueAddLabel;
        return new xf(this._request, n2);
      });
    }
  }

  class mV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Yk, Object.assign({ id: e2 }, i2))).issueArchive;
        return new Nf(this._request, n2);
      });
    }
  }

  class sV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Xk, { input: e2 })).issueBatchCreate;
        return new hf(this._request, i2);
      });
    }
  }

  class uV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(ev, { ids: e2, input: i2 })).issueBatchUpdate;
        return new hf(this._request, n2);
      });
    }
  }

  class kV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(iv, { input: e2 })).issueCreate;
        return new xf(this._request, i2);
      });
    }
  }

  class vV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(nv, Object.assign({ id: e2 }, i2))).issueDelete;
        return new Nf(this._request, n2);
      });
    }
  }

  class cV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(av, Object.assign({ asanaTeamName: e2, asanaToken: i2 }, n2))).issueImportCreateAsana;
        return new Af(this._request, a2);
      });
    }
  }

  class pV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(tv, Object.assign({ csvUrl: e2 }, i2))).issueImportCreateCSVJira;
        return new Af(this._request, n2);
      });
    }
  }

  class NV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(dv, Object.assign({ clubhouseGroupName: e2, clubhouseToken: i2 }, n2))).issueImportCreateClubhouse;
        return new Af(this._request, a2);
      });
    }
  }

  class hV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(lv, e2)).issueImportCreateGithub;
        return new Af(this._request, i2);
      });
    }
  }

  class fV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2, a2, t2) {
      return Tp(this, undefined, undefined, function* () {
        const d2 = (yield this._request(ov, Object.assign({ jiraEmail: e2, jiraHostname: i2, jiraProject: n2, jiraToken: a2 }, t2))).issueImportCreateJira;
        return new Af(this._request, d2);
      });
    }
  }

  class yV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(rv, { issueImportId: e2 })).issueImportDelete;
        return new _f(this._request, i2);
      });
    }
  }

  class SV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(mv, { issueImportId: e2, mapping: i2 })).issueImportProcess;
        return new Af(this._request, n2);
      });
    }
  }

  class bV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(sv, { id: e2, input: i2 })).issueImportUpdate;
        return new Af(this._request, n2);
      });
    }
  }

  class gV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(uv, Object.assign({ input: e2 }, i2))).issueLabelCreate;
        return new Pf(this._request, n2);
      });
    }
  }

  class FV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(kv, { id: e2 })).issueLabelDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class DV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(vv, Object.assign({ id: e2, input: i2 }, n2))).issueLabelUpdate;
        return new Pf(this._request, a2);
      });
    }
  }

  class _V extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(cv, Object.assign({ input: e2 }, i2))).issueRelationCreate;
        return new Rf(this._request, n2);
      });
    }
  }

  class VV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pv, { id: e2 })).issueRelationDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class AV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Nv, { id: e2, input: i2 })).issueRelationUpdate;
        return new Rf(this._request, n2);
      });
    }
  }

  class TV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(hv, { id: e2, reminderAt: i2 })).issueReminder;
        return new xf(this._request, n2);
      });
    }
  }

  class IV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(fv, { id: e2, labelId: i2 })).issueRemoveLabel;
        return new xf(this._request, n2);
      });
    }
  }

  class wV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(yv, Object.assign({ id: e2 }, i2))).issueSubscribe;
        return new xf(this._request, n2);
      });
    }
  }

  class CV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sv, { id: e2 })).issueUnarchive;
        return new Nf(this._request, i2);
      });
    }
  }

  class PV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(bv, Object.assign({ id: e2 }, i2))).issueUnsubscribe;
        return new xf(this._request, n2);
      });
    }
  }

  class qV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(gv, { id: e2, input: i2 })).issueUpdate;
        return new xf(this._request, n2);
      });
    }
  }

  class xV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fv, { input: e2 })).joinOrganizationFromOnboarding;
        return new pN(this._request, i2);
      });
    }
  }

  class jV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Dv, { organizationId: e2 })).leaveOrganization;
        return new pN(this._request, i2);
      });
    }
  }

  class UV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_v, e2)).logout;
        return new Jf(this._request, i2);
      });
    }
  }

  class OV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vv, e2)).logoutAllSessions;
        return new Jf(this._request, i2);
      });
    }
  }

  class BV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Av, e2)).logoutOtherSessions;
        return new Jf(this._request, i2);
      });
    }
  }

  class RV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Tv, { sessionId: e2 })).logoutSession;
        return new Jf(this._request, i2);
      });
    }
  }

  class EV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Iv, { id: e2 })).notificationArchive;
        return new $f(this._request, i2);
      });
    }
  }

  class MV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wv, { input: e2 })).notificationArchiveAll;
        return new Zf(this._request, i2);
      });
    }
  }

  class LV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Cv, { category: e2, channel: i2, subscribe: n2 })).notificationCategoryChannelSubscriptionUpdate;
        return new ob(this._request, a2);
      });
    }
  }

  class zV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Pv, { input: e2, readAt: i2 })).notificationMarkReadAll;
        return new Zf(this._request, n2);
      });
    }
  }

  class WV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qv, { input: e2 })).notificationMarkUnreadAll;
        return new Zf(this._request, i2);
      });
    }
  }

  class HV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(xv, { input: e2, snoozedUntilAt: i2 })).notificationSnoozeAll;
        return new Zf(this._request, n2);
      });
    }
  }

  class QV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(jv, { input: e2 })).notificationSubscriptionCreate;
        return new ry(this._request, i2);
      });
    }
  }

  class GV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Uv, { id: e2 })).notificationSubscriptionDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class JV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Ov, { id: e2, input: i2 })).notificationSubscriptionUpdate;
        return new ry(this._request, n2);
      });
    }
  }

  class KV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Bv, { id: e2 })).notificationUnarchive;
        return new $f(this._request, i2);
      });
    }
  }

  class $V extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Rv, { input: e2, unsnoozedAt: i2 })).notificationUnsnoozeAll;
        return new Zf(this._request, n2);
      });
    }
  }

  class ZV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Ev, { id: e2, input: i2 })).notificationUpdate;
        return new dy(this._request, n2);
      });
    }
  }

  class YV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Mv, {})).organizationCancelDelete;
        return new ky(this._request, e2);
      });
    }
  }

  class XV extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Lv, { input: e2 })).organizationDelete;
        return new vy(this._request, i2);
      });
    }
  }

  class eA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(zv, {})).organizationDeleteChallenge;
        return new vy(this._request, e2);
      });
    }
  }

  class iA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Wv, { id: e2 })).organizationDomainDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class nA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hv, { input: e2 })).organizationInviteCreate;
        return new hy(this._request, i2);
      });
    }
  }

  class aA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Qv, { id: e2 })).organizationInviteDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class tA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Gv, { id: e2, input: i2 })).organizationInviteUpdate;
        return new hy(this._request, n2);
      });
    }
  }

  class dA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Jv, {})).organizationStartTrial;
        return new Sy(this._request, e2);
      });
    }
  }

  class lA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Kv, { input: e2 })).organizationStartTrialForPlan;
        return new Sy(this._request, i2);
      });
    }
  }

  class oA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($v, { input: e2 })).organizationUpdate;
        return new yy(this._request, i2);
      });
    }
  }

  class rA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Zv, { id: e2, labelId: i2 })).projectAddLabel;
        return new Ly(this._request, n2);
      });
    }
  }

  class mA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Yv, Object.assign({ id: e2 }, i2))).projectArchive;
        return new _y(this._request, n2);
      });
    }
  }

  class sA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Xv, Object.assign({ input: e2 }, i2))).projectCreate;
        return new Ly(this._request, n2);
      });
    }
  }

  class uA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ec, { id: e2 })).projectDelete;
        return new _y(this._request, i2);
      });
    }
  }

  class kA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ic, { input: e2 })).projectLabelCreate;
        return new qy(this._request, i2);
      });
    }
  }

  class vA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(nc, { id: e2 })).projectLabelDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class cA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(ac, { id: e2, input: i2 })).projectLabelUpdate;
        return new qy(this._request, n2);
      });
    }
  }

  class pA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tc, { input: e2 })).projectMilestoneCreate;
        return new Ry(this._request, i2);
      });
    }
  }

  class NA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(dc, { id: e2 })).projectMilestoneDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class hA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(lc, { id: e2, input: i2 })).projectMilestoneUpdate;
        return new Ry(this._request, n2);
      });
    }
  }

  class fA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(oc, { input: e2 })).projectRelationCreate;
        return new Hy(this._request, i2);
      });
    }
  }

  class yA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(rc, { id: e2 })).projectRelationDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class SA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(mc, { id: e2, input: i2 })).projectRelationUpdate;
        return new Hy(this._request, n2);
      });
    }
  }

  class bA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(sc, { id: e2, labelId: i2 })).projectRemoveLabel;
        return new Ly(this._request, n2);
      });
    }
  }

  class gA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(uc, { id: e2 })).projectStatusArchive;
        return new Ky(this._request, i2);
      });
    }
  }

  class FA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(kc, { input: e2 })).projectStatusCreate;
        return new Yy(this._request, i2);
      });
    }
  }

  class DA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vc, { id: e2 })).projectStatusUnarchive;
        return new Ky(this._request, i2);
      });
    }
  }

  class _A extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(cc, { id: e2, input: i2 })).projectStatusUpdate;
        return new Yy(this._request, n2);
      });
    }
  }

  class VA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pc, { id: e2 })).projectUnarchive;
        return new _y(this._request, i2);
      });
    }
  }

  class AA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Nc, { id: e2, input: i2 })).projectUpdate;
        return new Ly(this._request, n2);
      });
    }
  }

  class TA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hc, { id: e2 })).projectUpdateArchive;
        return new eS(this._request, i2);
      });
    }
  }

  class IA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fc, { input: e2 })).projectUpdateCreate;
        return new aS(this._request, i2);
      });
    }
  }

  class wA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yc, { id: e2 })).projectUpdateDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class CA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sc, { id: e2 })).projectUpdateUnarchive;
        return new eS(this._request, i2);
      });
    }
  }

  class PA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(bc, { id: e2, input: i2 })).projectUpdateUpdate;
        return new aS(this._request, n2);
      });
    }
  }

  class qA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gc, { input: e2 })).pushSubscriptionCreate;
        return new oS(this._request, i2);
      });
    }
  }

  class xA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fc, { id: e2 })).pushSubscriptionDelete;
        return new oS(this._request, i2);
      });
    }
  }

  class jA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Dc, { input: e2 })).reactionCreate;
        return new kS(this._request, i2);
      });
    }
  }

  class UA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_c, { id: e2 })).reactionDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class OA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Vc, Object.assign({ id: e2 }, i2))).refreshGoogleSheetsData;
        return new rf(this._request, n2);
      });
    }
  }

  class BA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ac, { id: e2 })).resendOrganizationInvite;
        return new GN(this._request, i2);
      });
    }
  }

  class RA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Tc, { email: e2 })).resendOrganizationInviteByEmail;
        return new GN(this._request, i2);
      });
    }
  }

  class EA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ic, { id: e2 })).roadmapArchive;
        return new cS(this._request, i2);
      });
    }
  }

  class MA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wc, { input: e2 })).roadmapCreate;
        return new NS(this._request, i2);
      });
    }
  }

  class LA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cc, { id: e2 })).roadmapDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class zA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pc, { input: e2 })).roadmapToProjectCreate;
        return new yS(this._request, i2);
      });
    }
  }

  class WA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qc, { id: e2 })).roadmapToProjectDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class HA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(xc, { id: e2, input: i2 })).roadmapToProjectUpdate;
        return new yS(this._request, n2);
      });
    }
  }

  class QA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(jc, { id: e2 })).roadmapUnarchive;
        return new cS(this._request, i2);
      });
    }
  }

  class GA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Uc, { id: e2, input: i2 })).roadmapUpdate;
        return new NS(this._request, n2);
      });
    }
  }

  class JA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Oc, { input: e2 })).samlTokenUserAccountAuth;
        return new lN(this._request, i2);
      });
    }
  }

  class KA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Bc, Object.assign({ input: e2 }, i2))).teamCreate;
        return new US(this._request, n2);
      });
    }
  }

  class $A extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Rc, { id: e2 })).teamCyclesDelete;
        return new US(this._request, i2);
      });
    }
  }

  class ZA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ec, { id: e2 })).teamDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class YA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Mc, { id: e2 })).teamKeyDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class XA extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Lc, { input: e2 })).teamMembershipCreate;
        return new xS(this._request, i2);
      });
    }
  }

  class eT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(zc, Object.assign({ id: e2 }, i2))).teamMembershipDelete;
        return new GN(this._request, n2);
      });
    }
  }

  class iT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Wc, { id: e2, input: i2 })).teamMembershipUpdate;
        return new xS(this._request, n2);
      });
    }
  }

  class nT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hc, { id: e2 })).teamUnarchive;
        return new IS(this._request, i2);
      });
    }
  }

  class aT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = (yield this._request(Qc, Object.assign({ id: e2, input: i2 }, n2))).teamUpdate;
        return new US(this._request, a2);
      });
    }
  }

  class tT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gc, { input: e2 })).templateCreate;
        return new RS(this._request, i2);
      });
    }
  }

  class dT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Jc, { id: e2 })).templateDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class lT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Kc, { id: e2, input: i2 })).templateUpdate;
        return new RS(this._request, n2);
      });
    }
  }

  class oT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($c, { input: e2 })).timeScheduleCreate;
        return new zS(this._request, i2);
      });
    }
  }

  class rT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Zc, { id: e2 })).timeScheduleDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class mT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Yc, { id: e2 })).timeScheduleRefreshIntegrationSchedule;
        return new zS(this._request, i2);
      });
    }
  }

  class sT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Xc, { id: e2, input: i2 })).timeScheduleUpdate;
        return new zS(this._request, n2);
      });
    }
  }

  class uT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(ep, { externalId: e2, input: i2 })).timeScheduleUpsertExternal;
        return new zS(this._request, n2);
      });
    }
  }

  class kT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ip, { input: e2 })).triageResponsibilityCreate;
        return new GS(this._request, i2);
      });
    }
  }

  class vT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(np, { id: e2 })).triageResponsibilityDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class cT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(ap, { id: e2, input: i2 })).triageResponsibilityUpdate;
        return new GS(this._request, n2);
      });
    }
  }

  class pT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tp, { id: e2 })).userDemoteAdmin;
        return new YS(this._request, i2);
      });
    }
  }

  class NT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(dp, { id: e2 })).userDemoteMember;
        return new YS(this._request, i2);
      });
    }
  }

  class hT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(lp, { code: e2, redirectUri: i2 })).userDiscordConnect;
        return new ab(this._request, n2);
      });
    }
  }

  class fT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(op, { service: e2 })).userExternalUserDisconnect;
        return new ab(this._request, i2);
      });
    }
  }

  class yT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(rp, { flag: e2, operation: i2 })).userFlagUpdate;
        return new db(this._request, n2);
      });
    }
  }

  class ST extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(mp, { id: e2 })).userPromoteAdmin;
        return new YS(this._request, i2);
      });
    }
  }

  class bT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(sp, { id: e2 })).userPromoteMember;
        return new YS(this._request, i2);
      });
    }
  }

  class gT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(up, e2)).userSettingsFlagsReset;
        return new lb(this._request, i2);
      });
    }
  }

  class FT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(kp, { id: e2, input: i2 })).userSettingsUpdate;
        return new ob(this._request, n2);
      });
    }
  }

  class DT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vp, { id: e2 })).userSuspend;
        return new YS(this._request, i2);
      });
    }
  }

  class _T extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(cp, { id: e2 })).userUnsuspend;
        return new YS(this._request, i2);
      });
    }
  }

  class VT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(pp, { id: e2, input: i2 })).userUpdate;
        return new ab(this._request, n2);
      });
    }
  }

  class AT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Np, { input: e2 })).viewPreferencesCreate;
        return new mb(this._request, i2);
      });
    }
  }

  class TT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hp, { id: e2 })).viewPreferencesDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class IT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(fp, { id: e2, input: i2 })).viewPreferencesUpdate;
        return new mb(this._request, n2);
      });
    }
  }

  class wT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yp, { input: e2 })).webhookCreate;
        return new vb(this._request, i2);
      });
    }
  }

  class CT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sp, { id: e2 })).webhookDelete;
        return new GN(this._request, i2);
      });
    }
  }

  class PT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(bp, { id: e2, input: i2 })).webhookUpdate;
        return new vb(this._request, n2);
      });
    }
  }

  class qT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gp, { id: e2 })).workflowStateArchive;
        return new pb(this._request, i2);
      });
    }
  }

  class xT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fp, { input: e2 })).workflowStateCreate;
        return new fb(this._request, i2);
      });
    }
  }

  class jT extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch(e2, i2) {
      return Tp(this, undefined, undefined, function* () {
        const n2 = (yield this._request(Dp, { id: e2, input: i2 })).workflowStateUpdate;
        return new fb(this._request, n2);
      });
    }
  }

  class UT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).agentSession.activities;
        return new Op(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class OT extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tl, e2)).comment.children;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class BT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ml, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class RT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(kl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class ET extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Al, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class MT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Tl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.uncompletedIssuesUponClose;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class LT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).document.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class zT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ll, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).favorite.children;
        return new Fh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class WT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ql, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.documents;
        return new ZN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class HT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.history;
        return new Lh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class QT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Jl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.links;
        return new Nh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class GT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Kl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class JT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($l, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.subInitiatives;
        return new Eh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class KT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(no, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiativeUpdate.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class $T extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.attachments;
        return new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class ZT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(po, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.children;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class YT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(No, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class XT extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ho, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.formerAttachments;
        return new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class eI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.formerNeeds;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class iI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.history;
        return new gf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class nI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(So, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.inverseRelations;
        return new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class aI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(bo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.labels;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class tI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(go, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.needs;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class dI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fo, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.relations;
        return new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class lI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Do, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.subscribers;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class oI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Co, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.children;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class rI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Po, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class mI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(tr, e2)).organization.integrations;
        return new lf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class sI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(dr, e2)).organization.labels;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class uI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(lr, e2)).organization.projectLabels;
        return new Py(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class kI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(rr, e2)).organization.teams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class vI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(mr, e2)).organization.templates;
        return new BS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class cI extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(sr, e2)).organization.users;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class pI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class NI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.documents;
        return new ZN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class hI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.externalLinks;
        return new Nh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class fI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(yr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.history;
        return new wy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class yI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Sr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.initiatives;
        return new Eh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class SI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(br, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.inverseRelations;
        return new Wy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class bI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class gI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Fr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.labels;
        return new Py(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class FI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Dr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.members;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class DI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(_r, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.needs;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class _I extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Vr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectMilestones;
        return new Uy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class VI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ar, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectUpdates;
        return new nS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class AI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Tr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.relations;
        return new Wy(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class TI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ir, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.teams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class II extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectLabel.children;
        return new Py(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class wI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectLabel.projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class CI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Or, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectMilestone.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class PI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Wr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectUpdate.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class qI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request($r, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).roadmap.projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class xI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(rm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.cycles;
        return new WN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class jI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(mm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.gitAutomationStates;
        return new Ah(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class UI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(sm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class OI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(um, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.labels;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class BI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(km, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.members;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class RI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.memberships;
        return new qS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class EI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(cm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.projects;
        return new Ay(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class MI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(pm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.states;
        return new hb(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class LI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Nm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.templates;
        return new BS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class zI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.webhooks;
        return new kb(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class WI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(wm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.assignedIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class HI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Cm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.createdIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class QI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Pm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.delegatedIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class GI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(qm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.drafts;
        return new oh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class JI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(xm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teamMemberships;
        return new qS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class KI extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(jm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class $I extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(gs, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).workflowState.issues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }

  class ZI extends Ip {
    constructor(e2) {
      super(e2);
    }
    administrableTeams(e2) {
      return new yb(this._request).fetch(e2);
    }
    agentActivities(e2) {
      return new Sb(this._request).fetch(e2);
    }
    agentActivity(e2) {
      return new bb(this._request).fetch(e2);
    }
    agentContext(e2) {
      return new gb(this._request).fetch(e2);
    }
    agentContexts(e2) {
      return new Fb(this._request).fetch(e2);
    }
    agentSession(e2) {
      return new Db(this._request).fetch(e2);
    }
    agentSessions(e2) {
      return new _b(this._request).fetch(e2);
    }
    apiKeys(e2) {
      return new Vb(this._request).fetch(e2);
    }
    applicationInfo(e2) {
      return new Ab(this._request).fetch(e2);
    }
    applicationWithAuthorization(e2, i2, n2) {
      return new Tb(this._request).fetch(e2, i2, n2);
    }
    attachment(e2) {
      return new Ib(this._request).fetch(e2);
    }
    attachmentIssue(e2) {
      return new wb(this._request).fetch(e2);
    }
    attachments(e2) {
      return new Cb(this._request).fetch(e2);
    }
    attachmentsForURL(e2, i2) {
      return new Pb(this._request).fetch(e2, i2);
    }
    auditEntries(e2) {
      return new qb(this._request).fetch(e2);
    }
    get auditEntryTypes() {
      return new xb(this._request).fetch();
    }
    get authenticationSessions() {
      return new jb(this._request).fetch();
    }
    get availableUsers() {
      return new Ub(this._request).fetch();
    }
    comment(e2) {
      return new Ob(this._request).fetch(e2);
    }
    comments(e2) {
      return new Bb(this._request).fetch(e2);
    }
    customView(e2) {
      return new Rb(this._request).fetch(e2);
    }
    customViewHasSubscribers(e2) {
      return new Eb(this._request).fetch(e2);
    }
    customViews(e2) {
      return new Mb(this._request).fetch(e2);
    }
    customer(e2) {
      return new Lb(this._request).fetch(e2);
    }
    customerNeed(e2) {
      return new zb(this._request).fetch(e2);
    }
    customerNeeds(e2) {
      return new Wb(this._request).fetch(e2);
    }
    customerStatus(e2) {
      return new Hb(this._request).fetch(e2);
    }
    customerStatuses(e2) {
      return new Qb(this._request).fetch(e2);
    }
    customerTier(e2) {
      return new Gb(this._request).fetch(e2);
    }
    customerTiers(e2) {
      return new Jb(this._request).fetch(e2);
    }
    customers(e2) {
      return new Kb(this._request).fetch(e2);
    }
    cycle(e2) {
      return new $b(this._request).fetch(e2);
    }
    cycles(e2) {
      return new Zb(this._request).fetch(e2);
    }
    document(e2) {
      return new Yb(this._request).fetch(e2);
    }
    documentContentHistory(e2) {
      return new Xb(this._request).fetch(e2);
    }
    documents(e2) {
      return new eg(this._request).fetch(e2);
    }
    emailIntakeAddress(e2) {
      return new ig(this._request).fetch(e2);
    }
    emoji(e2) {
      return new ng(this._request).fetch(e2);
    }
    emojis(e2) {
      return new ag(this._request).fetch(e2);
    }
    entityExternalLink(e2) {
      return new tg(this._request).fetch(e2);
    }
    externalUser(e2) {
      return new dg(this._request).fetch(e2);
    }
    externalUsers(e2) {
      return new lg(this._request).fetch(e2);
    }
    favorite(e2) {
      return new og(this._request).fetch(e2);
    }
    favorites(e2) {
      return new rg(this._request).fetch(e2);
    }
    initiative(e2) {
      return new mg(this._request).fetch(e2);
    }
    initiativeRelation(e2) {
      return new sg(this._request).fetch(e2);
    }
    initiativeRelations(e2) {
      return new ug(this._request).fetch(e2);
    }
    initiativeToProject(e2) {
      return new kg(this._request).fetch(e2);
    }
    initiativeToProjects(e2) {
      return new vg(this._request).fetch(e2);
    }
    initiativeUpdate(e2) {
      return new cg(this._request).fetch(e2);
    }
    initiativeUpdates(e2) {
      return new pg(this._request).fetch(e2);
    }
    initiatives(e2) {
      return new Ng(this._request).fetch(e2);
    }
    integration(e2) {
      return new hg(this._request).fetch(e2);
    }
    integrationHasScopes(e2, i2) {
      return new fg(this._request).fetch(e2, i2);
    }
    integrationTemplate(e2) {
      return new yg(this._request).fetch(e2);
    }
    integrationTemplates(e2) {
      return new Sg(this._request).fetch(e2);
    }
    integrations(e2) {
      return new bg(this._request).fetch(e2);
    }
    integrationsSettings(e2) {
      return new gg(this._request).fetch(e2);
    }
    issue(e2) {
      return new Fg(this._request).fetch(e2);
    }
    issueFigmaFileKeySearch(e2, i2) {
      return new Dg(this._request).fetch(e2, i2);
    }
    issueFilterSuggestion(e2, i2) {
      return new _g(this._request).fetch(e2, i2);
    }
    issueImportCheckCSV(e2, i2) {
      return new Vg(this._request).fetch(e2, i2);
    }
    issueImportCheckSync(e2) {
      return new Ag(this._request).fetch(e2);
    }
    issueImportJqlCheck(e2, i2, n2, a2, t2) {
      return new Tg(this._request).fetch(e2, i2, n2, a2, t2);
    }
    issueLabel(e2) {
      return new Ig(this._request).fetch(e2);
    }
    issueLabels(e2) {
      return new wg(this._request).fetch(e2);
    }
    get issuePriorityValues() {
      return new Cg(this._request).fetch();
    }
    issueRelation(e2) {
      return new Pg(this._request).fetch(e2);
    }
    issueRelations(e2) {
      return new qg(this._request).fetch(e2);
    }
    issueSearch(e2) {
      return new xg(this._request).fetch(e2);
    }
    issueTitleSuggestionFromCustomerRequest(e2) {
      return new jg(this._request).fetch(e2);
    }
    issueVcsBranchSearch(e2) {
      return new Ug(this._request).fetch(e2);
    }
    issues(e2) {
      return new Og(this._request).fetch(e2);
    }
    notification(e2) {
      return new Bg(this._request).fetch(e2);
    }
    notificationSubscription(e2) {
      return new Rg(this._request).fetch(e2);
    }
    notificationSubscriptions(e2) {
      return new Eg(this._request).fetch(e2);
    }
    notifications(e2) {
      return new Mg(this._request).fetch(e2);
    }
    get organization() {
      return new Lg(this._request).fetch();
    }
    organizationExists(e2) {
      return new zg(this._request).fetch(e2);
    }
    organizationInvite(e2) {
      return new Wg(this._request).fetch(e2);
    }
    organizationInvites(e2) {
      return new Hg(this._request).fetch(e2);
    }
    project(e2) {
      return new Qg(this._request).fetch(e2);
    }
    projectFilterSuggestion(e2) {
      return new Gg(this._request).fetch(e2);
    }
    projectLabel(e2) {
      return new Jg(this._request).fetch(e2);
    }
    projectLabels(e2) {
      return new Kg(this._request).fetch(e2);
    }
    projectMilestone(e2) {
      return new $g(this._request).fetch(e2);
    }
    projectMilestones(e2) {
      return new Zg(this._request).fetch(e2);
    }
    projectRelation(e2) {
      return new Yg(this._request).fetch(e2);
    }
    projectRelations(e2) {
      return new Xg(this._request).fetch(e2);
    }
    projectStatus(e2) {
      return new eF(this._request).fetch(e2);
    }
    projectStatuses(e2) {
      return new iF(this._request).fetch(e2);
    }
    projectUpdate(e2) {
      return new nF(this._request).fetch(e2);
    }
    projectUpdates(e2) {
      return new aF(this._request).fetch(e2);
    }
    projects(e2) {
      return new tF(this._request).fetch(e2);
    }
    pushSubscriptionTest(e2) {
      return new dF(this._request).fetch(e2);
    }
    get rateLimitStatus() {
      return new lF(this._request).fetch();
    }
    roadmap(e2) {
      return new oF(this._request).fetch(e2);
    }
    roadmapToProject(e2) {
      return new rF(this._request).fetch(e2);
    }
    roadmapToProjects(e2) {
      return new mF(this._request).fetch(e2);
    }
    roadmaps(e2) {
      return new sF(this._request).fetch(e2);
    }
    searchDocuments(e2, i2) {
      return new uF(this._request).fetch(e2, i2);
    }
    searchIssues(e2, i2) {
      return new kF(this._request).fetch(e2, i2);
    }
    searchProjects(e2, i2) {
      return new vF(this._request).fetch(e2, i2);
    }
    ssoUrlFromEmail(e2, i2) {
      return new cF(this._request).fetch(e2, i2);
    }
    team(e2) {
      return new pF(this._request).fetch(e2);
    }
    teamMembership(e2) {
      return new NF(this._request).fetch(e2);
    }
    teamMemberships(e2) {
      return new hF(this._request).fetch(e2);
    }
    teams(e2) {
      return new fF(this._request).fetch(e2);
    }
    template(e2) {
      return new yF(this._request).fetch(e2);
    }
    get templates() {
      return new SF(this._request).fetch();
    }
    templatesForIntegration(e2) {
      return new bF(this._request).fetch(e2);
    }
    timeSchedule(e2) {
      return new gF(this._request).fetch(e2);
    }
    timeSchedules(e2) {
      return new FF(this._request).fetch(e2);
    }
    triageResponsibilities(e2) {
      return new DF(this._request).fetch(e2);
    }
    triageResponsibility(e2) {
      return new _F(this._request).fetch(e2);
    }
    user(e2) {
      return new VF(this._request).fetch(e2);
    }
    get userSettings() {
      return new AF(this._request).fetch();
    }
    users(e2) {
      return new TF(this._request).fetch(e2);
    }
    get verifyGitHubEnterpriseServerInstallation() {
      return new IF(this._request).fetch();
    }
    get viewer() {
      return new wF(this._request).fetch();
    }
    webhook(e2) {
      return new CF(this._request).fetch(e2);
    }
    webhooks(e2) {
      return new PF(this._request).fetch(e2);
    }
    workflowState(e2) {
      return new qF(this._request).fetch(e2);
    }
    workflowStates(e2) {
      return new xF(this._request).fetch(e2);
    }
    createAgentActivity(e2) {
      return new jF(this._request).fetch(e2);
    }
    createAgentContext(e2) {
      return new UF(this._request).fetch(e2);
    }
    updateAgentContext(e2, i2) {
      return new OF(this._request).fetch(e2, i2);
    }
    agentSessionUpdateExternalUrl(e2, i2) {
      return new BF(this._request).fetch(e2, i2);
    }
    airbyteIntegrationConnect(e2) {
      return new RF(this._request).fetch(e2);
    }
    createAttachment(e2) {
      return new EF(this._request).fetch(e2);
    }
    deleteAttachment(e2) {
      return new MF(this._request).fetch(e2);
    }
    attachmentLinkDiscord(e2, i2, n2, a2, t2) {
      return new LF(this._request).fetch(e2, i2, n2, a2, t2);
    }
    attachmentLinkFront(e2, i2, n2) {
      return new zF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkGitHubIssue(e2, i2, n2) {
      return new WF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkGitHubPR(e2, i2, n2) {
      return new HF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkGitLabMR(e2, i2, n2, a2, t2) {
      return new QF(this._request).fetch(e2, i2, n2, a2, t2);
    }
    attachmentLinkIntercom(e2, i2, n2) {
      return new GF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkJiraIssue(e2, i2, n2) {
      return new JF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkSalesforce(e2, i2, n2) {
      return new KF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkSlack(e2, i2, n2) {
      return new $F(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkURL(e2, i2, n2) {
      return new ZF(this._request).fetch(e2, i2, n2);
    }
    attachmentLinkZendesk(e2, i2, n2) {
      return new YF(this._request).fetch(e2, i2, n2);
    }
    attachmentSyncToSlack(e2) {
      return new XF(this._request).fetch(e2);
    }
    updateAttachment(e2, i2) {
      return new eD(this._request).fetch(e2, i2);
    }
    createComment(e2) {
      return new iD(this._request).fetch(e2);
    }
    deleteComment(e2) {
      return new nD(this._request).fetch(e2);
    }
    commentResolve(e2, i2) {
      return new aD(this._request).fetch(e2, i2);
    }
    commentUnresolve(e2) {
      return new tD(this._request).fetch(e2);
    }
    updateComment(e2, i2) {
      return new dD(this._request).fetch(e2, i2);
    }
    createContact(e2) {
      return new lD(this._request).fetch(e2);
    }
    createCsvExportReport(e2) {
      return new oD(this._request).fetch(e2);
    }
    createInitiativeUpdateReminder(e2, i2) {
      return new rD(this._request).fetch(e2, i2);
    }
    createOrganizationFromOnboarding(e2, i2) {
      return new mD(this._request).fetch(e2, i2);
    }
    createProjectUpdateReminder(e2, i2) {
      return new sD(this._request).fetch(e2, i2);
    }
    createCustomView(e2) {
      return new uD(this._request).fetch(e2);
    }
    deleteCustomView(e2) {
      return new kD(this._request).fetch(e2);
    }
    updateCustomView(e2, i2) {
      return new vD(this._request).fetch(e2, i2);
    }
    createCustomer(e2) {
      return new cD(this._request).fetch(e2);
    }
    deleteCustomer(e2) {
      return new pD(this._request).fetch(e2);
    }
    customerMerge(e2, i2) {
      return new ND(this._request).fetch(e2, i2);
    }
    archiveCustomerNeed(e2) {
      return new hD(this._request).fetch(e2);
    }
    createCustomerNeed(e2) {
      return new fD(this._request).fetch(e2);
    }
    customerNeedCreateFromAttachment(e2) {
      return new yD(this._request).fetch(e2);
    }
    deleteCustomerNeed(e2, i2) {
      return new SD(this._request).fetch(e2, i2);
    }
    unarchiveCustomerNeed(e2) {
      return new bD(this._request).fetch(e2);
    }
    updateCustomerNeed(e2, i2) {
      return new gD(this._request).fetch(e2, i2);
    }
    createCustomerStatus(e2) {
      return new FD(this._request).fetch(e2);
    }
    deleteCustomerStatus(e2) {
      return new DD(this._request).fetch(e2);
    }
    updateCustomerStatus(e2, i2) {
      return new _D(this._request).fetch(e2, i2);
    }
    createCustomerTier(e2) {
      return new VD(this._request).fetch(e2);
    }
    deleteCustomerTier(e2) {
      return new AD(this._request).fetch(e2);
    }
    updateCustomerTier(e2, i2) {
      return new TD(this._request).fetch(e2, i2);
    }
    updateCustomer(e2, i2) {
      return new ID(this._request).fetch(e2, i2);
    }
    customerUpsert(e2) {
      return new wD(this._request).fetch(e2);
    }
    archiveCycle(e2) {
      return new CD(this._request).fetch(e2);
    }
    createCycle(e2) {
      return new PD(this._request).fetch(e2);
    }
    cycleShiftAll(e2) {
      return new qD(this._request).fetch(e2);
    }
    cycleStartUpcomingCycleToday(e2) {
      return new xD(this._request).fetch(e2);
    }
    updateCycle(e2, i2) {
      return new jD(this._request).fetch(e2, i2);
    }
    createDocument(e2) {
      return new UD(this._request).fetch(e2);
    }
    deleteDocument(e2) {
      return new OD(this._request).fetch(e2);
    }
    unarchiveDocument(e2) {
      return new BD(this._request).fetch(e2);
    }
    updateDocument(e2, i2) {
      return new RD(this._request).fetch(e2, i2);
    }
    createEmailIntakeAddress(e2) {
      return new ED(this._request).fetch(e2);
    }
    deleteEmailIntakeAddress(e2) {
      return new MD(this._request).fetch(e2);
    }
    emailIntakeAddressRotate(e2) {
      return new LD(this._request).fetch(e2);
    }
    updateEmailIntakeAddress(e2, i2) {
      return new zD(this._request).fetch(e2, i2);
    }
    emailTokenUserAccountAuth(e2) {
      return new WD(this._request).fetch(e2);
    }
    emailUnsubscribe(e2) {
      return new HD(this._request).fetch(e2);
    }
    emailUserAccountAuthChallenge(e2) {
      return new QD(this._request).fetch(e2);
    }
    createEmoji(e2) {
      return new GD(this._request).fetch(e2);
    }
    deleteEmoji(e2) {
      return new JD(this._request).fetch(e2);
    }
    createEntityExternalLink(e2) {
      return new KD(this._request).fetch(e2);
    }
    deleteEntityExternalLink(e2) {
      return new $D(this._request).fetch(e2);
    }
    updateEntityExternalLink(e2, i2) {
      return new ZD(this._request).fetch(e2, i2);
    }
    createFavorite(e2) {
      return new YD(this._request).fetch(e2);
    }
    deleteFavorite(e2) {
      return new XD(this._request).fetch(e2);
    }
    updateFavorite(e2, i2) {
      return new e_(this._request).fetch(e2, i2);
    }
    fileUpload(e2, i2, n2, a2) {
      return new i_(this._request).fetch(e2, i2, n2, a2);
    }
    createGitAutomationState(e2) {
      return new n_(this._request).fetch(e2);
    }
    deleteGitAutomationState(e2) {
      return new a_(this._request).fetch(e2);
    }
    updateGitAutomationState(e2, i2) {
      return new t_(this._request).fetch(e2, i2);
    }
    createGitAutomationTargetBranch(e2) {
      return new d_(this._request).fetch(e2);
    }
    deleteGitAutomationTargetBranch(e2) {
      return new l_(this._request).fetch(e2);
    }
    updateGitAutomationTargetBranch(e2, i2) {
      return new o_(this._request).fetch(e2, i2);
    }
    googleUserAccountAuth(e2) {
      return new r_(this._request).fetch(e2);
    }
    imageUploadFromUrl(e2) {
      return new m_(this._request).fetch(e2);
    }
    importFileUpload(e2, i2, n2, a2) {
      return new s_(this._request).fetch(e2, i2, n2, a2);
    }
    archiveInitiative(e2) {
      return new u_(this._request).fetch(e2);
    }
    createInitiative(e2) {
      return new k_(this._request).fetch(e2);
    }
    deleteInitiative(e2) {
      return new v_(this._request).fetch(e2);
    }
    createInitiativeRelation(e2) {
      return new c_(this._request).fetch(e2);
    }
    deleteInitiativeRelation(e2) {
      return new p_(this._request).fetch(e2);
    }
    updateInitiativeRelation(e2, i2) {
      return new N_(this._request).fetch(e2, i2);
    }
    createInitiativeToProject(e2) {
      return new h_(this._request).fetch(e2);
    }
    deleteInitiativeToProject(e2) {
      return new f_(this._request).fetch(e2);
    }
    updateInitiativeToProject(e2, i2) {
      return new y_(this._request).fetch(e2, i2);
    }
    unarchiveInitiative(e2) {
      return new S_(this._request).fetch(e2);
    }
    updateInitiative(e2, i2) {
      return new b_(this._request).fetch(e2, i2);
    }
    archiveInitiativeUpdate(e2) {
      return new g_(this._request).fetch(e2);
    }
    createInitiativeUpdate(e2) {
      return new F_(this._request).fetch(e2);
    }
    unarchiveInitiativeUpdate(e2) {
      return new D_(this._request).fetch(e2);
    }
    updateInitiativeUpdate(e2, i2) {
      return new __(this._request).fetch(e2, i2);
    }
    archiveIntegration(e2) {
      return new V_(this._request).fetch(e2);
    }
    integrationAsksConnectChannel(e2, i2) {
      return new A_(this._request).fetch(e2, i2);
    }
    deleteIntegration(e2) {
      return new T_(this._request).fetch(e2);
    }
    integrationDiscord(e2, i2) {
      return new I_(this._request).fetch(e2, i2);
    }
    integrationFigma(e2, i2) {
      return new w_(this._request).fetch(e2, i2);
    }
    integrationFront(e2, i2) {
      return new C_(this._request).fetch(e2, i2);
    }
    integrationGitHubEnterpriseServerConnect(e2, i2) {
      return new P_(this._request).fetch(e2, i2);
    }
    integrationGitHubPersonal(e2) {
      return new q_(this._request).fetch(e2);
    }
    get createIntegrationGithubCommit() {
      return new x_(this._request).fetch();
    }
    integrationGithubConnect(e2, i2) {
      return new j_(this._request).fetch(e2, i2);
    }
    integrationGithubImportConnect(e2, i2) {
      return new U_(this._request).fetch(e2, i2);
    }
    integrationGithubImportRefresh(e2) {
      return new O_(this._request).fetch(e2);
    }
    integrationGitlabConnect(e2, i2) {
      return new B_(this._request).fetch(e2, i2);
    }
    integrationGoogleSheets(e2) {
      return new R_(this._request).fetch(e2);
    }
    integrationIntercom(e2, i2, n2) {
      return new E_(this._request).fetch(e2, i2, n2);
    }
    get deleteIntegrationIntercom() {
      return new M_(this._request).fetch();
    }
    updateIntegrationIntercomSettings(e2) {
      return new L_(this._request).fetch(e2);
    }
    integrationJiraPersonal(e2) {
      return new z_(this._request).fetch(e2);
    }
    get integrationLoom() {
      return new W_(this._request).fetch();
    }
    integrationRequest(e2) {
      return new H_(this._request).fetch(e2);
    }
    integrationSalesforce(e2, i2, n2) {
      return new Q_(this._request).fetch(e2, i2, n2);
    }
    integrationSentryConnect(e2, i2, n2) {
      return new G_(this._request).fetch(e2, i2, n2);
    }
    integrationSlack(e2, i2, n2) {
      return new J_(this._request).fetch(e2, i2, n2);
    }
    integrationSlackAsks(e2, i2) {
      return new K_(this._request).fetch(e2, i2);
    }
    integrationSlackCustomViewNotifications(e2, i2, n2) {
      return new $_(this._request).fetch(e2, i2, n2);
    }
    integrationSlackCustomerChannelLink(e2, i2, n2) {
      return new Z_(this._request).fetch(e2, i2, n2);
    }
    integrationSlackImportEmojis(e2, i2) {
      return new Y_(this._request).fetch(e2, i2);
    }
    integrationSlackOrgProjectUpdatesPost(e2, i2) {
      return new X_(this._request).fetch(e2, i2);
    }
    integrationSlackPersonal(e2, i2) {
      return new eV(this._request).fetch(e2, i2);
    }
    integrationSlackPost(e2, i2, n2, a2) {
      return new iV(this._request).fetch(e2, i2, n2, a2);
    }
    integrationSlackProjectPost(e2, i2, n2, a2) {
      return new nV(this._request).fetch(e2, i2, n2, a2);
    }
    createIntegrationTemplate(e2) {
      return new aV(this._request).fetch(e2);
    }
    deleteIntegrationTemplate(e2) {
      return new tV(this._request).fetch(e2);
    }
    integrationZendesk(e2, i2, n2, a2) {
      return new dV(this._request).fetch(e2, i2, n2, a2);
    }
    createIntegrationsSettings(e2) {
      return new lV(this._request).fetch(e2);
    }
    updateIntegrationsSettings(e2, i2) {
      return new oV(this._request).fetch(e2, i2);
    }
    issueAddLabel(e2, i2) {
      return new rV(this._request).fetch(e2, i2);
    }
    archiveIssue(e2, i2) {
      return new mV(this._request).fetch(e2, i2);
    }
    createIssueBatch(e2) {
      return new sV(this._request).fetch(e2);
    }
    updateIssueBatch(e2, i2) {
      return new uV(this._request).fetch(e2, i2);
    }
    createIssue(e2) {
      return new kV(this._request).fetch(e2);
    }
    deleteIssue(e2, i2) {
      return new vV(this._request).fetch(e2, i2);
    }
    issueImportCreateAsana(e2, i2, n2) {
      return new cV(this._request).fetch(e2, i2, n2);
    }
    issueImportCreateCSVJira(e2, i2) {
      return new pV(this._request).fetch(e2, i2);
    }
    issueImportCreateClubhouse(e2, i2, n2) {
      return new NV(this._request).fetch(e2, i2, n2);
    }
    issueImportCreateGithub(e2) {
      return new hV(this._request).fetch(e2);
    }
    issueImportCreateJira(e2, i2, n2, a2, t2) {
      return new fV(this._request).fetch(e2, i2, n2, a2, t2);
    }
    deleteIssueImport(e2) {
      return new yV(this._request).fetch(e2);
    }
    issueImportProcess(e2, i2) {
      return new SV(this._request).fetch(e2, i2);
    }
    updateIssueImport(e2, i2) {
      return new bV(this._request).fetch(e2, i2);
    }
    createIssueLabel(e2, i2) {
      return new gV(this._request).fetch(e2, i2);
    }
    deleteIssueLabel(e2) {
      return new FV(this._request).fetch(e2);
    }
    updateIssueLabel(e2, i2, n2) {
      return new DV(this._request).fetch(e2, i2, n2);
    }
    createIssueRelation(e2, i2) {
      return new _V(this._request).fetch(e2, i2);
    }
    deleteIssueRelation(e2) {
      return new VV(this._request).fetch(e2);
    }
    updateIssueRelation(e2, i2) {
      return new AV(this._request).fetch(e2, i2);
    }
    issueReminder(e2, i2) {
      return new TV(this._request).fetch(e2, i2);
    }
    issueRemoveLabel(e2, i2) {
      return new IV(this._request).fetch(e2, i2);
    }
    issueSubscribe(e2, i2) {
      return new wV(this._request).fetch(e2, i2);
    }
    unarchiveIssue(e2) {
      return new CV(this._request).fetch(e2);
    }
    issueUnsubscribe(e2, i2) {
      return new PV(this._request).fetch(e2, i2);
    }
    updateIssue(e2, i2) {
      return new qV(this._request).fetch(e2, i2);
    }
    joinOrganizationFromOnboarding(e2) {
      return new xV(this._request).fetch(e2);
    }
    leaveOrganization(e2) {
      return new jV(this._request).fetch(e2);
    }
    logout(e2) {
      return new UV(this._request).fetch(e2);
    }
    logoutAllSessions(e2) {
      return new OV(this._request).fetch(e2);
    }
    logoutOtherSessions(e2) {
      return new BV(this._request).fetch(e2);
    }
    logoutSession(e2) {
      return new RV(this._request).fetch(e2);
    }
    archiveNotification(e2) {
      return new EV(this._request).fetch(e2);
    }
    notificationArchiveAll(e2) {
      return new MV(this._request).fetch(e2);
    }
    updateNotificationCategoryChannelSubscription(e2, i2, n2) {
      return new LV(this._request).fetch(e2, i2, n2);
    }
    notificationMarkReadAll(e2, i2) {
      return new zV(this._request).fetch(e2, i2);
    }
    notificationMarkUnreadAll(e2) {
      return new WV(this._request).fetch(e2);
    }
    notificationSnoozeAll(e2, i2) {
      return new HV(this._request).fetch(e2, i2);
    }
    createNotificationSubscription(e2) {
      return new QV(this._request).fetch(e2);
    }
    deleteNotificationSubscription(e2) {
      return new GV(this._request).fetch(e2);
    }
    updateNotificationSubscription(e2, i2) {
      return new JV(this._request).fetch(e2, i2);
    }
    unarchiveNotification(e2) {
      return new KV(this._request).fetch(e2);
    }
    notificationUnsnoozeAll(e2, i2) {
      return new $V(this._request).fetch(e2, i2);
    }
    updateNotification(e2, i2) {
      return new ZV(this._request).fetch(e2, i2);
    }
    get deleteOrganizationCancel() {
      return new YV(this._request).fetch();
    }
    deleteOrganization(e2) {
      return new XV(this._request).fetch(e2);
    }
    get organizationDeleteChallenge() {
      return new eA(this._request).fetch();
    }
    deleteOrganizationDomain(e2) {
      return new iA(this._request).fetch(e2);
    }
    createOrganizationInvite(e2) {
      return new nA(this._request).fetch(e2);
    }
    deleteOrganizationInvite(e2) {
      return new aA(this._request).fetch(e2);
    }
    updateOrganizationInvite(e2, i2) {
      return new tA(this._request).fetch(e2, i2);
    }
    get organizationStartTrial() {
      return new dA(this._request).fetch();
    }
    organizationStartTrialForPlan(e2) {
      return new lA(this._request).fetch(e2);
    }
    updateOrganization(e2) {
      return new oA(this._request).fetch(e2);
    }
    projectAddLabel(e2, i2) {
      return new rA(this._request).fetch(e2, i2);
    }
    archiveProject(e2, i2) {
      return new mA(this._request).fetch(e2, i2);
    }
    createProject(e2, i2) {
      return new sA(this._request).fetch(e2, i2);
    }
    deleteProject(e2) {
      return new uA(this._request).fetch(e2);
    }
    createProjectLabel(e2) {
      return new kA(this._request).fetch(e2);
    }
    deleteProjectLabel(e2) {
      return new vA(this._request).fetch(e2);
    }
    updateProjectLabel(e2, i2) {
      return new cA(this._request).fetch(e2, i2);
    }
    createProjectMilestone(e2) {
      return new pA(this._request).fetch(e2);
    }
    deleteProjectMilestone(e2) {
      return new NA(this._request).fetch(e2);
    }
    updateProjectMilestone(e2, i2) {
      return new hA(this._request).fetch(e2, i2);
    }
    createProjectRelation(e2) {
      return new fA(this._request).fetch(e2);
    }
    deleteProjectRelation(e2) {
      return new yA(this._request).fetch(e2);
    }
    updateProjectRelation(e2, i2) {
      return new SA(this._request).fetch(e2, i2);
    }
    projectRemoveLabel(e2, i2) {
      return new bA(this._request).fetch(e2, i2);
    }
    archiveProjectStatus(e2) {
      return new gA(this._request).fetch(e2);
    }
    createProjectStatus(e2) {
      return new FA(this._request).fetch(e2);
    }
    unarchiveProjectStatus(e2) {
      return new DA(this._request).fetch(e2);
    }
    updateProjectStatus(e2, i2) {
      return new _A(this._request).fetch(e2, i2);
    }
    unarchiveProject(e2) {
      return new VA(this._request).fetch(e2);
    }
    updateProject(e2, i2) {
      return new AA(this._request).fetch(e2, i2);
    }
    archiveProjectUpdate(e2) {
      return new TA(this._request).fetch(e2);
    }
    createProjectUpdate(e2) {
      return new IA(this._request).fetch(e2);
    }
    deleteProjectUpdate(e2) {
      return new wA(this._request).fetch(e2);
    }
    unarchiveProjectUpdate(e2) {
      return new CA(this._request).fetch(e2);
    }
    updateProjectUpdate(e2, i2) {
      return new PA(this._request).fetch(e2, i2);
    }
    createPushSubscription(e2) {
      return new qA(this._request).fetch(e2);
    }
    deletePushSubscription(e2) {
      return new xA(this._request).fetch(e2);
    }
    createReaction(e2) {
      return new jA(this._request).fetch(e2);
    }
    deleteReaction(e2) {
      return new UA(this._request).fetch(e2);
    }
    refreshGoogleSheetsData(e2, i2) {
      return new OA(this._request).fetch(e2, i2);
    }
    resendOrganizationInvite(e2) {
      return new BA(this._request).fetch(e2);
    }
    resendOrganizationInviteByEmail(e2) {
      return new RA(this._request).fetch(e2);
    }
    archiveRoadmap(e2) {
      return new EA(this._request).fetch(e2);
    }
    createRoadmap(e2) {
      return new MA(this._request).fetch(e2);
    }
    deleteRoadmap(e2) {
      return new LA(this._request).fetch(e2);
    }
    createRoadmapToProject(e2) {
      return new zA(this._request).fetch(e2);
    }
    deleteRoadmapToProject(e2) {
      return new WA(this._request).fetch(e2);
    }
    updateRoadmapToProject(e2, i2) {
      return new HA(this._request).fetch(e2, i2);
    }
    unarchiveRoadmap(e2) {
      return new QA(this._request).fetch(e2);
    }
    updateRoadmap(e2, i2) {
      return new GA(this._request).fetch(e2, i2);
    }
    samlTokenUserAccountAuth(e2) {
      return new JA(this._request).fetch(e2);
    }
    createTeam(e2, i2) {
      return new KA(this._request).fetch(e2, i2);
    }
    deleteTeamCycles(e2) {
      return new $A(this._request).fetch(e2);
    }
    deleteTeam(e2) {
      return new ZA(this._request).fetch(e2);
    }
    deleteTeamKey(e2) {
      return new YA(this._request).fetch(e2);
    }
    createTeamMembership(e2) {
      return new XA(this._request).fetch(e2);
    }
    deleteTeamMembership(e2, i2) {
      return new eT(this._request).fetch(e2, i2);
    }
    updateTeamMembership(e2, i2) {
      return new iT(this._request).fetch(e2, i2);
    }
    unarchiveTeam(e2) {
      return new nT(this._request).fetch(e2);
    }
    updateTeam(e2, i2, n2) {
      return new aT(this._request).fetch(e2, i2, n2);
    }
    createTemplate(e2) {
      return new tT(this._request).fetch(e2);
    }
    deleteTemplate(e2) {
      return new dT(this._request).fetch(e2);
    }
    updateTemplate(e2, i2) {
      return new lT(this._request).fetch(e2, i2);
    }
    createTimeSchedule(e2) {
      return new oT(this._request).fetch(e2);
    }
    deleteTimeSchedule(e2) {
      return new rT(this._request).fetch(e2);
    }
    timeScheduleRefreshIntegrationSchedule(e2) {
      return new mT(this._request).fetch(e2);
    }
    updateTimeSchedule(e2, i2) {
      return new sT(this._request).fetch(e2, i2);
    }
    timeScheduleUpsertExternal(e2, i2) {
      return new uT(this._request).fetch(e2, i2);
    }
    createTriageResponsibility(e2) {
      return new kT(this._request).fetch(e2);
    }
    deleteTriageResponsibility(e2) {
      return new vT(this._request).fetch(e2);
    }
    updateTriageResponsibility(e2, i2) {
      return new cT(this._request).fetch(e2, i2);
    }
    userDemoteAdmin(e2) {
      return new pT(this._request).fetch(e2);
    }
    userDemoteMember(e2) {
      return new NT(this._request).fetch(e2);
    }
    userDiscordConnect(e2, i2) {
      return new hT(this._request).fetch(e2, i2);
    }
    userExternalUserDisconnect(e2) {
      return new fT(this._request).fetch(e2);
    }
    updateUserFlag(e2, i2) {
      return new yT(this._request).fetch(e2, i2);
    }
    userPromoteAdmin(e2) {
      return new ST(this._request).fetch(e2);
    }
    userPromoteMember(e2) {
      return new bT(this._request).fetch(e2);
    }
    userSettingsFlagsReset(e2) {
      return new gT(this._request).fetch(e2);
    }
    updateUserSettings(e2, i2) {
      return new FT(this._request).fetch(e2, i2);
    }
    suspendUser(e2) {
      return new DT(this._request).fetch(e2);
    }
    unsuspendUser(e2) {
      return new _T(this._request).fetch(e2);
    }
    updateUser(e2, i2) {
      return new VT(this._request).fetch(e2, i2);
    }
    createViewPreferences(e2) {
      return new AT(this._request).fetch(e2);
    }
    deleteViewPreferences(e2) {
      return new TT(this._request).fetch(e2);
    }
    updateViewPreferences(e2, i2) {
      return new IT(this._request).fetch(e2, i2);
    }
    createWebhook(e2) {
      return new wT(this._request).fetch(e2);
    }
    deleteWebhook(e2) {
      return new CT(this._request).fetch(e2);
    }
    updateWebhook(e2, i2) {
      return new PT(this._request).fetch(e2, i2);
    }
    archiveWorkflowState(e2) {
      return new qT(this._request).fetch(e2);
    }
    createWorkflowState(e2) {
      return new xT(this._request).fetch(e2);
    }
    updateWorkflowState(e2, i2) {
      return new jT(this._request).fetch(e2, i2);
    }
  }
  function YI(e2) {
    return e2 != null;
  }
  exports.LinearErrorType = undefined, (_p = exports.LinearErrorType || (exports.LinearErrorType = {})).FeatureNotAccessible = "FeatureNotAccessible", _p.InvalidInput = "InvalidInput", _p.Ratelimited = "Ratelimited", _p.NetworkError = "NetworkError", _p.AuthenticationError = "AuthenticationError", _p.Forbidden = "Forbidden", _p.BootstrapError = "BootstrapError", _p.Unknown = "Unknown", _p.InternalError = "InternalError", _p.Other = "Other", _p.UserError = "UserError", _p.GraphqlError = "GraphqlError", _p.LockTimeout = "LockTimeout", _p.UsageLimitExceeded = "UsageLimitExceeded";
  var XI = { [exports.LinearErrorType.FeatureNotAccessible]: "feature not accessible", [exports.LinearErrorType.InvalidInput]: "invalid input", [exports.LinearErrorType.Ratelimited]: "ratelimited", [exports.LinearErrorType.NetworkError]: "network error", [exports.LinearErrorType.AuthenticationError]: "authentication error", [exports.LinearErrorType.Forbidden]: "forbidden", [exports.LinearErrorType.BootstrapError]: "bootstrap error", [exports.LinearErrorType.Unknown]: "unknown", [exports.LinearErrorType.InternalError]: "internal error", [exports.LinearErrorType.Other]: "other", [exports.LinearErrorType.UserError]: "user error", [exports.LinearErrorType.GraphqlError]: "graphql error", [exports.LinearErrorType.LockTimeout]: "lock timeout", [exports.LinearErrorType.UsageLimitExceeded]: "usage limit exceeded" };
  function ew(e2) {
    var i2, n2, a2;
    return (n2 = XI, a2 = e2, i2 = Object.keys(n2).find((e3) => n2[e3] === a2)) !== null && i2 !== undefined ? i2 : exports.LinearErrorType.Unknown;
  }
  var iw = "Unknown error from LinearClient";

  class nw {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2;
      this.type = ew((i2 = e2 == null ? undefined : e2.extensions) === null || i2 === undefined ? undefined : i2.type), this.userError = (n2 = e2 == null ? undefined : e2.extensions) === null || n2 === undefined ? undefined : n2.userError, this.path = e2 == null ? undefined : e2.path, this.message = (o2 = (d2 = (t2 = (a2 = e2 == null ? undefined : e2.extensions) === null || a2 === undefined ? undefined : a2.userPresentableMessage) !== null && t2 !== undefined ? t2 : e2 == null ? undefined : e2.message) !== null && d2 !== undefined ? d2 : (l2 = e2 == null ? undefined : e2.extensions) === null || l2 === undefined ? undefined : l2.type) !== null && o2 !== undefined ? o2 : iw;
    }
  }

  class aw extends Error {
    constructor(e2, i2, n2) {
      var a2, t2, d2, l2, o2, r2, m2, s2, u2, k2;
      super((o2 = Array.from(new Set([(k2 = (t2 = (a2 = e2 == null ? undefined : e2.message) === null || a2 === undefined ? undefined : a2.split(": {")) === null || t2 === undefined ? undefined : t2[0], k2 ? `${k2.charAt(0).toUpperCase()}${k2.slice(1)}` : undefined), (d2 = e2 == null ? undefined : e2.response) === null || d2 === undefined ? undefined : d2.error, (l2 = i2 == null ? undefined : i2[0]) === null || l2 === undefined ? undefined : l2.message].filter(YI))).filter(YI).join(" - ")) !== null && o2 !== undefined ? o2 : iw), this.type = n2, this.errors = i2, this.query = (r2 = e2 == null ? undefined : e2.request) === null || r2 === undefined ? undefined : r2.query, this.variables = (m2 = e2 == null ? undefined : e2.request) === null || m2 === undefined ? undefined : m2.variables, this.status = (s2 = e2 == null ? undefined : e2.response) === null || s2 === undefined ? undefined : s2.status, this.data = (u2 = e2 == null ? undefined : e2.response) === null || u2 === undefined ? undefined : u2.data, this.raw = e2;
    }
  }

  class tw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.FeatureNotAccessible);
    }
  }

  class dw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.InvalidInput);
    }
  }

  class lw extends aw {
    constructor(e2, i2) {
      var n2;
      super(e2, i2, exports.LinearErrorType.Ratelimited);
      const a2 = (n2 = e2 == null ? undefined : e2.response) === null || n2 === undefined ? undefined : n2.headers;
      this.retryAfter = this.parseNumber(a2 == null ? undefined : a2.get("retry-after")), this.requestsLimit = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-requests-limit")), this.requestsRemaining = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-requests-remaining")), this.requestsResetAt = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-requests-reset")), this.complexityLimit = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-complexity-limit")), this.complexityRemaining = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-complexity-remaining")), this.complexityResetAt = this.parseNumber(a2 == null ? undefined : a2.get("x-ratelimit-complexity-reset"));
    }
    parseNumber(e2) {
      var i2;
      if (e2 != null && e2 !== "")
        return (i2 = Number(e2)) !== null && i2 !== undefined ? i2 : undefined;
    }
  }

  class ow extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.NetworkError);
    }
  }

  class rw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.AuthenticationError);
    }
  }

  class mw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.Forbidden);
    }
  }

  class sw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.BootstrapError);
    }
  }

  class uw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.Unknown);
    }
  }

  class kw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.InternalError);
    }
  }

  class vw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.Other);
    }
  }

  class cw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.UserError);
    }
  }

  class pw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.GraphqlError);
    }
  }

  class Nw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.LockTimeout);
    }
  }

  class hw extends aw {
    constructor(e2, i2) {
      super(e2, i2, exports.LinearErrorType.UsageLimitExceeded);
    }
  }
  var fw = { [exports.LinearErrorType.FeatureNotAccessible]: tw, [exports.LinearErrorType.InvalidInput]: dw, [exports.LinearErrorType.Ratelimited]: lw, [exports.LinearErrorType.NetworkError]: ow, [exports.LinearErrorType.AuthenticationError]: rw, [exports.LinearErrorType.Forbidden]: mw, [exports.LinearErrorType.BootstrapError]: sw, [exports.LinearErrorType.Unknown]: uw, [exports.LinearErrorType.InternalError]: kw, [exports.LinearErrorType.Other]: vw, [exports.LinearErrorType.UserError]: cw, [exports.LinearErrorType.GraphqlError]: pw, [exports.LinearErrorType.LockTimeout]: Nw, [exports.LinearErrorType.UsageLimitExceeded]: hw };
  function yw(e2) {
    var i2, n2, a2, t2, d2, l2;
    if (e2 instanceof aw)
      return e2;
    const o2 = ((n2 = (i2 = e2 == null ? undefined : e2.response) === null || i2 === undefined ? undefined : i2.errors) !== null && n2 !== undefined ? n2 : []).map((e3) => new nw(e3)), r2 = (a2 = e2 == null ? undefined : e2.response) === null || a2 === undefined ? undefined : a2.status, m2 = (d2 = (t2 = o2[0]) === null || t2 === undefined ? undefined : t2.type) !== null && d2 !== undefined ? d2 : r2 === 403 ? exports.LinearErrorType.Forbidden : r2 === 429 ? exports.LinearErrorType.Ratelimited : `${r2}`.startsWith("4") ? exports.LinearErrorType.AuthenticationError : r2 === 500 ? exports.LinearErrorType.InternalError : `${r2}`.startsWith("5") ? exports.LinearErrorType.NetworkError : exports.LinearErrorType.Unknown;
    return new ((l2 = fw[m2]) !== null && l2 !== undefined ? l2 : aw)(e2, o2);
  }
  var Sw = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : undefined;
  function bw(e2) {
    return bw = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
      return typeof e3;
    } : function(e3) {
      return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
    }, bw(e2);
  }
  function gw(e2) {
    return Fw(e2, []);
  }
  function Fw(e2, i2) {
    switch (bw(e2)) {
      case "string":
        return JSON.stringify(e2);
      case "function":
        return e2.name ? "[function ".concat(e2.name, "]") : "[function]";
      case "object":
        return e2 === null ? "null" : function(e3, i3) {
          if (i3.indexOf(e3) !== -1)
            return "[Circular]";
          var n2 = [].concat(i3, [e3]), a2 = function(e4) {
            var i4 = e4[String(Sw)];
            if (typeof i4 == "function")
              return i4;
            if (typeof e4.inspect == "function")
              return e4.inspect;
          }(e3);
          if (a2 !== undefined) {
            var t2 = a2.call(e3);
            if (t2 !== e3)
              return typeof t2 == "string" ? t2 : Fw(t2, n2);
          } else if (Array.isArray(e3))
            return function(e4, i4) {
              if (e4.length === 0)
                return "[]";
              if (i4.length > 2)
                return "[Array]";
              for (var n3 = Math.min(10, e4.length), a3 = e4.length - n3, t3 = [], d2 = 0;d2 < n3; ++d2)
                t3.push(Fw(e4[d2], i4));
              a3 === 1 ? t3.push("... 1 more item") : a3 > 1 && t3.push("... ".concat(a3, " more items"));
              return "[" + t3.join(", ") + "]";
            }(e3, n2);
          return function(e4, i4) {
            var n3 = Object.keys(e4);
            if (n3.length === 0)
              return "{}";
            if (i4.length > 2)
              return "[" + function(e5) {
                var i5 = Object.prototype.toString.call(e5).replace(/^\[object /, "").replace(/]$/, "");
                if (i5 === "Object" && typeof e5.constructor == "function") {
                  var n4 = e5.constructor.name;
                  if (typeof n4 == "string" && n4 !== "")
                    return n4;
                }
                return i5;
              }(e4) + "]";
            var a3 = n3.map(function(n4) {
              return n4 + ": " + Fw(e4[n4], i4);
            });
            return "{ " + a3.join(", ") + " }";
          }(e3, n2);
        }(e2, i2);
      default:
        return String(e2);
    }
  }
  function Dw(e2) {
    var i2 = e2.prototype.toJSON;
    typeof i2 == "function" || function(e3, i3) {
      if (!Boolean(e3))
        throw new Error(i3 != null ? i3 : "Unexpected invariant triggered.");
    }(0), e2.prototype.inspect = i2, Sw && (e2.prototype[Sw] = i2);
  }
  function _w(e2) {
    return e2 != null && typeof e2.kind == "string";
  }
  Dw(function() {
    function e2(e3, i2, n2) {
      this.start = e3.start, this.end = i2.end, this.startToken = e3, this.endToken = i2, this.source = n2;
    }
    return e2.prototype.toJSON = function() {
      return { start: this.start, end: this.end };
    }, e2;
  }()), Dw(function() {
    function e2(e3, i2, n2, a2, t2, d2, l2) {
      this.kind = e3, this.start = i2, this.end = n2, this.line = a2, this.column = t2, this.value = l2, this.prev = d2, this.next = null;
    }
    return e2.prototype.toJSON = function() {
      return { kind: this.kind, value: this.value, line: this.line, column: this.column };
    }, e2;
  }());
  var Vw = { Name: [], Document: ["definitions"], OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition: ["variable", "type", "defaultValue", "directives"], Variable: ["name"], SelectionSet: ["selections"], Field: ["alias", "name", "arguments", "directives", "selectionSet"], Argument: ["name", "value"], FragmentSpread: ["name", "directives"], InlineFragment: ["typeCondition", "directives", "selectionSet"], FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"], IntValue: [], FloatValue: [], StringValue: [], BooleanValue: [], NullValue: [], EnumValue: [], ListValue: ["values"], ObjectValue: ["fields"], ObjectField: ["name", "value"], Directive: ["name", "arguments"], NamedType: ["name"], ListType: ["type"], NonNullType: ["type"], SchemaDefinition: ["description", "directives", "operationTypes"], OperationTypeDefinition: ["type"], ScalarTypeDefinition: ["description", "name", "directives"], ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], FieldDefinition: ["description", "name", "arguments", "type", "directives"], InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], UnionTypeDefinition: ["description", "name", "directives", "types"], EnumTypeDefinition: ["description", "name", "directives", "values"], EnumValueDefinition: ["description", "name", "directives"], InputObjectTypeDefinition: ["description", "name", "directives", "fields"], DirectiveDefinition: ["description", "name", "arguments", "locations"], SchemaExtension: ["directives", "operationTypes"], ScalarTypeExtension: ["name", "directives"], ObjectTypeExtension: ["name", "interfaces", "directives", "fields"], InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"], UnionTypeExtension: ["name", "directives", "types"], EnumTypeExtension: ["name", "directives", "values"], InputObjectTypeExtension: ["name", "directives", "fields"] };
  var Aw = Object.freeze({});
  function Tw(e2, i2, n2) {
    var a2 = e2[i2];
    if (a2) {
      if (!n2 && typeof a2 == "function")
        return a2;
      var t2 = n2 ? a2.leave : a2.enter;
      if (typeof t2 == "function")
        return t2;
    } else {
      var d2 = n2 ? e2.leave : e2.enter;
      if (d2) {
        if (typeof d2 == "function")
          return d2;
        var l2 = d2[i2];
        if (typeof l2 == "function")
          return l2;
      }
    }
  }
  function Iw(e2) {
    return function(e3, i2) {
      var n2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Vw, a2 = undefined, t2 = Array.isArray(e3), d2 = [e3], l2 = -1, o2 = [], r2 = undefined, m2 = undefined, s2 = undefined, u2 = [], k2 = [], v2 = e3;
      do {
        var c2 = ++l2 === d2.length, p2 = c2 && o2.length !== 0;
        if (c2) {
          if (m2 = k2.length === 0 ? undefined : u2[u2.length - 1], r2 = s2, s2 = k2.pop(), p2) {
            if (t2)
              r2 = r2.slice();
            else {
              for (var N2 = {}, h2 = 0, f2 = Object.keys(r2);h2 < f2.length; h2++) {
                var y2 = f2[h2];
                N2[y2] = r2[y2];
              }
              r2 = N2;
            }
            for (var S2 = 0, b2 = 0;b2 < o2.length; b2++) {
              var g2 = o2[b2][0], F2 = o2[b2][1];
              t2 && (g2 -= S2), t2 && F2 === null ? (r2.splice(g2, 1), S2++) : r2[g2] = F2;
            }
          }
          l2 = a2.index, d2 = a2.keys, o2 = a2.edits, t2 = a2.inArray, a2 = a2.prev;
        } else {
          if (m2 = s2 ? t2 ? l2 : d2[l2] : undefined, (r2 = s2 ? s2[m2] : v2) == null)
            continue;
          s2 && u2.push(m2);
        }
        var D2, _2 = undefined;
        if (!Array.isArray(r2)) {
          if (!_w(r2))
            throw new Error("Invalid AST Node: ".concat(gw(r2), "."));
          var V2 = Tw(i2, r2.kind, c2);
          if (V2) {
            if ((_2 = V2.call(i2, r2, m2, s2, u2, k2)) === Aw)
              break;
            if (_2 === false) {
              if (!c2) {
                u2.pop();
                continue;
              }
            } else if (_2 !== undefined && (o2.push([m2, _2]), !c2)) {
              if (!_w(_2)) {
                u2.pop();
                continue;
              }
              r2 = _2;
            }
          }
        }
        _2 === undefined && p2 && o2.push([m2, r2]), c2 ? u2.pop() : (a2 = { inArray: t2, index: l2, keys: d2, edits: o2, prev: a2 }, d2 = (t2 = Array.isArray(r2)) ? r2 : (D2 = n2[r2.kind]) !== null && D2 !== undefined ? D2 : [], l2 = -1, o2 = [], s2 && k2.push(s2), s2 = r2);
      } while (a2 !== undefined);
      return o2.length !== 0 && (v2 = o2[o2.length - 1][1]), v2;
    }(e2, { leave: ww });
  }
  var ww = { Name: function(e2) {
    return e2.value;
  }, Variable: function(e2) {
    return "$" + e2.name;
  }, Document: function(e2) {
    return Pw(e2.definitions, `

`) + `
`;
  }, OperationDefinition: function(e2) {
    var { operation: i2, name: n2 } = e2, a2 = xw("(", Pw(e2.variableDefinitions, ", "), ")"), t2 = Pw(e2.directives, " "), d2 = e2.selectionSet;
    return n2 || t2 || a2 || i2 !== "query" ? Pw([i2, Pw([n2, a2]), t2, d2], " ") : d2;
  }, VariableDefinition: function(e2) {
    var { variable: i2, type: n2, defaultValue: a2, directives: t2 } = e2;
    return i2 + ": " + n2 + xw(" = ", a2) + xw(" ", Pw(t2, " "));
  }, SelectionSet: function(e2) {
    return qw(e2.selections);
  }, Field: function(e2) {
    var { alias: i2, name: n2, arguments: a2, directives: t2, selectionSet: d2 } = e2, l2 = xw("", i2, ": ") + n2, o2 = l2 + xw("(", Pw(a2, ", "), ")");
    return o2.length > 80 && (o2 = l2 + xw(`(
`, jw(Pw(a2, `
`)), `
)`)), Pw([o2, Pw(t2, " "), d2], " ");
  }, Argument: function(e2) {
    return e2.name + ": " + e2.value;
  }, FragmentSpread: function(e2) {
    return "..." + e2.name + xw(" ", Pw(e2.directives, " "));
  }, InlineFragment: function(e2) {
    var { typeCondition: i2, directives: n2, selectionSet: a2 } = e2;
    return Pw(["...", xw("on ", i2), Pw(n2, " "), a2], " ");
  }, FragmentDefinition: function(e2) {
    var { name: i2, typeCondition: n2, variableDefinitions: a2, directives: t2, selectionSet: d2 } = e2;
    return "fragment ".concat(i2).concat(xw("(", Pw(a2, ", "), ")"), " ") + "on ".concat(n2, " ").concat(xw("", Pw(t2, " "), " ")) + d2;
  }, IntValue: function(e2) {
    return e2.value;
  }, FloatValue: function(e2) {
    return e2.value;
  }, StringValue: function(e2, i2) {
    var n2 = e2.value;
    return e2.block ? function(e3) {
      var i3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "", n3 = arguments.length > 2 && arguments[2] !== undefined && arguments[2], a2 = e3.indexOf(`
`) === -1, t2 = e3[0] === " " || e3[0] === "\t", d2 = e3[e3.length - 1] === '"', l2 = e3[e3.length - 1] === "\\", o2 = !a2 || d2 || l2 || n3, r2 = "";
      return !o2 || a2 && t2 || (r2 += `
` + i3), r2 += i3 ? e3.replace(/\n/g, `
` + i3) : e3, o2 && (r2 += `
`), '"""' + r2.replace(/"""/g, '\\"""') + '"""';
    }(n2, i2 === "description" ? "" : "  ") : JSON.stringify(n2);
  }, BooleanValue: function(e2) {
    return e2.value ? "true" : "false";
  }, NullValue: function() {
    return "null";
  }, EnumValue: function(e2) {
    return e2.value;
  }, ListValue: function(e2) {
    return "[" + Pw(e2.values, ", ") + "]";
  }, ObjectValue: function(e2) {
    return "{" + Pw(e2.fields, ", ") + "}";
  }, ObjectField: function(e2) {
    return e2.name + ": " + e2.value;
  }, Directive: function(e2) {
    return "@" + e2.name + xw("(", Pw(e2.arguments, ", "), ")");
  }, NamedType: function(e2) {
    return e2.name;
  }, ListType: function(e2) {
    return "[" + e2.type + "]";
  }, NonNullType: function(e2) {
    return e2.type + "!";
  }, SchemaDefinition: Cw(function(e2) {
    var { directives: i2, operationTypes: n2 } = e2;
    return Pw(["schema", Pw(i2, " "), qw(n2)], " ");
  }), OperationTypeDefinition: function(e2) {
    return e2.operation + ": " + e2.type;
  }, ScalarTypeDefinition: Cw(function(e2) {
    return Pw(["scalar", e2.name, Pw(e2.directives, " ")], " ");
  }), ObjectTypeDefinition: Cw(function(e2) {
    var { name: i2, interfaces: n2, directives: a2, fields: t2 } = e2;
    return Pw(["type", i2, xw("implements ", Pw(n2, " & ")), Pw(a2, " "), qw(t2)], " ");
  }), FieldDefinition: Cw(function(e2) {
    var { name: i2, arguments: n2, type: a2, directives: t2 } = e2;
    return i2 + (Ow(n2) ? xw(`(
`, jw(Pw(n2, `
`)), `
)`) : xw("(", Pw(n2, ", "), ")")) + ": " + a2 + xw(" ", Pw(t2, " "));
  }), InputValueDefinition: Cw(function(e2) {
    var { name: i2, type: n2, defaultValue: a2, directives: t2 } = e2;
    return Pw([i2 + ": " + n2, xw("= ", a2), Pw(t2, " ")], " ");
  }), InterfaceTypeDefinition: Cw(function(e2) {
    var { name: i2, interfaces: n2, directives: a2, fields: t2 } = e2;
    return Pw(["interface", i2, xw("implements ", Pw(n2, " & ")), Pw(a2, " "), qw(t2)], " ");
  }), UnionTypeDefinition: Cw(function(e2) {
    var { name: i2, directives: n2, types: a2 } = e2;
    return Pw(["union", i2, Pw(n2, " "), a2 && a2.length !== 0 ? "= " + Pw(a2, " | ") : ""], " ");
  }), EnumTypeDefinition: Cw(function(e2) {
    var { name: i2, directives: n2, values: a2 } = e2;
    return Pw(["enum", i2, Pw(n2, " "), qw(a2)], " ");
  }), EnumValueDefinition: Cw(function(e2) {
    return Pw([e2.name, Pw(e2.directives, " ")], " ");
  }), InputObjectTypeDefinition: Cw(function(e2) {
    var { name: i2, directives: n2, fields: a2 } = e2;
    return Pw(["input", i2, Pw(n2, " "), qw(a2)], " ");
  }), DirectiveDefinition: Cw(function(e2) {
    var { name: i2, arguments: n2, repeatable: a2, locations: t2 } = e2;
    return "directive @" + i2 + (Ow(n2) ? xw(`(
`, jw(Pw(n2, `
`)), `
)`) : xw("(", Pw(n2, ", "), ")")) + (a2 ? " repeatable" : "") + " on " + Pw(t2, " | ");
  }), SchemaExtension: function(e2) {
    var { directives: i2, operationTypes: n2 } = e2;
    return Pw(["extend schema", Pw(i2, " "), qw(n2)], " ");
  }, ScalarTypeExtension: function(e2) {
    return Pw(["extend scalar", e2.name, Pw(e2.directives, " ")], " ");
  }, ObjectTypeExtension: function(e2) {
    var { name: i2, interfaces: n2, directives: a2, fields: t2 } = e2;
    return Pw(["extend type", i2, xw("implements ", Pw(n2, " & ")), Pw(a2, " "), qw(t2)], " ");
  }, InterfaceTypeExtension: function(e2) {
    var { name: i2, interfaces: n2, directives: a2, fields: t2 } = e2;
    return Pw(["extend interface", i2, xw("implements ", Pw(n2, " & ")), Pw(a2, " "), qw(t2)], " ");
  }, UnionTypeExtension: function(e2) {
    var { name: i2, directives: n2, types: a2 } = e2;
    return Pw(["extend union", i2, Pw(n2, " "), a2 && a2.length !== 0 ? "= " + Pw(a2, " | ") : ""], " ");
  }, EnumTypeExtension: function(e2) {
    var { name: i2, directives: n2, values: a2 } = e2;
    return Pw(["extend enum", i2, Pw(n2, " "), qw(a2)], " ");
  }, InputObjectTypeExtension: function(e2) {
    var { name: i2, directives: n2, fields: a2 } = e2;
    return Pw(["extend input", i2, Pw(n2, " "), qw(a2)], " ");
  } };
  function Cw(e2) {
    return function(i2) {
      return Pw([i2.description, e2(i2)], `
`);
    };
  }
  function Pw(e2) {
    var i2, n2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return (i2 = e2 == null ? undefined : e2.filter(function(e3) {
      return e3;
    }).join(n2)) !== null && i2 !== undefined ? i2 : "";
  }
  function qw(e2) {
    return xw(`{
`, jw(Pw(e2, `
`)), `
}`);
  }
  function xw(e2, i2) {
    return i2 != null && i2 !== "" ? e2 + i2 + (arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "") : "";
  }
  function jw(e2) {
    return xw("  ", e2.replace(/\n/g, `
  `));
  }
  function Uw(e2) {
    return e2.indexOf(`
`) !== -1;
  }
  function Ow(e2) {
    return e2 != null && e2.some(Uw);
  }
  var Bw = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {};
  function Rw(e2) {
    if (e2.__esModule)
      return e2;
    var i2 = Object.defineProperty({}, "__esModule", { value: true });
    return Object.keys(e2).forEach(function(n2) {
      var a2 = Object.getOwnPropertyDescriptor(e2, n2);
      Object.defineProperty(i2, n2, a2.get ? a2 : { enumerable: true, get: function() {
        return e2[n2];
      } });
    }), i2;
  }
  function Ew(e2) {
    var i2 = { exports: {} };
    return e2(i2, i2.exports), i2.exports;
  }
  var Mw = Object.freeze({ __proto__: null, default: function(e2, i2) {
    return i2 = i2 || {}, new Promise(function(n2, a2) {
      var t2 = new XMLHttpRequest, d2 = [], l2 = [], o2 = {}, r2 = function() {
        return { ok: (t2.status / 100 | 0) == 2, statusText: t2.statusText, status: t2.status, url: t2.responseURL, text: function() {
          return Promise.resolve(t2.responseText);
        }, json: function() {
          return Promise.resolve(t2.responseText).then(JSON.parse);
        }, blob: function() {
          return Promise.resolve(new Blob([t2.response]));
        }, clone: r2, headers: { keys: function() {
          return d2;
        }, entries: function() {
          return l2;
        }, get: function(e3) {
          return o2[e3.toLowerCase()];
        }, has: function(e3) {
          return e3.toLowerCase() in o2;
        } } };
      };
      for (var m2 in t2.open(i2.method || "get", e2, true), t2.onload = function() {
        t2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e3, i3, n3) {
          d2.push(i3 = i3.toLowerCase()), l2.push([i3, n3]), o2[i3] = o2[i3] ? o2[i3] + "," + n3 : n3;
        }), n2(r2());
      }, t2.onerror = a2, t2.withCredentials = i2.credentials == "include", i2.headers)
        t2.setRequestHeader(m2, i2.headers[m2]);
      t2.send(i2.body || null);
    });
  } });
  var Lw = {};
  var zw = Lw;
  function Ww(e2) {
    return e2 < 0 ? -1 : 1;
  }
  function Hw(e2, i2) {
    i2.unsigned || --e2;
    const n2 = i2.unsigned ? 0 : -Math.pow(2, e2), a2 = Math.pow(2, e2) - 1, t2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength) : Math.pow(2, e2), d2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength - 1) : Math.pow(2, e2 - 1);
    return function(e3, l2) {
      l2 || (l2 = {});
      let o2 = +e3;
      if (l2.enforceRange) {
        if (!Number.isFinite(o2))
          throw new TypeError("Argument is not a finite number");
        if (o2 = Ww(o2) * Math.floor(Math.abs(o2)), o2 < n2 || o2 > a2)
          throw new TypeError("Argument is not in byte range");
        return o2;
      }
      if (!isNaN(o2) && l2.clamp)
        return o2 = function(e4) {
          return e4 % 1 != 0.5 || 1 & e4 ? Math.round(e4) : Math.floor(e4);
        }(o2), o2 < n2 && (o2 = n2), o2 > a2 && (o2 = a2), o2;
      if (!Number.isFinite(o2) || o2 === 0)
        return 0;
      if (o2 = Ww(o2) * Math.floor(Math.abs(o2)), o2 %= t2, !i2.unsigned && o2 >= d2)
        return o2 - t2;
      if (i2.unsigned) {
        if (o2 < 0)
          o2 += t2;
        else if (o2 === -0)
          return 0;
      }
      return o2;
    };
  }
  Lw.void = function() {}, Lw.boolean = function(e2) {
    return !!e2;
  }, Lw.byte = Hw(8, { unsigned: false }), Lw.octet = Hw(8, { unsigned: true }), Lw.short = Hw(16, { unsigned: false }), Lw["unsigned short"] = Hw(16, { unsigned: true }), Lw.long = Hw(32, { unsigned: false }), Lw["unsigned long"] = Hw(32, { unsigned: true }), Lw["long long"] = Hw(32, { unsigned: false, moduloBitLength: 64 }), Lw["unsigned long long"] = Hw(32, { unsigned: true, moduloBitLength: 64 }), Lw.double = function(e2) {
    const i2 = +e2;
    if (!Number.isFinite(i2))
      throw new TypeError("Argument is not a finite floating-point value");
    return i2;
  }, Lw["unrestricted double"] = function(e2) {
    const i2 = +e2;
    if (isNaN(i2))
      throw new TypeError("Argument is NaN");
    return i2;
  }, Lw.float = Lw.double, Lw["unrestricted float"] = Lw["unrestricted double"], Lw.DOMString = function(e2, i2) {
    return i2 || (i2 = {}), i2.treatNullAsEmptyString && e2 === null ? "" : String(e2);
  }, Lw.ByteString = function(e2, i2) {
    const n2 = String(e2);
    let a2;
    for (let e3 = 0;(a2 = n2.codePointAt(e3)) !== undefined; ++e3)
      if (a2 > 255)
        throw new TypeError("Argument is not a valid bytestring");
    return n2;
  }, Lw.USVString = function(e2) {
    const i2 = String(e2), n2 = i2.length, a2 = [];
    for (let e3 = 0;e3 < n2; ++e3) {
      const t2 = i2.charCodeAt(e3);
      if (t2 < 55296 || t2 > 57343)
        a2.push(String.fromCodePoint(t2));
      else if (56320 <= t2 && t2 <= 57343)
        a2.push(String.fromCodePoint(65533));
      else if (e3 === n2 - 1)
        a2.push(String.fromCodePoint(65533));
      else {
        const n3 = i2.charCodeAt(e3 + 1);
        if (56320 <= n3 && n3 <= 57343) {
          const i3 = 1023 & t2, d2 = 1023 & n3;
          a2.push(String.fromCodePoint(65536 + 1024 * i3 + d2)), ++e3;
        } else
          a2.push(String.fromCodePoint(65533));
      }
    }
    return a2.join("");
  }, Lw.Date = function(e2, i2) {
    if (!(e2 instanceof Date))
      throw new TypeError("Argument is not a Date object");
    if (!isNaN(e2))
      return e2;
  }, Lw.RegExp = function(e2, i2) {
    return e2 instanceof RegExp || (e2 = new RegExp(e2)), e2;
  };
  var Qw = Ew(function(e2) {
    e2.exports.mixin = function(e3, i2) {
      const n2 = Object.getOwnPropertyNames(i2);
      for (let a2 = 0;a2 < n2.length; ++a2)
        Object.defineProperty(e3, n2[a2], Object.getOwnPropertyDescriptor(i2, n2[a2]));
    }, e2.exports.wrapperSymbol = Symbol("wrapper"), e2.exports.implSymbol = Symbol("impl"), e2.exports.wrapperForImpl = function(i2) {
      return i2[e2.exports.wrapperSymbol];
    }, e2.exports.implForWrapper = function(i2) {
      return i2[e2.exports.implSymbol];
    };
  });
  var Gw = 2147483647;
  var Jw = 36;
  var Kw = /^xn--/;
  var $w = /[^\0-\x7F]/;
  var Zw = /[\x2E\u3002\uFF0E\uFF61]/g;
  var Yw = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" };
  var Xw = Math.floor;
  var eC = String.fromCharCode;
  function iC(e2) {
    throw new RangeError(Yw[e2]);
  }
  function nC(e2, i2) {
    const n2 = e2.split("@");
    let a2 = "";
    n2.length > 1 && (a2 = n2[0] + "@", e2 = n2[1]);
    const t2 = function(e3, i3) {
      const n3 = [];
      let a3 = e3.length;
      for (;a3--; )
        n3[a3] = i3(e3[a3]);
      return n3;
    }((e2 = e2.replace(Zw, ".")).split("."), i2).join(".");
    return a2 + t2;
  }
  function aC(e2) {
    const i2 = [];
    let n2 = 0;
    const a2 = e2.length;
    for (;n2 < a2; ) {
      const t2 = e2.charCodeAt(n2++);
      if (t2 >= 55296 && t2 <= 56319 && n2 < a2) {
        const a3 = e2.charCodeAt(n2++);
        (64512 & a3) == 56320 ? i2.push(((1023 & t2) << 10) + (1023 & a3) + 65536) : (i2.push(t2), n2--);
      } else
        i2.push(t2);
    }
    return i2;
  }
  var tC = function(e2) {
    return e2 >= 48 && e2 < 58 ? e2 - 48 + 26 : e2 >= 65 && e2 < 91 ? e2 - 65 : e2 >= 97 && e2 < 123 ? e2 - 97 : Jw;
  };
  var dC = function(e2, i2) {
    return e2 + 22 + 75 * (e2 < 26) - ((i2 != 0) << 5);
  };
  var lC = function(e2, i2, n2) {
    let a2 = 0;
    for (e2 = n2 ? Xw(e2 / 700) : e2 >> 1, e2 += Xw(e2 / i2);e2 > 455; a2 += Jw)
      e2 = Xw(e2 / 35);
    return Xw(a2 + 36 * e2 / (e2 + 38));
  };
  var oC = function(e2) {
    const i2 = [], n2 = e2.length;
    let a2 = 0, t2 = 128, d2 = 72, l2 = e2.lastIndexOf("-");
    l2 < 0 && (l2 = 0);
    for (let n3 = 0;n3 < l2; ++n3)
      e2.charCodeAt(n3) >= 128 && iC("not-basic"), i2.push(e2.charCodeAt(n3));
    for (let o2 = l2 > 0 ? l2 + 1 : 0;o2 < n2; ) {
      const l3 = a2;
      for (let i3 = 1, t3 = Jw;; t3 += Jw) {
        o2 >= n2 && iC("invalid-input");
        const l4 = tC(e2.charCodeAt(o2++));
        l4 >= Jw && iC("invalid-input"), l4 > Xw((Gw - a2) / i3) && iC("overflow"), a2 += l4 * i3;
        const r3 = t3 <= d2 ? 1 : t3 >= d2 + 26 ? 26 : t3 - d2;
        if (l4 < r3)
          break;
        const m2 = Jw - r3;
        i3 > Xw(Gw / m2) && iC("overflow"), i3 *= m2;
      }
      const r2 = i2.length + 1;
      d2 = lC(a2 - l3, r2, l3 == 0), Xw(a2 / r2) > Gw - t2 && iC("overflow"), t2 += Xw(a2 / r2), a2 %= r2, i2.splice(a2++, 0, t2);
    }
    return String.fromCodePoint(...i2);
  };
  var rC = function(e2) {
    const i2 = [], n2 = (e2 = aC(e2)).length;
    let a2 = 128, t2 = 0, d2 = 72;
    for (const n3 of e2)
      n3 < 128 && i2.push(eC(n3));
    const l2 = i2.length;
    let o2 = l2;
    for (l2 && i2.push("-");o2 < n2; ) {
      let n3 = Gw;
      for (const i3 of e2)
        i3 >= a2 && i3 < n3 && (n3 = i3);
      const r2 = o2 + 1;
      n3 - a2 > Xw((Gw - t2) / r2) && iC("overflow"), t2 += (n3 - a2) * r2, a2 = n3;
      for (const n4 of e2)
        if (n4 < a2 && ++t2 > Gw && iC("overflow"), n4 === a2) {
          let e3 = t2;
          for (let n5 = Jw;; n5 += Jw) {
            const a3 = n5 <= d2 ? 1 : n5 >= d2 + 26 ? 26 : n5 - d2;
            if (e3 < a3)
              break;
            const t3 = e3 - a3, l3 = Jw - a3;
            i2.push(eC(dC(a3 + t3 % l3, 0))), e3 = Xw(t3 / l3);
          }
          i2.push(eC(dC(e3, 0))), d2 = lC(t2, r2, o2 === l2), t2 = 0, ++o2;
        }
      ++t2, ++a2;
    }
    return i2.join("");
  };
  var mC = { version: "2.3.1", ucs2: { decode: aC, encode: (e2) => String.fromCodePoint(...e2) }, decode: oC, encode: rC, toASCII: function(e2) {
    return nC(e2, function(e3) {
      return $w.test(e3) ? "xn--" + rC(e3) : e3;
    });
  }, toUnicode: function(e2) {
    return nC(e2, function(e3) {
      return Kw.test(e3) ? oC(e3.slice(4).toLowerCase()) : e3;
    });
  } };
  var sC = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1000, 1000], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6000], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8000, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8000]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9000], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [30000]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13000, 13000], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43000, 43000], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64000, 64000], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66000, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[120000, 120000], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128000, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23000]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149000]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32000]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195000, 195000], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [40000]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918000, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  var uC = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
  function kC(e2) {
    return e2.split("\x00").map(function(e3) {
      return e3.normalize("NFC");
    }).join("\x00");
  }
  function vC(e2) {
    for (var i2 = 0, n2 = sC.length - 1;i2 <= n2; ) {
      var a2 = Math.floor((i2 + n2) / 2), t2 = sC[a2];
      if (t2[0][0] <= e2 && t2[0][1] >= e2)
        return t2;
      t2[0][0] > e2 ? n2 = a2 - 1 : i2 = a2 + 1;
    }
    return null;
  }
  var cC = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  function pC(e2) {
    return e2.replace(cC, "_").length;
  }
  var NC = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
  function hC(e2, i2) {
    e2.substr(0, 4) === "xn--" && (e2 = mC.toUnicode(e2));
    var n2 = false;
    (kC(e2) !== e2 || e2[3] === "-" && e2[4] === "-" || e2[0] === "-" || e2[e2.length - 1] === "-" || e2.indexOf(".") !== -1 || e2.search(NC) === 0) && (n2 = true);
    for (var a2 = pC(e2), t2 = 0;t2 < a2; ++t2) {
      var d2 = vC(e2.codePointAt(t2));
      if (fC === uC.TRANSITIONAL && d2[1] !== "valid" || fC === uC.NONTRANSITIONAL && d2[1] !== "valid" && d2[1] !== "deviation") {
        n2 = true;
        break;
      }
    }
    return { label: e2, error: n2 };
  }
  function fC(e2, i2, n2) {
    var a2 = function(e3, i3, n3) {
      for (var a3 = false, t3 = "", d3 = pC(e3), l3 = 0;l3 < d3; ++l3) {
        var o2 = e3.codePointAt(l3), r2 = vC(o2);
        switch (r2[1]) {
          case "disallowed":
            a3 = true, t3 += String.fromCodePoint(o2);
            break;
          case "ignored":
            break;
          case "mapped":
            t3 += String.fromCodePoint.apply(String, r2[2]);
            break;
          case "deviation":
            t3 += n3 === uC.TRANSITIONAL ? String.fromCodePoint.apply(String, r2[2]) : String.fromCodePoint(o2);
            break;
          case "valid":
            t3 += String.fromCodePoint(o2);
            break;
          case "disallowed_STD3_mapped":
            i3 ? (a3 = true, t3 += String.fromCodePoint(o2)) : t3 += String.fromCodePoint.apply(String, r2[2]);
            break;
          case "disallowed_STD3_valid":
            i3 && (a3 = true), t3 += String.fromCodePoint(o2);
        }
      }
      return { string: t3, error: a3 };
    }(e2, i2, n2);
    a2.string = kC(a2.string);
    for (var t2 = a2.string.split("."), d2 = 0;d2 < t2.length; ++d2)
      try {
        var l2 = hC(t2[d2]);
        t2[d2] = l2.label, a2.error = a2.error || l2.error;
      } catch (e3) {
        a2.error = true;
      }
    return { string: t2.join("."), error: a2.error };
  }
  var yC = { toASCII: function(e2, i2, n2, a2) {
    var t2 = fC(e2, i2, n2), d2 = t2.string.split(".");
    if (d2 = d2.map(function(e3) {
      try {
        return mC.toASCII(e3);
      } catch (i3) {
        return t2.error = true, e3;
      }
    }), a2) {
      var l2 = d2.slice(0, d2.length - 1).join(".").length;
      (l2.length > 253 || l2.length === 0) && (t2.error = true);
      for (var o2 = 0;o2 < d2.length; ++o2)
        if (d2.length > 63 || d2.length === 0) {
          t2.error = true;
          break;
        }
    }
    return t2.error ? null : d2.join(".");
  }, toUnicode: function(e2, i2) {
    var n2 = fC(e2, i2, uC.NONTRANSITIONAL);
    return { domain: n2.string, error: n2.error };
  }, PROCESSING_OPTIONS: uC };
  var SC = Ew(function(e2) {
    const i2 = { ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, n2 = Symbol("failure");
    function a2(e3) {
      return mC.ucs2.decode(e3).length;
    }
    function t2(e3, i3) {
      const n3 = e3[i3];
      return isNaN(n3) ? undefined : String.fromCodePoint(n3);
    }
    function d2(e3) {
      return e3 >= 48 && e3 <= 57;
    }
    function l2(e3) {
      return e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122;
    }
    function o2(e3) {
      return d2(e3) || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
    }
    function r2(e3) {
      return e3 === "." || e3.toLowerCase() === "%2e";
    }
    function m2(e3) {
      return e3.length === 2 && l2(e3.codePointAt(0)) && (e3[1] === ":" || e3[1] === "|");
    }
    function s2(e3) {
      return i2[e3] !== undefined;
    }
    function u2(e3) {
      return s2(e3.scheme);
    }
    function k2(e3) {
      let i3 = e3.toString(16).toUpperCase();
      return i3.length === 1 && (i3 = "0" + i3), "%" + i3;
    }
    function v2(e3) {
      return e3 <= 31 || e3 > 126;
    }
    const c2 = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function p2(e3) {
      return v2(e3) || c2.has(e3);
    }
    const N2 = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function h2(e3) {
      return p2(e3) || N2.has(e3);
    }
    function f2(e3, i3) {
      const n3 = String.fromCodePoint(e3);
      return i3(e3) ? function(e4) {
        const i4 = new Buffer(e4);
        let n4 = "";
        for (let e5 = 0;e5 < i4.length; ++e5)
          n4 += k2(i4[e5]);
        return n4;
      }(n3) : n3;
    }
    function y2(e3) {
      let i3 = 10;
      if (e3.length >= 2 && e3.charAt(0) === "0" && e3.charAt(1).toLowerCase() === "x" ? (e3 = e3.substring(2), i3 = 16) : e3.length >= 2 && e3.charAt(0) === "0" && (e3 = e3.substring(1), i3 = 8), e3 === "")
        return 0;
      return (i3 === 10 ? /[^0-9]/ : i3 === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(e3) ? n2 : parseInt(e3, i3);
    }
    function S2(e3, i3) {
      if (e3[0] === "[")
        return e3[e3.length - 1] !== "]" ? n2 : function(e4) {
          const i4 = [0, 0, 0, 0, 0, 0, 0, 0];
          let a4 = 0, l4 = null, r4 = 0;
          if ((e4 = mC.ucs2.decode(e4))[r4] === 58) {
            if (e4[r4 + 1] !== 58)
              return n2;
            r4 += 2, ++a4, l4 = a4;
          }
          for (;r4 < e4.length; ) {
            if (a4 === 8)
              return n2;
            if (e4[r4] === 58) {
              if (l4 !== null)
                return n2;
              ++r4, ++a4, l4 = a4;
              continue;
            }
            let m3 = 0, s3 = 0;
            for (;s3 < 4 && o2(e4[r4]); )
              m3 = 16 * m3 + parseInt(t2(e4, r4), 16), ++r4, ++s3;
            if (e4[r4] === 46) {
              if (s3 === 0)
                return n2;
              if (r4 -= s3, a4 > 6)
                return n2;
              let l5 = 0;
              for (;e4[r4] !== undefined; ) {
                let o3 = null;
                if (l5 > 0) {
                  if (!(e4[r4] === 46 && l5 < 4))
                    return n2;
                  ++r4;
                }
                if (!d2(e4[r4]))
                  return n2;
                for (;d2(e4[r4]); ) {
                  const i5 = parseInt(t2(e4, r4));
                  if (o3 === null)
                    o3 = i5;
                  else {
                    if (o3 === 0)
                      return n2;
                    o3 = 10 * o3 + i5;
                  }
                  if (o3 > 255)
                    return n2;
                  ++r4;
                }
                i4[a4] = 256 * i4[a4] + o3, ++l5, l5 !== 2 && l5 !== 4 || ++a4;
              }
              if (l5 !== 4)
                return n2;
              break;
            }
            if (e4[r4] === 58) {
              if (++r4, e4[r4] === undefined)
                return n2;
            } else if (e4[r4] !== undefined)
              return n2;
            i4[a4] = m3, ++a4;
          }
          if (l4 !== null) {
            let e5 = a4 - l4;
            for (a4 = 7;a4 !== 0 && e5 > 0; ) {
              const n3 = i4[l4 + e5 - 1];
              i4[l4 + e5 - 1] = i4[a4], i4[a4] = n3, --a4, --e5;
            }
          } else if (l4 === null && a4 !== 8)
            return n2;
          return i4;
        }(e3.substring(1, e3.length - 1));
      if (!i3)
        return function(e4) {
          if (i4 = e4, i4.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1)
            return n2;
          var i4;
          let a4 = "";
          const t3 = mC.ucs2.decode(e4);
          for (let e5 = 0;e5 < t3.length; ++e5)
            a4 += f2(t3[e5], v2);
          return a4;
        }(e3);
      const a3 = function(e4) {
        const i4 = new Buffer(e4), n3 = [];
        for (let e5 = 0;e5 < i4.length; ++e5)
          i4[e5] !== 37 ? n3.push(i4[e5]) : i4[e5] === 37 && o2(i4[e5 + 1]) && o2(i4[e5 + 2]) ? (n3.push(parseInt(i4.slice(e5 + 1, e5 + 3).toString(), 16)), e5 += 2) : n3.push(i4[e5]);
        return new Buffer(n3).toString();
      }(e3), l3 = yC.toASCII(a3, false, yC.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (l3 === null)
        return n2;
      if (l3.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1)
        return n2;
      const r3 = function(e4) {
        const i4 = e4.split(".");
        if (i4[i4.length - 1] === "" && i4.length > 1 && i4.pop(), i4.length > 4)
          return e4;
        const a4 = [];
        for (const t4 of i4) {
          if (t4 === "")
            return e4;
          const i5 = y2(t4);
          if (i5 === n2)
            return e4;
          a4.push(i5);
        }
        for (let e5 = 0;e5 < a4.length - 1; ++e5)
          if (a4[e5] > 255)
            return n2;
        if (a4[a4.length - 1] >= Math.pow(256, 5 - a4.length))
          return n2;
        let t3 = a4.pop(), d3 = 0;
        for (const e5 of a4)
          t3 += e5 * Math.pow(256, 3 - d3), ++d3;
        return t3;
      }(l3);
      return typeof r3 == "number" || r3 === n2 ? r3 : l3;
    }
    function b2(e3) {
      return typeof e3 == "number" ? function(e4) {
        let i3 = "", n3 = e4;
        for (let e5 = 1;e5 <= 4; ++e5)
          i3 = String(n3 % 256) + i3, e5 !== 4 && (i3 = "." + i3), n3 = Math.floor(n3 / 256);
        return i3;
      }(e3) : e3 instanceof Array ? "[" + function(e4) {
        let i3 = "";
        const n3 = function(e5) {
          let i4 = null, n4 = 1, a4 = null, t3 = 0;
          for (let d3 = 0;d3 < e5.length; ++d3)
            e5[d3] !== 0 ? (t3 > n4 && (i4 = a4, n4 = t3), a4 = null, t3 = 0) : (a4 === null && (a4 = d3), ++t3);
          return t3 > n4 && (i4 = a4, n4 = t3), { idx: i4, len: n4 };
        }(e4).idx;
        let a3 = false;
        for (let t3 = 0;t3 <= 7; ++t3)
          if (!a3 || e4[t3] !== 0) {
            if (a3 && (a3 = false), n3 === t3) {
              i3 += t3 === 0 ? "::" : ":", a3 = true;
              continue;
            }
            i3 += e4[t3].toString(16), t3 !== 7 && (i3 += ":");
          }
        return i3;
      }(e3) + "]" : e3;
    }
    function g2(e3) {
      const i3 = e3.path;
      var n3;
      i3.length !== 0 && (e3.scheme === "file" && i3.length === 1 && (n3 = i3[0], /^[A-Za-z]:$/.test(n3)) || i3.pop());
    }
    function F2(e3) {
      return e3.username !== "" || e3.password !== "";
    }
    function D2(e3, i3, a3, t3, d3) {
      if (this.pointer = 0, this.input = e3, this.base = i3 || null, this.encodingOverride = a3 || "utf-8", this.stateOverride = d3, this.url = t3, this.failure = false, this.parseError = false, !this.url) {
        this.url = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, cannotBeABaseURL: false };
        const e4 = function(e5) {
          return e5.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
        }(this.input);
        e4 !== this.input && (this.parseError = true), this.input = e4;
      }
      const l3 = function(e4) {
        return e4.replace(/\u0009|\u000A|\u000D/g, "");
      }(this.input);
      for (l3 !== this.input && (this.parseError = true), this.input = l3, this.state = d3 || "scheme start", this.buffer = "", this.atFlag = false, this.arrFlag = false, this.passwordTokenSeenFlag = false, this.input = mC.ucs2.decode(this.input);this.pointer <= this.input.length; ++this.pointer) {
        const e4 = this.input[this.pointer], i4 = isNaN(e4) ? undefined : String.fromCodePoint(e4), a4 = this["parse " + this.state](e4, i4);
        if (!a4)
          break;
        if (a4 === n2) {
          this.failure = true;
          break;
        }
      }
    }
    D2.prototype["parse scheme start"] = function(e3, i3) {
      if (l2(e3))
        this.buffer += i3.toLowerCase(), this.state = "scheme";
      else {
        if (this.stateOverride)
          return this.parseError = true, n2;
        this.state = "no scheme", --this.pointer;
      }
      return true;
    }, D2.prototype["parse scheme"] = function(e3, i3) {
      if (function(e4) {
        return l2(e4) || d2(e4);
      }(e3) || e3 === 43 || e3 === 45 || e3 === 46)
        this.buffer += i3.toLowerCase();
      else if (e3 === 58) {
        if (this.stateOverride) {
          if (u2(this.url) && !s2(this.buffer))
            return false;
          if (!u2(this.url) && s2(this.buffer))
            return false;
          if ((F2(this.url) || this.url.port !== null) && this.buffer === "file")
            return false;
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null))
            return false;
        }
        if (this.url.scheme = this.buffer, this.buffer = "", this.stateOverride)
          return false;
        this.url.scheme === "file" ? (this.input[this.pointer + 1] === 47 && this.input[this.pointer + 2] === 47 || (this.parseError = true), this.state = "file") : u2(this.url) && this.base !== null && this.base.scheme === this.url.scheme ? this.state = "special relative or authority" : u2(this.url) ? this.state = "special authority slashes" : this.input[this.pointer + 1] === 47 ? (this.state = "path or authority", ++this.pointer) : (this.url.cannotBeABaseURL = true, this.url.path.push(""), this.state = "cannot-be-a-base-URL path");
      } else {
        if (this.stateOverride)
          return this.parseError = true, n2;
        this.buffer = "", this.state = "no scheme", this.pointer = -1;
      }
      return true;
    }, D2.prototype["parse no scheme"] = function(e3) {
      return this.base === null || this.base.cannotBeABaseURL && e3 !== 35 ? n2 : (this.base.cannotBeABaseURL && e3 === 35 ? (this.url.scheme = this.base.scheme, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.url.cannotBeABaseURL = true, this.state = "fragment") : this.base.scheme === "file" ? (this.state = "file", --this.pointer) : (this.state = "relative", --this.pointer), true);
    }, D2.prototype["parse special relative or authority"] = function(e3) {
      return e3 === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "relative", --this.pointer), true;
    }, D2.prototype["parse path or authority"] = function(e3) {
      return e3 === 47 ? this.state = "authority" : (this.state = "path", --this.pointer), true;
    }, D2.prototype["parse relative"] = function(e3) {
      return this.url.scheme = this.base.scheme, isNaN(e3) ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : e3 === 47 ? this.state = "relative slash" : e3 === 63 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : e3 === 35 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : u2(this.url) && e3 === 92 ? (this.parseError = true, this.state = "relative slash") : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(0, this.base.path.length - 1), this.state = "path", --this.pointer), true;
    }, D2.prototype["parse relative slash"] = function(e3) {
      return !u2(this.url) || e3 !== 47 && e3 !== 92 ? e3 === 47 ? this.state = "authority" : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.state = "path", --this.pointer) : (e3 === 92 && (this.parseError = true), this.state = "special authority ignore slashes"), true;
    }, D2.prototype["parse special authority slashes"] = function(e3) {
      return e3 === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "special authority ignore slashes", --this.pointer), true;
    }, D2.prototype["parse special authority ignore slashes"] = function(e3) {
      return e3 !== 47 && e3 !== 92 ? (this.state = "authority", --this.pointer) : this.parseError = true, true;
    }, D2.prototype["parse authority"] = function(e3, i3) {
      if (e3 === 64) {
        this.parseError = true, this.atFlag && (this.buffer = "%40" + this.buffer), this.atFlag = true;
        const e4 = a2(this.buffer);
        for (let i4 = 0;i4 < e4; ++i4) {
          const e5 = this.buffer.codePointAt(i4);
          if (e5 === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const n3 = f2(e5, h2);
          this.passwordTokenSeenFlag ? this.url.password += n3 : this.url.username += n3;
        }
        this.buffer = "";
      } else if (isNaN(e3) || e3 === 47 || e3 === 63 || e3 === 35 || u2(this.url) && e3 === 92) {
        if (this.atFlag && this.buffer === "")
          return this.parseError = true, n2;
        this.pointer -= a2(this.buffer) + 1, this.buffer = "", this.state = "host";
      } else
        this.buffer += i3;
      return true;
    }, D2.prototype["parse hostname"] = D2.prototype["parse host"] = function(e3, i3) {
      if (this.stateOverride && this.url.scheme === "file")
        --this.pointer, this.state = "file host";
      else if (e3 !== 58 || this.arrFlag)
        if (isNaN(e3) || e3 === 47 || e3 === 63 || e3 === 35 || u2(this.url) && e3 === 92) {
          if (--this.pointer, u2(this.url) && this.buffer === "")
            return this.parseError = true, n2;
          if (this.stateOverride && this.buffer === "" && (F2(this.url) || this.url.port !== null))
            return this.parseError = true, false;
          const e4 = S2(this.buffer, u2(this.url));
          if (e4 === n2)
            return n2;
          if (this.url.host = e4, this.buffer = "", this.state = "path start", this.stateOverride)
            return false;
        } else
          e3 === 91 ? this.arrFlag = true : e3 === 93 && (this.arrFlag = false), this.buffer += i3;
      else {
        if (this.buffer === "")
          return this.parseError = true, n2;
        const e4 = S2(this.buffer, u2(this.url));
        if (e4 === n2)
          return n2;
        if (this.url.host = e4, this.buffer = "", this.state = "port", this.stateOverride === "hostname")
          return false;
      }
      return true;
    }, D2.prototype["parse port"] = function(e3, a3) {
      if (d2(e3))
        this.buffer += a3;
      else {
        if (!(isNaN(e3) || e3 === 47 || e3 === 63 || e3 === 35 || u2(this.url) && e3 === 92 || this.stateOverride))
          return this.parseError = true, n2;
        if (this.buffer !== "") {
          const e4 = parseInt(this.buffer);
          if (e4 > Math.pow(2, 16) - 1)
            return this.parseError = true, n2;
          this.url.port = e4 === (t3 = this.url.scheme, i2[t3]) ? null : e4, this.buffer = "";
        }
        if (this.stateOverride)
          return false;
        this.state = "path start", --this.pointer;
      }
      var t3;
      return true;
    };
    const _2 = new Set([47, 92, 63, 35]);
    D2.prototype["parse file"] = function(e3) {
      var i3, n3;
      return this.url.scheme = "file", e3 === 47 || e3 === 92 ? (e3 === 92 && (this.parseError = true), this.state = "file slash") : this.base !== null && this.base.scheme === "file" ? isNaN(e3) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : e3 === 63 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : e3 === 35 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : (this.input.length - this.pointer - 1 == 0 || (i3 = e3, n3 = this.input[this.pointer + 1], !l2(i3) || n3 !== 58 && n3 !== 124) || this.input.length - this.pointer - 1 >= 2 && !_2.has(this.input[this.pointer + 2]) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), g2(this.url)) : this.parseError = true, this.state = "path", --this.pointer) : (this.state = "path", --this.pointer), true;
    }, D2.prototype["parse file slash"] = function(e3) {
      var i3;
      return e3 === 47 || e3 === 92 ? (e3 === 92 && (this.parseError = true), this.state = "file host") : (this.base !== null && this.base.scheme === "file" && ((i3 = this.base.path[0]).length === 2 && l2(i3.codePointAt(0)) && i3[1] === ":" ? this.url.path.push(this.base.path[0]) : this.url.host = this.base.host), this.state = "path", --this.pointer), true;
    }, D2.prototype["parse file host"] = function(e3, i3) {
      if (isNaN(e3) || e3 === 47 || e3 === 92 || e3 === 63 || e3 === 35)
        if (--this.pointer, !this.stateOverride && m2(this.buffer))
          this.parseError = true, this.state = "path";
        else if (this.buffer === "") {
          if (this.url.host = "", this.stateOverride)
            return false;
          this.state = "path start";
        } else {
          let e4 = S2(this.buffer, u2(this.url));
          if (e4 === n2)
            return n2;
          if (e4 === "localhost" && (e4 = ""), this.url.host = e4, this.stateOverride)
            return false;
          this.buffer = "", this.state = "path start";
        }
      else
        this.buffer += i3;
      return true;
    }, D2.prototype["parse path start"] = function(e3) {
      return u2(this.url) ? (e3 === 92 && (this.parseError = true), this.state = "path", e3 !== 47 && e3 !== 92 && --this.pointer) : this.stateOverride || e3 !== 63 ? this.stateOverride || e3 !== 35 ? e3 !== undefined && (this.state = "path", e3 !== 47 && --this.pointer) : (this.url.fragment = "", this.state = "fragment") : (this.url.query = "", this.state = "query"), true;
    }, D2.prototype["parse path"] = function(e3) {
      if (isNaN(e3) || e3 === 47 || u2(this.url) && e3 === 92 || !this.stateOverride && (e3 === 63 || e3 === 35)) {
        if (u2(this.url) && e3 === 92 && (this.parseError = true), (i3 = (i3 = this.buffer).toLowerCase()) === ".." || i3 === "%2e." || i3 === ".%2e" || i3 === "%2e%2e" ? (g2(this.url), e3 === 47 || u2(this.url) && e3 === 92 || this.url.path.push("")) : !r2(this.buffer) || e3 === 47 || u2(this.url) && e3 === 92 ? r2(this.buffer) || (this.url.scheme === "file" && this.url.path.length === 0 && m2(this.buffer) && (this.url.host !== "" && this.url.host !== null && (this.parseError = true, this.url.host = ""), this.buffer = this.buffer[0] + ":"), this.url.path.push(this.buffer)) : this.url.path.push(""), this.buffer = "", this.url.scheme === "file" && (e3 === undefined || e3 === 63 || e3 === 35))
          for (;this.url.path.length > 1 && this.url.path[0] === ""; )
            this.parseError = true, this.url.path.shift();
        e3 === 63 && (this.url.query = "", this.state = "query"), e3 === 35 && (this.url.fragment = "", this.state = "fragment");
      } else
        e3 !== 37 || o2(this.input[this.pointer + 1]) && o2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += f2(e3, p2);
      var i3;
      return true;
    }, D2.prototype["parse cannot-be-a-base-URL path"] = function(e3) {
      return e3 === 63 ? (this.url.query = "", this.state = "query") : e3 === 35 ? (this.url.fragment = "", this.state = "fragment") : (isNaN(e3) || e3 === 37 || (this.parseError = true), e3 !== 37 || o2(this.input[this.pointer + 1]) && o2(this.input[this.pointer + 2]) || (this.parseError = true), isNaN(e3) || (this.url.path[0] = this.url.path[0] + f2(e3, v2))), true;
    }, D2.prototype["parse query"] = function(e3, i3) {
      if (isNaN(e3) || !this.stateOverride && e3 === 35) {
        u2(this.url) && this.url.scheme !== "ws" && this.url.scheme !== "wss" || (this.encodingOverride = "utf-8");
        const i4 = new Buffer(this.buffer);
        for (let e4 = 0;e4 < i4.length; ++e4)
          i4[e4] < 33 || i4[e4] > 126 || i4[e4] === 34 || i4[e4] === 35 || i4[e4] === 60 || i4[e4] === 62 ? this.url.query += k2(i4[e4]) : this.url.query += String.fromCodePoint(i4[e4]);
        this.buffer = "", e3 === 35 && (this.url.fragment = "", this.state = "fragment");
      } else
        e3 !== 37 || o2(this.input[this.pointer + 1]) && o2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += i3;
      return true;
    }, D2.prototype["parse fragment"] = function(e3) {
      return isNaN(e3) || (e3 === 0 ? this.parseError = true : (e3 !== 37 || o2(this.input[this.pointer + 1]) && o2(this.input[this.pointer + 2]) || (this.parseError = true), this.url.fragment += f2(e3, v2))), true;
    }, e2.exports.serializeURL = function(e3, i3) {
      let n3 = e3.scheme + ":";
      if (e3.host !== null ? (n3 += "//", e3.username === "" && e3.password === "" || (n3 += e3.username, e3.password !== "" && (n3 += ":" + e3.password), n3 += "@"), n3 += b2(e3.host), e3.port !== null && (n3 += ":" + e3.port)) : e3.host === null && e3.scheme === "file" && (n3 += "//"), e3.cannotBeABaseURL)
        n3 += e3.path[0];
      else
        for (const i4 of e3.path)
          n3 += "/" + i4;
      return e3.query !== null && (n3 += "?" + e3.query), i3 || e3.fragment === null || (n3 += "#" + e3.fragment), n3;
    }, e2.exports.serializeURLOrigin = function(i3) {
      switch (i3.scheme) {
        case "blob":
          try {
            return e2.exports.serializeURLOrigin(e2.exports.parseURL(i3.path[0]));
          } catch (e3) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return function(e3) {
            let i4 = e3.scheme + "://";
            return i4 += b2(e3.host), e3.port !== null && (i4 += ":" + e3.port), i4;
          }({ scheme: i3.scheme, host: i3.host, port: i3.port });
        case "file":
          return "file://";
        default:
          return "null";
      }
    }, e2.exports.basicURLParse = function(e3, i3) {
      i3 === undefined && (i3 = {});
      const n3 = new D2(e3, i3.baseURL, i3.encodingOverride, i3.url, i3.stateOverride);
      return n3.failure ? "failure" : n3.url;
    }, e2.exports.setTheUsername = function(e3, i3) {
      e3.username = "";
      const n3 = mC.ucs2.decode(i3);
      for (let i4 = 0;i4 < n3.length; ++i4)
        e3.username += f2(n3[i4], h2);
    }, e2.exports.setThePassword = function(e3, i3) {
      e3.password = "";
      const n3 = mC.ucs2.decode(i3);
      for (let i4 = 0;i4 < n3.length; ++i4)
        e3.password += f2(n3[i4], h2);
    }, e2.exports.serializeHost = b2, e2.exports.cannotHaveAUsernamePasswordPort = function(e3) {
      return e3.host === null || e3.host === "" || e3.cannotBeABaseURL || e3.scheme === "file";
    }, e2.exports.serializeInteger = function(e3) {
      return String(e3);
    }, e2.exports.parseURL = function(i3, n3) {
      return n3 === undefined && (n3 = {}), e2.exports.basicURLParse(i3, { baseURL: n3.baseURL, encodingOverride: n3.encodingOverride });
    };
  });
  var bC = class {
    constructor(e2) {
      const i2 = e2[0], n2 = e2[1];
      let a2 = null;
      if (n2 !== undefined && (a2 = SC.basicURLParse(n2), a2 === "failure"))
        throw new TypeError("Invalid base URL");
      const t2 = SC.basicURLParse(i2, { baseURL: a2 });
      if (t2 === "failure")
        throw new TypeError("Invalid URL");
      this._url = t2;
    }
    get href() {
      return SC.serializeURL(this._url);
    }
    set href(e2) {
      const i2 = SC.basicURLParse(e2);
      if (i2 === "failure")
        throw new TypeError("Invalid URL");
      this._url = i2;
    }
    get origin() {
      return SC.serializeURLOrigin(this._url);
    }
    get protocol() {
      return this._url.scheme + ":";
    }
    set protocol(e2) {
      SC.basicURLParse(e2 + ":", { url: this._url, stateOverride: "scheme start" });
    }
    get username() {
      return this._url.username;
    }
    set username(e2) {
      SC.cannotHaveAUsernamePasswordPort(this._url) || SC.setTheUsername(this._url, e2);
    }
    get password() {
      return this._url.password;
    }
    set password(e2) {
      SC.cannotHaveAUsernamePasswordPort(this._url) || SC.setThePassword(this._url, e2);
    }
    get host() {
      const e2 = this._url;
      return e2.host === null ? "" : e2.port === null ? SC.serializeHost(e2.host) : SC.serializeHost(e2.host) + ":" + SC.serializeInteger(e2.port);
    }
    set host(e2) {
      this._url.cannotBeABaseURL || SC.basicURLParse(e2, { url: this._url, stateOverride: "host" });
    }
    get hostname() {
      return this._url.host === null ? "" : SC.serializeHost(this._url.host);
    }
    set hostname(e2) {
      this._url.cannotBeABaseURL || SC.basicURLParse(e2, { url: this._url, stateOverride: "hostname" });
    }
    get port() {
      return this._url.port === null ? "" : SC.serializeInteger(this._url.port);
    }
    set port(e2) {
      SC.cannotHaveAUsernamePasswordPort(this._url) || (e2 === "" ? this._url.port = null : SC.basicURLParse(e2, { url: this._url, stateOverride: "port" }));
    }
    get pathname() {
      return this._url.cannotBeABaseURL ? this._url.path[0] : this._url.path.length === 0 ? "" : "/" + this._url.path.join("/");
    }
    set pathname(e2) {
      this._url.cannotBeABaseURL || (this._url.path = [], SC.basicURLParse(e2, { url: this._url, stateOverride: "path start" }));
    }
    get search() {
      return this._url.query === null || this._url.query === "" ? "" : "?" + this._url.query;
    }
    set search(e2) {
      const i2 = this._url;
      if (e2 === "")
        return void (i2.query = null);
      const n2 = e2[0] === "?" ? e2.substring(1) : e2;
      i2.query = "", SC.basicURLParse(n2, { url: i2, stateOverride: "query" });
    }
    get hash() {
      return this._url.fragment === null || this._url.fragment === "" ? "" : "#" + this._url.fragment;
    }
    set hash(e2) {
      if (e2 === "")
        return void (this._url.fragment = null);
      const i2 = e2[0] === "#" ? e2.substring(1) : e2;
      this._url.fragment = "", SC.basicURLParse(i2, { url: this._url, stateOverride: "fragment" });
    }
    toJSON() {
      return this.href;
    }
  };
  var gC = Ew(function(e2) {
    const i2 = Qw.implSymbol;
    function n2(a2) {
      if (!this || this[i2] || !(this instanceof n2))
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      if (arguments.length < 1)
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      const t2 = [];
      for (let e3 = 0;e3 < arguments.length && e3 < 2; ++e3)
        t2[e3] = arguments[e3];
      t2[0] = zw.USVString(t2[0]), t2[1] !== undefined && (t2[1] = zw.USVString(t2[1])), e2.exports.setup(this, t2);
    }
    n2.prototype.toJSON = function() {
      if (!this || !e2.exports.is(this))
        throw new TypeError("Illegal invocation");
      const n3 = [];
      for (let e3 = 0;e3 < arguments.length && e3 < 0; ++e3)
        n3[e3] = arguments[e3];
      return this[i2].toJSON.apply(this[i2], n3);
    }, Object.defineProperty(n2.prototype, "href", { get() {
      return this[i2].href;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].href = e3;
    }, enumerable: true, configurable: true }), n2.prototype.toString = function() {
      if (!this || !e2.exports.is(this))
        throw new TypeError("Illegal invocation");
      return this.href;
    }, Object.defineProperty(n2.prototype, "origin", { get() {
      return this[i2].origin;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "protocol", { get() {
      return this[i2].protocol;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].protocol = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "username", { get() {
      return this[i2].username;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].username = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "password", { get() {
      return this[i2].password;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].password = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "host", { get() {
      return this[i2].host;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].host = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hostname", { get() {
      return this[i2].hostname;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].hostname = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "port", { get() {
      return this[i2].port;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].port = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "pathname", { get() {
      return this[i2].pathname;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].pathname = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "search", { get() {
      return this[i2].search;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].search = e3;
    }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hash", { get() {
      return this[i2].hash;
    }, set(e3) {
      e3 = zw.USVString(e3), this[i2].hash = e3;
    }, enumerable: true, configurable: true }), e2.exports = { is: (e3) => !!e3 && e3[i2] instanceof bC, create(e3, i3) {
      let a2 = Object.create(n2.prototype);
      return this.setup(a2, e3, i3), a2;
    }, setup(e3, n3, a2) {
      a2 || (a2 = {}), a2.wrapper = e3, e3[i2] = new bC(n3, a2), e3[i2][Qw.wrapperSymbol] = e3;
    }, interface: n2, expose: { Window: { URL: n2 }, Worker: { URL: n2 } } };
  });
  var FC = { URL: gC.interface, serializeURL: SC.serializeURL, serializeURLOrigin: SC.serializeURLOrigin, basicURLParse: SC.basicURLParse, setTheUsername: SC.setTheUsername, setThePassword: SC.setThePassword, serializeHost: SC.serializeHost, serializeInteger: SC.serializeInteger, parseURL: SC.parseURL };
  var DC = me.default.Readable;
  var _C = Symbol("buffer");
  var VC = Symbol("type");

  class AC {
    constructor() {
      this[VC] = "";
      const e2 = arguments[0], i2 = arguments[1], n2 = [];
      let a2 = 0;
      if (e2) {
        const i3 = e2, t3 = Number(i3.length);
        for (let e3 = 0;e3 < t3; e3++) {
          const t4 = i3[e3];
          let d2;
          d2 = t4 instanceof Buffer ? t4 : ArrayBuffer.isView(t4) ? Buffer.from(t4.buffer, t4.byteOffset, t4.byteLength) : t4 instanceof ArrayBuffer ? Buffer.from(t4) : t4 instanceof AC ? t4[_C] : Buffer.from(typeof t4 == "string" ? t4 : String(t4)), a2 += d2.length, n2.push(d2);
        }
      }
      this[_C] = Buffer.concat(n2);
      let t2 = i2 && i2.type !== undefined && String(i2.type).toLowerCase();
      t2 && !/[^\u0020-\u007E]/.test(t2) && (this[VC] = t2);
    }
    get size() {
      return this[_C].length;
    }
    get type() {
      return this[VC];
    }
    text() {
      return Promise.resolve(this[_C].toString());
    }
    arrayBuffer() {
      const e2 = this[_C], i2 = e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
      return Promise.resolve(i2);
    }
    stream() {
      const e2 = new DC;
      return e2._read = function() {}, e2.push(this[_C]), e2.push(null), e2;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const e2 = this.size, i2 = arguments[0], n2 = arguments[1];
      let a2, t2;
      a2 = i2 === undefined ? 0 : i2 < 0 ? Math.max(e2 + i2, 0) : Math.min(i2, e2), t2 = n2 === undefined ? e2 : n2 < 0 ? Math.max(e2 + n2, 0) : Math.min(n2, e2);
      const d2 = Math.max(t2 - a2, 0), l2 = this[_C].slice(a2, a2 + d2), o2 = new AC([], { type: arguments[2] });
      return o2[_C] = l2, o2;
    }
  }
  function TC(e2, i2, n2) {
    Error.call(this, e2), this.message = e2, this.type = i2, n2 && (this.code = this.errno = n2.code), Error.captureStackTrace(this, this.constructor);
  }
  var IC;
  Object.defineProperties(AC.prototype, { size: { enumerable: true }, type: { enumerable: true }, slice: { enumerable: true } }), Object.defineProperty(AC.prototype, Symbol.toStringTag, { value: "Blob", writable: false, enumerable: false, configurable: true }), TC.prototype = Object.create(Error.prototype), TC.prototype.constructor = TC, TC.prototype.name = "FetchError";
  try {
    IC = (()=>{throw new Error("Cannot require module "+"encoding");})().convert;
  } catch (e2) {}
  var wC = Symbol("Body internals");
  var CC = me.default.PassThrough;
  function PC(e2) {
    var i2 = this, n2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, a2 = n2.size;
    let t2 = a2 === undefined ? 0 : a2;
    var d2 = n2.timeout;
    let l2 = d2 === undefined ? 0 : d2;
    e2 == null ? e2 = null : xC(e2) ? e2 = Buffer.from(e2.toString()) : jC(e2) || Buffer.isBuffer(e2) || (Object.prototype.toString.call(e2) === "[object ArrayBuffer]" ? e2 = Buffer.from(e2) : ArrayBuffer.isView(e2) ? e2 = Buffer.from(e2.buffer, e2.byteOffset, e2.byteLength) : e2 instanceof me.default || (e2 = Buffer.from(String(e2)))), this[wC] = { body: e2, disturbed: false, error: null }, this.size = t2, this.timeout = l2, e2 instanceof me.default && e2.on("error", function(e3) {
      const n3 = e3.name === "AbortError" ? e3 : new TC(`Invalid response body while trying to fetch ${i2.url}: ${e3.message}`, "system", e3);
      i2[wC].error = n3;
    });
  }
  function qC() {
    var e2 = this;
    if (this[wC].disturbed)
      return PC.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    if (this[wC].disturbed = true, this[wC].error)
      return PC.Promise.reject(this[wC].error);
    let i2 = this.body;
    if (i2 === null)
      return PC.Promise.resolve(Buffer.alloc(0));
    if (jC(i2) && (i2 = i2.stream()), Buffer.isBuffer(i2))
      return PC.Promise.resolve(i2);
    if (!(i2 instanceof me.default))
      return PC.Promise.resolve(Buffer.alloc(0));
    let n2 = [], a2 = 0, t2 = false;
    return new PC.Promise(function(d2, l2) {
      let o2;
      e2.timeout && (o2 = setTimeout(function() {
        t2 = true, l2(new TC(`Response timeout while trying to fetch ${e2.url} (over ${e2.timeout}ms)`, "body-timeout"));
      }, e2.timeout)), i2.on("error", function(i3) {
        i3.name === "AbortError" ? (t2 = true, l2(i3)) : l2(new TC(`Invalid response body while trying to fetch ${e2.url}: ${i3.message}`, "system", i3));
      }), i2.on("data", function(i3) {
        if (!t2 && i3 !== null) {
          if (e2.size && a2 + i3.length > e2.size)
            return t2 = true, void l2(new TC(`content size at ${e2.url} over limit: ${e2.size}`, "max-size"));
          a2 += i3.length, n2.push(i3);
        }
      }), i2.on("end", function() {
        if (!t2) {
          clearTimeout(o2);
          try {
            d2(Buffer.concat(n2, a2));
          } catch (i3) {
            l2(new TC(`Could not create Buffer from response body for ${e2.url}: ${i3.message}`, "system", i3));
          }
        }
      });
    });
  }
  function xC(e2) {
    return typeof e2 == "object" && typeof e2.append == "function" && typeof e2.delete == "function" && typeof e2.get == "function" && typeof e2.getAll == "function" && typeof e2.has == "function" && typeof e2.set == "function" && (e2.constructor.name === "URLSearchParams" || Object.prototype.toString.call(e2) === "[object URLSearchParams]" || typeof e2.sort == "function");
  }
  function jC(e2) {
    return typeof e2 == "object" && typeof e2.arrayBuffer == "function" && typeof e2.type == "string" && typeof e2.stream == "function" && typeof e2.constructor == "function" && typeof e2.constructor.name == "string" && /^(Blob|File)$/.test(e2.constructor.name) && /^(Blob|File)$/.test(e2[Symbol.toStringTag]);
  }
  function UC(e2) {
    let i2, n2, a2 = e2.body;
    if (e2.bodyUsed)
      throw new Error("cannot clone body after it is used");
    return a2 instanceof me.default && typeof a2.getBoundary != "function" && (i2 = new CC, n2 = new CC, a2.pipe(i2), a2.pipe(n2), e2[wC].body = i2, a2 = n2), a2;
  }
  function OC(e2) {
    return e2 === null ? null : typeof e2 == "string" ? "text/plain;charset=UTF-8" : xC(e2) ? "application/x-www-form-urlencoded;charset=UTF-8" : jC(e2) ? e2.type || null : Buffer.isBuffer(e2) || Object.prototype.toString.call(e2) === "[object ArrayBuffer]" || ArrayBuffer.isView(e2) ? null : typeof e2.getBoundary == "function" ? `multipart/form-data;boundary=${e2.getBoundary()}` : e2 instanceof me.default ? null : "text/plain;charset=UTF-8";
  }
  function BC(e2) {
    const i2 = e2.body;
    return i2 === null ? 0 : jC(i2) ? i2.size : Buffer.isBuffer(i2) ? i2.length : i2 && typeof i2.getLengthSync == "function" && (i2._lengthRetrievers && i2._lengthRetrievers.length == 0 || i2.hasKnownLength && i2.hasKnownLength()) ? i2.getLengthSync() : null;
  }
  PC.prototype = { get body() {
    return this[wC].body;
  }, get bodyUsed() {
    return this[wC].disturbed;
  }, arrayBuffer() {
    return qC.call(this).then(function(e2) {
      return e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
    });
  }, blob() {
    let e2 = this.headers && this.headers.get("content-type") || "";
    return qC.call(this).then(function(i2) {
      return Object.assign(new AC([], { type: e2.toLowerCase() }), { [_C]: i2 });
    });
  }, json() {
    var e2 = this;
    return qC.call(this).then(function(i2) {
      try {
        return JSON.parse(i2.toString());
      } catch (i3) {
        return PC.Promise.reject(new TC(`invalid json response body at ${e2.url} reason: ${i3.message}`, "invalid-json"));
      }
    });
  }, text() {
    return qC.call(this).then(function(e2) {
      return e2.toString();
    });
  }, buffer() {
    return qC.call(this);
  }, textConverted() {
    var e2 = this;
    return qC.call(this).then(function(i2) {
      return function(e3, i3) {
        if (typeof IC != "function")
          throw new Error("The package `encoding` must be installed to use the textConverted() function");
        const n2 = i3.get("content-type");
        let a2, t2, d2 = "utf-8";
        n2 && (a2 = /charset=([^;]*)/i.exec(n2));
        t2 = e3.slice(0, 1024).toString(), !a2 && t2 && (a2 = /<meta.+?charset=(['"])(.+?)\1/i.exec(t2));
        !a2 && t2 && (a2 = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(t2), a2 || (a2 = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(t2), a2 && a2.pop()), a2 && (a2 = /charset=(.*)/i.exec(a2.pop())));
        !a2 && t2 && (a2 = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(t2));
        a2 && (d2 = a2.pop(), d2 !== "gb2312" && d2 !== "gbk" || (d2 = "gb18030"));
        return IC(e3, "UTF-8", d2).toString();
      }(i2, e2.headers);
    });
  } }, Object.defineProperties(PC.prototype, { body: { enumerable: true }, bodyUsed: { enumerable: true }, arrayBuffer: { enumerable: true }, blob: { enumerable: true }, json: { enumerable: true }, text: { enumerable: true } }), PC.mixIn = function(e2) {
    for (const i2 of Object.getOwnPropertyNames(PC.prototype))
      if (!(i2 in e2)) {
        const n2 = Object.getOwnPropertyDescriptor(PC.prototype, i2);
        Object.defineProperty(e2, i2, n2);
      }
  }, PC.Promise = global.Promise;
  var RC = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  var EC = /[^\t\x20-\x7e\x80-\xff]/;
  function MC(e2) {
    if (e2 = `${e2}`, RC.test(e2) || e2 === "")
      throw new TypeError(`${e2} is not a legal HTTP header name`);
  }
  function LC(e2) {
    if (e2 = `${e2}`, EC.test(e2))
      throw new TypeError(`${e2} is not a legal HTTP header value`);
  }
  function zC(e2, i2) {
    i2 = i2.toLowerCase();
    for (const n2 in e2)
      if (n2.toLowerCase() === i2)
        return n2;
  }
  var WC = Symbol("map");

  class HC {
    constructor() {
      let e2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      if (this[WC] = Object.create(null), e2 instanceof HC) {
        const i2 = e2.raw(), n2 = Object.keys(i2);
        for (const e3 of n2)
          for (const n3 of i2[e3])
            this.append(e3, n3);
        return;
      }
      if (e2 == null)
        ;
      else {
        if (typeof e2 != "object")
          throw new TypeError("Provided initializer must be an object");
        {
          const i2 = e2[Symbol.iterator];
          if (i2 != null) {
            if (typeof i2 != "function")
              throw new TypeError("Header pairs must be iterable");
            const n2 = [];
            for (const i3 of e2) {
              if (typeof i3 != "object" || typeof i3[Symbol.iterator] != "function")
                throw new TypeError("Each header pair must be iterable");
              n2.push(Array.from(i3));
            }
            for (const e3 of n2) {
              if (e3.length !== 2)
                throw new TypeError("Each header pair must be a name/value tuple");
              this.append(e3[0], e3[1]);
            }
          } else
            for (const i3 of Object.keys(e2)) {
              const n2 = e2[i3];
              this.append(i3, n2);
            }
        }
      }
    }
    get(e2) {
      MC(e2 = `${e2}`);
      const i2 = zC(this[WC], e2);
      return i2 === undefined ? null : this[WC][i2].join(", ");
    }
    forEach(e2) {
      let i2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined, n2 = QC(this), a2 = 0;
      for (;a2 < n2.length; ) {
        var t2 = n2[a2];
        const d2 = t2[0], l2 = t2[1];
        e2.call(i2, l2, d2, this), n2 = QC(this), a2++;
      }
    }
    set(e2, i2) {
      i2 = `${i2}`, MC(e2 = `${e2}`), LC(i2);
      const n2 = zC(this[WC], e2);
      this[WC][n2 !== undefined ? n2 : e2] = [i2];
    }
    append(e2, i2) {
      i2 = `${i2}`, MC(e2 = `${e2}`), LC(i2);
      const n2 = zC(this[WC], e2);
      n2 !== undefined ? this[WC][n2].push(i2) : this[WC][e2] = [i2];
    }
    has(e2) {
      return MC(e2 = `${e2}`), zC(this[WC], e2) !== undefined;
    }
    delete(e2) {
      MC(e2 = `${e2}`);
      const i2 = zC(this[WC], e2);
      i2 !== undefined && delete this[WC][i2];
    }
    raw() {
      return this[WC];
    }
    keys() {
      return JC(this, "key");
    }
    values() {
      return JC(this, "value");
    }
    [Symbol.iterator]() {
      return JC(this, "key+value");
    }
  }
  function QC(e2) {
    let i2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "key+value";
    return Object.keys(e2[WC]).sort().map(i2 === "key" ? function(e3) {
      return e3.toLowerCase();
    } : i2 === "value" ? function(i3) {
      return e2[WC][i3].join(", ");
    } : function(i3) {
      return [i3.toLowerCase(), e2[WC][i3].join(", ")];
    });
  }
  HC.prototype.entries = HC.prototype[Symbol.iterator], Object.defineProperty(HC.prototype, Symbol.toStringTag, { value: "Headers", writable: false, enumerable: false, configurable: true }), Object.defineProperties(HC.prototype, { get: { enumerable: true }, forEach: { enumerable: true }, set: { enumerable: true }, append: { enumerable: true }, has: { enumerable: true }, delete: { enumerable: true }, keys: { enumerable: true }, values: { enumerable: true }, entries: { enumerable: true } });
  var GC = Symbol("internal");
  function JC(e2, i2) {
    const n2 = Object.create(KC);
    return n2[GC] = { target: e2, kind: i2, index: 0 }, n2;
  }
  var KC = Object.setPrototypeOf({ next() {
    if (!this || Object.getPrototypeOf(this) !== KC)
      throw new TypeError("Value of `this` is not a HeadersIterator");
    var e2 = this[GC];
    const { target: i2, kind: n2, index: a2 } = e2, t2 = QC(i2, n2);
    return a2 >= t2.length ? { value: undefined, done: true } : (this[GC].index = a2 + 1, { value: t2[a2], done: false });
  } }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  function $C(e2) {
    const i2 = Object.assign({ __proto__: null }, e2[WC]), n2 = zC(e2[WC], "Host");
    return n2 !== undefined && (i2[n2] = i2[n2][0]), i2;
  }
  Object.defineProperty(KC, Symbol.toStringTag, { value: "HeadersIterator", writable: false, enumerable: false, configurable: true });
  var ZC = Symbol("Response internals");
  var YC = se.default.STATUS_CODES;

  class XC {
    constructor() {
      let e2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null, i2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      PC.call(this, e2, i2);
      const n2 = i2.status || 200, a2 = new HC(i2.headers);
      if (e2 != null && !a2.has("Content-Type")) {
        const i3 = OC(e2);
        i3 && a2.append("Content-Type", i3);
      }
      this[ZC] = { url: i2.url, status: n2, statusText: i2.statusText || YC[n2], headers: a2, counter: i2.counter };
    }
    get url() {
      return this[ZC].url || "";
    }
    get status() {
      return this[ZC].status;
    }
    get ok() {
      return this[ZC].status >= 200 && this[ZC].status < 300;
    }
    get redirected() {
      return this[ZC].counter > 0;
    }
    get statusText() {
      return this[ZC].statusText;
    }
    get headers() {
      return this[ZC].headers;
    }
    clone() {
      return new XC(UC(this), { url: this.url, status: this.status, statusText: this.statusText, headers: this.headers, ok: this.ok, redirected: this.redirected });
    }
  }
  PC.mixIn(XC.prototype), Object.defineProperties(XC.prototype, { url: { enumerable: true }, status: { enumerable: true }, ok: { enumerable: true }, redirected: { enumerable: true }, statusText: { enumerable: true }, headers: { enumerable: true }, clone: { enumerable: true } }), Object.defineProperty(XC.prototype, Symbol.toStringTag, { value: "Response", writable: false, enumerable: false, configurable: true });
  var eP = Symbol("Request internals");
  var iP = ue.default.URL || FC.URL;
  var nP = ue.default.parse;
  var aP = ue.default.format;
  function tP(e2) {
    return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e2) && (e2 = new iP(e2).toString()), nP(e2);
  }
  var dP = "destroy" in me.default.Readable.prototype;
  function lP(e2) {
    return typeof e2 == "object" && typeof e2[eP] == "object";
  }

  class oP {
    constructor(e2) {
      let i2, n2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      lP(e2) ? i2 = tP(e2.url) : (i2 = e2 && e2.href ? tP(e2.href) : tP(`${e2}`), e2 = {});
      let a2 = n2.method || e2.method || "GET";
      if (a2 = a2.toUpperCase(), (n2.body != null || lP(e2) && e2.body !== null) && (a2 === "GET" || a2 === "HEAD"))
        throw new TypeError("Request with GET/HEAD method cannot have body");
      let t2 = n2.body != null ? n2.body : lP(e2) && e2.body !== null ? UC(e2) : null;
      PC.call(this, t2, { timeout: n2.timeout || e2.timeout || 0, size: n2.size || e2.size || 0 });
      const d2 = new HC(n2.headers || e2.headers || {});
      if (t2 != null && !d2.has("Content-Type")) {
        const e3 = OC(t2);
        e3 && d2.append("Content-Type", e3);
      }
      let l2 = lP(e2) ? e2.signal : null;
      if ("signal" in n2 && (l2 = n2.signal), l2 != null && !function(e3) {
        const i3 = e3 && typeof e3 == "object" && Object.getPrototypeOf(e3);
        return !(!i3 || i3.constructor.name !== "AbortSignal");
      }(l2))
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      this[eP] = { method: a2, redirect: n2.redirect || e2.redirect || "follow", headers: d2, parsedURL: i2, signal: l2 }, this.follow = n2.follow !== undefined ? n2.follow : e2.follow !== undefined ? e2.follow : 20, this.compress = n2.compress !== undefined ? n2.compress : e2.compress === undefined || e2.compress, this.counter = n2.counter || e2.counter || 0, this.agent = n2.agent || e2.agent;
    }
    get method() {
      return this[eP].method;
    }
    get url() {
      return aP(this[eP].parsedURL);
    }
    get headers() {
      return this[eP].headers;
    }
    get redirect() {
      return this[eP].redirect;
    }
    get signal() {
      return this[eP].signal;
    }
    clone() {
      return new oP(this);
    }
  }
  function rP(e2) {
    Error.call(this, e2), this.type = "aborted", this.message = e2, Error.captureStackTrace(this, this.constructor);
  }
  PC.mixIn(oP.prototype), Object.defineProperty(oP.prototype, Symbol.toStringTag, { value: "Request", writable: false, enumerable: false, configurable: true }), Object.defineProperties(oP.prototype, { method: { enumerable: true }, url: { enumerable: true }, headers: { enumerable: true }, redirect: { enumerable: true }, clone: { enumerable: true }, signal: { enumerable: true } }), rP.prototype = Object.create(Error.prototype), rP.prototype.constructor = rP, rP.prototype.name = "AbortError";
  var mP = ue.default.URL || FC.URL;
  var sP = me.default.PassThrough;
  function uP(e2, i2) {
    if (!uP.Promise)
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    return PC.Promise = uP.Promise, new uP.Promise(function(n2, a2) {
      const t2 = new oP(e2, i2), d2 = function(e3) {
        const i3 = e3[eP].parsedURL, n3 = new HC(e3[eP].headers);
        if (n3.has("Accept") || n3.set("Accept", "*/*"), !i3.protocol || !i3.hostname)
          throw new TypeError("Only absolute URLs are supported");
        if (!/^https?:$/.test(i3.protocol))
          throw new TypeError("Only HTTP(S) protocols are supported");
        if (e3.signal && e3.body instanceof me.default.Readable && !dP)
          throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
        let a3 = null;
        if (e3.body == null && /^(POST|PUT)$/i.test(e3.method) && (a3 = "0"), e3.body != null) {
          const i4 = BC(e3);
          typeof i4 == "number" && (a3 = String(i4));
        }
        a3 && n3.set("Content-Length", a3), n3.has("User-Agent") || n3.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"), e3.compress && !n3.has("Accept-Encoding") && n3.set("Accept-Encoding", "gzip,deflate");
        let t3 = e3.agent;
        return typeof t3 == "function" && (t3 = t3(i3)), Object.assign({}, i3, { method: e3.method, headers: $C(n3), agent: t3 });
      }(t2), l2 = (d2.protocol === "https:" ? ke.default : se.default).request, o2 = t2.signal;
      let r2 = null;
      const m2 = function() {
        let e3 = new rP("The user aborted a request.");
        a2(e3), t2.body && t2.body instanceof me.default.Readable && kP(t2.body, e3), r2 && r2.body && r2.body.emit("error", e3);
      };
      if (o2 && o2.aborted)
        return void m2();
      const s2 = function() {
        m2(), v2();
      }, u2 = l2(d2);
      let k2;
      function v2() {
        u2.abort(), o2 && o2.removeEventListener("abort", s2), clearTimeout(k2);
      }
      o2 && o2.addEventListener("abort", s2), t2.timeout && u2.once("socket", function(e3) {
        k2 = setTimeout(function() {
          a2(new TC(`network timeout at: ${t2.url}`, "request-timeout")), v2();
        }, t2.timeout);
      }), u2.on("error", function(e3) {
        a2(new TC(`request to ${t2.url} failed, reason: ${e3.message}`, "system", e3)), r2 && r2.body && kP(r2.body, e3), v2();
      }), function(e3, i3) {
        let n3;
        e3.on("socket", function(e4) {
          n3 = e4;
        }), e3.on("response", function(e4) {
          const a3 = e4.headers;
          a3["transfer-encoding"] !== "chunked" || a3["content-length"] || e4.once("close", function(e5) {
            if (n3 && n3.listenerCount("data") > 0 && !e5) {
              const e6 = new Error("Premature close");
              e6.code = "ERR_STREAM_PREMATURE_CLOSE", i3(e6);
            }
          });
        });
      }(u2, function(e3) {
        o2 && o2.aborted || r2 && r2.body && kP(r2.body, e3);
      }), parseInt(process.version.substring(1)) < 14 && u2.on("socket", function(e3) {
        e3.addListener("close", function(i3) {
          const n3 = e3.listenerCount("data") > 0;
          if (r2 && n3 && !i3 && (!o2 || !o2.aborted)) {
            const e4 = new Error("Premature close");
            e4.code = "ERR_STREAM_PREMATURE_CLOSE", r2.body.emit("error", e4);
          }
        });
      }), u2.on("response", function(e3) {
        clearTimeout(k2);
        const i3 = function(e4) {
          const i4 = new HC;
          for (const n3 of Object.keys(e4))
            if (!RC.test(n3))
              if (Array.isArray(e4[n3]))
                for (const a3 of e4[n3])
                  EC.test(a3) || (i4[WC][n3] === undefined ? i4[WC][n3] = [a3] : i4[WC][n3].push(a3));
              else
                EC.test(e4[n3]) || (i4[WC][n3] = [e4[n3]]);
          return i4;
        }(e3.headers);
        if (uP.isRedirect(e3.statusCode)) {
          const l4 = i3.get("Location");
          let o3 = null;
          try {
            o3 = l4 === null ? null : new mP(l4, t2.url).toString();
          } catch (e4) {
            if (t2.redirect !== "manual")
              return a2(new TC(`uri requested responds with an invalid redirect URL: ${l4}`, "invalid-redirect")), void v2();
          }
          switch (t2.redirect) {
            case "error":
              return a2(new TC(`uri requested responds with a redirect, redirect mode is set to error: ${t2.url}`, "no-redirect")), void v2();
            case "manual":
              if (o3 !== null)
                try {
                  i3.set("Location", o3);
                } catch (e4) {
                  a2(e4);
                }
              break;
            case "follow":
              if (o3 === null)
                break;
              if (t2.counter >= t2.follow)
                return a2(new TC(`maximum redirect reached at: ${t2.url}`, "max-redirect")), void v2();
              const l5 = { headers: new HC(t2.headers), follow: t2.follow, counter: t2.counter + 1, agent: t2.agent, compress: t2.compress, method: t2.method, body: t2.body, signal: t2.signal, timeout: t2.timeout, size: t2.size };
              if (!function(e4, i4) {
                const n3 = new mP(i4).hostname, a3 = new mP(e4).hostname;
                return n3 === a3 || n3[n3.length - a3.length - 1] === "." && n3.endsWith(a3);
              }(t2.url, o3) || (d3 = t2.url, new mP(o3).protocol !== new mP(d3).protocol))
                for (const e4 of ["authorization", "www-authenticate", "cookie", "cookie2"])
                  l5.headers.delete(e4);
              return e3.statusCode !== 303 && t2.body && BC(t2) === null ? (a2(new TC("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), void v2()) : (e3.statusCode !== 303 && (e3.statusCode !== 301 && e3.statusCode !== 302 || t2.method !== "POST") || (l5.method = "GET", l5.body = undefined, l5.headers.delete("content-length")), n2(uP(new oP(o3, l5))), void v2());
          }
        }
        var d3;
        e3.once("end", function() {
          o2 && o2.removeEventListener("abort", s2);
        });
        let l3 = e3.pipe(new sP);
        const m3 = { url: t2.url, status: e3.statusCode, statusText: e3.statusMessage, headers: i3, size: t2.size, timeout: t2.timeout, counter: t2.counter }, u3 = i3.get("Content-Encoding");
        if (!t2.compress || t2.method === "HEAD" || u3 === null || e3.statusCode === 204 || e3.statusCode === 304)
          return r2 = new XC(l3, m3), void n2(r2);
        const c2 = { flush: ve.default.Z_SYNC_FLUSH, finishFlush: ve.default.Z_SYNC_FLUSH };
        if (u3 == "gzip" || u3 == "x-gzip")
          return l3 = l3.pipe(ve.default.createGunzip(c2)), r2 = new XC(l3, m3), void n2(r2);
        if (u3 == "deflate" || u3 == "x-deflate") {
          const i4 = e3.pipe(new sP);
          return i4.once("data", function(e4) {
            l3 = (15 & e4[0]) == 8 ? l3.pipe(ve.default.createInflate()) : l3.pipe(ve.default.createInflateRaw()), r2 = new XC(l3, m3), n2(r2);
          }), void i4.on("end", function() {
            r2 || (r2 = new XC(l3, m3), n2(r2));
          });
        }
        if (u3 == "br" && typeof ve.default.createBrotliDecompress == "function")
          return l3 = l3.pipe(ve.default.createBrotliDecompress()), r2 = new XC(l3, m3), void n2(r2);
        r2 = new XC(l3, m3), n2(r2);
      }), function(e3, i3) {
        const n3 = i3.body;
        n3 === null ? e3.end() : jC(n3) ? n3.stream().pipe(e3) : Buffer.isBuffer(n3) ? (e3.write(n3), e3.end()) : n3.pipe(e3);
      }(u2, t2);
    });
  }
  function kP(e2, i2) {
    e2.destroy ? e2.destroy(i2) : (e2.emit("error", i2), e2.end());
  }
  uP.isRedirect = function(e2) {
    return e2 === 301 || e2 === 302 || e2 === 303 || e2 === 307 || e2 === 308;
  }, uP.Promise = global.Promise;
  var vP = Object.freeze({ __proto__: null, default: uP, Headers: HC, Request: oP, Response: XC, FetchError: TC, AbortError: rP });
  var cP = Rw(Mw);
  var pP = Rw(vP);
  function NP(e2) {
    return e2 && e2.default || e2;
  }
  var hP = Bw.fetch = Bw.fetch || (typeof process == "undefined" ? NP(cP) : function(e2, i2) {
    return NP(pP)(String(e2).replace(/^\/\//g, "https://"), i2);
  });

  class fP extends Error {
    constructor(e2, i2) {
      super(`${fP.extractMessage(e2)}: ${JSON.stringify({ response: e2, request: i2 })}`), Object.setPrototypeOf(this, fP.prototype), this.response = e2, this.request = i2, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, fP);
    }
    static extractMessage(e2) {
      var i2, n2, a2;
      try {
        return (a2 = (n2 = (i2 = e2.errors) === null || i2 === undefined ? undefined : i2[0]) === null || n2 === undefined ? undefined : n2.message) !== null && a2 !== undefined ? a2 : `GraphQL Error (Code: ${e2.status})`;
      } catch (i3) {
        return `GraphQL Error (Code: ${e2.status})`;
      }
    }
  }

  class yP {
    constructor(e2, i2) {
      this.url = e2, this.options = i2 || {};
    }
    rawRequest(e2, i2, n2) {
      var a2;
      return Tp(this, undefined, undefined, function* () {
        const t2 = this.options, { headers: d2 } = t2, l2 = Ap(t2, ["headers"]), o2 = JSON.stringify({ query: e2, variables: i2 }), r2 = (a2 = globalThis.fetch) !== null && a2 !== undefined ? a2 : hP, m2 = yield r2(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, typeof o2 == "string" ? { "Content-Type": "application/json" } : {}), bP(d2)), bP(n2)), body: o2 }, l2)), s2 = yield SP(m2);
        if (typeof s2 != "string" && m2.ok && !s2.errors && s2.data)
          return Object.assign(Object.assign({}, s2), { headers: m2.headers, status: m2.status });
        throw yw(new fP(Object.assign(Object.assign({}, typeof s2 == "string" ? { error: s2 } : s2), { status: m2.status, headers: m2.headers }), { query: e2, variables: i2 }));
      });
    }
    request(e2, i2, n2) {
      return Tp(this, undefined, undefined, function* () {
        const a2 = this.options, { headers: t2 } = a2, d2 = Ap(a2, ["headers"]), l2 = typeof e2 == "string" ? e2 : Iw(e2), o2 = JSON.stringify({ query: l2, variables: i2 }), r2 = yield hP(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, typeof o2 == "string" ? { "Content-Type": "application/json" } : {}), bP(t2)), bP(n2)), body: o2 }, d2)), m2 = yield SP(r2);
        if (typeof m2 != "string" && r2.ok && !m2.errors && m2.data)
          return m2.data;
        throw new fP(Object.assign(Object.assign({}, typeof m2 == "string" ? { error: m2 } : m2), { status: r2.status, headers: r2.headers }), { query: l2, variables: i2 });
      });
    }
    setHeaders(e2) {
      return this.options.headers = e2, this;
    }
    setHeader(e2, i2) {
      const { headers: n2 } = this.options;
      return n2 ? n2[e2] = i2 : this.options.headers = { [e2]: i2 }, this;
    }
  }
  function SP(e2) {
    const i2 = e2.headers.get("Content-Type");
    return i2 && i2.startsWith("application/json") ? e2.json() : e2.text();
  }
  function bP(e2) {
    let i2 = {};
    return e2 && (typeof Headers != "undefined" && e2 instanceof Headers ? i2 = function(e3) {
      const i3 = {};
      return e3.forEach((e4, n2) => {
        i3[n2] = e4;
      }), i3;
    }(e2) : Array.isArray(e2) ? e2.forEach(([e3, n2]) => {
      i2[e3] = n2;
    }) : i2 = e2), i2;
  }
  exports.ActorBot = jp, exports.AdministrableTeamsQuery = yb, exports.AgentActivitiesQuery = Sb, exports.AgentActivity = Up, exports.AgentActivityActionContent = class extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.action = i2.action, this.parameter = i2.parameter, this.result = (n2 = i2.result) !== null && n2 !== undefined ? n2 : undefined, this.type = i2.type;
    }
  }, exports.AgentActivityConnection = Op, exports.AgentActivityElicitationContent = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.body = i2.body, this.type = i2.type;
    }
  }, exports.AgentActivityErrorContent = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.body = i2.body, this.type = i2.type;
    }
  }, exports.AgentActivityPayload = Bp, exports.AgentActivityPromptContent = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.body = i2.body, this.type = i2.type;
    }
  }, exports.AgentActivityQuery = bb, exports.AgentActivityResponseContent = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.body = i2.body, this.type = i2.type;
    }
  }, exports.AgentActivityThoughtContent = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.body = i2.body, this.type = i2.type;
    }
  }, exports.AgentActivityWebhookPayload = Rp, exports.AgentContext = Ep, exports.AgentContextConnection = Mp, exports.AgentContextPayload = Lp, exports.AgentContextQuery = gb, exports.AgentContextWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2;
      this.appUserId = e2.appUserId, this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.commentId = (n2 = e2.commentId) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.creatorId = e2.creatorId, this.endedAt = (a2 = e2.endedAt) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = (t2 = e2.issueId) !== null && t2 !== undefined ? t2 : undefined, this.organizationId = e2.organizationId, this.sourceMetadata = (d2 = e2.sourceMetadata) !== null && d2 !== undefined ? d2 : undefined, this.startedAt = (l2 = e2.startedAt) !== null && l2 !== undefined ? l2 : undefined, this.status = e2.status, this.summary = (o2 = e2.summary) !== null && o2 !== undefined ? o2 : undefined, this.type = e2.type, this.updatedAt = e2.updatedAt, this.comment = e2.comment ? new sN(e2.comment) : undefined, this.creator = new eb(e2.creator), this.issue = e2.issue ? new Qf(e2.issue) : undefined;
    }
  }, exports.AgentContextsQuery = Fb, exports.AgentSession = zp, exports.AgentSessionConnection = Wp, exports.AgentSessionEventWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.action = e2.action, this.appUserId = e2.appUserId, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.oauthClientId = e2.oauthClientId, this.organizationId = e2.organizationId, this.type = e2.type, this.agentActivity = e2.agentActivity ? new Rp(e2.agentActivity) : undefined, this.agentSession = new Qp(e2.agentSession);
    }
  }, exports.AgentSessionPayload = Hp, exports.AgentSessionQuery = Db, exports.AgentSessionUpdateExternalUrlMutation = BF, exports.AgentSessionWebhookPayload = Qp, exports.AgentSession_ActivitiesQuery = UT, exports.AgentSessionsQuery = _b, exports.AirbyteIntegrationConnectMutation = RF, exports.ApiKey = Gp, exports.ApiKeyConnection = Jp, exports.ApiKeyPayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.apiKey = new Gp(e2, i2.apiKey);
    }
  }, exports.ApiKeysQuery = Vb, exports.AppUserNotificationWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.action = e2.action, this.appUserId = e2.appUserId, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.oauthClientId = e2.oauthClientId, this.organizationId = e2.organizationId, this.type = e2.type;
    }
  }, exports.AppUserTeamAccessChangedWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.action = e2.action, this.addedTeamIds = e2.addedTeamIds, this.appUserId = e2.appUserId, this.canAccessAllPublicTeams = e2.canAccessAllPublicTeams, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.oauthClientId = e2.oauthClientId, this.organizationId = e2.organizationId, this.removedTeamIds = e2.removedTeamIds, this.type = e2.type;
    }
  }, exports.Application = Kp, exports.ApplicationInfoQuery = Ab, exports.ApplicationWithAuthorizationQuery = Tb, exports.ArchiveCustomerNeedMutation = hD, exports.ArchiveCycleMutation = CD, exports.ArchiveInitiativeMutation = u_, exports.ArchiveInitiativeUpdateMutation = g_, exports.ArchiveIntegrationMutation = V_, exports.ArchiveIssueMutation = mV, exports.ArchiveNotificationMutation = EV, exports.ArchivePayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
    }
  }, exports.ArchiveProjectMutation = mA, exports.ArchiveProjectStatusMutation = gA, exports.ArchiveProjectUpdateMutation = TA, exports.ArchiveResponse = $p, exports.ArchiveRoadmapMutation = EA, exports.ArchiveWorkflowStateMutation = qT, exports.AsksChannelConnectPayload = Zp, exports.Attachment = Yp, exports.AttachmentConnection = Xp, exports.AttachmentIssueQuery = wb, exports.AttachmentIssue_AttachmentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Bd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.attachments;
        return new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_BotActorQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Rd, { id: this._id })).attachmentIssue.botActor;
        return e2 ? new jp(this._request, e2) : undefined;
      });
    }
  }, exports.AttachmentIssue_ChildrenQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ed, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.children;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_CommentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Md, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.comments;
        return new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_FormerAttachmentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ld, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.formerAttachments;
        return new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_FormerNeedsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(zd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.formerNeeds;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_HistoryQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Wd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.history;
        return new gf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_InverseRelationsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Hd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.inverseRelations;
        return new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_LabelsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Qd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.labels;
        return new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_NeedsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Gd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.needs;
        return new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_RelationsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Jd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.relations;
        return new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentIssue_SubscribersQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._id = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Kd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).attachmentIssue.subscribers;
        return new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.AttachmentLinkDiscordMutation = LF, exports.AttachmentLinkFrontMutation = zF, exports.AttachmentLinkGitHubIssueMutation = WF, exports.AttachmentLinkGitHubPrMutation = HF, exports.AttachmentLinkGitLabMrMutation = QF, exports.AttachmentLinkIntercomMutation = GF, exports.AttachmentLinkJiraIssueMutation = JF, exports.AttachmentLinkSalesforceMutation = KF, exports.AttachmentLinkSlackMutation = $F, exports.AttachmentLinkUrlMutation = ZF, exports.AttachmentLinkZendeskMutation = YF, exports.AttachmentPayload = eN, exports.AttachmentQuery = Ib, exports.AttachmentSourcesPayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.sources = i2.sources;
    }
  }, exports.AttachmentSyncToSlackMutation = XF, exports.AttachmentWebhookPayload = iN, exports.AttachmentsForUrlQuery = Pb, exports.AttachmentsQuery = Cb, exports.AuditEntriesQuery = qb, exports.AuditEntry = nN, exports.AuditEntryConnection = aN, exports.AuditEntryType = tN, exports.AuditEntryTypesQuery = xb, exports.AuditEntryWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.countryCode = (a2 = e2.countryCode) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = e2.createdAt, this.id = e2.id, this.ip = (t2 = e2.ip) !== null && t2 !== undefined ? t2 : undefined, this.metadata = (d2 = e2.metadata) !== null && d2 !== undefined ? d2 : undefined, this.organizationId = e2.organizationId, this.requestInformation = (l2 = e2.requestInformation) !== null && l2 !== undefined ? l2 : undefined, this.type = e2.type, this.updatedAt = e2.updatedAt;
    }
  }, exports.AuthOrganization = dN, exports.AuthResolverResponse = lN, exports.AuthUser = oN, exports.AuthenticationLinearError = rw, exports.AuthenticationSessionResponse = rN, exports.AuthenticationSessionsQuery = jb, exports.AuthorizingUser = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.displayName = i2.displayName, this.name = i2.name;
    }
  }, exports.AvailableUsersQuery = Ub, exports.BaseWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.organizationId = e2.organizationId;
    }
  }, exports.BootstrapLinearError = sw, exports.Comment = mN, exports.CommentChildWebhookPayload = sN, exports.CommentConnection = uN, exports.CommentPayload = kN, exports.CommentQuery = Ob, exports.CommentResolveMutation = aD, exports.CommentUnresolveMutation = tD, exports.CommentWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.body = e2.body, this.botActor = (n2 = e2.botActor) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.documentContentId = (a2 = e2.documentContentId) !== null && a2 !== undefined ? a2 : undefined, this.editedAt = (t2 = e2.editedAt) !== null && t2 !== undefined ? t2 : undefined, this.externalUserId = (d2 = e2.externalUserId) !== null && d2 !== undefined ? d2 : undefined, this.id = e2.id, this.initiativeUpdateId = (l2 = e2.initiativeUpdateId) !== null && l2 !== undefined ? l2 : undefined, this.issueId = (o2 = e2.issueId) !== null && o2 !== undefined ? o2 : undefined, this.parentId = (r2 = e2.parentId) !== null && r2 !== undefined ? r2 : undefined, this.postId = (m2 = e2.postId) !== null && m2 !== undefined ? m2 : undefined, this.projectUpdateId = (s2 = e2.projectUpdateId) !== null && s2 !== undefined ? s2 : undefined, this.quotedText = (u2 = e2.quotedText) !== null && u2 !== undefined ? u2 : undefined, this.reactionData = e2.reactionData, this.resolvedAt = (k2 = e2.resolvedAt) !== null && k2 !== undefined ? k2 : undefined, this.resolvingCommentId = (v2 = e2.resolvingCommentId) !== null && v2 !== undefined ? v2 : undefined, this.resolvingUserId = (c2 = e2.resolvingUserId) !== null && c2 !== undefined ? c2 : undefined, this.syncedWith = (p2 = e2.syncedWith) !== null && p2 !== undefined ? p2 : undefined, this.updatedAt = e2.updatedAt, this.userId = (N2 = e2.userId) !== null && N2 !== undefined ? N2 : undefined, this.documentContent = e2.documentContent ? new XN(e2.documentContent) : undefined, this.externalUser = e2.externalUser ? new Sh(e2.externalUser) : undefined, this.initiativeUpdate = e2.initiativeUpdate ? new ef(e2.initiativeUpdate) : undefined, this.issue = e2.issue ? new ff(e2.issue) : undefined, this.parent = e2.parent ? new sN(e2.parent) : undefined, this.projectUpdate = e2.projectUpdate ? new iS(e2.projectUpdate) : undefined, this.user = e2.user ? new eb(e2.user) : undefined;
    }
  }, exports.Comment_BotActorQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(al, e2)).comment.botActor;
        return i2 ? new jp(this._request, i2) : undefined;
      });
    }
  }, exports.Comment_ChildrenQuery = OT, exports.Comment_DocumentContentQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(dl, e2)).comment.documentContent;
        return i2 ? new YN(this._request, i2) : undefined;
      });
    }
  }, exports.Comment_ExternalThreadQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ll, e2)).comment.externalThread;
        return i2 ? new AS(this._request, i2) : undefined;
      });
    }
  }, exports.CommentsQuery = Bb, exports.Connection = Pp, exports.ContactPayload = vN, exports.CreateAgentActivityMutation = jF, exports.CreateAgentContextMutation = UF, exports.CreateAttachmentMutation = EF, exports.CreateCommentMutation = iD, exports.CreateContactMutation = lD, exports.CreateCsvExportReportMutation = oD, exports.CreateCsvExportReportPayload = cN, exports.CreateCustomViewMutation = uD, exports.CreateCustomerMutation = cD, exports.CreateCustomerNeedMutation = fD, exports.CreateCustomerStatusMutation = FD, exports.CreateCustomerTierMutation = VD, exports.CreateCycleMutation = PD, exports.CreateDocumentMutation = UD, exports.CreateEmailIntakeAddressMutation = ED, exports.CreateEmojiMutation = GD, exports.CreateEntityExternalLinkMutation = KD, exports.CreateFavoriteMutation = YD, exports.CreateGitAutomationStateMutation = n_, exports.CreateGitAutomationTargetBranchMutation = d_, exports.CreateInitiativeMutation = k_, exports.CreateInitiativeRelationMutation = c_, exports.CreateInitiativeToProjectMutation = h_, exports.CreateInitiativeUpdateMutation = F_, exports.CreateInitiativeUpdateReminderMutation = rD, exports.CreateIntegrationGithubCommitMutation = x_, exports.CreateIntegrationTemplateMutation = aV, exports.CreateIntegrationsSettingsMutation = lV, exports.CreateIssueBatchMutation = sV, exports.CreateIssueLabelMutation = gV, exports.CreateIssueMutation = kV, exports.CreateIssueRelationMutation = _V, exports.CreateNotificationSubscriptionMutation = QV, exports.CreateOrJoinOrganizationResponse = pN, exports.CreateOrganizationFromOnboardingMutation = mD, exports.CreateOrganizationInviteMutation = nA, exports.CreateProjectLabelMutation = kA, exports.CreateProjectMilestoneMutation = pA, exports.CreateProjectMutation = sA, exports.CreateProjectRelationMutation = fA, exports.CreateProjectStatusMutation = FA, exports.CreateProjectUpdateMutation = IA, exports.CreateProjectUpdateReminderMutation = sD, exports.CreatePushSubscriptionMutation = qA, exports.CreateReactionMutation = jA, exports.CreateRoadmapMutation = MA, exports.CreateRoadmapToProjectMutation = zA, exports.CreateTeamMembershipMutation = XA, exports.CreateTeamMutation = KA, exports.CreateTemplateMutation = tT, exports.CreateTimeScheduleMutation = oT, exports.CreateTriageResponsibilityMutation = kT, exports.CreateViewPreferencesMutation = AT, exports.CreateWebhookMutation = wT, exports.CreateWorkflowStateMutation = xT, exports.CustomResourceWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.action = e2.action, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.organizationId = e2.organizationId, this.type = e2.type;
    }
  }, exports.CustomView = NN, exports.CustomViewConnection = hN, exports.CustomViewHasSubscribersPayload = fN, exports.CustomViewHasSubscribersQuery = Eb, exports.CustomViewNotificationSubscription = yN, exports.CustomViewPayload = SN, exports.CustomViewQuery = Rb, exports.CustomViewSuggestionPayload = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.description = (n2 = i2.description) !== null && n2 !== undefined ? n2 : undefined, this.icon = (a2 = i2.icon) !== null && a2 !== undefined ? a2 : undefined, this.name = (t2 = i2.name) !== null && t2 !== undefined ? t2 : undefined;
    }
  }, exports.CustomView_IssuesQuery = BT, exports.CustomView_OrganizationViewPreferencesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(sl, { id: this._id })).customView.organizationViewPreferences;
        return e2 ? new rb(this._request, e2) : undefined;
      });
    }
  }, exports.CustomView_OrganizationViewPreferences_PreferencesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      var e2;
      return Tp(this, undefined, undefined, function* () {
        const i2 = yield this._request(ul, { id: this._id }), n2 = (e2 = i2.customView.organizationViewPreferences) === null || e2 === undefined ? undefined : e2.preferences;
        return n2 ? new sb(this._request, n2) : undefined;
      });
    }
  }, exports.CustomView_ProjectsQuery = RT, exports.CustomView_UserViewPreferencesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(vl, { id: this._id })).customView.userViewPreferences;
        return e2 ? new rb(this._request, e2) : undefined;
      });
    }
  }, exports.CustomView_UserViewPreferences_PreferencesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      var e2;
      return Tp(this, undefined, undefined, function* () {
        const i2 = yield this._request(cl, { id: this._id }), n2 = (e2 = i2.customView.userViewPreferences) === null || e2 === undefined ? undefined : e2.preferences;
        return n2 ? new sb(this._request, n2) : undefined;
      });
    }
  }, exports.CustomView_ViewPreferencesValuesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(pl, { id: this._id })).customView.viewPreferencesValues;
        return e2 ? new sb(this._request, e2) : undefined;
      });
    }
  }, exports.CustomViewsQuery = Mb, exports.Customer = bN, exports.CustomerChildWebhookPayload = gN, exports.CustomerConnection = FN, exports.CustomerMergeMutation = ND, exports.CustomerNeed = DN, exports.CustomerNeedArchivePayload = _N, exports.CustomerNeedChildWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2;
      this.attachmentId = (i2 = e2.attachmentId) !== null && i2 !== undefined ? i2 : undefined, this.customerId = (n2 = e2.customerId) !== null && n2 !== undefined ? n2 : undefined, this.id = e2.id, this.issueId = (a2 = e2.issueId) !== null && a2 !== undefined ? a2 : undefined, this.projectId = (t2 = e2.projectId) !== null && t2 !== undefined ? t2 : undefined;
    }
  }, exports.CustomerNeedConnection = VN, exports.CustomerNeedCreateFromAttachmentMutation = yD, exports.CustomerNeedNotification = AN, exports.CustomerNeedPayload = TN, exports.CustomerNeedQuery = zb, exports.CustomerNeedUpdatePayload = IN, exports.CustomerNeedWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.attachmentId = (n2 = e2.attachmentId) !== null && n2 !== undefined ? n2 : undefined, this.body = (a2 = e2.body) !== null && a2 !== undefined ? a2 : undefined, this.commentId = (t2 = e2.commentId) !== null && t2 !== undefined ? t2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (d2 = e2.creatorId) !== null && d2 !== undefined ? d2 : undefined, this.customerId = (l2 = e2.customerId) !== null && l2 !== undefined ? l2 : undefined, this.id = e2.id, this.issueId = (o2 = e2.issueId) !== null && o2 !== undefined ? o2 : undefined, this.originalIssueId = (r2 = e2.originalIssueId) !== null && r2 !== undefined ? r2 : undefined, this.priority = e2.priority, this.projectAttachmentId = (m2 = e2.projectAttachmentId) !== null && m2 !== undefined ? m2 : undefined, this.projectId = (s2 = e2.projectId) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = e2.updatedAt, this.attachment = e2.attachment ? new iN(e2.attachment) : undefined, this.customer = e2.customer ? new gN(e2.customer) : undefined, this.issue = e2.issue ? new ff(e2.issue) : undefined, this.project = e2.project ? new Vy(e2.project) : undefined;
    }
  }, exports.CustomerNeedsQuery = Wb, exports.CustomerNotification = wN, exports.CustomerNotificationSubscription = CN, exports.CustomerPayload = PN, exports.CustomerQuery = Lb, exports.CustomerStatus = qN, exports.CustomerStatusChildWebhookPayload = xN, exports.CustomerStatusConnection = jN, exports.CustomerStatusPayload = UN, exports.CustomerStatusQuery = Hb, exports.CustomerStatusesQuery = Qb, exports.CustomerTier = ON, exports.CustomerTierChildWebhookPayload = BN, exports.CustomerTierConnection = RN, exports.CustomerTierPayload = EN, exports.CustomerTierQuery = Gb, exports.CustomerTiersQuery = Jb, exports.CustomerUpsertMutation = wD, exports.CustomerWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2;
      this.approximateNeedCount = e2.approximateNeedCount, this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.createdAt = e2.createdAt, this.domains = e2.domains, this.externalIds = e2.externalIds, this.id = e2.id, this.logoUrl = (n2 = e2.logoUrl) !== null && n2 !== undefined ? n2 : undefined, this.mainSourceId = (a2 = e2.mainSourceId) !== null && a2 !== undefined ? a2 : undefined, this.name = e2.name, this.ownerId = (t2 = e2.ownerId) !== null && t2 !== undefined ? t2 : undefined, this.revenue = (d2 = e2.revenue) !== null && d2 !== undefined ? d2 : undefined, this.size = (l2 = e2.size) !== null && l2 !== undefined ? l2 : undefined, this.slackChannelId = (o2 = e2.slackChannelId) !== null && o2 !== undefined ? o2 : undefined, this.slugId = e2.slugId, this.statusId = (r2 = e2.statusId) !== null && r2 !== undefined ? r2 : undefined, this.tierId = (m2 = e2.tierId) !== null && m2 !== undefined ? m2 : undefined, this.updatedAt = e2.updatedAt, this.status = e2.status ? new xN(e2.status) : undefined, this.tier = e2.tier ? new BN(e2.tier) : undefined;
    }
  }, exports.CustomersQuery = Kb, exports.Cycle = MN, exports.CycleArchivePayload = LN, exports.CycleChildWebhookPayload = zN, exports.CycleConnection = WN, exports.CycleNotificationSubscription = HN, exports.CyclePayload = QN, exports.CycleQuery = $b, exports.CycleShiftAllMutation = qD, exports.CycleStartUpcomingCycleTodayMutation = xD, exports.CycleWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.autoArchivedAt = (n2 = e2.autoArchivedAt) !== null && n2 !== undefined ? n2 : undefined, this.completedAt = (a2 = e2.completedAt) !== null && a2 !== undefined ? a2 : undefined, this.completedIssueCountHistory = e2.completedIssueCountHistory, this.completedScopeHistory = e2.completedScopeHistory, this.createdAt = e2.createdAt, this.description = (t2 = e2.description) !== null && t2 !== undefined ? t2 : undefined, this.endsAt = e2.endsAt, this.id = e2.id, this.inProgressScopeHistory = e2.inProgressScopeHistory, this.inheritedFromId = (d2 = e2.inheritedFromId) !== null && d2 !== undefined ? d2 : undefined, this.issueCountHistory = e2.issueCountHistory, this.name = (l2 = e2.name) !== null && l2 !== undefined ? l2 : undefined, this.number = e2.number, this.scopeHistory = e2.scopeHistory, this.startsAt = e2.startsAt, this.teamId = e2.teamId, this.uncompletedIssuesUponCloseIds = e2.uncompletedIssuesUponCloseIds, this.updatedAt = e2.updatedAt;
    }
  }, exports.Cycle_IssuesQuery = ET, exports.Cycle_UncompletedIssuesUponCloseQuery = MT, exports.CyclesQuery = Zb, exports.DeleteAttachmentMutation = MF, exports.DeleteCommentMutation = nD, exports.DeleteCustomViewMutation = kD, exports.DeleteCustomerMutation = pD, exports.DeleteCustomerNeedMutation = SD, exports.DeleteCustomerStatusMutation = DD, exports.DeleteCustomerTierMutation = AD, exports.DeleteDocumentMutation = OD, exports.DeleteEmailIntakeAddressMutation = MD, exports.DeleteEmojiMutation = JD, exports.DeleteEntityExternalLinkMutation = $D, exports.DeleteFavoriteMutation = XD, exports.DeleteGitAutomationStateMutation = a_, exports.DeleteGitAutomationTargetBranchMutation = l_, exports.DeleteInitiativeMutation = v_, exports.DeleteInitiativeRelationMutation = p_, exports.DeleteInitiativeToProjectMutation = f_, exports.DeleteIntegrationIntercomMutation = M_, exports.DeleteIntegrationMutation = T_, exports.DeleteIntegrationTemplateMutation = tV, exports.DeleteIssueImportMutation = yV, exports.DeleteIssueLabelMutation = FV, exports.DeleteIssueMutation = vV, exports.DeleteIssueRelationMutation = VV, exports.DeleteNotificationSubscriptionMutation = GV, exports.DeleteOrganizationCancelMutation = YV, exports.DeleteOrganizationDomainMutation = iA, exports.DeleteOrganizationInviteMutation = aA, exports.DeleteOrganizationMutation = XV, exports.DeletePayload = GN, exports.DeleteProjectLabelMutation = vA, exports.DeleteProjectMilestoneMutation = NA, exports.DeleteProjectMutation = uA, exports.DeleteProjectRelationMutation = yA, exports.DeleteProjectUpdateMutation = wA, exports.DeletePushSubscriptionMutation = xA, exports.DeleteReactionMutation = UA, exports.DeleteRoadmapMutation = LA, exports.DeleteRoadmapToProjectMutation = WA, exports.DeleteTeamCyclesMutation = $A, exports.DeleteTeamKeyMutation = YA, exports.DeleteTeamMembershipMutation = eT, exports.DeleteTeamMutation = ZA, exports.DeleteTemplateMutation = dT, exports.DeleteTimeScheduleMutation = rT, exports.DeleteTriageResponsibilityMutation = vT, exports.DeleteViewPreferencesMutation = TT, exports.DeleteWebhookMutation = CT, exports.Document = JN, exports.DocumentArchivePayload = KN, exports.DocumentChildWebhookPayload = $N, exports.DocumentConnection = ZN, exports.DocumentContent = YN, exports.DocumentContentChildWebhookPayload = XN, exports.DocumentContentHistoryPayload = eh, exports.DocumentContentHistoryQuery = Xb, exports.DocumentContentHistoryType = ih, exports.DocumentNotification = nh, exports.DocumentPayload = ah, exports.DocumentQuery = Yb, exports.DocumentSearchPayload = th, exports.DocumentSearchResult = dh, exports.DocumentWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.color = (n2 = e2.color) !== null && n2 !== undefined ? n2 : undefined, this.content = (a2 = e2.content) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (t2 = e2.creatorId) !== null && t2 !== undefined ? t2 : undefined, this.description = (d2 = e2.description) !== null && d2 !== undefined ? d2 : undefined, this.hiddenAt = (l2 = e2.hiddenAt) !== null && l2 !== undefined ? l2 : undefined, this.icon = (o2 = e2.icon) !== null && o2 !== undefined ? o2 : undefined, this.id = e2.id, this.initiativeId = (r2 = e2.initiativeId) !== null && r2 !== undefined ? r2 : undefined, this.lastAppliedTemplateId = (m2 = e2.lastAppliedTemplateId) !== null && m2 !== undefined ? m2 : undefined, this.projectId = (s2 = e2.projectId) !== null && s2 !== undefined ? s2 : undefined, this.resourceFolderId = (u2 = e2.resourceFolderId) !== null && u2 !== undefined ? u2 : undefined, this.slugId = e2.slugId, this.sortOrder = e2.sortOrder, this.subscriberIds = (k2 = e2.subscriberIds) !== null && k2 !== undefined ? k2 : undefined, this.title = e2.title, this.trashed = (v2 = e2.trashed) !== null && v2 !== undefined ? v2 : undefined, this.updatedAt = e2.updatedAt, this.updatedById = (c2 = e2.updatedById) !== null && c2 !== undefined ? c2 : undefined;
    }
  }, exports.Document_CommentsQuery = LT, exports.DocumentsQuery = eg, exports.Draft = lh, exports.DraftConnection = oh, exports.EmailIntakeAddress = rh, exports.EmailIntakeAddressPayload = mh, exports.EmailIntakeAddressQuery = ig, exports.EmailIntakeAddressRotateMutation = LD, exports.EmailIntakeAddress_SesDomainIdentityQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(jl, { id: this._id })).emailIntakeAddress.sesDomainIdentity;
        return e2 ? new SS(this._request, e2) : undefined;
      });
    }
  }, exports.EmailTokenUserAccountAuthMutation = WD, exports.EmailUnsubscribeMutation = HD, exports.EmailUnsubscribePayload = sh, exports.EmailUserAccountAuthChallengeMutation = QD, exports.EmailUserAccountAuthChallengeResponse = uh, exports.Emoji = kh, exports.EmojiConnection = vh, exports.EmojiPayload = ch, exports.EmojiQuery = ng, exports.EmojisQuery = ag, exports.Entity = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date;
    }
  }, exports.EntityExternalLink = ph, exports.EntityExternalLinkConnection = Nh, exports.EntityExternalLinkPayload = hh, exports.EntityExternalLinkQuery = tg, exports.EntityWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.action = e2.action, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.organizationId = e2.organizationId, this.type = e2.type, this.updatedFrom = (n2 = e2.updatedFrom) !== null && n2 !== undefined ? n2 : undefined, this.url = (a2 = e2.url) !== null && a2 !== undefined ? a2 : undefined;
    }
  }, exports.ExternalEntityInfo = fh, exports.ExternalEntityInfoGithubMetadata = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.number = (n2 = i2.number) !== null && n2 !== undefined ? n2 : undefined, this.owner = (a2 = i2.owner) !== null && a2 !== undefined ? a2 : undefined, this.repo = (t2 = i2.repo) !== null && t2 !== undefined ? t2 : undefined;
    }
  }, exports.ExternalEntityInfoJiraMetadata = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.issueKey = (n2 = i2.issueKey) !== null && n2 !== undefined ? n2 : undefined, this.issueTypeId = (a2 = i2.issueTypeId) !== null && a2 !== undefined ? a2 : undefined, this.projectId = (t2 = i2.projectId) !== null && t2 !== undefined ? t2 : undefined;
    }
  }, exports.ExternalEntitySlackMetadata = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.channelId = (n2 = i2.channelId) !== null && n2 !== undefined ? n2 : undefined, this.channelName = (a2 = i2.channelName) !== null && a2 !== undefined ? a2 : undefined, this.isFromSlack = i2.isFromSlack, this.messageUrl = (t2 = i2.messageUrl) !== null && t2 !== undefined ? t2 : undefined;
    }
  }, exports.ExternalUser = yh, exports.ExternalUserChildWebhookPayload = Sh, exports.ExternalUserConnection = bh, exports.ExternalUserQuery = dg, exports.ExternalUsersQuery = lg, exports.Facet = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2, m2, s2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = (a2 = qp(i2.createdAt)) !== null && a2 !== undefined ? a2 : new Date, this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = (t2 = qp(i2.updatedAt)) !== null && t2 !== undefined ? t2 : new Date, this.sourcePage = (d2 = i2.sourcePage) !== null && d2 !== undefined ? d2 : undefined, this._sourceFeedUser = (l2 = i2.sourceFeedUser) !== null && l2 !== undefined ? l2 : undefined, this._sourceInitiative = (o2 = i2.sourceInitiative) !== null && o2 !== undefined ? o2 : undefined, this._sourceProject = (r2 = i2.sourceProject) !== null && r2 !== undefined ? r2 : undefined, this._sourceTeam = (m2 = i2.sourceTeam) !== null && m2 !== undefined ? m2 : undefined, this._targetCustomView = (s2 = i2.targetCustomView) !== null && s2 !== undefined ? s2 : undefined;
    }
    get sourceFeedUser() {
      var e2, i2;
      return ((e2 = this._sourceFeedUser) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._sourceFeedUser) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get sourceFeedUserId() {
      var e2;
      return (e2 = this._sourceFeedUser) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceInitiative() {
      var e2, i2;
      return ((e2 = this._sourceInitiative) === null || e2 === undefined ? undefined : e2.id) ? new mg(this._request).fetch((i2 = this._sourceInitiative) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get sourceInitiativeId() {
      var e2;
      return (e2 = this._sourceInitiative) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceOrganization() {
      return new Lg(this._request).fetch();
    }
    get sourceProject() {
      var e2, i2;
      return ((e2 = this._sourceProject) === null || e2 === undefined ? undefined : e2.id) ? new Qg(this._request).fetch((i2 = this._sourceProject) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get sourceProjectId() {
      var e2;
      return (e2 = this._sourceProject) === null || e2 === undefined ? undefined : e2.id;
    }
    get sourceTeam() {
      var e2, i2;
      return ((e2 = this._sourceTeam) === null || e2 === undefined ? undefined : e2.id) ? new pF(this._request).fetch((i2 = this._sourceTeam) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get sourceTeamId() {
      var e2;
      return (e2 = this._sourceTeam) === null || e2 === undefined ? undefined : e2.id;
    }
    get targetCustomView() {
      var e2, i2;
      return ((e2 = this._targetCustomView) === null || e2 === undefined ? undefined : e2.id) ? new Rb(this._request).fetch((i2 = this._targetCustomView) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get targetCustomViewId() {
      var e2;
      return (e2 = this._targetCustomView) === null || e2 === undefined ? undefined : e2.id;
    }
  }, exports.Favorite = gh, exports.FavoriteConnection = Fh, exports.FavoritePayload = Dh, exports.FavoriteQuery = og, exports.Favorite_ChildrenQuery = zT, exports.FavoritesQuery = rg, exports.FeatureNotAccessibleLinearError = tw, exports.FetchDataPayload = class extends Ip {
    constructor(e2, i2) {
      var n2;
      super(e2), this.data = (n2 = i2.data) !== null && n2 !== undefined ? n2 : undefined, this.success = i2.success;
    }
  }, exports.FileUploadMutation = i_, exports.ForbiddenLinearError = mw, exports.FrontAttachmentPayload = _h, exports.GitAutomationState = Vh, exports.GitAutomationStateConnection = Ah, exports.GitAutomationStatePayload = Th, exports.GitAutomationTargetBranch = Ih, exports.GitAutomationTargetBranchPayload = wh, exports.GitHubCommitIntegrationPayload = Ch, exports.GitHubEnterpriseServerInstallVerificationPayload = Ph, exports.GitHubEnterpriseServerPayload = qh, exports.GitLabIntegrationCreatePayload = xh, exports.GoogleUserAccountAuthMutation = r_, exports.GraphQLClientError = fP, exports.GraphqlLinearError = pw, exports.IdentityProvider = jh, exports.ImageUploadFromUrlMutation = m_, exports.ImageUploadFromUrlPayload = Uh, exports.ImportFileUploadMutation = s_, exports.Initiative = Oh, exports.InitiativeArchivePayload = Bh, exports.InitiativeChildWebhookPayload = Rh, exports.InitiativeConnection = Eh, exports.InitiativeHistory = Mh, exports.InitiativeHistoryConnection = Lh, exports.InitiativeNotification = zh, exports.InitiativeNotificationSubscription = Wh, exports.InitiativePayload = Hh, exports.InitiativeQuery = mg, exports.InitiativeRelation = Qh, exports.InitiativeRelationConnection = Gh, exports.InitiativeRelationPayload = Jh, exports.InitiativeRelationQuery = sg, exports.InitiativeRelationsQuery = ug, exports.InitiativeToProject = Kh, exports.InitiativeToProjectConnection = $h, exports.InitiativeToProjectPayload = Zh, exports.InitiativeToProjectQuery = kg, exports.InitiativeToProjectsQuery = vg, exports.InitiativeUpdate = Yh, exports.InitiativeUpdateArchivePayload = Xh, exports.InitiativeUpdateChildWebhookPayload = ef, exports.InitiativeUpdateConnection = nf, exports.InitiativeUpdatePayload = af, exports.InitiativeUpdateQuery = cg, exports.InitiativeUpdateReminderPayload = tf, exports.InitiativeUpdateWebhookPayload = class {
    constructor(e2) {
      var i2, n2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.body = e2.body, this.bodyData = e2.bodyData, this.createdAt = e2.createdAt, this.editedAt = e2.editedAt, this.health = e2.health, this.id = e2.id, this.initiativeId = e2.initiativeId, this.reactionData = e2.reactionData, this.slugId = e2.slugId, this.updatedAt = e2.updatedAt, this.url = (n2 = e2.url) !== null && n2 !== undefined ? n2 : undefined, this.userId = e2.userId, this.initiative = new Rh(e2.initiative), this.user = new eb(e2.user);
    }
  }, exports.InitiativeUpdate_CommentsQuery = KT, exports.InitiativeUpdatesQuery = pg, exports.InitiativeWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.color = (n2 = e2.color) !== null && n2 !== undefined ? n2 : undefined, this.completedAt = (a2 = e2.completedAt) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (t2 = e2.creatorId) !== null && t2 !== undefined ? t2 : undefined, this.description = e2.description, this.frequencyResolution = e2.frequencyResolution, this.health = (d2 = e2.health) !== null && d2 !== undefined ? d2 : undefined, this.healthUpdatedAt = (l2 = e2.healthUpdatedAt) !== null && l2 !== undefined ? l2 : undefined, this.icon = (o2 = e2.icon) !== null && o2 !== undefined ? o2 : undefined, this.id = e2.id, this.lastUpdateId = (r2 = e2.lastUpdateId) !== null && r2 !== undefined ? r2 : undefined, this.name = e2.name, this.organizationId = e2.organizationId, this.ownerId = (m2 = e2.ownerId) !== null && m2 !== undefined ? m2 : undefined, this.slugId = e2.slugId, this.sortOrder = e2.sortOrder, this.startedAt = (s2 = e2.startedAt) !== null && s2 !== undefined ? s2 : undefined, this.status = e2.status, this.targetDate = (u2 = e2.targetDate) !== null && u2 !== undefined ? u2 : undefined, this.targetDateResolution = (k2 = e2.targetDateResolution) !== null && k2 !== undefined ? k2 : undefined, this.trashed = (v2 = e2.trashed) !== null && v2 !== undefined ? v2 : undefined, this.updateReminderFrequency = (c2 = e2.updateReminderFrequency) !== null && c2 !== undefined ? c2 : undefined, this.updateReminderFrequencyInWeeks = (p2 = e2.updateReminderFrequencyInWeeks) !== null && p2 !== undefined ? p2 : undefined, this.updateRemindersDay = (N2 = e2.updateRemindersDay) !== null && N2 !== undefined ? N2 : undefined, this.updateRemindersHour = (h2 = e2.updateRemindersHour) !== null && h2 !== undefined ? h2 : undefined, this.updatedAt = e2.updatedAt, this.url = e2.url, this.creator = e2.creator ? new eb(e2.creator) : undefined, this.lastUpdate = e2.lastUpdate ? new ef(e2.lastUpdate) : undefined, this.owner = e2.owner ? new eb(e2.owner) : undefined, this.parentInitiative = e2.parentInitiative ? new Rh(e2.parentInitiative) : undefined, this.projects = e2.projects ? e2.projects.map((e3) => new Vy(e3)) : undefined, this.subInitiatives = e2.subInitiatives ? e2.subInitiatives.map((e3) => new Rh(e3)) : undefined;
    }
  }, exports.Initiative_DocumentContentQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Hl, { id: this._id })).initiative.documentContent;
        return e2 ? new YN(this._request, e2) : undefined;
      });
    }
  }, exports.Initiative_DocumentsQuery = WT, exports.Initiative_HistoryQuery = HT, exports.Initiative_LinksQuery = QT, exports.Initiative_ProjectsQuery = GT, exports.Initiative_SubInitiativesQuery = JT, exports.InitiativesQuery = Ng, exports.Integration = df, exports.IntegrationAsksConnectChannelMutation = A_, exports.IntegrationChildWebhookPayload = class {
    constructor(e2) {
      this.id = e2.id, this.service = e2.service;
    }
  }, exports.IntegrationConnection = lf, exports.IntegrationDiscordMutation = I_, exports.IntegrationFigmaMutation = w_, exports.IntegrationFrontMutation = C_, exports.IntegrationGitHubEnterpriseServerConnectMutation = P_, exports.IntegrationGitHubPersonalMutation = q_, exports.IntegrationGithubConnectMutation = j_, exports.IntegrationGithubImportConnectMutation = U_, exports.IntegrationGithubImportRefreshMutation = O_, exports.IntegrationGitlabConnectMutation = B_, exports.IntegrationGoogleSheetsMutation = R_, exports.IntegrationHasScopesPayload = of, exports.IntegrationHasScopesQuery = fg, exports.IntegrationIntercomMutation = E_, exports.IntegrationJiraPersonalMutation = z_, exports.IntegrationLoomMutation = W_, exports.IntegrationPayload = rf, exports.IntegrationQuery = hg, exports.IntegrationRequestMutation = H_, exports.IntegrationRequestPayload = mf, exports.IntegrationSalesforceMutation = Q_, exports.IntegrationSentryConnectMutation = G_, exports.IntegrationSlackAsksMutation = K_, exports.IntegrationSlackCustomViewNotificationsMutation = $_, exports.IntegrationSlackCustomerChannelLinkMutation = Z_, exports.IntegrationSlackImportEmojisMutation = Y_, exports.IntegrationSlackMutation = J_, exports.IntegrationSlackOrgProjectUpdatesPostMutation = X_, exports.IntegrationSlackPersonalMutation = eV, exports.IntegrationSlackPostMutation = iV, exports.IntegrationSlackProjectPostMutation = nV, exports.IntegrationTemplate = sf, exports.IntegrationTemplateConnection = uf, exports.IntegrationTemplatePayload = kf, exports.IntegrationTemplateQuery = yg, exports.IntegrationTemplatesQuery = Sg, exports.IntegrationZendeskMutation = dV, exports.IntegrationsQuery = bg, exports.IntegrationsSettings = vf, exports.IntegrationsSettingsPayload = cf, exports.IntegrationsSettingsQuery = gg, exports.InternalLinearError = kw, exports.InvalidInputLinearError = dw, exports.Issue = pf, exports.IssueAddLabelMutation = rV, exports.IssueArchivePayload = Nf, exports.IssueAssignedToYouNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.issue = new Qf(e2.issue);
    }
  }, exports.IssueBatchPayload = hf, exports.IssueChildWebhookPayload = ff, exports.IssueCommentMentionNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.commentId = e2.commentId, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.parentCommentId = (t2 = e2.parentCommentId) !== null && t2 !== undefined ? t2 : undefined, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.comment = new sN(e2.comment), this.issue = new Qf(e2.issue), this.parentComment = e2.parentComment ? new sN(e2.parentComment) : undefined;
    }
  }, exports.IssueCommentReactionNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.commentId = e2.commentId, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.parentCommentId = (t2 = e2.parentCommentId) !== null && t2 !== undefined ? t2 : undefined, this.reactionEmoji = e2.reactionEmoji, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.comment = new sN(e2.comment), this.issue = new Qf(e2.issue), this.parentComment = e2.parentComment ? new sN(e2.parentComment) : undefined;
    }
  }, exports.IssueConnection = yf, exports.IssueEmojiReactionNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.reactionEmoji = e2.reactionEmoji, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.issue = new Qf(e2.issue);
    }
  }, exports.IssueFigmaFileKeySearchQuery = Dg, exports.IssueFilterSuggestionPayload = Sf, exports.IssueFilterSuggestionQuery = _g, exports.IssueHistory = bf, exports.IssueHistoryConnection = gf, exports.IssueImport = Ff, exports.IssueImportCheckCsvQuery = Vg, exports.IssueImportCheckPayload = Df, exports.IssueImportCheckSyncQuery = Ag, exports.IssueImportCreateAsanaMutation = cV, exports.IssueImportCreateClubhouseMutation = NV, exports.IssueImportCreateCsvJiraMutation = pV, exports.IssueImportCreateGithubMutation = hV, exports.IssueImportCreateJiraMutation = fV, exports.IssueImportDeletePayload = _f, exports.IssueImportJqlCheckPayload = Vf, exports.IssueImportJqlCheckQuery = Tg, exports.IssueImportPayload = Af, exports.IssueImportProcessMutation = SV, exports.IssueImportSyncCheckPayload = Tf, exports.IssueLabel = If, exports.IssueLabelChildWebhookPayload = wf, exports.IssueLabelConnection = Cf, exports.IssueLabelPayload = Pf, exports.IssueLabelQuery = Ig, exports.IssueLabelWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.color = e2.color, this.createdAt = e2.createdAt, this.creatorId = (n2 = e2.creatorId) !== null && n2 !== undefined ? n2 : undefined, this.description = (a2 = e2.description) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.inheritedFromId = (t2 = e2.inheritedFromId) !== null && t2 !== undefined ? t2 : undefined, this.isGroup = e2.isGroup, this.name = e2.name, this.parentId = (d2 = e2.parentId) !== null && d2 !== undefined ? d2 : undefined, this.teamId = (l2 = e2.teamId) !== null && l2 !== undefined ? l2 : undefined, this.updatedAt = e2.updatedAt;
    }
  }, exports.IssueLabel_ChildrenQuery = oI, exports.IssueLabel_IssuesQuery = rI, exports.IssueLabelsQuery = wg, exports.IssueMentionNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.issue = new Qf(e2.issue);
    }
  }, exports.IssueNewCommentNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.commentId = e2.commentId, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.parentCommentId = (t2 = e2.parentCommentId) !== null && t2 !== undefined ? t2 : undefined, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.comment = new sN(e2.comment), this.issue = new Qf(e2.issue), this.parentComment = e2.parentComment ? new sN(e2.parentComment) : undefined;
    }
  }, exports.IssueNotification = qf, exports.IssuePayload = xf, exports.IssuePriorityValue = jf, exports.IssuePriorityValuesQuery = Cg, exports.IssueQuery = Fg, exports.IssueRelation = Uf, exports.IssueRelationConnection = Of, exports.IssueRelationHistoryPayload = Bf, exports.IssueRelationPayload = Rf, exports.IssueRelationQuery = Pg, exports.IssueRelationsQuery = qg, exports.IssueReminderMutation = TV, exports.IssueRemoveLabelMutation = IV, exports.IssueSearchPayload = Ef, exports.IssueSearchQuery = xg, exports.IssueSearchResult = Mf, exports.IssueSlaWebhookPayload = class {
    constructor(e2) {
      var i2, n2;
      this.action = e2.action, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.organizationId = e2.organizationId, this.type = e2.type, this.url = (n2 = e2.url) !== null && n2 !== undefined ? n2 : undefined, this.issueData = new Hf(e2.issueData);
    }
  }, exports.IssueStatusChangedNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.issue = new Qf(e2.issue);
    }
  }, exports.IssueSubscribeMutation = wV, exports.IssueSuggestion = Lf, exports.IssueSuggestionConnection = class extends Pp {
    constructor(e2, i2, n2) {
      super(e2, i2, n2.nodes.map((i3) => new Lf(e2, i3)), new by(e2, n2.pageInfo));
    }
  }, exports.IssueSuggestionMetadata = zf, exports.IssueTitleSuggestionFromCustomerRequestPayload = Wf, exports.IssueTitleSuggestionFromCustomerRequestQuery = jg, exports.IssueUnassignedFromYouNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.externalUserActorId = (a2 = e2.externalUserActorId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.issueId = e2.issueId, this.type = e2.type, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.issue = new Qf(e2.issue);
    }
  }, exports.IssueUnsubscribeMutation = PV, exports.IssueVcsBranchSearchQuery = Ug, exports.IssueVcsBranchSearch_AttachmentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Eo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.attachments;
        return a2 ? new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_BotActorQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._branchName = i2;
    }
    fetch() {
      var e2;
      return Tp(this, undefined, undefined, function* () {
        const i2 = yield this._request(Mo, { branchName: this._branchName }), n2 = (e2 = i2.issueVcsBranchSearch) === null || e2 === undefined ? undefined : e2.botActor;
        return n2 ? new jp(this._request, n2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_ChildrenQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Lo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.children;
        return a2 ? new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_CommentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(zo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.comments;
        return a2 ? new uN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_FormerAttachmentsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Wo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.formerAttachments;
        return a2 ? new Xp(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_FormerNeedsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Ho, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.formerNeeds;
        return a2 ? new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_HistoryQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Qo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.history;
        return a2 ? new gf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_InverseRelationsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Go, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.inverseRelations;
        return a2 ? new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_LabelsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Jo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.labels;
        return a2 ? new Cf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_NeedsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Ko, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.needs;
        return a2 ? new VN(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_RelationsQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request($o, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.relations;
        return a2 ? new Of(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueVcsBranchSearch_SubscribersQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._branchName = i2, this._variables = n2;
    }
    fetch(e2) {
      var i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(Zo, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), e2)), a2 = (i2 = n2.issueVcsBranchSearch) === null || i2 === undefined ? undefined : i2.subscribers;
        return a2 ? new ib(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), a2) : undefined;
      });
    }
  }, exports.IssueWebhookPayload = Hf, exports.IssueWithDescriptionChildWebhookPayload = Qf, exports.Issue_AttachmentsQuery = $T, exports.Issue_BotActorQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(co, { id: this._id })).issue.botActor;
        return e2 ? new jp(this._request, e2) : undefined;
      });
    }
  }, exports.Issue_ChildrenQuery = ZT, exports.Issue_CommentsQuery = YT, exports.Issue_FormerAttachmentsQuery = XT, exports.Issue_FormerNeedsQuery = eI, exports.Issue_HistoryQuery = iI, exports.Issue_InverseRelationsQuery = nI, exports.Issue_LabelsQuery = aI, exports.Issue_NeedsQuery = tI, exports.Issue_RelationsQuery = dI, exports.Issue_SubscribersQuery = lI, exports.IssuesQuery = Og, exports.JoinOrganizationFromOnboardingMutation = xV, exports.LINEAR_WEBHOOK_SIGNATURE_HEADER = "linear-signature", exports.LINEAR_WEBHOOK_TS_FIELD = "webhookTimestamp", exports.LabelNotificationSubscription = Gf, exports.LeaveOrganizationMutation = jV, exports.LinearClient = class extends ZI {
    constructor(e2) {
      const i2 = function(e3) {
        var i3, n3, a2, { apiKey: t2, accessToken: d2, apiUrl: l2, headers: o2 } = e3, r2 = Ap(e3, ["apiKey", "accessToken", "apiUrl", "headers"]);
        if (!d2 && !t2)
          throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/account/security");
        return Object.assign({ headers: Object.assign(Object.assign({ Authorization: d2 ? d2.startsWith("Bearer ") ? d2 : `Bearer ${d2}` : t2 != null ? t2 : "" }, o2), { "User-Agent": (a2 = { [(i3 = process.env.npm_package_name) !== null && i3 !== undefined ? i3 : "@linear/sdk"]: (n3 = process.env.npm_package_version) !== null && n3 !== undefined ? n3 : "unknown" }, Object.entries(a2).reduce((e4, [i4, n4]) => {
          const a3 = `${i4}@${encodeURIComponent(n4)}`;
          return e4 ? `${e4} ${a3}` : a3;
        }, "")) }), apiUrl: l2 != null ? l2 : "https://api.linear.app/graphql" }, r2);
      }(e2), n2 = new yP(i2.apiUrl, i2);
      super((e3, i3) => this.client.request(e3, i3).catch((e4) => {
        throw yw(e4);
      })), this.options = i2, this.client = n2;
    }
  }, exports.LinearConnection = Cp, exports.LinearDocument = Vp, exports.LinearError = aw, exports.LinearGraphQLClient = yP, exports.LinearGraphQLError = nw, exports.LinearSdk = ZI, exports.LinearWebhooks = class {
    constructor(e2) {
      this.secret = e2;
    }
    verify(e2, i2, n2) {
      const a2 = Buffer.from(ce.default.createHmac("sha256", this.secret).update(e2).digest("hex")), t2 = Buffer.from(i2);
      if (a2.length !== t2.length)
        throw new Error("Invalid webhook signature");
      if (!ce.default.timingSafeEqual(a2, t2))
        throw new Error("Invalid webhook signature");
      if (n2) {
        if (Math.abs(new Date().getTime() - n2) > 60000)
          throw new Error("Invalid webhook timestamp");
      }
      return true;
    }
    parseData(e2, i2, n2) {
      if (!this.verify(e2, i2, n2))
        throw new Error("Invalid webhook signature");
      const a2 = JSON.parse(e2.toString());
      if (a2.type === "IssueSLA")
        return a2;
      if (a2.type === "OAuthApp")
        return a2;
      if (a2.type === "AppUserNotification")
        return a2;
      if (a2.type === "PermissionChange")
        return a2;
      if (a2.type === "AgentSessionEvent")
        return a2;
      const t2 = a2;
      switch (t2.type) {
        case "Attachment":
        case "AuditEntry":
        case "Comment":
        case "Customer":
        case "CustomerNeed":
        case "Cycle":
        case "Document":
        case "Initiative":
        case "InitiativeUpdate":
        case "Issue":
        case "IssueLabel":
        case "Project":
        case "ProjectUpdate":
        case "Reaction":
        case "User":
          return Object.assign(Object.assign({}, t2), { data: t2.data });
        default:
          return t2;
      }
    }
  }, exports.LockTimeoutLinearError = Nw, exports.LogoutAllSessionsMutation = OV, exports.LogoutMutation = UV, exports.LogoutOtherSessionsMutation = BV, exports.LogoutResponse = Jf, exports.LogoutSessionMutation = RV, exports.NetworkLinearError = ow, exports.Node = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.id = i2.id;
    }
  }, exports.Notification = Kf, exports.NotificationArchiveAllMutation = MV, exports.NotificationArchivePayload = $f, exports.NotificationBatchActionPayload = Zf, exports.NotificationCategoryPreferences = Yf, exports.NotificationChannelPreferences = Xf, exports.NotificationConnection = ey, exports.NotificationDeliveryPreferences = iy, exports.NotificationDeliveryPreferencesChannel = ny, exports.NotificationDeliveryPreferencesDay = ay, exports.NotificationDeliveryPreferencesSchedule = ty, exports.NotificationMarkReadAllMutation = zV, exports.NotificationMarkUnreadAllMutation = WV, exports.NotificationPayload = dy, exports.NotificationQuery = Bg, exports.NotificationSnoozeAllMutation = HV, exports.NotificationSubscription = ly, exports.NotificationSubscriptionConnection = oy, exports.NotificationSubscriptionPayload = ry, exports.NotificationSubscriptionQuery = Rg, exports.NotificationSubscriptionsQuery = Eg, exports.NotificationUnsnoozeAllMutation = $V, exports.NotificationsQuery = Mg, exports.OAuthAppWebhookPayload = class {
    constructor(e2) {
      var i2;
      this.action = e2.action, this.createdAt = (i2 = qp(e2.createdAt)) !== null && i2 !== undefined ? i2 : new Date, this.oauthClientId = e2.oauthClientId, this.organizationId = e2.organizationId, this.type = e2.type;
    }
  }, exports.OauthClientApproval = my, exports.OauthClientApprovalNotification = sy, exports.OauthClientChildWebhookPayload = class {
    constructor(e2) {
      this.id = e2.id, this.name = e2.name;
    }
  }, exports.Organization = uy, exports.OrganizationAcceptedOrExpiredInviteDetailsPayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.status = i2.status;
    }
  }, exports.OrganizationCancelDeletePayload = ky, exports.OrganizationDeleteChallengeMutation = eA, exports.OrganizationDeletePayload = vy, exports.OrganizationDomain = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2, d2, l2, o2, r2;
      super(e2), this.archivedAt = (n2 = qp(i2.archivedAt)) !== null && n2 !== undefined ? n2 : undefined, this.claimed = (a2 = i2.claimed) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = (t2 = qp(i2.createdAt)) !== null && t2 !== undefined ? t2 : new Date, this.disableOrganizationCreation = (d2 = i2.disableOrganizationCreation) !== null && d2 !== undefined ? d2 : undefined, this.id = i2.id, this.name = i2.name, this.updatedAt = (l2 = qp(i2.updatedAt)) !== null && l2 !== undefined ? l2 : new Date, this.verificationEmail = (o2 = i2.verificationEmail) !== null && o2 !== undefined ? o2 : undefined, this.verified = i2.verified, this.identityProvider = i2.identityProvider ? new jh(e2, i2.identityProvider) : undefined, this.authType = i2.authType, this._creator = (r2 = i2.creator) !== null && r2 !== undefined ? r2 : undefined;
    }
    get creator() {
      var e2, i2;
      return ((e2 = this._creator) === null || e2 === undefined ? undefined : e2.id) ? new VF(this._request).fetch((i2 = this._creator) === null || i2 === undefined ? undefined : i2.id) : undefined;
    }
    get creatorId() {
      var e2;
      return (e2 = this._creator) === null || e2 === undefined ? undefined : e2.id;
    }
    delete() {
      return new iA(this._request).fetch(this.id);
    }
  }, exports.OrganizationExistsPayload = cy, exports.OrganizationExistsQuery = zg, exports.OrganizationInvite = py, exports.OrganizationInviteConnection = Ny, exports.OrganizationInviteFullDetailsPayload = class extends Ip {
    constructor(e2, i2) {
      var n2, a2;
      super(e2), this.accepted = i2.accepted, this.allowedAuthServices = i2.allowedAuthServices, this.createdAt = (n2 = qp(i2.createdAt)) !== null && n2 !== undefined ? n2 : new Date, this.email = i2.email, this.expired = i2.expired, this.inviter = i2.inviter, this.organizationId = i2.organizationId, this.organizationLogoUrl = (a2 = i2.organizationLogoUrl) !== null && a2 !== undefined ? a2 : undefined, this.organizationName = i2.organizationName, this.role = i2.role, this.status = i2.status;
    }
  }, exports.OrganizationInvitePayload = hy, exports.OrganizationInviteQuery = Wg, exports.OrganizationInvitesQuery = Hg, exports.OrganizationIpRestriction = fy, exports.OrganizationMeta = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.region = i2.region;
    }
  }, exports.OrganizationPayload = yy, exports.OrganizationQuery = Lg, exports.OrganizationStartTrialForPlanMutation = lA, exports.OrganizationStartTrialMutation = dA, exports.OrganizationStartTrialPayload = Sy, exports.Organization_IntegrationsQuery = mI, exports.Organization_LabelsQuery = sI, exports.Organization_ProjectLabelsQuery = uI, exports.Organization_SubscriptionQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(or, {})).organization.subscription;
        return e2 ? new gy(this._request, e2) : undefined;
      });
    }
  }, exports.Organization_TeamsQuery = kI, exports.Organization_TemplatesQuery = vI, exports.Organization_UsersQuery = cI, exports.OtherLinearError = vw, exports.OtherNotificationWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2;
      this.actorId = (i2 = e2.actorId) !== null && i2 !== undefined ? i2 : undefined, this.archivedAt = (n2 = e2.archivedAt) !== null && n2 !== undefined ? n2 : undefined, this.commentId = (a2 = e2.commentId) !== null && a2 !== undefined ? a2 : undefined, this.createdAt = e2.createdAt, this.documentId = (t2 = e2.documentId) !== null && t2 !== undefined ? t2 : undefined, this.externalUserActorId = (d2 = e2.externalUserActorId) !== null && d2 !== undefined ? d2 : undefined, this.id = e2.id, this.issueId = (l2 = e2.issueId) !== null && l2 !== undefined ? l2 : undefined, this.parentCommentId = (o2 = e2.parentCommentId) !== null && o2 !== undefined ? o2 : undefined, this.projectId = (r2 = e2.projectId) !== null && r2 !== undefined ? r2 : undefined, this.projectUpdateId = (m2 = e2.projectUpdateId) !== null && m2 !== undefined ? m2 : undefined, this.reactionEmoji = (s2 = e2.reactionEmoji) !== null && s2 !== undefined ? s2 : undefined, this.updatedAt = e2.updatedAt, this.userId = e2.userId, this.actor = e2.actor ? new eb(e2.actor) : undefined, this.comment = e2.comment ? new sN(e2.comment) : undefined, this.document = e2.document ? new $N(e2.document) : undefined, this.issue = e2.issue ? new Qf(e2.issue) : undefined, this.parentComment = e2.parentComment ? new sN(e2.parentComment) : undefined, this.project = e2.project ? new Vy(e2.project) : undefined, this.projectUpdate = e2.projectUpdate ? new iS(e2.projectUpdate) : undefined, this.type = e2.type;
    }
  }, exports.PageInfo = by, exports.PaidSubscription = gy, exports.PasskeyLoginStartResponse = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.options = i2.options, this.success = i2.success;
    }
  }, exports.PostNotification = Fy, exports.Project = Dy, exports.ProjectAddLabelMutation = rA, exports.ProjectArchivePayload = _y, exports.ProjectChildWebhookPayload = Vy, exports.ProjectConnection = Ay, exports.ProjectFilterSuggestionPayload = Ty, exports.ProjectFilterSuggestionQuery = Gg, exports.ProjectHistory = Iy, exports.ProjectHistoryConnection = wy, exports.ProjectLabel = Cy, exports.ProjectLabelConnection = Py, exports.ProjectLabelPayload = qy, exports.ProjectLabelQuery = Jg, exports.ProjectLabel_ChildrenQuery = II, exports.ProjectLabel_ProjectsQuery = wI, exports.ProjectLabelsQuery = Kg, exports.ProjectMilestone = xy, exports.ProjectMilestoneChildWebhookPayload = jy, exports.ProjectMilestoneConnection = Uy, exports.ProjectMilestoneMoveIssueToTeam = Oy, exports.ProjectMilestoneMovePayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.previousProjectTeamIds = i2.previousProjectTeamIds ? new By(e2, i2.previousProjectTeamIds) : undefined, this.previousIssueTeamIds = i2.previousIssueTeamIds ? i2.previousIssueTeamIds.map((i3) => new Oy(e2, i3)) : undefined, this._projectMilestone = i2.projectMilestone;
    }
    get projectMilestone() {
      return new $g(this._request).fetch(this._projectMilestone.id);
    }
    get projectMilestoneId() {
      var e2;
      return (e2 = this._projectMilestone) === null || e2 === undefined ? undefined : e2.id;
    }
  }, exports.ProjectMilestoneMoveProjectTeams = By, exports.ProjectMilestonePayload = Ry, exports.ProjectMilestoneQuery = $g, exports.ProjectMilestone_DocumentContentQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Ur, { id: this._id })).projectMilestone.documentContent;
        return e2 ? new YN(this._request, e2) : undefined;
      });
    }
  }, exports.ProjectMilestone_IssuesQuery = CI, exports.ProjectMilestonesQuery = Zg, exports.ProjectNotification = Ey, exports.ProjectNotificationSubscription = My, exports.ProjectPayload = Ly, exports.ProjectQuery = Qg, exports.ProjectRelation = zy, exports.ProjectRelationConnection = Wy, exports.ProjectRelationPayload = Hy, exports.ProjectRelationQuery = Yg, exports.ProjectRelationsQuery = Xg, exports.ProjectRemoveLabelMutation = bA, exports.ProjectSearchPayload = Qy, exports.ProjectSearchResult = Gy, exports.ProjectStatus = Jy, exports.ProjectStatusArchivePayload = Ky, exports.ProjectStatusChildWebhookPayload = $y, exports.ProjectStatusConnection = Zy, exports.ProjectStatusCountPayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.archivedTeamCount = i2.archivedTeamCount, this.count = i2.count, this.privateCount = i2.privateCount;
    }
  }, exports.ProjectStatusPayload = Yy, exports.ProjectStatusQuery = eF, exports.ProjectStatusesQuery = iF, exports.ProjectUpdate = Xy, exports.ProjectUpdateArchivePayload = eS, exports.ProjectUpdateChildWebhookPayload = iS, exports.ProjectUpdateConnection = nS, exports.ProjectUpdatePayload = aS, exports.ProjectUpdateQuery = nF, exports.ProjectUpdateReminderPayload = tS, exports.ProjectUpdateWebhookPayload = class {
    constructor(e2) {
      var i2, n2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.body = e2.body, this.bodyData = e2.bodyData, this.createdAt = e2.createdAt, this.editedAt = e2.editedAt, this.health = e2.health, this.id = e2.id, this.projectId = e2.projectId, this.reactionData = e2.reactionData, this.slugId = e2.slugId, this.updatedAt = e2.updatedAt, this.url = (n2 = e2.url) !== null && n2 !== undefined ? n2 : undefined, this.userId = e2.userId, this.project = new Vy(e2.project), this.user = new eb(e2.user);
    }
  }, exports.ProjectUpdate_CommentsQuery = PI, exports.ProjectUpdatesQuery = aF, exports.ProjectWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2, m2, s2, u2, k2, v2, c2, p2, N2, h2, f2, y2, S2, b2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.autoArchivedAt = (n2 = e2.autoArchivedAt) !== null && n2 !== undefined ? n2 : undefined, this.canceledAt = (a2 = e2.canceledAt) !== null && a2 !== undefined ? a2 : undefined, this.color = e2.color, this.completedAt = (t2 = e2.completedAt) !== null && t2 !== undefined ? t2 : undefined, this.completedIssueCountHistory = e2.completedIssueCountHistory, this.completedScopeHistory = e2.completedScopeHistory, this.content = (d2 = e2.content) !== null && d2 !== undefined ? d2 : undefined, this.convertedFromIssueId = (l2 = e2.convertedFromIssueId) !== null && l2 !== undefined ? l2 : undefined, this.createdAt = e2.createdAt, this.creatorId = (o2 = e2.creatorId) !== null && o2 !== undefined ? o2 : undefined, this.description = e2.description, this.documentContentId = (r2 = e2.documentContentId) !== null && r2 !== undefined ? r2 : undefined, this.health = (m2 = e2.health) !== null && m2 !== undefined ? m2 : undefined, this.healthUpdatedAt = (s2 = e2.healthUpdatedAt) !== null && s2 !== undefined ? s2 : undefined, this.icon = (u2 = e2.icon) !== null && u2 !== undefined ? u2 : undefined, this.id = e2.id, this.inProgressScopeHistory = e2.inProgressScopeHistory, this.issueCountHistory = e2.issueCountHistory, this.labelIds = e2.labelIds, this.lastAppliedTemplateId = (k2 = e2.lastAppliedTemplateId) !== null && k2 !== undefined ? k2 : undefined, this.lastUpdateId = (v2 = e2.lastUpdateId) !== null && v2 !== undefined ? v2 : undefined, this.leadId = (c2 = e2.leadId) !== null && c2 !== undefined ? c2 : undefined, this.memberIds = e2.memberIds, this.name = e2.name, this.priority = e2.priority, this.prioritySortOrder = e2.prioritySortOrder, this.projectUpdateRemindersPausedUntilAt = (p2 = e2.projectUpdateRemindersPausedUntilAt) !== null && p2 !== undefined ? p2 : undefined, this.scopeHistory = e2.scopeHistory, this.slugId = e2.slugId, this.sortOrder = e2.sortOrder, this.startDate = (N2 = e2.startDate) !== null && N2 !== undefined ? N2 : undefined, this.startDateResolution = (h2 = e2.startDateResolution) !== null && h2 !== undefined ? h2 : undefined, this.startedAt = (f2 = e2.startedAt) !== null && f2 !== undefined ? f2 : undefined, this.statusId = e2.statusId, this.targetDate = (y2 = e2.targetDate) !== null && y2 !== undefined ? y2 : undefined, this.targetDateResolution = (S2 = e2.targetDateResolution) !== null && S2 !== undefined ? S2 : undefined, this.teamIds = e2.teamIds, this.trashed = (b2 = e2.trashed) !== null && b2 !== undefined ? b2 : undefined, this.updatedAt = e2.updatedAt, this.url = e2.url, this.lead = e2.lead ? new eb(e2.lead) : undefined, this.status = e2.status ? new $y(e2.status) : undefined, this.initiatives = e2.initiatives ? e2.initiatives.map((e3) => new Rh(e3)) : undefined, this.milestones = e2.milestones ? e2.milestones.map((e3) => new jy(e3)) : undefined;
    }
  }, exports.Project_CommentsQuery = pI, exports.Project_DocumentContentQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Nr, { id: this._id })).project.documentContent;
        return e2 ? new YN(this._request, e2) : undefined;
      });
    }
  }, exports.Project_DocumentsQuery = NI, exports.Project_ExternalLinksQuery = hI, exports.Project_HistoryQuery = fI, exports.Project_InitiativesQuery = yI, exports.Project_InverseRelationsQuery = SI, exports.Project_IssuesQuery = bI, exports.Project_LabelsQuery = gI, exports.Project_MembersQuery = FI, exports.Project_NeedsQuery = DI, exports.Project_ProjectMilestonesQuery = _I, exports.Project_ProjectUpdatesQuery = VI, exports.Project_RelationsQuery = AI, exports.Project_TeamsQuery = TI, exports.ProjectsQuery = tF, exports.PullRequestNotification = dS, exports.PushSubscription = lS, exports.PushSubscriptionPayload = oS, exports.PushSubscriptionTestPayload = rS, exports.PushSubscriptionTestQuery = dF, exports.RateLimitPayload = mS, exports.RateLimitResultPayload = sS, exports.RateLimitStatusQuery = lF, exports.RatelimitedLinearError = lw, exports.Reaction = uS, exports.ReactionPayload = kS, exports.ReactionWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2, l2, o2, r2;
      this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.commentId = (n2 = e2.commentId) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.emoji = e2.emoji, this.externalUserId = (a2 = e2.externalUserId) !== null && a2 !== undefined ? a2 : undefined, this.id = e2.id, this.initiativeUpdateId = (t2 = e2.initiativeUpdateId) !== null && t2 !== undefined ? t2 : undefined, this.issueId = (d2 = e2.issueId) !== null && d2 !== undefined ? d2 : undefined, this.postId = (l2 = e2.postId) !== null && l2 !== undefined ? l2 : undefined, this.projectUpdateId = (o2 = e2.projectUpdateId) !== null && o2 !== undefined ? o2 : undefined, this.updatedAt = e2.updatedAt, this.userId = (r2 = e2.userId) !== null && r2 !== undefined ? r2 : undefined, this.comment = e2.comment ? new sN(e2.comment) : undefined, this.issue = e2.issue ? new ff(e2.issue) : undefined, this.projectUpdate = e2.projectUpdate ? new iS(e2.projectUpdate) : undefined, this.user = e2.user ? new eb(e2.user) : undefined;
    }
  }, exports.RefreshGoogleSheetsDataMutation = OA, exports.Request = Ip, exports.ResendOrganizationInviteByEmailMutation = RA, exports.ResendOrganizationInviteMutation = BA, exports.Roadmap = vS, exports.RoadmapArchivePayload = cS, exports.RoadmapConnection = pS, exports.RoadmapPayload = NS, exports.RoadmapQuery = oF, exports.RoadmapToProject = hS, exports.RoadmapToProjectConnection = fS, exports.RoadmapToProjectPayload = yS, exports.RoadmapToProjectQuery = rF, exports.RoadmapToProjectsQuery = mF, exports.Roadmap_ProjectsQuery = qI, exports.RoadmapsQuery = sF, exports.SamlTokenUserAccountAuthMutation = JA, exports.SearchDocumentsQuery = uF, exports.SearchDocuments_ArchivePayloadQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._term = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(im, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchDocuments.archivePayload;
        return new $p(this._request, i2);
      });
    }
  }, exports.SearchIssuesQuery = kF, exports.SearchIssues_ArchivePayloadQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._term = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(am, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchIssues.archivePayload;
        return new $p(this._request, i2);
      });
    }
  }, exports.SearchProjectsQuery = vF, exports.SearchProjects_ArchivePayloadQuery = class extends Ip {
    constructor(e2, i2, n2) {
      super(e2), this._term = i2, this._variables = n2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(dm, Object.assign(Object.assign({ term: this._term }, this._variables), e2))).searchProjects.archivePayload;
        return new $p(this._request, i2);
      });
    }
  }, exports.SesDomainIdentity = SS, exports.SesDomainIdentityDnsRecord = bS, exports.SlackAsksTeamSettings = gS, exports.SlackChannelConnectPayload = FS, exports.SlackChannelNameMapping = DS, exports.SsoUrlFromEmailQuery = cF, exports.SsoUrlFromEmailResponse = _S, exports.SuccessPayload = VS, exports.SummaryPayload = class extends Ip {
    constructor(e2, i2) {
      super(e2), this.summary = i2.summary;
    }
  }, exports.SuspendUserMutation = DT, exports.SyncedExternalThread = AS, exports.Team = TS, exports.TeamArchivePayload = IS, exports.TeamChildWebhookPayload = wS, exports.TeamConnection = CS, exports.TeamMembership = PS, exports.TeamMembershipConnection = qS, exports.TeamMembershipPayload = xS, exports.TeamMembershipQuery = NF, exports.TeamMembershipsQuery = hF, exports.TeamNotificationSubscription = jS, exports.TeamPayload = US, exports.TeamQuery = pF, exports.Team_CyclesQuery = xI, exports.Team_GitAutomationStatesQuery = jI, exports.Team_IssuesQuery = UI, exports.Team_LabelsQuery = OI, exports.Team_MembersQuery = BI, exports.Team_MembershipsQuery = RI, exports.Team_ProjectsQuery = EI, exports.Team_StatesQuery = MI, exports.Team_TemplatesQuery = LI, exports.Team_WebhooksQuery = zI, exports.TeamsQuery = fF, exports.Template = OS, exports.TemplateConnection = BS, exports.TemplatePayload = RS, exports.TemplateQuery = yF, exports.TemplatesForIntegrationQuery = bF, exports.TemplatesQuery = SF, exports.TimeSchedule = ES, exports.TimeScheduleConnection = MS, exports.TimeScheduleEntry = LS, exports.TimeSchedulePayload = zS, exports.TimeScheduleQuery = gF, exports.TimeScheduleRefreshIntegrationScheduleMutation = mT, exports.TimeScheduleUpsertExternalMutation = uT, exports.TimeSchedulesQuery = FF, exports.TriageResponsibilitiesQuery = DF, exports.TriageResponsibility = WS, exports.TriageResponsibilityConnection = HS, exports.TriageResponsibilityManualSelection = QS, exports.TriageResponsibilityPayload = GS, exports.TriageResponsibilityQuery = _F, exports.TriageResponsibility_ManualSelectionQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._id = i2;
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Tm, { id: this._id })).triageResponsibility.manualSelection;
        return e2 ? new QS(this._request, e2) : undefined;
      });
    }
  }, exports.UnarchiveCustomerNeedMutation = bD, exports.UnarchiveDocumentMutation = BD, exports.UnarchiveInitiativeMutation = S_, exports.UnarchiveInitiativeUpdateMutation = D_, exports.UnarchiveIssueMutation = CV, exports.UnarchiveNotificationMutation = KV, exports.UnarchiveProjectMutation = VA, exports.UnarchiveProjectStatusMutation = DA, exports.UnarchiveProjectUpdateMutation = CA, exports.UnarchiveRoadmapMutation = QA, exports.UnarchiveTeamMutation = nT, exports.UnknownLinearError = uw, exports.UnsuspendUserMutation = _T;
  exports.UpdateAgentContextMutation = OF, exports.UpdateAttachmentMutation = eD, exports.UpdateCommentMutation = dD, exports.UpdateCustomViewMutation = vD, exports.UpdateCustomerMutation = ID, exports.UpdateCustomerNeedMutation = gD, exports.UpdateCustomerStatusMutation = _D, exports.UpdateCustomerTierMutation = TD, exports.UpdateCycleMutation = jD, exports.UpdateDocumentMutation = RD, exports.UpdateEmailIntakeAddressMutation = zD, exports.UpdateEntityExternalLinkMutation = ZD, exports.UpdateFavoriteMutation = e_, exports.UpdateGitAutomationStateMutation = t_, exports.UpdateGitAutomationTargetBranchMutation = o_, exports.UpdateInitiativeMutation = b_, exports.UpdateInitiativeRelationMutation = N_, exports.UpdateInitiativeToProjectMutation = y_, exports.UpdateInitiativeUpdateMutation = __, exports.UpdateIntegrationIntercomSettingsMutation = L_, exports.UpdateIntegrationsSettingsMutation = oV, exports.UpdateIssueBatchMutation = uV, exports.UpdateIssueImportMutation = bV, exports.UpdateIssueLabelMutation = DV, exports.UpdateIssueMutation = qV, exports.UpdateIssueRelationMutation = AV, exports.UpdateNotificationCategoryChannelSubscriptionMutation = LV, exports.UpdateNotificationMutation = ZV, exports.UpdateNotificationSubscriptionMutation = JV, exports.UpdateOrganizationInviteMutation = tA, exports.UpdateOrganizationMutation = oA, exports.UpdateProjectLabelMutation = cA, exports.UpdateProjectMilestoneMutation = hA, exports.UpdateProjectMutation = AA, exports.UpdateProjectRelationMutation = SA, exports.UpdateProjectStatusMutation = _A, exports.UpdateProjectUpdateMutation = PA, exports.UpdateRoadmapMutation = GA, exports.UpdateRoadmapToProjectMutation = HA, exports.UpdateTeamMembershipMutation = iT, exports.UpdateTeamMutation = aT, exports.UpdateTemplateMutation = lT, exports.UpdateTimeScheduleMutation = sT, exports.UpdateTriageResponsibilityMutation = cT, exports.UpdateUserFlagMutation = yT, exports.UpdateUserMutation = VT, exports.UpdateUserSettingsMutation = FT, exports.UpdateViewPreferencesMutation = IT, exports.UpdateWebhookMutation = PT, exports.UpdateWorkflowStateMutation = jT, exports.UploadFile = JS, exports.UploadFileHeader = KS, exports.UploadPayload = $S, exports.UsageLimitExceededLinearError = hw, exports.User = ZS, exports.UserAdminPayload = YS, exports.UserAuthorizedApplication = XS, exports.UserChildWebhookPayload = eb, exports.UserConnection = ib, exports.UserDemoteAdminMutation = pT, exports.UserDemoteMemberMutation = NT, exports.UserDiscordConnectMutation = hT, exports.UserExternalUserDisconnectMutation = fT, exports.UserLinearError = cw, exports.UserNotificationSubscription = nb, exports.UserPayload = ab, exports.UserPromoteAdminMutation = ST, exports.UserPromoteMemberMutation = bT, exports.UserQuery = VF, exports.UserSettings = tb, exports.UserSettingsFlagPayload = db, exports.UserSettingsFlagsResetMutation = gT, exports.UserSettingsFlagsResetPayload = lb, exports.UserSettingsPayload = ob, exports.UserSettingsQuery = AF, exports.UserSettings_NotificationCategoryPreferencesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Om, {})).userSettings.notificationCategoryPreferences;
        return new Yf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Bm, {})).userSettings.notificationCategoryPreferences.appsAndIntegrations;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_AssignmentsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Rm, {})).userSettings.notificationCategoryPreferences.assignments;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Em, {})).userSettings.notificationCategoryPreferences.commentsAndReplies;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_CustomersQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Mm, {})).userSettings.notificationCategoryPreferences.customers;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_DocumentChangesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Lm, {})).userSettings.notificationCategoryPreferences.documentChanges;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_FeedQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(zm, {})).userSettings.notificationCategoryPreferences.feed;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_MentionsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Wm, {})).userSettings.notificationCategoryPreferences.mentions;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Hm, {})).userSettings.notificationCategoryPreferences.postsAndUpdates;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_ReactionsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Qm, {})).userSettings.notificationCategoryPreferences.reactions;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_RemindersQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Gm, {})).userSettings.notificationCategoryPreferences.reminders;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_ReviewsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Jm, {})).userSettings.notificationCategoryPreferences.reviews;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_StatusChangesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Km, {})).userSettings.notificationCategoryPreferences.statusChanges;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_SubscriptionsQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request($m, {})).userSettings.notificationCategoryPreferences.subscriptions;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_SystemQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Zm, {})).userSettings.notificationCategoryPreferences.system;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationCategoryPreferences_TriageQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Ym, {})).userSettings.notificationCategoryPreferences.triage;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationChannelPreferencesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(Xm, {})).userSettings.notificationChannelPreferences;
        return new Xf(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferencesQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(es, {})).userSettings.notificationDeliveryPreferences;
        return new iy(this._request, e2);
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_MobileQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      return Tp(this, undefined, undefined, function* () {
        const e2 = (yield this._request(is, {})).userSettings.notificationDeliveryPreferences.mobile;
        return e2 ? new ny(this._request, e2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2;
      return Tp(this, undefined, undefined, function* () {
        const i2 = yield this._request(ns, {}), n2 = (e2 = i2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule;
        return n2 ? new ty(this._request, n2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(as, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.friday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(ts, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.monday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(ds, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.saturday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(ls, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.sunday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(os, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.thursday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(rs, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.tuesday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery = class extends Ip {
    constructor(e2) {
      super(e2);
    }
    fetch() {
      var e2, i2;
      return Tp(this, undefined, undefined, function* () {
        const n2 = yield this._request(ms, {}), a2 = (i2 = (e2 = n2.userSettings.notificationDeliveryPreferences.mobile) === null || e2 === undefined ? undefined : e2.schedule) === null || i2 === undefined ? undefined : i2.wednesday;
        return a2 ? new ay(this._request, a2) : undefined;
      });
    }
  }, exports.UserWebhookPayload = class {
    constructor(e2) {
      var i2, n2, a2, t2, d2;
      this.active = e2.active, this.admin = e2.admin, this.app = e2.app, this.archivedAt = (i2 = e2.archivedAt) !== null && i2 !== undefined ? i2 : undefined, this.avatarUrl = (n2 = e2.avatarUrl) !== null && n2 !== undefined ? n2 : undefined, this.createdAt = e2.createdAt, this.description = (a2 = e2.description) !== null && a2 !== undefined ? a2 : undefined, this.disableReason = (t2 = e2.disableReason) !== null && t2 !== undefined ? t2 : undefined, this.displayName = e2.displayName, this.email = e2.email, this.guest = e2.guest, this.id = e2.id, this.name = e2.name, this.timezone = (d2 = e2.timezone) !== null && d2 !== undefined ? d2 : undefined, this.updatedAt = e2.updatedAt, this.url = e2.url;
    }
  }, exports.User_AssignedIssuesQuery = WI, exports.User_CreatedIssuesQuery = HI, exports.User_DelegatedIssuesQuery = QI, exports.User_DraftsQuery = GI, exports.User_TeamMembershipsQuery = JI, exports.User_TeamsQuery = KI, exports.UsersQuery = TF, exports.VerifyGitHubEnterpriseServerInstallationQuery = IF, exports.ViewPreferences = rb, exports.ViewPreferencesPayload = mb, exports.ViewPreferencesValues = sb, exports.ViewerQuery = wF, exports.Viewer_AssignedIssuesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(vs, e2)).viewer.assignedIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Viewer_CreatedIssuesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(cs, e2)).viewer.createdIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Viewer_DelegatedIssuesQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(ps, e2)).viewer.delegatedIssues;
        return new yf(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Viewer_DraftsQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(Ns, e2)).viewer.drafts;
        return new oh(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Viewer_TeamMembershipsQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(hs, e2)).viewer.teamMemberships;
        return new qS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Viewer_TeamsQuery = class extends Ip {
    constructor(e2, i2) {
      super(e2), this._variables = i2;
    }
    fetch(e2) {
      return Tp(this, undefined, undefined, function* () {
        const i2 = (yield this._request(fs, e2)).viewer.teams;
        return new CS(this._request, (i3) => this.fetch(wp(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
      });
    }
  }, exports.Webhook = ub, exports.WebhookConnection = kb, exports.WebhookFailureEvent = class extends Ip {
    constructor(e2, i2) {
      var n2, a2, t2;
      super(e2), this.createdAt = (n2 = qp(i2.createdAt)) !== null && n2 !== undefined ? n2 : new Date, this.executionId = i2.executionId, this.httpStatus = (a2 = i2.httpStatus) !== null && a2 !== undefined ? a2 : undefined, this.id = i2.id, this.responseOrError = (t2 = i2.responseOrError) !== null && t2 !== undefined ? t2 : undefined, this.url = i2.url, this._webhook = i2.webhook;
    }
    get webhook() {
      return new CF(this._request).fetch(this._webhook.id);
    }
    get webhookId() {
      var e2;
      return (e2 = this._webhook) === null || e2 === undefined ? undefined : e2.id;
    }
  }, exports.WebhookPayload = vb, exports.WebhookQuery = CF, exports.WebhooksQuery = PF, exports.WorkflowState = cb, exports.WorkflowStateArchivePayload = pb, exports.WorkflowStateChildWebhookPayload = Nb, exports.WorkflowStateConnection = hb, exports.WorkflowStatePayload = fb, exports.WorkflowStateQuery = qF, exports.WorkflowState_IssuesQuery = $I, exports.WorkflowStatesQuery = xF, exports.parseLinearError = yw;
});

// src/api/linear-client.ts
var exports_linear_client = {};
__export(exports_linear_client, {
  validateLinearConfig: () => validateLinearConfig2,
  getLinearClient: () => getLinearClient,
  clearLinearClientInstance: () => clearLinearClientInstance,
  LinearClient: () => LinearClient
});

class LinearClient {
  config;
  sdk;
  teamCache = null;
  constructor() {
    const envConfig = getConfiguration();
    if (!envConfig.linear) {
      throw new Error(ERROR_MESSAGES.LINEAR_CONFIG_MISSING);
    }
    this.config = {
      apiToken: envConfig.linear.apiToken,
      teamId: envConfig.linear.teamId,
      defaultPriority: PRIORITY_LEVELS.NORMAL,
      defaultLabels: [...DEFAULT_LABEL_CONFIG.defaultLabels],
      crashLabels: [...DEFAULT_LABEL_CONFIG.crashLabels],
      feedbackLabels: [...DEFAULT_LABEL_CONFIG.feedbackLabels],
      enableDuplicateDetection: true,
      duplicateDetectionDays: 7
    };
    this.sdk = new import_sdk.LinearClient({
      apiKey: this.config.apiToken
    });
  }
  async createIssueFromTestFlight(feedback, additionalLabels = [], assigneeId, projectId) {
    try {
      if (this.config.enableDuplicateDetection) {
        const duplicateIssue = await this.findDuplicateIssue(feedback);
        if (duplicateIssue) {
          console.log(`Duplicate issue found: ${duplicateIssue.identifier}. Adding comment instead.`);
          await this.addTestFlightCommentToIssue(duplicateIssue.id, feedback);
          return duplicateIssue;
        }
      }
      const issueData = this.prepareIssueFromTestFlight(feedback, additionalLabels, assigneeId, projectId);
      const issueCreatePayload = await this.sdk.createIssue({
        title: issueData.title,
        description: issueData.description,
        teamId: issueData.teamId,
        priority: this.mapPriorityToLinearPriority(issueData.priority),
        assigneeId: issueData.assigneeId,
        projectId: issueData.projectId
      });
      if (!issueCreatePayload.success) {
        throw new Error("Linear API error: Failed to create issue");
      }
      const createdIssue = await issueCreatePayload.issue;
      if (!createdIssue) {
        throw new Error("Failed to retrieve created issue from Linear");
      }
      const linearIssue = await this.convertToLinearIssue(createdIssue);
      console.log(`✅ Created Linear issue: ${linearIssue.identifier} - ${linearIssue.title}`);
      return linearIssue;
    } catch (error) {
      throw new Error(`Failed to create Linear issue from TestFlight feedback: ${error}`);
    }
  }
  async updateIssueStatus(issueId, statusName) {
    try {
      const status = await this.getIssueStatusByName(statusName);
      const updatePayload = await this.sdk.updateIssue(issueId, {
        stateId: status.id
      });
      if (!updatePayload.success) {
        throw new Error("Linear API error: Failed to update issue");
      }
      const updatedIssue = await updatePayload.issue;
      if (!updatedIssue) {
        throw new Error("Failed to retrieve updated issue from Linear");
      }
      return await this.convertToLinearIssue(updatedIssue);
    } catch (error) {
      throw new Error(`Failed to update Linear issue status: ${error}`);
    }
  }
  async addCommentToIssue(issueId, body) {
    try {
      const commentPayload = await this.sdk.createComment({
        issueId,
        body
      });
      if (!commentPayload.success) {
        throw new Error("Linear API error: Failed to create comment");
      }
      const comment = await commentPayload.comment;
      if (!comment) {
        throw new Error("Failed to retrieve created comment from Linear");
      }
      const issueBasic = await comment.issue;
      const team = await this.getTeam();
      const issueForComment = issueBasic ? await this.convertToLinearIssue(issueBasic) : {
        id: "unknown",
        identifier: "unknown",
        title: "Unknown Issue",
        description: "",
        url: "",
        priority: 3,
        state: {
          id: "unknown",
          name: "Unknown",
          description: "",
          color: "#000000",
          position: 0,
          type: "backlog",
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          team
        },
        assignee: undefined,
        team,
        labels: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        estimate: 0,
        sortOrder: 0,
        number: 0,
        creator: await this.createFallbackUser(),
        parent: undefined,
        children: [],
        relations: [],
        comments: [],
        attachments: [],
        project: undefined,
        cycle: undefined,
        previousIdentifiers: [],
        customerTicketCount: 0,
        subscribers: []
      };
      return {
        id: comment.id,
        body: comment.body,
        user: await this.convertToLinearUser(comment.user),
        issue: issueForComment,
        url: issueBasic ? `${issueBasic.url}#comment-${comment.id}` : "",
        createdAt: comment.createdAt.toISOString(),
        updatedAt: comment.updatedAt.toISOString()
      };
    } catch (error) {
      throw new Error(`Failed to add comment to Linear issue: ${error}`);
    }
  }
  async findDuplicateIssue(feedback) {
    try {
      const searchQuery = `TestFlight ID: ${feedback.id}`;
      const issues = await this.sdk.issues({
        filter: {
          team: { id: { eq: this.config.teamId } },
          or: [
            { title: { containsIgnoreCase: feedback.id } },
            { description: { containsIgnoreCase: searchQuery } }
          ]
        },
        first: 5
      });
      for (const issue of issues.nodes) {
        const description = await issue.description;
        if (description?.includes(`TestFlight ID: ${feedback.id}`)) {
          return await this.convertToLinearIssue(issue);
        }
      }
      return null;
    } catch (error) {
      console.warn(`Error searching for duplicate issues: ${error}`);
      return null;
    }
  }
  async getTeam() {
    if (this.teamCache) {
      return this.teamCache;
    }
    try {
      const team = await this.sdk.team(this.config.teamId);
      this.teamCache = await this.convertToLinearTeam(team);
      return this.teamCache;
    } catch (error) {
      throw new Error(`Failed to get Linear team: ${error}`);
    }
  }
  async getIssueStatuses() {
    try {
      const states = await this.sdk.workflowStates({
        filter: {
          team: { id: { eq: this.config.teamId } }
        }
      });
      const statuses = [];
      for (const state of states.nodes) {
        statuses.push(await this.convertToLinearIssueStatus(state));
      }
      return statuses;
    } catch (error) {
      throw new Error(`Failed to get Linear issue statuses: ${error}`);
    }
  }
  async getIssueStatusByName(statusName) {
    try {
      const states = await this.sdk.workflowStates({
        filter: {
          team: { id: { eq: this.config.teamId } },
          name: { eq: statusName }
        }
      });
      if (states.nodes.length === 0) {
        throw new Error(`Issue status '${statusName}' not found`);
      }
      return await this.convertToLinearIssueStatus(states.nodes[0]);
    } catch (error) {
      throw new Error(`Failed to get Linear issue status: ${error}`);
    }
  }
  async getIssueLabels() {
    try {
      const labels = await this.sdk.issueLabels({
        filter: {
          team: { id: { eq: this.config.teamId } }
        }
      });
      const issueLabels = [];
      for (const label of labels.nodes) {
        issueLabels.push(await this.convertToLinearIssueLabel(label));
      }
      return issueLabels;
    } catch (error) {
      throw new Error(`Failed to get Linear issue labels: ${error}`);
    }
  }
  async getRecentIssues(limit = 20) {
    try {
      const issues = await this.sdk.issues({
        filter: {
          team: { id: { eq: this.config.teamId } }
        },
        first: limit
      });
      const linearIssues = [];
      for (const issue of issues.nodes) {
        linearIssues.push(await this.convertToLinearIssue(issue));
      }
      return linearIssues;
    } catch (error) {
      throw new Error(`Failed to get recent Linear issues: ${error}`);
    }
  }
  async getProjects() {
    try {
      const projects = await this.sdk.projects();
      const linearProjects = [];
      for (const project of projects.nodes) {
        linearProjects.push(await this.convertToLinearProject(project));
      }
      return linearProjects;
    } catch (error) {
      throw new Error(`Failed to get Linear projects: ${error}`);
    }
  }
  async getCurrentUser() {
    try {
      const viewer = await this.sdk.viewer;
      return await this.convertToLinearUser(viewer);
    } catch (error) {
      throw new Error(`Failed to get current Linear user: ${error}`);
    }
  }
  async healthCheck() {
    try {
      const [team, user] = await Promise.all([
        this.getTeam(),
        this.getCurrentUser()
      ]);
      return {
        status: "healthy",
        details: {
          teamName: team.name,
          teamKey: team.key,
          currentUser: user.name,
          configuredTeamId: this.config.teamId,
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      return {
        status: "unhealthy",
        details: {
          error: error.message,
          configuredTeamId: this.config.teamId,
          timestamp: new Date().toISOString()
        }
      };
    }
  }
  async convertToLinearIssue(issue) {
    const team = await this.getTeam();
    const state = await issue.state;
    const assignee = await issue.assignee;
    const creator = await issue.creator;
    return {
      id: issue.id,
      identifier: issue.identifier,
      title: issue.title,
      description: await issue.description || "",
      url: issue.url,
      priority: this.mapLinearPriorityToPriority(issue.priority),
      state: await this.convertToLinearIssueStatus(state),
      assignee: assignee ? await this.convertToLinearUser(assignee) : undefined,
      team,
      labels: [],
      createdAt: issue.createdAt.toISOString(),
      updatedAt: issue.updatedAt.toISOString(),
      estimate: issue.estimate || 0,
      sortOrder: issue.sortOrder || 0,
      number: issue.number,
      dueDate: issue.dueDate?.toISOString(),
      completedAt: issue.completedAt?.toISOString(),
      canceledAt: issue.canceledAt?.toISOString(),
      autoClosedAt: issue.autoClosedAt?.toISOString(),
      autoArchivedAt: issue.autoArchivedAt?.toISOString(),
      archivedAt: issue.archivedAt?.toISOString(),
      creator: creator ? await this.convertToLinearUser(creator) : await this.createFallbackUser(),
      parent: undefined,
      children: [],
      relations: [],
      comments: [],
      attachments: [],
      project: undefined,
      cycle: undefined,
      previousIdentifiers: [],
      customerTicketCount: 0,
      subscribers: []
    };
  }
  async createFallbackUser() {
    return {
      id: "unknown",
      name: "Unknown User",
      displayName: "Unknown User",
      email: "",
      avatarUrl: undefined,
      isMe: false,
      isAdmin: false,
      isGuest: true,
      active: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  }
  async convertToLinearUser(user) {
    return {
      id: user.id,
      name: user.name,
      displayName: user.displayName || user.name,
      email: user.email,
      avatarUrl: user.avatarUrl,
      isMe: user.isMe || false,
      isAdmin: user.admin || false,
      isGuest: user.guest || false,
      active: user.active || true,
      createdAt: user.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: user.updatedAt?.toISOString() || new Date().toISOString()
    };
  }
  async convertToLinearTeam(team) {
    return {
      id: team.id,
      name: team.name,
      key: team.key,
      description: await team.description || "",
      icon: team.icon,
      color: team.color,
      private: team.private || false,
      autoArchivePeriod: team.autoArchivePeriod || 0,
      autoCloseParentIssues: team.autoCloseParentIssues || false,
      cyclesEnabled: team.cyclesEnabled || false,
      cycleStartDay: team.cycleStartDay || 0,
      cycleDuration: team.cycleDuration || 1,
      cycleCooldownTime: team.cycleCooldownTime || 0,
      upcomingCycleCount: team.upcomingCycleCount || 0,
      timezone: team.timezone || "UTC",
      inviteHash: team.inviteHash || "",
      issueEstimationType: team.issueEstimationType || "notUsed",
      issueEstimationAllowZero: team.issueEstimationAllowZero || false,
      issueEstimationExtended: team.issueEstimationExtended || false,
      issueOrderingNoPriorityFirst: team.issueOrderingNoPriorityFirst || false,
      issueSortOrderDefaultToBottom: team.issueSortOrderDefaultToBottom || false,
      defaultIssueEstimate: team.defaultIssueEstimate,
      defaultTemplateForMembersId: team.defaultTemplateForMembersId,
      defaultTemplateForNonMembersId: team.defaultTemplateForNonMembersId,
      triageEnabled: team.triageEnabled || false,
      requirePriorityToLeaveTriage: team.requirePriorityToLeaveTriage || false,
      createdAt: team.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: team.updatedAt?.toISOString() || new Date().toISOString(),
      archivedAt: team.archivedAt?.toISOString()
    };
  }
  async convertToLinearIssueStatus(state) {
    const team = await this.getTeam();
    return {
      id: state.id,
      name: state.name,
      description: state.description,
      color: state.color,
      position: state.position || 0,
      type: this.mapStateTypeToLinearIssueState(state.type),
      createdAt: state.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: state.updatedAt?.toISOString() || new Date().toISOString(),
      archivedAt: state.archivedAt?.toISOString(),
      team
    };
  }
  async convertToLinearIssueLabel(label) {
    const team = await this.getTeam();
    return {
      id: label.id,
      name: label.name,
      color: label.color,
      description: await label.description || "",
      parent: undefined,
      children: [],
      createdAt: label.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: label.updatedAt?.toISOString() || new Date().toISOString(),
      archivedAt: label.archivedAt?.toISOString(),
      creator: await this.createFallbackUser(),
      team
    };
  }
  async convertToLinearProject(project) {
    return {
      id: project.id,
      name: project.name,
      description: await project.description || "",
      slug: project.slug || project.name.toLowerCase().replace(/\s+/g, "-"),
      icon: project.icon,
      color: project.color,
      state: project.state || "planned",
      content: await project.content,
      priority: this.mapLinearPriorityToPriority(project.priority),
      sortOrder: project.sortOrder || 0,
      startDate: project.startDate?.toISOString(),
      targetDate: project.targetDate?.toISOString(),
      completedAt: project.completedAt?.toISOString(),
      canceledAt: project.canceledAt?.toISOString(),
      autoArchivedAt: project.autoArchivedAt?.toISOString(),
      createdAt: project.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: project.updatedAt?.toISOString() || new Date().toISOString(),
      archivedAt: project.archivedAt?.toISOString(),
      creator: await this.convertToLinearUser(await project.creator),
      lead: undefined,
      members: [],
      teams: [],
      milestones: [],
      documents: [],
      links: [],
      requirements: [],
      roadmaps: []
    };
  }
  prepareIssueFromTestFlight(feedback, additionalLabels = [], assigneeId, projectId) {
    const isCrash = feedback.type === "crash";
    const typeIcon = isCrash ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    const typeLabel = isCrash ? "Crash Report" : "User Feedback";
    let title = `${typeIcon} ${typeLabel}: ${feedback.appVersion} (${feedback.buildNumber})`;
    if (isCrash && feedback.crashData?.exceptionType) {
      title += ` - ${feedback.crashData.exceptionType}`;
    } else if (feedback.screenshotData?.text) {
      const shortText = feedback.screenshotData.text.substring(0, 40);
      title += ` - ${shortText}${shortText.length < feedback.screenshotData.text.length ? "..." : ""}`;
    }
    let description = `## ${typeIcon} ${typeLabel} from TestFlight

`;
    description += `| Field | Value |
`;
    description += `|-------|-------|
`;
    description += `| **TestFlight ID** | \`${feedback.id}\` |
`;
    description += `| **App Version** | ${feedback.appVersion} (Build ${feedback.buildNumber}) |
`;
    description += `| **Submitted** | ${feedback.submittedAt.toISOString()} |
`;
    description += `| **Device** | ${feedback.deviceInfo.model} |
`;
    description += `| **OS Version** | ${feedback.deviceInfo.osVersion} |
`;
    description += `| **Locale** | ${feedback.deviceInfo.locale} |

`;
    if (isCrash && feedback.crashData) {
      description += `### \uD83D\uDD0D Crash Details

`;
      description += `**Type:** ${feedback.crashData.type}

`;
      if (feedback.crashData.exceptionType) {
        description += `**Exception:** \`${feedback.crashData.exceptionType}\`

`;
      }
      if (feedback.crashData.exceptionMessage) {
        description += `**Message:**
\`\`\`
${feedback.crashData.exceptionMessage}
\`\`\`

`;
      }
      description += `### Stack Trace
\`\`\`
${feedback.crashData.trace}
\`\`\`

`;
      if (feedback.crashData.logs.length > 0) {
        description += `### Crash Logs
`;
        feedback.crashData.logs.forEach((log, index) => {
          description += `- [Crash Log ${index + 1}](${log.url}) (expires: ${log.expiresAt.toLocaleDateString()})
`;
        });
        description += `
`;
      }
    }
    if (feedback.screenshotData) {
      description += `### \uD83D\uDCDD User Feedback

`;
      if (feedback.screenshotData.text) {
        description += `**Feedback Text:**
> ${feedback.screenshotData.text.replace(/\n/g, `
> `)}

`;
      }
      if (feedback.screenshotData.images.length > 0) {
        description += `**Screenshots:** ${feedback.screenshotData.images.length} attached

`;
      }
      if (feedback.screenshotData.annotations && feedback.screenshotData.annotations.length > 0) {
        description += `**Annotations:** ${feedback.screenshotData.annotations.length} user annotation(s)

`;
      }
    }
    description += `### \uD83D\uDEE0️ Technical Information

`;
    description += `<details>
<summary>Device & Environment Details</summary>

`;
    description += `- **Device Family:** ${feedback.deviceInfo.family}
`;
    description += `- **Device Model:** ${feedback.deviceInfo.model}
`;
    description += `- **OS Version:** ${feedback.deviceInfo.osVersion}
`;
    description += `- **Locale:** ${feedback.deviceInfo.locale}
`;
    description += `- **Bundle ID:** ${feedback.bundleId}
`;
    description += `- **Submission Time:** ${feedback.submittedAt.toISOString()}
`;
    description += `
</details>

`;
    description += `---
*Automatically created from TestFlight feedback. ID: \`${feedback.id}\`*`;
    const baseLabels = isCrash ? this.config.crashLabels : this.config.feedbackLabels;
    const allLabels = [
      ...this.config.defaultLabels,
      ...baseLabels,
      ...additionalLabels
    ];
    let priority = this.config.defaultPriority;
    if (isCrash) {
      priority = 2;
    }
    return {
      title,
      description,
      teamId: this.config.teamId,
      priority,
      assigneeId,
      projectId,
      labels: allLabels
    };
  }
  async addTestFlightCommentToIssue(issueId, feedback) {
    const typeIcon = feedback.type === "crash" ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    let commentBody = `${typeIcon} **Additional TestFlight ${feedback.type} report**

`;
    commentBody += `**TestFlight ID:** ${feedback.id}
`;
    commentBody += `**Submitted:** ${feedback.submittedAt.toISOString()}
`;
    commentBody += `**Device:** ${feedback.deviceInfo.model} (${feedback.deviceInfo.osVersion})
`;
    if (feedback.screenshotData?.text) {
      commentBody += `
**User Feedback:**
> ${feedback.screenshotData.text}`;
    }
    return await this.addCommentToIssue(issueId, commentBody);
  }
  mapPriorityToLinearPriority(priority) {
    if (typeof priority === "number") {
      return priority;
    }
    switch (priority) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 3:
        return 3;
      case 4:
        return 4;
      default:
        return 3;
    }
  }
  mapLinearPriorityToPriority(priority) {
    switch (priority) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 3:
        return 3;
      case 4:
        return 4;
      default:
        return 3;
    }
  }
  mapStateTypeToLinearIssueState(stateType) {
    switch (stateType) {
      case "backlog":
        return "backlog";
      case "unstarted":
        return "unstarted";
      case "started":
        return "started";
      case "completed":
        return "completed";
      case "canceled":
        return "canceled";
      default:
        return "backlog";
    }
  }
}
function getLinearClient() {
  if (!_linearClientInstance) {
    _linearClientInstance = new LinearClient;
  }
  return _linearClientInstance;
}
function clearLinearClientInstance() {
  _linearClientInstance = null;
}
function validateLinearConfig2() {
  try {
    const config = getConfiguration();
    return !!(config.linear?.apiToken && config.linear?.teamId);
  } catch {
    return false;
  }
}
var import_sdk, _linearClientInstance = null;
var init_linear_client = __esm(() => {
  import_sdk = __toESM(require_index_cjs_min(), 1);
  init_config();
});

// src/utils/state-manager.ts
import { promises as fs } from "node:fs";
import { dirname, join } from "node:path";

class TestFlightStateManager {
  config;
  state = null;
  stateVersion = "1.0.0";
  constructor(config) {
    this.config = {
      stateFilePath: join(PATHS.TEMP_DIR, "processed-feedback-state.json"),
      maxRetainedIds: 1e4,
      cacheExpiryHours: 168,
      enableGitHubActionsCache: process.env.GITHUB_ACTIONS === "true",
      ...config
    };
  }
  async loadState() {
    if (this.state) {
      return this.state;
    }
    try {
      if (this.config.enableGitHubActionsCache) {
        const cachedState = await this.loadFromGitHubCache();
        if (cachedState) {
          this.state = cachedState;
          return this.state;
        }
      }
      const fileState = await this.loadFromFile();
      this.state = fileState;
      return this.state;
    } catch (error) {
      console.warn(`Failed to load state: ${error}. Initializing fresh state.`);
      this.state = this.createFreshState();
      return this.state;
    }
  }
  async saveState() {
    if (!this.state) {
      throw new Error("No state to save. Call loadState() first.");
    }
    this.state.lastUpdated = new Date;
    try {
      if (this.config.enableGitHubActionsCache) {
        await this.saveToGitHubCache(this.state);
      }
      await this.saveToFile(this.state);
      console.log(`State saved: ${this.state.feedbackIds.size} processed IDs tracked`);
    } catch (error) {
      console.error(`Failed to save state: ${error}`);
      throw error;
    }
  }
  async isProcessed(feedbackId) {
    const state = await this.loadState();
    return state.feedbackIds.has(feedbackId);
  }
  async markAsProcessed(feedbackIds, actionRunId) {
    const state = await this.loadState();
    for (const id of feedbackIds) {
      state.feedbackIds.add(id);
    }
    state.metadata.totalProcessed += feedbackIds.length;
    state.metadata.lastProcessedTimestamp = new Date().toISOString();
    state.actionRunId = actionRunId;
    await this.cleanupOldIds();
    this.state = state;
  }
  async filterUnprocessed(feedbackItems) {
    const state = await this.loadState();
    return feedbackItems.filter((item) => !state.feedbackIds.has(item.id));
  }
  async getStats() {
    const state = await this.loadState();
    const ageMs = Date.now() - state.lastUpdated.getTime();
    const ageHours = Math.floor(ageMs / (1000 * 60 * 60));
    const ageMinutes = Math.floor(ageMs % (1000 * 60 * 60) / (1000 * 60));
    return {
      totalProcessed: state.metadata.totalProcessed,
      lastProcessedAt: state.metadata.lastProcessedTimestamp,
      currentlyCached: state.feedbackIds.size,
      cacheAge: `${ageHours}h ${ageMinutes}m`,
      actionRunId: state.actionRunId
    };
  }
  async cleanupOldIds() {
    if (!this.state) {
      return;
    }
    const { feedbackIds, lastUpdated } = this.state;
    const expiryDate = new Date;
    expiryDate.setHours(expiryDate.getHours() - this.config.cacheExpiryHours);
    if (lastUpdated < expiryDate) {
      console.log("Cache expired. Clearing old processed IDs.");
      feedbackIds.clear();
      return;
    }
    if (feedbackIds.size > this.config.maxRetainedIds) {
      const excess = feedbackIds.size - this.config.maxRetainedIds;
      const idsArray = Array.from(feedbackIds);
      for (let i = 0;i < excess && i < idsArray.length; i++) {
        const id = idsArray[i];
        if (id) {
          feedbackIds.delete(id);
        }
      }
      console.log(`Cleaned up ${excess} old processed IDs`);
    }
  }
  createFreshState() {
    return {
      feedbackIds: new Set,
      lastUpdated: new Date,
      metadata: {
        totalProcessed: 0,
        lastProcessedTimestamp: new Date().toISOString(),
        version: this.stateVersion
      }
    };
  }
  async loadFromGitHubCache() {
    try {
      const _cacheKey = "testflight-pm-processed-feedback";
      const cachePath = this.config.stateFilePath;
      const cacheData = await fs.readFile(cachePath, "utf8");
      return this.deserializeState(cacheData);
    } catch {
      return null;
    }
  }
  async saveToGitHubCache(state) {
    try {
      const serialized = this.serializeState(state);
      await this.ensureDirectoryExists();
      await fs.writeFile(this.config.stateFilePath, serialized, "utf8");
      console.log("State cached for GitHub Actions");
    } catch (error) {
      console.warn(`Failed to save to GitHub cache: ${error}`);
    }
  }
  async loadFromFile() {
    try {
      const data = await fs.readFile(this.config.stateFilePath, "utf8");
      return this.deserializeState(data);
    } catch {
      return this.createFreshState();
    }
  }
  async saveToFile(state) {
    try {
      const serialized = this.serializeState(state);
      await this.ensureDirectoryExists();
      await fs.writeFile(this.config.stateFilePath, serialized, "utf8");
    } catch (error) {
      console.error(`Failed to save state to file: ${error}`);
      throw error;
    }
  }
  serializeState(state) {
    return JSON.stringify({
      ...state,
      feedbackIds: Array.from(state.feedbackIds),
      lastUpdated: state.lastUpdated.toISOString()
    });
  }
  deserializeState(data) {
    const parsed = JSON.parse(data);
    return {
      ...parsed,
      feedbackIds: new Set(parsed.feedbackIds),
      lastUpdated: new Date(parsed.lastUpdated)
    };
  }
  async ensureDirectoryExists() {
    const directory = dirname(this.config.stateFilePath);
    try {
      await fs.mkdir(directory, { recursive: true });
    } catch (_error) {}
  }
  async clearState() {
    this.state = this.createFreshState();
    try {
      await fs.unlink(this.config.stateFilePath);
    } catch {}
  }
}
function getStateManager() {
  if (!_stateManagerInstance) {
    _stateManagerInstance = new TestFlightStateManager;
  }
  return _stateManagerInstance;
}
var _stateManagerInstance = null;
var init_state_manager = __esm(() => {
  init_config();
});

// src/utils/idempotency-service.ts
class IdempotencyService {
  config;
  constructor(config) {
    this.config = {
      enableStateTracking: true,
      enableGitHubDuplicateDetection: true,
      enableLinearDuplicateDetection: true,
      retryAttempts: DEFAULT_HTTP_CONFIG.retries,
      retryDelayMs: DEFAULT_HTTP_CONFIG.retryDelay,
      searchTimeoutMs: 1e4,
      confidenceThreshold: 0.7,
      ...config
    };
  }
  async createIssueWithDuplicateProtection(feedback, options = {}) {
    const startTime = Date.now();
    const result = {
      duplicateDetection: {
        isDuplicate: false,
        platform: "none",
        confidence: 0,
        reasons: [],
        searchDuration: 0
      },
      processedBy: [],
      totalDuration: 0,
      errors: []
    };
    try {
      if (this.config.enableStateTracking && !options.skipDuplicateDetection) {
        const stateResult = await this.checkStateForDuplicate(feedback);
        if (stateResult.isDuplicate) {
          result.duplicateDetection = stateResult;
          result.totalDuration = Date.now() - startTime;
          return result;
        }
      }
      if (!options.skipDuplicateDetection) {
        const duplicateResult = await this.performComprehensiveDuplicateCheck(feedback);
        if (duplicateResult.isDuplicate && duplicateResult.confidence >= this.config.confidenceThreshold) {
          result.duplicateDetection = duplicateResult;
          await this.addCommentToExistingIssue(feedback, duplicateResult);
          result.totalDuration = Date.now() - startTime;
          return result;
        }
        result.duplicateDetection = duplicateResult;
      }
      const { preferredPlatform = "both" } = options;
      if (preferredPlatform === "github" || preferredPlatform === "both") {
        try {
          const githubClient = getGitHubClient();
          result.github = await githubClient.createIssueFromTestFlight(feedback, {
            enableDuplicateDetection: false
          });
          result.processedBy.push("github");
        } catch (error) {
          result.errors.push(`GitHub: ${error.message}`);
        }
      }
      if (preferredPlatform === "linear" || preferredPlatform === "both") {
        try {
          const linearClient = getLinearClient();
          const linearIssue = await linearClient.createIssueFromTestFlight(feedback, [], undefined, undefined);
          result.linear = {
            issue: linearIssue,
            wasExisting: false,
            action: "created",
            message: `Created new Linear issue ${linearIssue.identifier}`
          };
          result.processedBy.push("linear");
        } catch (error) {
          result.errors.push(`Linear: ${error.message}`);
        }
      }
      if (this.config.enableStateTracking) {
        try {
          const stateManager = getStateManager();
          await stateManager.markAsProcessed([feedback.id], options.actionRunId);
        } catch (error) {
          console.warn(`Failed to update state tracking: ${error}`);
          result.errors.push(`State tracking: ${error.message}`);
        }
      }
      result.totalDuration = Date.now() - startTime;
      return result;
    } catch (error) {
      result.errors.push(`Service error: ${error.message}`);
      result.totalDuration = Date.now() - startTime;
      throw error;
    }
  }
  async checkStateForDuplicate(feedback) {
    const startTime = Date.now();
    try {
      const stateManager = getStateManager();
      const isProcessed = await stateManager.isProcessed(feedback.id);
      if (isProcessed) {
        const stats = await stateManager.getStats();
        return {
          isDuplicate: true,
          platform: "state",
          confidence: 1,
          reasons: [
            `Feedback ID ${feedback.id} already processed`,
            `Last processed: ${stats.lastProcessedAt}`,
            `Run ID: ${stats.actionRunId || "unknown"}`
          ],
          searchDuration: Date.now() - startTime
        };
      }
      return {
        isDuplicate: false,
        platform: "state",
        confidence: 0,
        reasons: ["Not found in state tracking"],
        searchDuration: Date.now() - startTime
      };
    } catch (error) {
      console.warn(`State duplicate check failed: ${error}`);
      return {
        isDuplicate: false,
        platform: "state",
        confidence: 0,
        reasons: [`State check failed: ${error.message}`],
        searchDuration: Date.now() - startTime
      };
    }
  }
  async performComprehensiveDuplicateCheck(feedback) {
    const startTime = Date.now();
    const results = [];
    if (this.config.enableGitHubDuplicateDetection) {
      try {
        const githubResult = await this.checkGitHubForDuplicates(feedback);
        results.push(githubResult);
      } catch (error) {
        console.warn(`GitHub duplicate check failed: ${error}`);
        results.push({
          isDuplicate: false,
          platform: "github",
          confidence: 0,
          reasons: [`GitHub search failed: ${error.message}`],
          searchDuration: 0
        });
      }
    }
    if (this.config.enableLinearDuplicateDetection) {
      try {
        const linearResult = await this.checkLinearForDuplicates(feedback);
        results.push(linearResult);
      } catch (error) {
        console.warn(`Linear duplicate check failed: ${error}`);
        results.push({
          isDuplicate: false,
          platform: "linear",
          confidence: 0,
          reasons: [`Linear search failed: ${error.message}`],
          searchDuration: 0
        });
      }
    }
    const duplicateResults = results.filter((r) => r.isDuplicate);
    if (duplicateResults.length > 0) {
      const bestMatch = duplicateResults.reduce((best, current) => current.confidence > best.confidence ? current : best);
      bestMatch.searchDuration = Date.now() - startTime;
      bestMatch.reasons.push(...results.flatMap((r) => r.reasons).filter((reason) => !bestMatch.reasons.includes(reason)));
      return bestMatch;
    }
    return {
      isDuplicate: false,
      platform: "none",
      confidence: 0,
      reasons: results.flatMap((r) => r.reasons),
      searchDuration: Date.now() - startTime
    };
  }
  async checkGitHubForDuplicates(feedback) {
    const startTime = Date.now();
    for (let attempt = 0;attempt <= this.config.retryAttempts; attempt++) {
      try {
        const githubClient = getGitHubClient();
        const duplicateResult = await Promise.race([
          githubClient.findDuplicateIssue(feedback),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Search timeout")), this.config.searchTimeoutMs))
        ]);
        if (duplicateResult.isDuplicate && duplicateResult.existingIssue) {
          return {
            isDuplicate: true,
            platform: "github",
            existingIssue: {
              id: duplicateResult.existingIssue.id.toString(),
              url: duplicateResult.existingIssue.html_url,
              number: duplicateResult.existingIssue.number,
              title: duplicateResult.existingIssue.title
            },
            confidence: duplicateResult.confidence,
            reasons: duplicateResult.reasons,
            searchDuration: Date.now() - startTime
          };
        }
        return {
          isDuplicate: false,
          platform: "github",
          confidence: 0,
          reasons: duplicateResult.reasons,
          searchDuration: Date.now() - startTime
        };
      } catch (error) {
        if (attempt === this.config.retryAttempts) {
          throw error;
        }
        const delay = this.config.retryDelayMs * 2 ** attempt;
        await new Promise((resolve2) => setTimeout(resolve2, delay));
      }
    }
    throw new Error("All retry attempts failed");
  }
  async checkLinearForDuplicates(feedback) {
    const startTime = Date.now();
    for (let attempt = 0;attempt <= this.config.retryAttempts; attempt++) {
      try {
        const linearClient = getLinearClient();
        const duplicateIssue = await Promise.race([
          linearClient.findDuplicateIssue(feedback),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Search timeout")), this.config.searchTimeoutMs))
        ]);
        if (duplicateIssue) {
          return {
            isDuplicate: true,
            platform: "linear",
            existingIssue: {
              id: duplicateIssue.id,
              url: duplicateIssue.url,
              identifier: duplicateIssue.identifier,
              title: duplicateIssue.title
            },
            confidence: 1,
            reasons: [
              `Found exact match in Linear: ${duplicateIssue.identifier}`
            ],
            searchDuration: Date.now() - startTime
          };
        }
        return {
          isDuplicate: false,
          platform: "linear",
          confidence: 0,
          reasons: ["No duplicate found in Linear"],
          searchDuration: Date.now() - startTime
        };
      } catch (error) {
        if (attempt === this.config.retryAttempts) {
          throw error;
        }
        const delay = this.config.retryDelayMs * 2 ** attempt;
        await new Promise((resolve2) => setTimeout(resolve2, delay));
      }
    }
    throw new Error("All retry attempts failed");
  }
  async addCommentToExistingIssue(feedback, duplicateResult) {
    if (!duplicateResult.isDuplicate || !duplicateResult.existingIssue) {
      return;
    }
    const typeIcon = feedback.type === "crash" ? "\uD83D\uDCA5" : "\uD83D\uDCF1";
    const commentBody = `${typeIcon} **Additional TestFlight ${feedback.type} report detected**

` + `**TestFlight ID:** ${feedback.id}
` + `**Submitted:** ${feedback.submittedAt.toISOString()}
` + `**Device:** ${feedback.deviceInfo.model} (${feedback.deviceInfo.osVersion})
` + `**Detection:** Found by idempotency service (confidence: ${duplicateResult.confidence.toFixed(2)})

` + `*Note: This feedback was automatically detected as duplicate and no new issue was created.*`;
    try {
      if (duplicateResult.platform === "github" && duplicateResult.existingIssue.number) {
        const githubClient = getGitHubClient();
        await githubClient.addCommentToIssue(duplicateResult.existingIssue.number, commentBody);
        console.log(`Added comment to GitHub issue #${duplicateResult.existingIssue.number}`);
      } else if (duplicateResult.platform === "linear") {
        const linearClient = getLinearClient();
        await linearClient.addCommentToIssue(duplicateResult.existingIssue.id, commentBody);
        console.log(`Added comment to Linear issue ${duplicateResult.existingIssue.identifier}`);
      }
    } catch (error) {
      console.warn(`Failed to add comment to existing issue: ${error}`);
    }
  }
  async getStatistics() {
    const stateManager = getStateManager();
    const stateStats = await stateManager.getStats();
    return {
      stateTracking: {
        totalProcessed: stateStats.totalProcessed,
        currentlyCached: stateStats.currentlyCached,
        cacheAge: stateStats.cacheAge
      },
      configuration: this.config,
      lastUpdated: new Date().toISOString()
    };
  }
}
function getIdempotencyService() {
  if (!_idempotencyServiceInstance) {
    _idempotencyServiceInstance = new IdempotencyService;
  }
  return _idempotencyServiceInstance;
}
var _idempotencyServiceInstance = null;
var init_idempotency_service = __esm(() => {
  init_github_client();
  init_linear_client();
  init_config();
  init_state_manager();
});

// src/utils/processing-window.ts
var exports_processing_window = {};
__export(exports_processing_window, {
  getProcessingWindowCalculator: () => getProcessingWindowCalculator,
  getOptimalMonitoringSince: () => getOptimalMonitoringSince,
  clearProcessingWindowCalculatorInstance: () => clearProcessingWindowCalculatorInstance,
  ProcessingWindowCalculator: () => ProcessingWindowCalculator
});

class ProcessingWindowCalculator {
  config;
  constructor(config) {
    this.config = {
      defaultLookbackHours: 24,
      bufferMinutes: 30,
      maxLookbackHours: 168,
      minLookbackMinutes: 15,
      enableAdaptiveWindows: true,
      overlapPrevention: true,
      ...config
    };
  }
  async calculateOptimalWindow(explicitSince, explicitFrequency) {
    if (explicitSince) {
      return this.createWindowFromExplicitTime(explicitSince);
    }
    let frequency;
    if (explicitFrequency) {
      frequency = explicitFrequency;
    } else if (this.config.enableAdaptiveWindows) {
      const detectionResult = await this.detectScheduleFrequency();
      frequency = detectionResult.detectedFrequency;
    } else {
      frequency = "daily";
    }
    return this.calculateWindowForFrequency(frequency);
  }
  async detectScheduleFrequency() {
    try {
      const stateManager = getStateManager();
      const stats = await stateManager.getStats();
      const githubActionsIndicators = this.detectGitHubActionsSchedule();
      if (githubActionsIndicators.frequency !== "manual") {
        return {
          detectedFrequency: githubActionsIndicators.frequency,
          confidence: githubActionsIndicators.confidence,
          reasoning: githubActionsIndicators.reasoning,
          recommendedWindow: this.calculateWindowForFrequency(githubActionsIndicators.frequency)
        };
      }
      const historicalPattern = await this.analyzeHistoricalPattern(stats);
      if (historicalPattern.confidence > 0.7) {
        return {
          detectedFrequency: historicalPattern.frequency,
          confidence: historicalPattern.confidence,
          reasoning: historicalPattern.reasoning,
          recommendedWindow: this.calculateWindowForFrequency(historicalPattern.frequency)
        };
      }
      const defaultFrequency = "daily";
      return {
        detectedFrequency: defaultFrequency,
        confidence: 0.5,
        reasoning: [
          "No clear pattern detected",
          "Using conservative daily default"
        ],
        recommendedWindow: this.calculateWindowForFrequency(defaultFrequency)
      };
    } catch (error) {
      console.warn(`Failed to detect schedule frequency: ${error}`);
      const defaultFrequency = "daily";
      return {
        detectedFrequency: defaultFrequency,
        confidence: 0.3,
        reasoning: [
          `Detection failed: ${error.message}`,
          "Using safe daily default"
        ],
        recommendedWindow: this.calculateWindowForFrequency(defaultFrequency)
      };
    }
  }
  calculateWindowForFrequency(frequency) {
    const now = new Date;
    const endTime = new Date(now);
    let durationHours;
    let { bufferMinutes } = this.config;
    let rationale;
    switch (frequency) {
      case "continuous":
        durationHours = 0.25;
        bufferMinutes = 5;
        rationale = "Continuous monitoring with minimal overlap";
        break;
      case "hourly":
        durationHours = 1.5;
        bufferMinutes = 15;
        rationale = "Hourly schedule with 30-minute overlap buffer";
        break;
      case "every-2-hours":
        durationHours = 2.5;
        bufferMinutes = 15;
        rationale = "2-hour schedule with 30-minute overlap buffer";
        break;
      case "every-4-hours":
        durationHours = 4.5;
        bufferMinutes = 30;
        rationale = "4-hour schedule with 30-minute overlap buffer";
        break;
      case "every-6-hours":
        durationHours = 6.5;
        bufferMinutes = 30;
        rationale = "6-hour schedule with 30-minute overlap buffer";
        break;
      case "every-12-hours":
        durationHours = 12.5;
        bufferMinutes = 30;
        rationale = "12-hour schedule with 30-minute overlap buffer";
        break;
      case "daily":
        durationHours = 25;
        bufferMinutes = 60;
        rationale = "Daily schedule with 1-hour overlap buffer";
        break;
      case "weekly":
        durationHours = 168 + 24;
        bufferMinutes = 120;
        rationale = "Weekly schedule with 1-day overlap buffer";
        break;
      default:
        durationHours = this.config.defaultLookbackHours;
        bufferMinutes = this.config.bufferMinutes;
        rationale = "Manual trigger using default lookback period";
        break;
    }
    durationHours = Math.min(durationHours, this.config.maxLookbackHours);
    durationHours = Math.max(durationHours, this.config.minLookbackMinutes / 60);
    const startTime = new Date(endTime);
    startTime.setTime(startTime.getTime() - durationHours * 60 * 60 * 1000);
    if (this.config.overlapPrevention && bufferMinutes > 0) {
      startTime.setTime(startTime.getTime() - bufferMinutes * 60 * 1000);
      rationale += ` (${bufferMinutes}min buffer applied)`;
    }
    return {
      startTime,
      endTime,
      durationHours,
      bufferMinutes,
      rationale
    };
  }
  createWindowFromExplicitTime(explicitSince) {
    const now = new Date;
    let startTime;
    try {
      startTime = new Date(explicitSince);
      if (Number.isNaN(startTime.getTime())) {
        startTime = this.parseRelativeTime(explicitSince);
      }
    } catch (error) {
      console.warn(`Invalid explicit time "${explicitSince}": ${error}. Using default.`);
      startTime = new Date(now.getTime() - this.config.defaultLookbackHours * 60 * 60 * 1000);
    }
    const maxLookback = new Date(now.getTime() - this.config.maxLookbackHours * 60 * 60 * 1000);
    const minLookback = new Date(now.getTime() - this.config.minLookbackMinutes * 60 * 1000);
    if (startTime < maxLookback) {
      console.warn(`Explicit time too far back. Limiting to ${this.config.maxLookbackHours} hours.`);
      startTime = maxLookback;
    }
    if (startTime > minLookback) {
      console.warn(`Explicit time too recent. Setting to ${this.config.minLookbackMinutes} minutes ago.`);
      startTime = minLookback;
    }
    const durationMs = now.getTime() - startTime.getTime();
    const durationHours = durationMs / (1000 * 60 * 60);
    return {
      startTime,
      endTime: now,
      durationHours,
      bufferMinutes: 0,
      rationale: `Explicit time provided: ${explicitSince}`
    };
  }
  parseRelativeTime(timeString) {
    const now = new Date;
    const regex = /^(\d+)([mhd])$/i;
    const match = timeString.match(regex);
    if (!match || !match[1] || !match[2]) {
      throw new Error(`Invalid relative time format: ${timeString}`);
    }
    const value = parseInt(match[1], 10);
    const unit = match[2].toLowerCase();
    let milliseconds;
    switch (unit) {
      case "m":
        milliseconds = value * 60 * 1000;
        break;
      case "h":
        milliseconds = value * 60 * 60 * 1000;
        break;
      case "d":
        milliseconds = value * 24 * 60 * 60 * 1000;
        break;
      default:
        throw new Error(`Invalid time unit: ${unit}`);
    }
    return new Date(now.getTime() - milliseconds);
  }
  detectGitHubActionsSchedule() {
    const reasoning = [];
    if (process.env.GITHUB_ACTIONS !== "true") {
      reasoning.push("Not running in GitHub Actions");
      return {
        frequency: "manual",
        confidence: 0.3,
        reasoning
      };
    }
    reasoning.push("Running in GitHub Actions");
    const triggerEvent = process.env.GITHUB_EVENT_NAME;
    if (triggerEvent === "workflow_dispatch") {
      reasoning.push("Triggered manually via workflow_dispatch");
      return {
        frequency: "manual",
        confidence: 0.9,
        reasoning
      };
    }
    if (triggerEvent === "schedule") {
      reasoning.push("Triggered via scheduled event");
      const workflowName = process.env.GITHUB_WORKFLOW;
      if (workflowName) {
        reasoning.push(`Workflow: ${workflowName}`);
        const name = workflowName.toLowerCase();
        if (name.includes("hourly")) {
          return { frequency: "hourly", confidence: 0.8, reasoning };
        }
        if (name.includes("6") && name.includes("hour")) {
          return { frequency: "every-6-hours", confidence: 0.8, reasoning };
        }
        if (name.includes("daily")) {
          return { frequency: "daily", confidence: 0.8, reasoning };
        }
      }
      reasoning.push("Scheduled event but frequency unclear");
      return {
        frequency: "daily",
        confidence: 0.6,
        reasoning
      };
    }
    reasoning.push(`Unknown trigger event: ${triggerEvent}`);
    return {
      frequency: "manual",
      confidence: 0.5,
      reasoning
    };
  }
  async analyzeHistoricalPattern(stats) {
    const reasoning = [];
    let detectedFrequency = "daily";
    let confidence = 0.3;
    try {
      const { totalProcessed, lastProcessedAt, actionRunId } = stats;
      reasoning.push(`Total processed: ${totalProcessed || 0}`);
      reasoning.push(`Cache age: ${stats.cacheAge || "unknown"}`);
      if (totalProcessed > 0 && lastProcessedAt) {
        const lastProcessedDate = new Date(lastProcessedAt);
        const timeSinceLastRun = Date.now() - lastProcessedDate.getTime();
        const hoursSinceLastRun = timeSinceLastRun / (1000 * 60 * 60);
        reasoning.push(`Hours since last run: ${hoursSinceLastRun.toFixed(1)}`);
        if (hoursSinceLastRun <= 1.5) {
          detectedFrequency = "hourly";
          confidence = 0.8;
          reasoning.push("Recent processing indicates hourly schedule");
        } else if (hoursSinceLastRun <= 3) {
          detectedFrequency = "every-2-hours";
          confidence = 0.7;
          reasoning.push("Processing pattern suggests 2-hour intervals");
        } else if (hoursSinceLastRun <= 6) {
          detectedFrequency = "every-4-hours";
          confidence = 0.6;
          reasoning.push("Processing pattern suggests 4-hour intervals");
        } else if (hoursSinceLastRun <= 12) {
          detectedFrequency = "every-6-hours";
          confidence = 0.5;
          reasoning.push("Processing pattern suggests 6-hour intervals");
        } else if (hoursSinceLastRun <= 36) {
          detectedFrequency = "daily";
          confidence = 0.7;
          reasoning.push("Processing pattern indicates daily schedule");
        } else {
          detectedFrequency = "weekly";
          confidence = 0.4;
          reasoning.push("Infrequent processing suggests weekly schedule");
        }
        if (actionRunId) {
          reasoning.push(`Automated execution detected (Run ID: ${actionRunId})`);
          confidence += 0.1;
        }
        if (totalProcessed > 100) {
          reasoning.push("High processing volume suggests frequent monitoring");
          if (detectedFrequency === "weekly") {
            detectedFrequency = "daily";
            confidence += 0.1;
          }
        } else if (totalProcessed < 10) {
          reasoning.push("Low processing volume suggests less frequent monitoring");
          confidence = Math.max(0.3, confidence - 0.1);
        }
      } else {
        reasoning.push("No historical data available - using default frequency detection");
        detectedFrequency = "daily";
        confidence = 0.4;
      }
    } catch (error) {
      reasoning.push(`Historical analysis failed: ${error}`);
      confidence = 0.3;
    }
    return {
      frequency: detectedFrequency,
      confidence: Math.min(1, Math.max(0.1, confidence)),
      reasoning
    };
  }
  async getDiagnostics() {
    const detectedSchedule = await this.detectScheduleFrequency();
    const stateManager = getStateManager();
    const stateInfo = await stateManager.getStats();
    return {
      currentConfig: this.config,
      detectedSchedule,
      recommendedWindow: detectedSchedule.recommendedWindow,
      stateInfo
    };
  }
}
function getProcessingWindowCalculator() {
  if (!_calculatorInstance) {
    _calculatorInstance = new ProcessingWindowCalculator;
  }
  return _calculatorInstance;
}
function clearProcessingWindowCalculatorInstance() {
  _calculatorInstance = null;
}
async function getOptimalMonitoringSince(explicitSince, explicitFrequency) {
  const calculator = getProcessingWindowCalculator();
  const window2 = await calculator.calculateOptimalWindow(explicitSince, explicitFrequency);
  return window2.startTime;
}
var _calculatorInstance = null;
var init_processing_window = __esm(() => {
  init_state_manager();
});

// src/integrations/llm-enhanced-creator.ts
var exports_llm_enhanced_creator = {};
__export(exports_llm_enhanced_creator, {
  getLLMEnhancedIssueCreator: () => getLLMEnhancedIssueCreator,
  createEnhancedIssueFromTestFlight: () => createEnhancedIssueFromTestFlight,
  clearLLMEnhancedIssueCreatorInstance: () => clearLLMEnhancedIssueCreatorInstance,
  LLMEnhancedIssueCreator: () => LLMEnhancedIssueCreator
});

class LLMEnhancedIssueCreator {
  llmClient = getLLMClient();
  codebaseAnalyzer = getCodebaseAnalyzer();
  githubClient = getGitHubClient();
  linearClient = getLinearClient();
  idempotencyService = getIdempotencyService();
  stateManager = getStateManager();
  async createEnhancedIssue(feedback, options) {
    const startTime = Date.now();
    const result = {
      success: false,
      enhanced: false,
      platform: [],
      processingTime: 0,
      cost: 0,
      confidence: 0,
      errors: [],
      warnings: [],
      usedFallback: false
    };
    try {
      console.log(`Starting enhanced issue creation for feedback ${feedback.id}`);
      const configValid = this.validateConfiguration(options, result);
      if (!configValid) {
        return await this.fallbackToStandardCreation(feedback, options, result, "Configuration validation failed");
      }
      const context = await this.buildEnhancementContext(feedback, options, result);
      let llmAnalysis;
      if (options.enableLLMEnhancement) {
        llmAnalysis = await this.performLLMEnhancement(context, options, result);
        result.llmAnalysis = llmAnalysis;
        result.enhanced = !!llmAnalysis;
      }
      if (options.platform === "github" || options.platform === "both") {
        result.github = await this.createGitHubIssue(feedback, llmAnalysis, context, options);
        if (result.github?.issue) {
          result.platform.push("github");
        }
      }
      if (options.platform === "linear" || options.platform === "both") {
        result.linear = await this.createLinearIssue(feedback, llmAnalysis, context, options);
        if (result.linear?.issue) {
          result.platform.push("linear");
        }
      }
      if (!options.dryRun && result.platform.length > 0) {
        await this.stateManager.markAsProcessed([feedback.id], options.actionRunId);
      }
      result.success = result.platform.length > 0;
      result.processingTime = Date.now() - startTime;
      if (llmAnalysis) {
        result.cost = llmAnalysis.metadata.cost;
        result.confidence = llmAnalysis.analysis.confidence;
      }
      console.log(`Enhanced issue creation ${result.success ? "succeeded" : "failed"} for feedback ${feedback.id}`);
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`Enhanced issue creation failed: ${errorMessage}`);
      result.errors.push(errorMessage);
      return await this.fallbackToStandardCreation(feedback, options, result, errorMessage);
    }
  }
  validateConfiguration(options, result) {
    if (options.enableLLMEnhancement) {
      const llmConfig = getLLMConfig();
      const validation = validateLLMConfig2(llmConfig);
      if (!validation.valid) {
        result.errors.push(`LLM configuration invalid: ${validation.errors.join(", ")}`);
        result.warnings.push(...validation.warnings);
        return false;
      }
      if (!llmConfig.enabled) {
        result.warnings.push("LLM enhancement requested but not enabled in configuration");
        options.enableLLMEnhancement = false;
      }
    }
    if (!["github", "linear", "both"].includes(options.platform)) {
      result.errors.push(`Invalid platform: ${options.platform}`);
      return false;
    }
    if (options.platform === "github" || options.platform === "both") {
      try {
        this.githubClient.healthCheck();
      } catch (error) {
        result.warnings.push(`GitHub client validation failed: ${error}`);
      }
    }
    if (options.platform === "linear" || options.platform === "both") {
      try {
        this.linearClient.healthCheck();
      } catch (error) {
        result.warnings.push(`Linear client validation failed: ${error}`);
      }
    }
    return true;
  }
  async buildEnhancementContext(feedback, options, result) {
    const context = { feedback };
    try {
      if (options.enableCodebaseAnalysis) {
        console.log(`Performing codebase analysis with depth: ${options.analysisDepth}`);
        const analysisResult = await this.codebaseAnalyzer.analyzeForFeedback(feedback, {
          depth: options.analysisDepth,
          includeTests: false,
          maxFilesToScan: options.analysisDepth === "light" ? 50 : options.analysisDepth === "moderate" ? 100 : 200,
          confidenceThreshold: 0.3
        });
        context.codebaseAnalysis = analysisResult;
        result.codebaseAnalysis = analysisResult;
        console.log(`Found ${analysisResult.relevantFiles.length} relevant code areas`);
      }
      if (options.includeRecentChanges) {
        context.recentChanges = await this.getRecentChanges(feedback);
      }
      context.relatedIssues = await this.findRelatedIssues(feedback, options);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      result.warnings.push(`Context building partially failed: ${errorMessage}`);
    }
    return context;
  }
  async performLLMEnhancement(context, options, result) {
    try {
      console.log("Performing LLM enhancement analysis");
      const enhancementRequest = {
        title: `${context.feedback.type === "crash" ? "Crash" : "Feedback"}: ${context.feedback.appVersion || "Unknown Version"}`,
        description: context.feedback.screenshotData?.text || context.feedback.crashData?.exceptionMessage || "No description available",
        feedbackType: context.feedback.type === "crash" ? "crash" : "general",
        crashData: context.feedback.crashData ? {
          trace: Array.isArray(context.feedback.crashData.trace) ? context.feedback.crashData.trace : [context.feedback.crashData.trace],
          device: context.feedback.deviceInfo.model,
          osVersion: context.feedback.deviceInfo.osVersion
        } : undefined,
        codebaseContext: context.codebaseAnalysis ? context.codebaseAnalysis.relevantFiles.map((area) => ({
          file: area.file,
          content: area.content,
          relevance: area.confidence
        })) : undefined,
        recentChanges: context.recentChanges,
        options: {
          provider: options.llmProvider,
          enableFallback: true
        }
      };
      const enhancement = await this.llmClient.enhanceIssue(enhancementRequest);
      console.log(`LLM enhancement completed with confidence: ${enhancement.analysis.confidence}`);
      return enhancement;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      result.warnings.push(`LLM enhancement failed: ${errorMessage}`);
      console.warn(`LLM enhancement failed: ${errorMessage}`);
      return;
    }
  }
  async createGitHubIssue(feedback, llmAnalysis, context, options) {
    try {
      if (options.dryRun) {
        console.log("DRY RUN: Would create GitHub issue");
        return {
          issue: {
            id: 0,
            number: 0,
            title: "DRY RUN",
            state: "open",
            user: {
              id: 0,
              login: "dry-run",
              avatar_url: "",
              html_url: "",
              type: "User"
            },
            assignees: [],
            labels: [],
            locked: false,
            comments: 0,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            html_url: "dry-run",
            url: "dry-run"
          },
          wasExisting: false,
          action: "created",
          message: "DRY RUN: GitHub issue would be created"
        };
      }
      const createOptions = {
        ...options.github,
        customTitle: llmAnalysis?.enhancedTitle,
        customBody: llmAnalysis ? this.formatEnhancedGitHubBody(llmAnalysis, context) : undefined,
        additionalLabels: llmAnalysis?.labels || [],
        enableDuplicateDetection: !options.skipDuplicateDetection
      };
      console.log("Creating GitHub issue with enhanced data");
      return await this.githubClient.createIssueFromTestFlight(feedback, createOptions);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`GitHub issue creation failed: ${errorMessage}`);
      throw error;
    }
  }
  async createLinearIssue(feedback, llmAnalysis, context, options) {
    try {
      if (options.dryRun) {
        console.log("DRY RUN: Would create Linear issue");
        return {
          issue: {
            id: "dry-run",
            identifier: "DRY-1",
            title: "DRY RUN"
          },
          wasExisting: false,
          action: "created",
          message: "DRY RUN: Linear issue would be created"
        };
      }
      const priorityMap = {
        urgent: 1,
        high: 2,
        normal: 3,
        low: 4
      };
      const createOptions = {
        ...options.linear,
        customTitle: llmAnalysis?.enhancedTitle,
        customDescription: llmAnalysis ? this.formatEnhancedLinearDescription(llmAnalysis, context) : undefined,
        additionalLabels: llmAnalysis?.labels || [],
        priority: llmAnalysis ? priorityMap[llmAnalysis.priority] : undefined,
        enableDuplicateDetection: !options.skipDuplicateDetection
      };
      console.log("Creating Linear issue with enhanced data");
      const linearIssue = await this.linearClient.createIssueFromTestFlight(feedback, createOptions.additionalLabels, createOptions.assigneeId, createOptions.projectId);
      return {
        issue: linearIssue,
        wasExisting: false,
        action: "created",
        message: `Created new Linear issue ${linearIssue.identifier}`
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`Linear issue creation failed: ${errorMessage}`);
      throw error;
    }
  }
  formatEnhancedGitHubBody(llmAnalysis, _context) {
    let body = llmAnalysis.enhancedDescription;
    if (llmAnalysis.analysis.affectedComponents.length > 0) {
      body += `

## \uD83C\uDFAF Affected Components

`;
      for (const component of llmAnalysis.analysis.affectedComponents) {
        body += `- ${component}
`;
      }
    }
    if (llmAnalysis.analysis.rootCause) {
      body += `

## \uD83D\uDD0D Root Cause Analysis

${llmAnalysis.analysis.rootCause}`;
    }
    if (llmAnalysis.analysis.suggestedFix) {
      body += `

## \uD83D\uDCA1 Suggested Fix

${llmAnalysis.analysis.suggestedFix}`;
    }
    body += `

---
*Enhanced with LLM analysis (${llmAnalysis.metadata.provider}/${llmAnalysis.metadata.model}) - Confidence: ${(llmAnalysis.analysis.confidence * 100).toFixed(0)}%*`;
    return body;
  }
  formatEnhancedLinearDescription(llmAnalysis, _context) {
    let description = llmAnalysis.enhancedDescription;
    if (llmAnalysis.analysis.affectedComponents.length > 0) {
      description += `

## Affected Components

`;
      for (const component of llmAnalysis.analysis.affectedComponents) {
        description += `- ${component}
`;
      }
    }
    if (llmAnalysis.analysis.rootCause) {
      description += `

**Root Cause Analysis:**
${llmAnalysis.analysis.rootCause}`;
    }
    if (llmAnalysis.analysis.suggestedFix) {
      description += `

**Suggested Fix:**
${llmAnalysis.analysis.suggestedFix}`;
    }
    return description;
  }
  async fallbackToStandardCreation(feedback, options, result, reason) {
    if (!options.fallbackToStandard) {
      result.errors.push(`Enhancement failed and fallback disabled: ${reason}`);
      result.processingTime = Date.now() - (Date.now() - 1000);
      return result;
    }
    console.log(`Falling back to standard issue creation: ${reason}`);
    result.usedFallback = true;
    result.fallbackReason = reason;
    try {
      const standardResult = await this.idempotencyService.createIssueWithDuplicateProtection(feedback, {
        preferredPlatform: options.platform === "both" ? "github" : options.platform,
        skipDuplicateDetection: options.skipDuplicateDetection,
        actionRunId: options.actionRunId
      });
      result.github = standardResult.github;
      result.linear = standardResult.linear;
      result.success = standardResult.processedBy.length > 0;
      result.platform = standardResult.processedBy;
      result.processingTime = standardResult.totalDuration;
      result.errors.push(...standardResult.errors);
      return result;
    } catch (fallbackError) {
      const errorMessage = fallbackError instanceof Error ? fallbackError.message : String(fallbackError);
      result.errors.push(`Fallback creation also failed: ${errorMessage}`);
      result.success = false;
      result.processingTime = Date.now() - (Date.now() - 2000);
      return result;
    }
  }
  async getRecentChanges(feedback) {
    try {
      const isGitRepo = await this.checkGitRepository();
      if (!isGitRepo) {
        return [];
      }
      const recentCommits = await this.getRecentCommits(7);
      const relevantCommits = this.filterRelevantCommits(recentCommits, feedback);
      const changes = [];
      for (const commit of relevantCommits.slice(0, 5)) {
        for (const file of commit.files.slice(0, 3)) {
          changes.push({
            file,
            diff: `Recent change in ${file} by ${commit.author}`,
            author: commit.author,
            timestamp: commit.timestamp
          });
        }
      }
      return changes;
    } catch (error) {
      console.warn(`Failed to get recent changes: ${error}`);
      return [];
    }
  }
  async checkGitRepository() {
    try {
      const { exec } = await import("node:child_process");
      const { promisify } = await import("node:util");
      const execAsync = promisify(exec);
      await execAsync("git rev-parse --git-dir", { cwd: process.cwd() });
      return true;
    } catch {
      return false;
    }
  }
  async getRecentCommits(days) {
    try {
      const { exec } = await import("node:child_process");
      const { promisify } = await import("node:util");
      const execAsync = promisify(exec);
      const since = new Date;
      since.setDate(since.getDate() - days);
      const sinceStr = since.toISOString().split("T")[0];
      const { stdout } = await execAsync(`git log --since="${sinceStr}" --pretty=format:"%H|%an|%ai|%s" --name-only`, { cwd: process.cwd() });
      return this.parseGitLog(stdout);
    } catch (error) {
      console.warn(`Failed to get recent commits: ${error}`);
      return [];
    }
  }
  parseGitLog(gitLogOutput) {
    const commits = [];
    const commitBlocks = gitLogOutput.split(`

`).filter((block) => block.trim());
    for (const block of commitBlocks) {
      const lines = block.split(`
`).filter((line) => line.trim());
      if (lines.length === 0) {
        continue;
      }
      const firstLine = lines[0];
      if (!firstLine) {
        continue;
      }
      const commitInfo = firstLine.split("|");
      if (commitInfo.length !== 4) {
        continue;
      }
      const [hash, author, timestamp, message] = commitInfo;
      if (!hash || !author || !timestamp || !message) {
        continue;
      }
      const files = lines.slice(1).filter((line) => line.trim() && !line.includes("|"));
      commits.push({
        hash,
        author,
        timestamp,
        message,
        files
      });
    }
    return commits;
  }
  filterRelevantCommits(commits, feedback) {
    const relevantKeywords = [];
    if (feedback.type === "crash" && feedback.crashData) {
      if (feedback.crashData.exceptionType) {
        relevantKeywords.push(feedback.crashData.exceptionType.toLowerCase());
      }
      const stackTraceFiles = feedback.crashData.trace?.match(/[\w-]+\.(swift|m|h|mm|kt|java)/gi) || [];
      relevantKeywords.push(...stackTraceFiles.map((f) => f.toLowerCase()));
    }
    if (feedback.screenshotData?.text) {
      const words = feedback.screenshotData.text.toLowerCase().match(/\b\w{4,}\b/g) || [];
      relevantKeywords.push(...words.slice(0, 5));
    }
    return commits.filter((commit) => {
      const searchText = `${commit.message} ${commit.files.join(" ")}`.toLowerCase();
      const hasRelevantKeywords = relevantKeywords.some((keyword) => searchText.includes(keyword));
      const hasRelevantFiles = commit.files.some((file) => /\.(swift|m|h|mm|kt|java|tsx?|jsx?)$/i.test(file));
      return hasRelevantKeywords || hasRelevantFiles;
    }).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
  }
  async findRelatedIssues(feedback, options) {
    const relatedIssues = [];
    try {
      if (options.platform === "github" || options.platform === "both") {
        const githubSearch = await this.githubClient.findDuplicateIssue(feedback);
        if (githubSearch.isDuplicate && githubSearch.existingIssue) {
          relatedIssues.push({
            title: githubSearch.existingIssue.title,
            number: githubSearch.existingIssue.number,
            labels: githubSearch.existingIssue.labels?.map((l) => typeof l === "string" ? l : l.name) || [],
            platform: "github"
          });
        }
      }
      if (options.platform === "linear" || options.platform === "both") {
        const linearDuplicate = await this.linearClient.findDuplicateIssue(feedback);
        if (linearDuplicate) {
          const numberMatch = linearDuplicate.identifier.match(/\d+/);
          relatedIssues.push({
            title: linearDuplicate.title,
            number: numberMatch ? Number.parseInt(numberMatch[0], 10) : 0,
            labels: [],
            platform: "linear"
          });
        }
      }
    } catch (error) {
      console.warn(`Failed to find related issues: ${error}`);
    }
    return relatedIssues;
  }
  async healthCheck() {
    const checks = await Promise.allSettled([
      this.llmClient.healthCheck(),
      this.githubClient.healthCheck(),
      this.linearClient.healthCheck()
    ]);
    const llmHealth = checks[0].status === "fulfilled" ? checks[0].value.status : "unhealthy";
    const githubHealth = checks[1].status === "fulfilled" ? checks[1].value.status : "unhealthy";
    const linearHealth = checks[2].status === "fulfilled" ? checks[2].value.status : "unhealthy";
    const codebaseHealth = "healthy";
    const healthyCount = [
      llmHealth,
      codebaseHealth,
      githubHealth,
      linearHealth
    ].filter((status) => status === "healthy").length;
    const overallStatus = healthyCount >= 3 ? "healthy" : healthyCount >= 2 ? "degraded" : "unhealthy";
    return {
      status: overallStatus,
      components: {
        llm: llmHealth,
        codebase: codebaseHealth,
        github: githubHealth,
        linear: linearHealth
      },
      details: {
        checks: checks.map((check, index) => ({
          component: ["llm", "github", "linear"][index],
          status: check.status,
          value: check.status === "fulfilled" ? check.value : undefined,
          reason: check.status === "rejected" ? check.reason : undefined
        }))
      }
    };
  }
}
function getLLMEnhancedIssueCreator() {
  if (!_enhancedCreatorInstance) {
    _enhancedCreatorInstance = new LLMEnhancedIssueCreator;
  }
  return _enhancedCreatorInstance;
}
function clearLLMEnhancedIssueCreatorInstance() {
  _enhancedCreatorInstance = null;
}
async function createEnhancedIssueFromTestFlight(feedback, options = {}) {
  const creator = getLLMEnhancedIssueCreator();
  const defaultOptions = {
    platform: "github",
    enableLLMEnhancement: true,
    enableCodebaseAnalysis: true,
    analysisDepth: "moderate",
    includeRecentChanges: false,
    fallbackToStandard: true,
    skipDuplicateDetection: false,
    dryRun: false
  };
  return await creator.createEnhancedIssue(feedback, {
    ...defaultOptions,
    ...options
  });
}
var _enhancedCreatorInstance = null;
var init_llm_enhanced_creator = __esm(() => {
  init_codebase_analyzer();
  init_github_client();
  init_linear_client();
  init_llm_client();
  init_llm_config();
  init_idempotency_service();
  init_state_manager();
});

// action-entrypoint.ts
var core2 = __toESM(require_core(), 1);
init_codebase_analyzer();
init_llm_client();
init_testflight_client();
init_config();
init_idempotency_service();

// src/utils/monitoring.ts
init_codebase_analyzer();
init_github_client();
init_linear_client();
init_llm_client();
init_testflight_client();
init_state_manager();

// src/utils/validation.ts
init_config();
function validateEnvironmentConfiguration(config) {
  const errors = [];
  const warnings = [];
  const requiredFields = [
    "APP_STORE_CONNECT_ISSUER_ID",
    "APP_STORE_CONNECT_KEY_ID",
    "APP_STORE_CONNECT_PRIVATE_KEY"
  ];
  for (const field of requiredFields) {
    if (!config[field]) {
      errors.push(`Missing required environment variable: ${field}`);
    }
  }
  if (config.APP_STORE_CONNECT_ISSUER_ID && typeof config.APP_STORE_CONNECT_ISSUER_ID === "string" && !VALIDATION_PATTERNS.ISSUER_ID.test(config.APP_STORE_CONNECT_ISSUER_ID)) {
    errors.push("Invalid App Store Connect Issuer ID format");
  }
  if (config.APP_STORE_CONNECT_KEY_ID && typeof config.APP_STORE_CONNECT_KEY_ID === "string" && !VALIDATION_PATTERNS.API_KEY_ID.test(config.APP_STORE_CONNECT_KEY_ID)) {
    errors.push("Invalid App Store Connect Key ID format");
  }
  if (config.GTHB_TOKEN && typeof config.GTHB_TOKEN === "string" && !VALIDATION_PATTERNS.GTHB_TOKEN.test(config.GTHB_TOKEN)) {
    errors.push("Invalid GitHub token format");
  }
  if (config.NODE_ENV === "production") {
    if (!config.GTHB_TOKEN && !config.LINEAR_API_TOKEN) {
      warnings.push("No issue tracking platform configured (GitHub or Linear)");
    }
    if (!config.WEBHOOK_SECRET) {
      warnings.push("Webhook secret not configured - webhook security disabled");
    }
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateApiSecrets(secrets) {
  const errors = [];
  const warnings = [];
  const recommendations = [];
  let securityRisk = "low";
  for (const [key, value] of Object.entries(secrets)) {
    if (!value || value.trim() === "") {
      errors.push(`Empty secret value for ${key}`);
      securityRisk = "high";
      continue;
    }
    const placeholderPatterns = [
      /^(test|demo|example|placeholder|fake|dummy)/i,
      /^(xxx|000|123)/,
      /^(your_|my_|insert_)/i
    ];
    if (placeholderPatterns.some((pattern) => pattern.test(value))) {
      errors.push(`Placeholder value detected for ${key}`);
      securityRisk = "high";
    }
    if (key.includes("GITHUB") && value.length < 20) {
      warnings.push(`GitHub token appears too short: ${key}`);
      securityRisk = securityRisk === "low" ? "medium" : securityRisk;
    }
    if (key.includes("LINEAR") && value.length < 30) {
      warnings.push(`Linear token appears too short: ${key}`);
      securityRisk = securityRisk === "low" ? "medium" : securityRisk;
    }
    if (value.includes(" ") || value.includes(`
`)) {
      warnings.push(`Secret contains whitespace characters: ${key}`);
      securityRisk = securityRisk === "low" ? "medium" : securityRisk;
    }
  }
  if (securityRisk === "high") {
    recommendations.push("Review and update all API keys with valid values");
    recommendations.push("Ensure secrets are stored securely in GitHub repository settings");
  }
  if (securityRisk === "medium" || warnings.length > 0) {
    recommendations.push("Verify all API tokens have appropriate permissions");
    recommendations.push("Consider implementing secret rotation policies");
  }
  recommendations.push("Enable audit logging for secret access");
  recommendations.push("Regularly review and update API token permissions");
  return {
    valid: errors.length === 0,
    errors,
    warnings,
    securityRisk,
    recommendations
  };
}
function validateTestFlightFeedback(feedback) {
  const errors = [];
  const warnings = [];
  if (!feedback || typeof feedback !== "object") {
    errors.push("Invalid feedback data structure");
    return { valid: false, errors, warnings };
  }
  const feedbackObj = feedback;
  const requiredFields = [
    "id",
    "type",
    "appVersion",
    "buildNumber",
    "deviceInfo",
    "submittedAt"
  ];
  for (const field of requiredFields) {
    if (!feedbackObj[field]) {
      errors.push(`Missing required field: ${field}`);
    }
  }
  if (feedbackObj.type && !["crash", "screenshot"].includes(feedbackObj.type)) {
    errors.push("Invalid feedback type (must be 'crash' or 'screenshot')");
  }
  if (feedbackObj.deviceInfo && typeof feedbackObj.deviceInfo === "object") {
    const deviceInfo = feedbackObj.deviceInfo;
    const requiredDeviceFields = ["model", "osVersion", "family", "locale"];
    for (const field of requiredDeviceFields) {
      if (!deviceInfo[field]) {
        warnings.push(`Missing device info field: ${field}`);
      }
    }
  }
  if (feedbackObj.type === "crash" && feedbackObj.crashData) {
    const crashData = feedbackObj.crashData;
    if (!crashData.trace) {
      errors.push("Crash data missing stack trace");
    }
    if (!crashData.type) {
      warnings.push("Crash data missing crash type");
    }
  }
  if (feedbackObj.screenshotData && typeof feedbackObj.screenshotData === "object") {
    const screenshotData = feedbackObj.screenshotData;
    if (screenshotData.text && typeof screenshotData.text === "string") {
      const sensitivePatterns = [
        /\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b/,
        /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/,
        /\b\d{3}[-.]?\d{3}[-.]?\d{4}\b/,
        /\b(?:password|passwd|pwd|token|secret|key)\s*[:=]\s*\S+/i
      ];
      for (const pattern of sensitivePatterns) {
        if (pattern.test(screenshotData.text)) {
          warnings.push("Potential sensitive data detected in feedback text");
          break;
        }
      }
    }
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateIssueCreationRequest(request) {
  const errors = [];
  const warnings = [];
  if (!request.title || typeof request.title !== "string" || request.title.trim().length === 0) {
    errors.push("Issue title is required and must be non-empty");
  }
  if (!request.description || typeof request.description !== "string" || request.description.trim().length === 0) {
    errors.push("Issue description is required and must be non-empty");
  }
  if (request.title && typeof request.title === "string") {
    if (request.title.length > 200) {
      warnings.push("Issue title is very long (>200 characters)");
    }
    if (request.title.length < 10) {
      warnings.push("Issue title is very short (<10 characters)");
    }
    const suspiciousPatterns = [
      /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      /javascript:/i,
      /on\w+\s*=/i
    ];
    if (suspiciousPatterns.some((pattern) => pattern.test(request.title))) {
      errors.push("Potentially malicious content detected in issue title");
    }
  }
  if (request.description && typeof request.description === "string") {
    if (request.description.length > 50000) {
      warnings.push("Issue description is very long (>50k characters)");
    }
    const suspiciousPatterns = [
      /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      /javascript:/i,
      /on\w+\s*=/i
    ];
    if (suspiciousPatterns.some((pattern) => pattern.test(request.description))) {
      errors.push("Potentially malicious content detected in issue description");
    }
  }
  if (request.labels && Array.isArray(request.labels)) {
    if (request.labels.length > 20) {
      warnings.push("Too many labels (>20) - may cause issues with some platforms");
    }
    for (const label of request.labels) {
      if (typeof label !== "string" || label.length === 0) {
        errors.push("All labels must be non-empty strings");
        break;
      }
      if (label.length > 50) {
        warnings.push(`Label too long: ${label}`);
      }
    }
  }
  if (request.priority && !["urgent", "high", "normal", "low"].includes(request.priority)) {
    errors.push("Invalid priority value (must be urgent, high, normal, or low)");
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateFilePath(filePath) {
  const errors = [];
  const warnings = [];
  const dangerousPatterns = [
    /\.\./,
    /\/\.\./,
    /\\\.\./,
    /~\//,
    /\/etc\//,
    /\/root\//,
    /\/home\//,
    /\/var\//,
    /\/tmp\/.*\.\./
  ];
  for (const pattern of dangerousPatterns) {
    if (pattern.test(filePath)) {
      errors.push("Potentially dangerous file path detected (path traversal risk)");
      break;
    }
  }
  if (filePath.startsWith("/") || /^[A-Za-z]:\\/.test(filePath)) {
    warnings.push("Absolute file path detected - ensure this is intentional");
  }
  if (filePath.length > 1000) {
    warnings.push("File path is extremely long (>1000 characters)");
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateUrl(url) {
  const errors = [];
  const warnings = [];
  try {
    const urlObj = new URL(url);
    if (false) {}
    const dangerousProtocols = ["javascript:", "data:", "file:", "ftp:"];
    if (dangerousProtocols.includes(urlObj.protocol)) {
      errors.push(`Dangerous protocol detected: ${urlObj.protocol}`);
    }
    const suspiciousDomains = [
      "localhost",
      "127.0.0.1",
      "0.0.0.0",
      "192.168.",
      "10.",
      "172.16."
    ];
    if (false) {}
    if (url.length > 2000) {
      warnings.push("URL is extremely long (>2000 characters)");
    }
  } catch (error) {
    errors.push(`Invalid URL format: ${error}`);
  }
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function sanitizeUserInput(input) {
  if (typeof input !== "string") {
    return "";
  }
  return input.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/javascript:/gi, "").replace(/on\w+\s*=/gi, "").replace(/[<>]/g, (match) => match === "<" ? "&lt;" : "&gt;").trim();
}

class RateLimiter {
  requests = new Map;
  config;
  constructor(config) {
    this.config = config;
  }
  checkRateLimit(identifier) {
    const now = Date.now();
    const windowStart = now - this.config.windowMs;
    const userRequests = this.requests.get(identifier) || [];
    const validRequests = userRequests.filter((timestamp) => timestamp > windowStart);
    if (validRequests.length >= this.config.maxRequests) {
      return {
        valid: false,
        errors: [
          `Rate limit exceeded. Max ${this.config.maxRequests} requests per ${this.config.windowMs}ms`
        ],
        warnings: []
      };
    }
    validRequests.push(now);
    this.requests.set(identifier, validRequests);
    return {
      valid: true,
      errors: [],
      warnings: validRequests.length > this.config.maxRequests * 0.8 ? ["Approaching rate limit"] : []
    };
  }
  resetRateLimit(identifier) {
    this.requests.delete(identifier);
  }
  cleanup() {
    const now = Date.now();
    const windowStart = now - this.config.windowMs;
    for (const [identifier, requests] of this.requests.entries()) {
      const validRequests = requests.filter((timestamp) => timestamp > windowStart);
      if (validRequests.length === 0) {
        this.requests.delete(identifier);
      } else {
        this.requests.set(identifier, validRequests);
      }
    }
  }
}
var Validation = {
  environment: validateEnvironmentConfiguration,
  apiSecrets: validateApiSecrets,
  testFlightFeedback: validateTestFlightFeedback,
  issueCreationRequest: validateIssueCreationRequest,
  filePath: validateFilePath,
  url: validateUrl,
  sanitizeInput: sanitizeUserInput,
  RateLimiter
};

// src/utils/monitoring.ts
class SystemHealthMonitor {
  config;
  constructor(config) {
    this.config = {
      enableDetailedChecks: true,
      timeoutMs: 30000,
      includeMetrics: true,
      environment: "development",
      ...config
    };
  }
  async checkSystemHealth() {
    const startTime = Date.now();
    const checks = [];
    const componentChecks = [
      this.checkGitHubIntegration(),
      this.checkLinearIntegration(),
      this.checkTestFlightIntegration(),
      this.checkLLMIntegration(),
      this.checkStateManagement(),
      this.checkCodebaseAnalysis(),
      this.checkEnvironmentConfiguration()
    ];
    const checkResults = await Promise.allSettled(componentChecks.map((check) => Promise.race([check, this.timeoutPromise(this.config.timeoutMs)])));
    checkResults.forEach((result, index) => {
      const componentNames = [
        "GitHub Integration",
        "Linear Integration",
        "TestFlight Integration",
        "LLM Integration",
        "State Management",
        "Codebase Analysis",
        "Environment Configuration"
      ];
      if (result.status === "fulfilled") {
        checks.push(result.value);
      } else {
        checks.push({
          component: componentNames[index] || "Unknown",
          status: "unhealthy",
          error: result.reason?.message || "Health check failed",
          details: {},
          lastChecked: new Date().toISOString(),
          recommendations: [
            "Investigate component failure",
            "Check configuration and connectivity"
          ]
        });
      }
    });
    const healthyCount = checks.filter((c) => c.status === "healthy").length;
    const degradedCount = checks.filter((c) => c.status === "degraded").length;
    const unhealthyCount = checks.filter((c) => c.status === "unhealthy").length;
    let overallStatus;
    if (unhealthyCount > 0) {
      overallStatus = "unhealthy";
    } else if (degradedCount > 0) {
      overallStatus = "degraded";
    } else {
      overallStatus = "healthy";
    }
    const recommendations = this.generateSystemRecommendations(checks, overallStatus);
    const environment = await this.gatherEnvironmentMetrics();
    return {
      overall: overallStatus,
      components: checks,
      metrics: {
        totalResponseTime: Date.now() - startTime,
        healthyComponents: healthyCount,
        degradedComponents: degradedCount,
        unhealthyComponents: unhealthyCount
      },
      environment,
      recommendations,
      lastChecked: new Date().toISOString()
    };
  }
  async checkGitHubIntegration() {
    const startTime = Date.now();
    try {
      const client = getGitHubClient();
      const health = await client.healthCheck();
      return {
        component: "GitHub Integration",
        status: health.status,
        responseTime: Date.now() - startTime,
        details: health.details,
        recommendations: health.details.rateLimit?.remaining < 100 ? [
          "GitHub rate limit running low - consider reducing request frequency"
        ] : [],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "GitHub Integration",
        status: "unhealthy",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "Check GitHub token configuration",
          "Verify GitHub API connectivity"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkLinearIntegration() {
    const startTime = Date.now();
    try {
      const client = getLinearClient();
      const health = await client.healthCheck();
      return {
        component: "Linear Integration",
        status: health.status,
        responseTime: Date.now() - startTime,
        details: health.details,
        recommendations: health.status === "unhealthy" ? ["Check Linear API token configuration", "Verify Linear team ID"] : [],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "Linear Integration",
        status: "unhealthy",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "Check Linear API token configuration",
          "Verify Linear API connectivity"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkTestFlightIntegration() {
    const startTime = Date.now();
    try {
      const client = getTestFlightClient();
      const rateLimitInfo = client.getRateLimitInfo();
      return {
        component: "TestFlight Integration",
        status: "healthy",
        responseTime: Date.now() - startTime,
        details: {
          rateLimitInfo: rateLimitInfo || "No rate limit data available",
          configured: true
        },
        recommendations: rateLimitInfo?.remaining && rateLimitInfo.remaining < 10 ? ["TestFlight rate limit running low"] : [],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "TestFlight Integration",
        status: "unhealthy",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "Check App Store Connect credentials",
          "Verify TestFlight API connectivity"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkLLMIntegration() {
    const startTime = Date.now();
    try {
      const client = getLLMClient();
      const health = await client.healthCheck();
      return {
        component: "LLM Integration",
        status: health.status,
        responseTime: Date.now() - startTime,
        details: {
          providers: health.providers,
          usage: health.usage,
          costStatus: health.costStatus
        },
        recommendations: health.costStatus.withinLimits ? [] : ["LLM cost limits exceeded - review usage"],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "LLM Integration",
        status: "degraded",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "LLM integration is optional - system can operate without it"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkStateManagement() {
    const startTime = Date.now();
    try {
      const stateManager = getStateManager();
      const stats = await stateManager.getStats();
      return {
        component: "State Management",
        status: "healthy",
        responseTime: Date.now() - startTime,
        details: stats,
        recommendations: stats.currentlyCached > 1e4 ? ["Large cache size - consider cleanup"] : [],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "State Management",
        status: "degraded",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "State management issues may cause duplicate processing"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkCodebaseAnalysis() {
    const startTime = Date.now();
    try {
      const analyzer = getCodebaseAnalyzer();
      const stats = analyzer.getCacheStats();
      return {
        component: "Codebase Analysis",
        status: "healthy",
        responseTime: Date.now() - startTime,
        details: {
          cacheSize: stats.size,
          cachedFiles: stats.files.length,
          workspaceRoot: analyzer.workspaceRoot
        },
        recommendations: [],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "Codebase Analysis",
        status: "degraded",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: [
          "Codebase analysis issues may reduce enhancement quality"
        ],
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkEnvironmentConfiguration() {
    const startTime = Date.now();
    try {
      const envConfig = {
        NODE_ENV: "development",
        APP_STORE_CONNECT_ISSUER_ID: process.env.APP_STORE_CONNECT_ISSUER_ID,
        APP_STORE_CONNECT_KEY_ID: process.env.APP_STORE_CONNECT_KEY_ID,
        APP_STORE_CONNECT_PRIVATE_KEY: process.env.APP_STORE_CONNECT_PRIVATE_KEY,
        GTHB_TOKEN: process.env.GTHB_TOKEN,
        LINEAR_API_TOKEN: process.env.LINEAR_API_TOKEN
      };
      const validation = Validation.environment(envConfig);
      const secrets = {};
      if (envConfig.GTHB_TOKEN) {
        secrets.GTHB_TOKEN = envConfig.GTHB_TOKEN;
      }
      if (envConfig.LINEAR_API_TOKEN) {
        secrets.LINEAR_API_TOKEN = envConfig.LINEAR_API_TOKEN;
      }
      const secretValidation = Validation.apiSecrets(secrets);
      const status = !validation.valid || !secretValidation.valid ? "unhealthy" : validation.warnings.length > 0 || secretValidation.warnings.length > 0 ? "degraded" : "healthy";
      return {
        component: "Environment Configuration",
        status,
        responseTime: Date.now() - startTime,
        details: {
          environment: envConfig.NODE_ENV,
          validationErrors: validation.errors,
          validationWarnings: validation.warnings,
          securityRisk: secretValidation.securityRisk
        },
        recommendations: [
          ...validation.errors.map((e) => `Config Error: ${e}`),
          ...validation.warnings.map((w) => `Config Warning: ${w}`),
          ...secretValidation.recommendations
        ],
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      return {
        component: "Environment Configuration",
        status: "unhealthy",
        responseTime: Date.now() - startTime,
        error: error.message,
        details: {},
        recommendations: ["Review environment variable configuration"],
        lastChecked: new Date().toISOString()
      };
    }
  }
  generateSystemRecommendations(checks, overallStatus) {
    const recommendations = [];
    checks.forEach((check) => {
      if (check.recommendations) {
        recommendations.push(...check.recommendations);
      }
    });
    if (overallStatus === "unhealthy") {
      recommendations.push("System has critical issues - immediate attention required");
      recommendations.push("Consider running in safe mode until issues are resolved");
    } else if (overallStatus === "degraded") {
      recommendations.push("System is functional but has some issues - monitor closely");
      recommendations.push("Address warnings to improve system reliability");
    }
    if (this.config.environment === "production") {
      recommendations.push("Set up monitoring alerts for system health changes");
      recommendations.push("Review logs regularly for early warning signs");
      recommendations.push("Ensure backup systems are configured");
    }
    return [...new Set(recommendations)];
  }
  async gatherEnvironmentMetrics() {
    const memUsage = process.memoryUsage();
    return {
      nodeEnv: "development",
      version: process.env.npm_package_version || "unknown",
      uptime: process.uptime(),
      memory: {
        used: memUsage.heapUsed,
        total: memUsage.heapTotal,
        percentage: memUsage.heapUsed / memUsage.heapTotal * 100
      }
    };
  }
  timeoutPromise(ms) {
    return new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error(`Health check timed out after ${ms}ms`));
      }, ms);
    });
  }
  getMonitoringRecommendations() {
    const recommendations = [
      "Set up automated health checks to run every 5 minutes",
      "Configure alerts for unhealthy components",
      "Monitor API rate limits to prevent service disruption",
      "Track memory usage and restart if memory leaks detected",
      "Log all health check results for trend analysis",
      "Set up external monitoring from outside the system"
    ];
    if (this.config.environment === "production") {
      recommendations.push("Configure multiple alert channels (email, Slack, PagerDuty)", "Set up log aggregation and analysis", "Monitor response times and set SLA thresholds", "Implement automatic failover for critical components");
    }
    return recommendations;
  }
}
var _healthMonitorInstance = null;
function getSystemHealthMonitor() {
  if (!_healthMonitorInstance) {
    _healthMonitorInstance = new SystemHealthMonitor;
  }
  return _healthMonitorInstance;
}
async function quickHealthCheck() {
  try {
    const monitor = getSystemHealthMonitor();
    const health = await monitor.checkSystemHealth();
    const platform = (process.env.INPUT_PLATFORM || process.env.PLATFORM || "github").toLowerCase();
    const criticalIssues = health.components.filter((c) => {
      if (c.status !== "unhealthy") {
        return false;
      }
      if (platform === "github" && c.component === "Linear Integration") {
        return false;
      }
      return true;
    }).map((c) => `${c.component}: ${c.error || "unhealthy"}`);
    let adjustedStatus = health.overall;
    if (criticalIssues.length === 0) {
      adjustedStatus = "healthy";
    } else if (adjustedStatus !== "unhealthy") {
      adjustedStatus = health.overall;
    }
    let message = "System operational";
    if (adjustedStatus === "unhealthy") {
      message = `System has ${criticalIssues.length} critical issues`;
    } else if (adjustedStatus === "degraded") {
      message = `System functional with ${health.metrics.degradedComponents} warnings`;
    }
    return {
      status: adjustedStatus,
      message,
      criticalIssues
    };
  } catch (error) {
    return {
      status: "unhealthy",
      message: `Health check failed: ${error}`,
      criticalIssues: ["Health monitoring system failure"]
    };
  }
}

// src/utils/service-factory.ts
class GitHubIssueService {
  githubClient;
  constructor(githubClient) {
    this.githubClient = githubClient;
  }
  async createIssueFromFeedback(feedback, options) {
    const result = await this.githubClient.createIssueFromTestFlight(feedback, options);
    return {
      id: result.issue.id.toString(),
      url: result.issue.html_url,
      title: result.issue.title,
      number: result.issue.number,
      wasExisting: result.wasExisting || false,
      action: result.wasExisting ? "comment_added" : "created",
      message: `GitHub issue ${result.wasExisting ? "updated" : "created"}: #${result.issue.number}`,
      platform: "github"
    };
  }
  async findDuplicateIssue(feedback) {
    const result = await this.githubClient.findDuplicateIssue(feedback);
    if (!result.isDuplicate) {
      return null;
    }
    return {
      isDuplicate: true,
      confidence: result.confidence,
      reasons: result.reasons,
      existingIssue: result.existingIssue ? {
        id: result.existingIssue.id.toString(),
        url: result.existingIssue.html_url,
        title: result.existingIssue.title,
        number: result.existingIssue.number
      } : undefined
    };
  }
  async healthCheck() {
    return await this.githubClient.healthCheck();
  }
}

class LinearIssueService {
  linearClient;
  constructor(linearClient) {
    this.linearClient = linearClient;
  }
  async createIssueFromFeedback(feedback, options) {
    const additionalLabels = options?.additionalLabels || [];
    const assigneeId = options?.assigneeId;
    const projectId = options?.projectId;
    const result = await this.linearClient.createIssueFromTestFlight(feedback, additionalLabels, assigneeId, projectId);
    return {
      id: result.id,
      url: result.url,
      title: result.title,
      identifier: result.identifier,
      wasExisting: false,
      action: "created",
      message: `Linear issue created: ${result.identifier}`,
      platform: "linear"
    };
  }
  async findDuplicateIssue(feedback) {
    const duplicate = await this.linearClient.findDuplicateIssue(feedback);
    if (!duplicate) {
      return null;
    }
    return {
      isDuplicate: true,
      confidence: 0.9,
      reasons: ["Found existing Linear issue with matching TestFlight ID"],
      existingIssue: {
        id: duplicate.id,
        url: duplicate.url,
        title: duplicate.title,
        identifier: duplicate.identifier
      }
    };
  }
  async healthCheck() {
    return await this.linearClient.healthCheck();
  }
}

class ServiceRegistry {
  services = new Map;
  defaultService = null;
  register(name, service, isDefault = false) {
    this.services.set(name, service);
    if (isDefault || this.defaultService === null) {
      this.defaultService = name;
    }
  }
  get(name) {
    const service = this.services.get(name);
    if (!service) {
      throw new Error(`Service not found: ${name}`);
    }
    return service;
  }
  getDefault() {
    if (!this.defaultService) {
      throw new Error("No default service registered");
    }
    return this.get(this.defaultService);
  }
  getAll() {
    return Array.from(this.services.values());
  }
  getServiceNames() {
    return Array.from(this.services.keys());
  }
  has(name) {
    return this.services.has(name);
  }
  setDefault(name) {
    if (!this.has(name)) {
      throw new Error(`Cannot set default to non-existent service: ${name}`);
    }
    this.defaultService = name;
  }
}

class IssueServiceFactory {
  static instance = null;
  registry = new ServiceRegistry;
  constructor() {
    this.initializeServices();
  }
  static getInstance() {
    if (!IssueServiceFactory.instance) {
      IssueServiceFactory.instance = new IssueServiceFactory;
    }
    return IssueServiceFactory.instance;
  }
  initializeServices() {
    try {
      Promise.resolve().then(() => (init_github_client(), exports_github_client)).then(({ getGitHubClient: getGitHubClient2 }) => {
        const githubService = new GitHubIssueService(getGitHubClient2());
        this.registry.register("github", githubService, true);
      }).catch((error) => {
        console.warn("Failed to initialize GitHub service:", error);
      });
      Promise.resolve().then(() => (init_linear_client(), exports_linear_client)).then(({ getLinearClient: getLinearClient2 }) => {
        const linearService = new LinearIssueService(getLinearClient2());
        this.registry.register("linear", linearService);
      }).catch((error) => {
        console.warn("Failed to initialize Linear service:", error);
      });
    } catch (error) {
      console.error("Failed to initialize services:", error);
    }
  }
  async createIssue(platform, feedback, options) {
    const service = this.registry.get(platform);
    return await service.createIssueFromFeedback(feedback, options);
  }
  async createIssueWithDefault(feedback, options) {
    const service = this.registry.getDefault();
    return await service.createIssueFromFeedback(feedback, options);
  }
  async findDuplicatesAcrossServices(feedback) {
    const services = this.registry.getAll();
    const results = await Promise.allSettled(services.map((service) => service.findDuplicateIssue(feedback)));
    return results.filter((result) => result.status === "fulfilled" && result.value !== null).map((result) => result.value);
  }
  async healthCheckAllServices() {
    const serviceNames = this.registry.getServiceNames();
    const results = {};
    await Promise.allSettled(serviceNames.map(async (name) => {
      try {
        const service = this.registry.get(name);
        results[name] = await service.healthCheck();
      } catch (error) {
        results[name] = {
          status: "unhealthy",
          details: {
            error: error.message,
            timestamp: new Date().toISOString()
          }
        };
      }
    }));
    return results;
  }
  getAvailableServices() {
    return this.registry.getServiceNames();
  }
}

// action-entrypoint.ts
init_state_manager();
async function run() {
  try {
    core2.info("\uD83D\uDE80 Starting TestFlight PM Enhanced Processing");
    core2.info("\uD83D\uDD0D Performing system health check...");
    const healthCheck = await quickHealthCheck();
    if (healthCheck.status === "unhealthy") {
      core2.setFailed(`System health check failed: ${healthCheck.message}`);
      core2.error(`Critical issues: ${healthCheck.criticalIssues.join(", ")}`);
      return;
    }
    if (healthCheck.status === "degraded") {
      core2.warning(`System health degraded: ${healthCheck.message}`);
    } else {
      core2.info(`✅ System health check passed: ${healthCheck.message}`);
    }
    const _config = getConfiguration();
    core2.info("\uD83D\uDD27 Validating configuration...");
    const envValidation = Validation.environment(process.env);
    if (!envValidation.valid) {
      core2.setFailed(`Configuration validation failed: ${envValidation.errors.join(", ")}`);
      return;
    }
    if (envValidation.warnings.length > 0) {
      envValidation.warnings.forEach((warning2) => core2.warning(warning2));
    }
    core2.info("✅ Configuration validation passed");
    const enableLLMEnhancement = core2.getBooleanInput("enable_llm_enhancement");
    const enableCodebaseAnalysis = core2.getBooleanInput("enable_codebase_analysis");
    const enableDuplicateDetection = core2.getBooleanInput("enable_duplicate_detection");
    const isDryRun = core2.getBooleanInput("dry_run");
    core2.info(`\uD83D\uDD27 Configuration: LLM=${enableLLMEnhancement}, Analysis=${enableCodebaseAnalysis}, Duplicates=${enableDuplicateDetection}, DryRun=${isDryRun}`);
    const testFlightClient = getTestFlightClient();
    const llmClient = enableLLMEnhancement ? getLLMClient() : null;
    const codebaseAnalyzer = enableCodebaseAnalysis ? getCodebaseAnalyzer() : null;
    const serviceFactory = IssueServiceFactory.getInstance();
    const idempotencyService = getIdempotencyService();
    const windowCalculator = await Promise.resolve().then(() => (init_processing_window(), exports_processing_window)).then((m) => m.getProcessingWindowCalculator());
    const explicitSince = core2.getInput("since");
    const processingWindow = await windowCalculator.calculateOptimalWindow(explicitSince || undefined);
    core2.info(`⏰ Processing window: ${processingWindow.startTime.toISOString()} to ${processingWindow.endTime.toISOString()}`);
    const workflowState = {
      testFlightClient,
      processingWindow,
      enableLLMEnhancement,
      enableCodebaseAnalysis,
      enableDuplicateDetection,
      isDryRun,
      llmClient,
      codebaseAnalyzer,
      serviceFactory,
      idempotencyService
    };
    core2.info("\uD83D\uDCF1 Fetching TestFlight feedback...");
    const feedbackData = await testFlightClient.getRecentFeedback(processingWindow.startTime);
    if (feedbackData.length === 0) {
      core2.info("✅ No new TestFlight feedback found");
      return;
    }
    core2.info(`\uD83D\uDCCA Found ${feedbackData.length} feedback items to process`);
    const stateManager = getStateManager();
    const unprocessedFeedback = await stateManager.filterUnprocessed(feedbackData);
    if (unprocessedFeedback.length === 0) {
      core2.info("✅ All feedback has already been processed");
      return;
    }
    core2.info(`\uD83D\uDD04 Processing ${unprocessedFeedback.length} new feedback items`);
    const results = [];
    let totalLLMRequests = 0;
    let totalLLMCost = 0;
    if (llmClient) {
      const stats = llmClient.getUsageStats();
      totalLLMRequests = stats.requestCount;
      totalLLMCost = stats.totalCostAccrued;
    }
    for (const feedback of unprocessedFeedback) {
      try {
        core2.info(`\uD83D\uDD0D Processing feedback: ${feedback.id} (${feedback.type})`);
        const result = await processFeedbackItem(feedback, workflowState);
        results.push(result);
        if (!isDryRun) {
          await stateManager.markAsProcessed([feedback.id]);
        }
        core2.info(`✅ Successfully processed: ${feedback.id}`);
      } catch (error2) {
        core2.error(`❌ Failed to process feedback ${feedback.id}: ${error2 instanceof Error ? error2.message : String(error2)}`);
      }
    }
    const summary = {
      totalProcessed: results.length,
      issuesCreated: results.filter((r) => r.issueCreated).length,
      issuesUpdated: results.filter((r) => r.issueUpdated).length,
      llmRequestsMade: totalLLMRequests,
      llmCostIncurred: totalLLMCost,
      processingTime: results.reduce((sum, r) => sum + r.processingTime, 0),
      timestamp: new Date().toISOString()
    };
    core2.setOutput("processing_summary", JSON.stringify(summary, null, 2));
    core2.setOutput("issues_created", String(summary.issuesCreated));
    core2.setOutput("issues_updated", String(summary.issuesUpdated));
    core2.setOutput("llm_requests_made", String(summary.llmRequestsMade));
    core2.setOutput("llm_cost_incurred", String(summary.llmCostIncurred));
    core2.info(`\uD83C\uDF89 Processing complete! Created: ${summary.issuesCreated}, Updated: ${summary.issuesUpdated}, Cost: $${summary.llmCostIncurred.toFixed(4)}`);
    core2.info("\uD83D\uDD0D Performing final system health check...");
    try {
      const finalHealthCheck = await quickHealthCheck();
      if (finalHealthCheck.status === "unhealthy") {
        core2.warning(`Final health check shows issues: ${finalHealthCheck.message}`);
        core2.warning(`Critical issues: ${finalHealthCheck.criticalIssues.join(", ")}`);
      } else {
        core2.info(`✅ Final health check passed: ${finalHealthCheck.message}`);
      }
      const monitor = getSystemHealthMonitor();
      const detailedHealth = await monitor.checkSystemHealth();
      if (detailedHealth.recommendations.length > 0) {
        core2.info("\uD83D\uDCCB System recommendations:");
        detailedHealth.recommendations.forEach((rec) => core2.info(`  • ${rec}`));
      }
    } catch (healthError) {
      core2.warning(`Final health check failed: ${healthError}`);
    }
  } catch (error2) {
    const errorMessage = error2 instanceof Error ? error2.message : String(error2);
    core2.error(`❌ Action failed: ${errorMessage}`);
    if (error2 instanceof Error && error2.stack) {
      core2.debug(`Error stack: ${error2.stack}`);
    }
    try {
      const failureHealthCheck = await quickHealthCheck();
      core2.error(`System status at failure: ${failureHealthCheck.status}`);
      if (failureHealthCheck.criticalIssues.length > 0) {
        core2.error(`Critical issues: ${failureHealthCheck.criticalIssues.join(", ")}`);
      }
    } catch (healthError) {
      core2.error(`Could not perform health check after failure: ${healthError}`);
    }
    core2.error("\uD83D\uDD0D Debugging information:");
    core2.error(`  Node.js version: ${process.version}`);
    core2.error("  Environment: development");
    core2.error(`  Memory usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
    core2.error(`  Uptime: ${Math.round(process.uptime())}s`);
    core2.setFailed(errorMessage);
  }
}
async function processFeedbackItem(feedback, state) {
  const startTime = Date.now();
  const {
    enableLLMEnhancement,
    enableDuplicateDetection,
    llmClient,
    codebaseAnalyzer,
    serviceFactory,
    isDryRun
  } = state;
  let issueCreated = false;
  let issueUpdated = false;
  const _issueResult = null;
  try {
    if (enableDuplicateDetection) {
      core2.info(`\uD83D\uDD0D Checking for duplicate issues for feedback: ${feedback.id}`);
      const duplicateResult = await serviceFactory.findDuplicatesAcrossServices(feedback);
      if (duplicateResult.length > 0) {
        const duplicate = duplicateResult[0];
        if (duplicate?.isDuplicate && duplicate.existingIssue) {
          core2.info(`⚠️ Duplicate found: ${duplicate.existingIssue.url}`);
          issueUpdated = true;
          return {
            feedbackId: feedback.id,
            issueCreated: false,
            issueUpdated: true,
            issueUrl: duplicate.existingIssue.url,
            processingTime: Date.now() - startTime
          };
        }
      }
    }
    let codebaseAnalysis = null;
    if (codebaseAnalyzer) {
      core2.info(`\uD83D\uDD0D Analyzing codebase for feedback: ${feedback.id}`);
      codebaseAnalysis = await codebaseAnalyzer.analyzeForFeedback(feedback);
      core2.info(`\uD83D\uDCCA Found ${codebaseAnalysis.relevantFiles.length} relevant code areas`);
    }
    let issueResult = null;
    if (enableLLMEnhancement && llmClient) {
      core2.info(`\uD83E\uDD16 Using LLM enhancement for feedback: ${feedback.id}`);
      const enhancedCreator = await Promise.resolve().then(() => (init_llm_enhanced_creator(), exports_llm_enhanced_creator)).then((m) => m.getLLMEnhancedIssueCreator());
      issueResult = await enhancedCreator.createEnhancedIssue(feedback, {
        platform: "github",
        enableLLMEnhancement: true,
        enableCodebaseAnalysis: !!codebaseAnalyzer,
        analysisDepth: "moderate",
        includeRecentChanges: true,
        fallbackToStandard: true,
        skipDuplicateDetection: !enableDuplicateDetection,
        dryRun: isDryRun
      });
      if ("success" in issueResult && issueResult.success) {
        issueCreated = true;
        core2.info(`✅ Enhanced issue created: ${issueResult.github?.issue?.url || issueResult.linear?.issue?.url || "URL not available"}`);
      }
    } else {
      core2.info(`\uD83D\uDCDD Creating standard issue for feedback: ${feedback.id}`);
      issueResult = await serviceFactory.createIssueWithDefault(feedback);
      issueCreated = true;
      core2.info(`✅ Standard issue created: ${issueResult.url}`);
    }
    let issueUrl = "";
    if (issueResult) {
      if ("url" in issueResult) {
        issueUrl = issueResult.url;
      } else if ("github" in issueResult || "linear" in issueResult) {
        issueUrl = issueResult.github?.issue?.url || issueResult.linear?.issue?.url || "";
      }
    }
    return {
      feedbackId: feedback.id,
      issueCreated,
      issueUpdated,
      issueUrl,
      processingTime: Date.now() - startTime
    };
  } catch (error2) {
    core2.error(`❌ Error processing feedback ${feedback.id}: ${error2 instanceof Error ? error2.message : String(error2)}`);
    return {
      feedbackId: feedback.id,
      issueCreated: false,
      issueUpdated: false,
      issueUrl: "",
      processingTime: Date.now() - startTime
    };
  }
}
run();
